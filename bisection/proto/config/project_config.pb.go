// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/bisection/proto/config/project_config.proto

package configpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProjectConfig is the project-specific configuration data for LUCI Bisection.
type ProjectConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration data for compile failure analysis.
	CompileAnalysisConfig *CompileAnalysisConfig `protobuf:"bytes,1,opt,name=compile_analysis_config,json=compileAnalysisConfig,proto3" json:"compile_analysis_config,omitempty"`
	// Configuration data for test failure analysis.
	TestAnalysisConfig *TestAnalysisConfig `protobuf:"bytes,2,opt,name=test_analysis_config,json=testAnalysisConfig,proto3" json:"test_analysis_config,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProjectConfig) Reset() {
	*x = ProjectConfig{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectConfig) ProtoMessage() {}

func (x *ProjectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectConfig.ProtoReflect.Descriptor instead.
func (*ProjectConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectConfig) GetCompileAnalysisConfig() *CompileAnalysisConfig {
	if x != nil {
		return x.CompileAnalysisConfig
	}
	return nil
}

func (x *ProjectConfig) GetTestAnalysisConfig() *TestAnalysisConfig {
	if x != nil {
		return x.TestAnalysisConfig
	}
	return nil
}

// CompileAnalysisConfig is the configuration data for compile failure bisection.
// Next available tag: 6.
type CompileAnalysisConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The build config to run compile analysis.
	BuildConfig *BuildConfig `protobuf:"bytes,4,opt,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
	// Whether we should run culprit verification
	CulpritVerificationEnabled bool `protobuf:"varint,1,opt,name=culprit_verification_enabled,json=culpritVerificationEnabled,proto3" json:"culprit_verification_enabled,omitempty"`
	// Whether we should run nthsection analysis
	NthsectionEnabled bool `protobuf:"varint,2,opt,name=nthsection_enabled,json=nthsectionEnabled,proto3" json:"nthsection_enabled,omitempty"`
	// Configuration data for Gerrit integration for compile failures.
	GerritConfig *GerritConfig `protobuf:"bytes,3,opt,name=gerrit_config,json=gerritConfig,proto3" json:"gerrit_config,omitempty"`
	// Only compile failure which satisfies this filter will be ingested.
	FailureIngestionFilter *FailureIngestionFilter `protobuf:"bytes,5,opt,name=failure_ingestion_filter,json=failureIngestionFilter,proto3" json:"failure_ingestion_filter,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CompileAnalysisConfig) Reset() {
	*x = CompileAnalysisConfig{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompileAnalysisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileAnalysisConfig) ProtoMessage() {}

func (x *CompileAnalysisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileAnalysisConfig.ProtoReflect.Descriptor instead.
func (*CompileAnalysisConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{1}
}

func (x *CompileAnalysisConfig) GetBuildConfig() *BuildConfig {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

func (x *CompileAnalysisConfig) GetCulpritVerificationEnabled() bool {
	if x != nil {
		return x.CulpritVerificationEnabled
	}
	return false
}

func (x *CompileAnalysisConfig) GetNthsectionEnabled() bool {
	if x != nil {
		return x.NthsectionEnabled
	}
	return false
}

func (x *CompileAnalysisConfig) GetGerritConfig() *GerritConfig {
	if x != nil {
		return x.GerritConfig
	}
	return nil
}

func (x *CompileAnalysisConfig) GetFailureIngestionFilter() *FailureIngestionFilter {
	if x != nil {
		return x.FailureIngestionFilter
	}
	return nil
}

// TestAnalysisConfig is the configuration data for test failure bisection.
// Next available tag: 10.
type TestAnalysisConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The build config to run test analysis.
	BuildConfig *BuildConfig `protobuf:"bytes,9,opt,name=build_config,json=buildConfig,proto3" json:"build_config,omitempty"`
	// Flag of whether test failure detector is enabled.
	// Usually the flag is on for both dev and prod, but we may want to turn
	// it off for the cases when the bisector is down and we don't want to
	// create tasks when the bisector cannot run (in which case, the bisector
	// will just mark the analysis as "DISABLED").
	// So in prod, if we need to turn the bisector off, we generally should turn
	// the detector off as well.
	DetectorEnabled bool `protobuf:"varint,2,opt,name=detector_enabled,json=detectorEnabled,proto3" json:"detector_enabled,omitempty"`
	// Flag of whether test failure bisector is enabled.
	// During the development of the test failure bisection feature, it should
	// be on for dev and off for prod (as we are testing). When everything is
	// up and running, it should be off for dev and on for prod, because we want
	// to save resources (running bisection on dev will be expensive).
	BisectorEnabled bool `protobuf:"varint,3,opt,name=bisector_enabled,json=bisectorEnabled,proto3" json:"bisector_enabled,omitempty"`
	// The maximum number of test analyses to run in a day for each project.
	// It only counts analyses that being created within 24 hours, with status different
	// from "DISABLED" or "UNSUPPORTED".
	// It allows us to slowly roll out bisection without consuming too much
	// swarming capacity.
	DailyLimit uint32 `protobuf:"varint,4,opt,name=daily_limit,json=dailyLimit,proto3" json:"daily_limit,omitempty"`
	// Configuration data for Gerrit integration for test failures.
	GerritConfig *GerritConfig `protobuf:"bytes,6,opt,name=gerrit_config,json=gerritConfig,proto3" json:"gerrit_config,omitempty"`
	// Only test failure which satisfies this filter will be ingested.
	FailureIngestionFilter *FailureIngestionFilter `protobuf:"bytes,8,opt,name=failure_ingestion_filter,json=failureIngestionFilter,proto3" json:"failure_ingestion_filter,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TestAnalysisConfig) Reset() {
	*x = TestAnalysisConfig{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAnalysisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAnalysisConfig) ProtoMessage() {}

func (x *TestAnalysisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAnalysisConfig.ProtoReflect.Descriptor instead.
func (*TestAnalysisConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{2}
}

func (x *TestAnalysisConfig) GetBuildConfig() *BuildConfig {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

func (x *TestAnalysisConfig) GetDetectorEnabled() bool {
	if x != nil {
		return x.DetectorEnabled
	}
	return false
}

func (x *TestAnalysisConfig) GetBisectorEnabled() bool {
	if x != nil {
		return x.BisectorEnabled
	}
	return false
}

func (x *TestAnalysisConfig) GetDailyLimit() uint32 {
	if x != nil {
		return x.DailyLimit
	}
	return 0
}

func (x *TestAnalysisConfig) GetGerritConfig() *GerritConfig {
	if x != nil {
		return x.GerritConfig
	}
	return nil
}

func (x *TestAnalysisConfig) GetFailureIngestionFilter() *FailureIngestionFilter {
	if x != nil {
		return x.FailureIngestionFilter
	}
	return nil
}

// FailureIngestionFilter defines filtering rules for failures to be ingested.
// A failure needs to fulfill ALL rules.
type FailureIngestionFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of buildbucket buckets that we should not bisect on.
	// For example, "reviver", "try", and "findit".
	// Only applicable for test failure analysis.
	ExcludedBuckets []string `protobuf:"bytes,1,rep,name=excluded_buckets,json=excludedBuckets,proto3" json:"excluded_buckets,omitempty"`
	// The list of swarming test task pools that we want to exclude running bisection.
	// For example, we want to exclude the "chromium.tests.gpu" pool (b/301523224)
	// because there are limited resources in the pool.
	// Note: this is not the pools that the builder run, but the swarming test task pool,
	// which contains the bots that actually run the tests on swarming.
	// Only applicable for test failure analysis.
	ExcludedTestPools []string `protobuf:"bytes,2,rep,name=excluded_test_pools,json=excludedTestPools,proto3" json:"excluded_test_pools,omitempty"`
	// If this is specified, bisection will only run on failures
	// from the builder groups in the list.
	// An empty list means that failures from all builder groups can be ingested.
	// Only applicable for test failure analysis.
	AllowedBuilderGroups []string `protobuf:"bytes,3,rep,name=allowed_builder_groups,json=allowedBuilderGroups,proto3" json:"allowed_builder_groups,omitempty"`
	// The list of builder groups that we should not run bisect on.
	ExcludedBuilderGroups []string `protobuf:"bytes,4,rep,name=excluded_builder_groups,json=excludedBuilderGroups,proto3" json:"excluded_builder_groups,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FailureIngestionFilter) Reset() {
	*x = FailureIngestionFilter{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailureIngestionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureIngestionFilter) ProtoMessage() {}

func (x *FailureIngestionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureIngestionFilter.ProtoReflect.Descriptor instead.
func (*FailureIngestionFilter) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{3}
}

func (x *FailureIngestionFilter) GetExcludedBuckets() []string {
	if x != nil {
		return x.ExcludedBuckets
	}
	return nil
}

func (x *FailureIngestionFilter) GetExcludedTestPools() []string {
	if x != nil {
		return x.ExcludedTestPools
	}
	return nil
}

func (x *FailureIngestionFilter) GetAllowedBuilderGroups() []string {
	if x != nil {
		return x.AllowedBuilderGroups
	}
	return nil
}

func (x *FailureIngestionFilter) GetExcludedBuilderGroups() []string {
	if x != nil {
		return x.ExcludedBuilderGroups
	}
	return nil
}

// GerritConfig is the configuration data for Gerrit integration
type GerritConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether Gerrit API actions are enabled
	ActionsEnabled bool `protobuf:"varint,1,opt,name=actions_enabled,json=actionsEnabled,proto3" json:"actions_enabled,omitempty"`
	// Settings for creating reverts for culprit CLs
	CreateRevertSettings *GerritConfig_RevertActionSettings `protobuf:"bytes,2,opt,name=create_revert_settings,json=createRevertSettings,proto3" json:"create_revert_settings,omitempty"`
	// Settings for submitting reverts for culprit CLs
	SubmitRevertSettings *GerritConfig_RevertActionSettings `protobuf:"bytes,3,opt,name=submit_revert_settings,json=submitRevertSettings,proto3" json:"submit_revert_settings,omitempty"`
	// Maximum age of a culprit (sec) for its revert to be eligible
	// for the submit action.
	//
	// The age of a culprit is based on the time since the culprit was merged.
	// If a culprit is older than this limit, LUCI Bisection will skip
	// submitting its corresponding revert.
	MaxRevertibleCulpritAge int64                            `protobuf:"varint,4,opt,name=max_revertible_culprit_age,json=maxRevertibleCulpritAge,proto3" json:"max_revertible_culprit_age,omitempty"`
	NthsectionSettings      *GerritConfig_NthSectionSettings `protobuf:"bytes,5,opt,name=nthsection_settings,json=nthsectionSettings,proto3" json:"nthsection_settings,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GerritConfig) Reset() {
	*x = GerritConfig{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GerritConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritConfig) ProtoMessage() {}

func (x *GerritConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritConfig.ProtoReflect.Descriptor instead.
func (*GerritConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{4}
}

func (x *GerritConfig) GetActionsEnabled() bool {
	if x != nil {
		return x.ActionsEnabled
	}
	return false
}

func (x *GerritConfig) GetCreateRevertSettings() *GerritConfig_RevertActionSettings {
	if x != nil {
		return x.CreateRevertSettings
	}
	return nil
}

func (x *GerritConfig) GetSubmitRevertSettings() *GerritConfig_RevertActionSettings {
	if x != nil {
		return x.SubmitRevertSettings
	}
	return nil
}

func (x *GerritConfig) GetMaxRevertibleCulpritAge() int64 {
	if x != nil {
		return x.MaxRevertibleCulpritAge
	}
	return 0
}

func (x *GerritConfig) GetNthsectionSettings() *GerritConfig_NthSectionSettings {
	if x != nil {
		return x.NthsectionSettings
	}
	return nil
}

// BuildConfig contains configuration of how we run rerun builds.
type BuildConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The buildbucket builder.
	Builder       *Builder `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildConfig) Reset() {
	*x = BuildConfig{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildConfig) ProtoMessage() {}

func (x *BuildConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildConfig.ProtoReflect.Descriptor instead.
func (*BuildConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{5}
}

func (x *BuildConfig) GetBuilder() *Builder {
	if x != nil {
		return x.Builder
	}
	return nil
}

// Builder specifies a buildbucket builder.
type Builder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project that the builder belongs to.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The name of the bucket that the builder belongs to.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The name of the builder.
	Builder       string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Builder) Reset() {
	*x = Builder{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Builder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Builder) ProtoMessage() {}

func (x *Builder) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Builder.ProtoReflect.Descriptor instead.
func (*Builder) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{6}
}

func (x *Builder) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Builder) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Builder) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

// Settings for revert-related actions
type GerritConfig_RevertActionSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the action is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The maximum number of times the action can be performed per day
	DailyLimit    uint32 `protobuf:"varint,2,opt,name=daily_limit,json=dailyLimit,proto3" json:"daily_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GerritConfig_RevertActionSettings) Reset() {
	*x = GerritConfig_RevertActionSettings{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GerritConfig_RevertActionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritConfig_RevertActionSettings) ProtoMessage() {}

func (x *GerritConfig_RevertActionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritConfig_RevertActionSettings.ProtoReflect.Descriptor instead.
func (*GerritConfig_RevertActionSettings) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GerritConfig_RevertActionSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GerritConfig_RevertActionSettings) GetDailyLimit() uint32 {
	if x != nil {
		return x.DailyLimit
	}
	return 0
}

// Settings for culprit actions for nthsection
type GerritConfig_NthSectionSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether culprit action for nthsection culprit is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Whether we should perform actions on nthsection culprits even when
	// culprit verification errored
	ActionWhenVerificationError bool `protobuf:"varint,2,opt,name=action_when_verification_error,json=actionWhenVerificationError,proto3" json:"action_when_verification_error,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *GerritConfig_NthSectionSettings) Reset() {
	*x = GerritConfig_NthSectionSettings{}
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GerritConfig_NthSectionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritConfig_NthSectionSettings) ProtoMessage() {}

func (x *GerritConfig_NthSectionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritConfig_NthSectionSettings.ProtoReflect.Descriptor instead.
func (*GerritConfig_NthSectionSettings) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GerritConfig_NthSectionSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GerritConfig_NthSectionSettings) GetActionWhenVerificationError() bool {
	if x != nil {
		return x.ActionWhenVerificationError
	}
	return false
}

var File_go_chromium_org_luci_bisection_proto_config_project_config_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDesc = string([]byte{
	0x0a, 0x40, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x5b, 0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x82,
	0x03, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x40, 0x0a, 0x1c, 0x63, 0x75, 0x6c, 0x70, 0x72, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x63, 0x75, 0x6c, 0x70, 0x72, 0x69, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x74, 0x68, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e,
	0x74, 0x68, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62,
	0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x18, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x16, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x97, 0x03, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x67, 0x0a, 0x18, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x16, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xe1, 0x01,
	0x0a, 0x16, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x85, 0x05, 0x0a, 0x0c, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x16, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6e, 0x0a, 0x16, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75,
	0x6c, 0x70, 0x72, 0x69, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x17, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x75,
	0x6c, 0x70, 0x72, 0x69, 0x74, 0x41, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x13, 0x6e, 0x74, 0x68, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x74, 0x68, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x6e,
	0x74, 0x68, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x51, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x73, 0x0a, 0x12, 0x4e, 0x74, 0x68, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x68, 0x65, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x47, 0x0a, 0x0b, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x22, 0x55, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescData []byte
)

func file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDescData
}

var file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_go_chromium_org_luci_bisection_proto_config_project_config_proto_goTypes = []any{
	(*ProjectConfig)(nil),                     // 0: luci.bisection.config.ProjectConfig
	(*CompileAnalysisConfig)(nil),             // 1: luci.bisection.config.CompileAnalysisConfig
	(*TestAnalysisConfig)(nil),                // 2: luci.bisection.config.TestAnalysisConfig
	(*FailureIngestionFilter)(nil),            // 3: luci.bisection.config.FailureIngestionFilter
	(*GerritConfig)(nil),                      // 4: luci.bisection.config.GerritConfig
	(*BuildConfig)(nil),                       // 5: luci.bisection.config.BuildConfig
	(*Builder)(nil),                           // 6: luci.bisection.config.Builder
	(*GerritConfig_RevertActionSettings)(nil), // 7: luci.bisection.config.GerritConfig.RevertActionSettings
	(*GerritConfig_NthSectionSettings)(nil),   // 8: luci.bisection.config.GerritConfig.NthSectionSettings
}
var file_go_chromium_org_luci_bisection_proto_config_project_config_proto_depIdxs = []int32{
	1,  // 0: luci.bisection.config.ProjectConfig.compile_analysis_config:type_name -> luci.bisection.config.CompileAnalysisConfig
	2,  // 1: luci.bisection.config.ProjectConfig.test_analysis_config:type_name -> luci.bisection.config.TestAnalysisConfig
	5,  // 2: luci.bisection.config.CompileAnalysisConfig.build_config:type_name -> luci.bisection.config.BuildConfig
	4,  // 3: luci.bisection.config.CompileAnalysisConfig.gerrit_config:type_name -> luci.bisection.config.GerritConfig
	3,  // 4: luci.bisection.config.CompileAnalysisConfig.failure_ingestion_filter:type_name -> luci.bisection.config.FailureIngestionFilter
	5,  // 5: luci.bisection.config.TestAnalysisConfig.build_config:type_name -> luci.bisection.config.BuildConfig
	4,  // 6: luci.bisection.config.TestAnalysisConfig.gerrit_config:type_name -> luci.bisection.config.GerritConfig
	3,  // 7: luci.bisection.config.TestAnalysisConfig.failure_ingestion_filter:type_name -> luci.bisection.config.FailureIngestionFilter
	7,  // 8: luci.bisection.config.GerritConfig.create_revert_settings:type_name -> luci.bisection.config.GerritConfig.RevertActionSettings
	7,  // 9: luci.bisection.config.GerritConfig.submit_revert_settings:type_name -> luci.bisection.config.GerritConfig.RevertActionSettings
	8,  // 10: luci.bisection.config.GerritConfig.nthsection_settings:type_name -> luci.bisection.config.GerritConfig.NthSectionSettings
	6,  // 11: luci.bisection.config.BuildConfig.builder:type_name -> luci.bisection.config.Builder
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_bisection_proto_config_project_config_proto_init() }
func file_go_chromium_org_luci_bisection_proto_config_project_config_proto_init() {
	if File_go_chromium_org_luci_bisection_proto_config_project_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_config_project_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_bisection_proto_config_project_config_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_bisection_proto_config_project_config_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_bisection_proto_config_project_config_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_bisection_proto_config_project_config_proto = out.File
	file_go_chromium_org_luci_bisection_proto_config_project_config_proto_goTypes = nil
	file_go_chromium_org_luci_bisection_proto_config_project_config_proto_depIdxs = nil
}
