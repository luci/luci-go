// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/bisection/proto/v1/botupdates.proto

package bisectionpb

import (
	proto "go.chromium.org/luci/buildbucket/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RPC called from bots to update the analysis progress.
type UpdateAnalysisProgressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The analysis that the bot ran.
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// Bot ID.
	BotId string `protobuf:"bytes,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// BuildbucketID of the rerun build.
	// We use this to determine which rerun build to map back.
	Bbid int64 `protobuf:"varint,3,opt,name=bbid,proto3" json:"bbid,omitempty"`
	// The revision that the bot ran.
	GitilesCommit *proto.GitilesCommit `protobuf:"bytes,4,opt,name=gitiles_commit,json=gitilesCommit,proto3" json:"gitiles_commit,omitempty"`
	// Result of the rerun.
	RerunResult   *RerunResult `protobuf:"bytes,5,opt,name=rerun_result,json=rerunResult,proto3" json:"rerun_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAnalysisProgressRequest) Reset() {
	*x = UpdateAnalysisProgressRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAnalysisProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAnalysisProgressRequest) ProtoMessage() {}

func (x *UpdateAnalysisProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAnalysisProgressRequest.ProtoReflect.Descriptor instead.
func (*UpdateAnalysisProgressRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateAnalysisProgressRequest) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *UpdateAnalysisProgressRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *UpdateAnalysisProgressRequest) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

func (x *UpdateAnalysisProgressRequest) GetGitilesCommit() *proto.GitilesCommit {
	if x != nil {
		return x.GitilesCommit
	}
	return nil
}

func (x *UpdateAnalysisProgressRequest) GetRerunResult() *RerunResult {
	if x != nil {
		return x.RerunResult
	}
	return nil
}

type UpdateAnalysisProgressResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The next revision for the bot to run.
	// This is because we can compile faster when the same bot runs
	// multiple revisions.
	// If this is not set, then there is no further revision to run.
	// The bot can finish and be released.
	NextRevisionToRun *proto.GitilesCommit `protobuf:"bytes,1,opt,name=next_revision_to_run,json=nextRevisionToRun,proto3" json:"next_revision_to_run,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateAnalysisProgressResponse) Reset() {
	*x = UpdateAnalysisProgressResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAnalysisProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAnalysisProgressResponse) ProtoMessage() {}

func (x *UpdateAnalysisProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAnalysisProgressResponse.ProtoReflect.Descriptor instead.
func (*UpdateAnalysisProgressResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateAnalysisProgressResponse) GetNextRevisionToRun() *proto.GitilesCommit {
	if x != nil {
		return x.NextRevisionToRun
	}
	return nil
}

type UpdateTestAnalysisProgressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BuildbucketID of the rerun build.
	Bbid int64 `protobuf:"varint,1,opt,name=bbid,proto3" json:"bbid,omitempty"`
	// Bot ID.
	BotId string `protobuf:"bytes,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// Contains the results of the tests that were run in the rerun.
	// Only the results of the requested tests (in tests_to_run properties of the recipe)
	// will be included. The non-requested test results will not be included.
	Results []*TestResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// Indicate whether the recipe has finished running tests and is sending back test results.
	// This flag does not care about the test results, it only care about the tests
	// were run and the test results being sent to LUCI Bisection.
	// In cases of infra failure, or something went wrong (e.g. compile failure),
	// tests may not get run. In such cases, this should be set to false.
	// When this is set to false, LUCI Bisection will mark the rerun as INFRA_FAILURE.
	RunSucceeded  bool `protobuf:"varint,4,opt,name=run_succeeded,json=runSucceeded,proto3" json:"run_succeeded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTestAnalysisProgressRequest) Reset() {
	*x = UpdateTestAnalysisProgressRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTestAnalysisProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestAnalysisProgressRequest) ProtoMessage() {}

func (x *UpdateTestAnalysisProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestAnalysisProgressRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestAnalysisProgressRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTestAnalysisProgressRequest) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

func (x *UpdateTestAnalysisProgressRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *UpdateTestAnalysisProgressRequest) GetResults() []*TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UpdateTestAnalysisProgressRequest) GetRunSucceeded() bool {
	if x != nil {
		return x.RunSucceeded
	}
	return false
}

type TestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test ID of the test.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Variant hash of the test.
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Whether the result is expected or not.
	IsExpected bool `protobuf:"varint,3,opt,name=is_expected,json=isExpected,proto3" json:"is_expected,omitempty"`
	// ResultDB status, e.g. PASSED, FAILED...
	Status        TestResultStatus `protobuf:"varint,4,opt,name=status,proto3,enum=luci.bisection.v1.TestResultStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{3}
}

func (x *TestResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestResult) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestResult) GetIsExpected() bool {
	if x != nil {
		return x.IsExpected
	}
	return false
}

func (x *TestResult) GetStatus() TestResultStatus {
	if x != nil {
		return x.Status
	}
	return TestResultStatus_TEST_RESULT_STATUS_UNSPECIFIED
}

type UpdateTestAnalysisProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTestAnalysisProgressResponse) Reset() {
	*x = UpdateTestAnalysisProgressResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTestAnalysisProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestAnalysisProgressResponse) ProtoMessage() {}

func (x *UpdateTestAnalysisProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestAnalysisProgressResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestAnalysisProgressResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{4}
}

var File_go_chromium_org_luci_bisection_proto_v1_botupdates_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc = "" +
	"\n" +
	"8go.chromium.org/luci/bisection/proto/v1/botupdates.proto\x12\x11luci.bisection.v1\x1a4go.chromium.org/luci/bisection/proto/v1/common.proto\x1a3go.chromium.org/luci/buildbucket/proto/common.proto\"\xf4\x01\n" +
	"\x1dUpdateAnalysisProgressRequest\x12\x1f\n" +
	"\vanalysis_id\x18\x01 \x01(\x03R\n" +
	"analysisId\x12\x15\n" +
	"\x06bot_id\x18\x02 \x01(\tR\x05botId\x12\x12\n" +
	"\x04bbid\x18\x03 \x01(\x03R\x04bbid\x12D\n" +
	"\x0egitiles_commit\x18\x04 \x01(\v2\x1d.buildbucket.v2.GitilesCommitR\rgitilesCommit\x12A\n" +
	"\frerun_result\x18\x05 \x01(\v2\x1e.luci.bisection.v1.RerunResultR\vrerunResult\"p\n" +
	"\x1eUpdateAnalysisProgressResponse\x12N\n" +
	"\x14next_revision_to_run\x18\x01 \x01(\v2\x1d.buildbucket.v2.GitilesCommitR\x11nextRevisionToRun\"\xac\x01\n" +
	"!UpdateTestAnalysisProgressRequest\x12\x12\n" +
	"\x04bbid\x18\x01 \x01(\x03R\x04bbid\x12\x15\n" +
	"\x06bot_id\x18\x02 \x01(\tR\x05botId\x127\n" +
	"\aresults\x18\x03 \x03(\v2\x1d.luci.bisection.v1.TestResultR\aresults\x12#\n" +
	"\rrun_succeeded\x18\x04 \x01(\bR\frunSucceeded\"\xa6\x01\n" +
	"\n" +
	"TestResult\x12\x17\n" +
	"\atest_id\x18\x01 \x01(\tR\x06testId\x12!\n" +
	"\fvariant_hash\x18\x02 \x01(\tR\vvariantHash\x12\x1f\n" +
	"\vis_expected\x18\x03 \x01(\bR\n" +
	"isExpected\x12;\n" +
	"\x06status\x18\x04 \x01(\x0e2#.luci.bisection.v1.TestResultStatusR\x06status\"$\n" +
	"\"UpdateTestAnalysisProgressResponse2\x97\x02\n" +
	"\n" +
	"BotUpdates\x12}\n" +
	"\x16UpdateAnalysisProgress\x120.luci.bisection.v1.UpdateAnalysisProgressRequest\x1a1.luci.bisection.v1.UpdateAnalysisProgressResponse\x12\x89\x01\n" +
	"\x1aUpdateTestAnalysisProgress\x124.luci.bisection.v1.UpdateTestAnalysisProgressRequest\x1a5.luci.bisection.v1.UpdateTestAnalysisProgressResponseB5Z3go.chromium.org/luci/bisection/proto/v1;bisectionpbb\x06proto3"

var (
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescData []byte
)

func file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescData
}

var file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_goTypes = []any{
	(*UpdateAnalysisProgressRequest)(nil),      // 0: luci.bisection.v1.UpdateAnalysisProgressRequest
	(*UpdateAnalysisProgressResponse)(nil),     // 1: luci.bisection.v1.UpdateAnalysisProgressResponse
	(*UpdateTestAnalysisProgressRequest)(nil),  // 2: luci.bisection.v1.UpdateTestAnalysisProgressRequest
	(*TestResult)(nil),                         // 3: luci.bisection.v1.TestResult
	(*UpdateTestAnalysisProgressResponse)(nil), // 4: luci.bisection.v1.UpdateTestAnalysisProgressResponse
	(*proto.GitilesCommit)(nil),                // 5: buildbucket.v2.GitilesCommit
	(*RerunResult)(nil),                        // 6: luci.bisection.v1.RerunResult
	(TestResultStatus)(0),                      // 7: luci.bisection.v1.TestResultStatus
}
var file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_depIdxs = []int32{
	5, // 0: luci.bisection.v1.UpdateAnalysisProgressRequest.gitiles_commit:type_name -> buildbucket.v2.GitilesCommit
	6, // 1: luci.bisection.v1.UpdateAnalysisProgressRequest.rerun_result:type_name -> luci.bisection.v1.RerunResult
	5, // 2: luci.bisection.v1.UpdateAnalysisProgressResponse.next_revision_to_run:type_name -> buildbucket.v2.GitilesCommit
	3, // 3: luci.bisection.v1.UpdateTestAnalysisProgressRequest.results:type_name -> luci.bisection.v1.TestResult
	7, // 4: luci.bisection.v1.TestResult.status:type_name -> luci.bisection.v1.TestResultStatus
	0, // 5: luci.bisection.v1.BotUpdates.UpdateAnalysisProgress:input_type -> luci.bisection.v1.UpdateAnalysisProgressRequest
	2, // 6: luci.bisection.v1.BotUpdates.UpdateTestAnalysisProgress:input_type -> luci.bisection.v1.UpdateTestAnalysisProgressRequest
	1, // 7: luci.bisection.v1.BotUpdates.UpdateAnalysisProgress:output_type -> luci.bisection.v1.UpdateAnalysisProgressResponse
	4, // 8: luci.bisection.v1.BotUpdates.UpdateTestAnalysisProgress:output_type -> luci.bisection.v1.UpdateTestAnalysisProgressResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_init() }
func file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_init() {
	if File_go_chromium_org_luci_bisection_proto_v1_botupdates_proto != nil {
		return
	}
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_bisection_proto_v1_botupdates_proto = out.File
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_goTypes = nil
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_depIdxs = nil
}
