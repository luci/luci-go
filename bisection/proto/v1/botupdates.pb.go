// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/bisection/proto/v1/botupdates.proto

package bisectionpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	proto "go.chromium.org/luci/buildbucket/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RPC called from bots to update the analysis progress.
type UpdateAnalysisProgressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The analysis that the bot ran.
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// Bot ID.
	BotId string `protobuf:"bytes,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// BuildbucketID of the rerun build.
	// We use this to determine which rerun build to map back.
	Bbid int64 `protobuf:"varint,3,opt,name=bbid,proto3" json:"bbid,omitempty"`
	// The revision that the bot ran.
	GitilesCommit *proto.GitilesCommit `protobuf:"bytes,4,opt,name=gitiles_commit,json=gitilesCommit,proto3" json:"gitiles_commit,omitempty"`
	// Result of the rerun.
	RerunResult   *RerunResult `protobuf:"bytes,5,opt,name=rerun_result,json=rerunResult,proto3" json:"rerun_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAnalysisProgressRequest) Reset() {
	*x = UpdateAnalysisProgressRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAnalysisProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAnalysisProgressRequest) ProtoMessage() {}

func (x *UpdateAnalysisProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAnalysisProgressRequest.ProtoReflect.Descriptor instead.
func (*UpdateAnalysisProgressRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateAnalysisProgressRequest) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *UpdateAnalysisProgressRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *UpdateAnalysisProgressRequest) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

func (x *UpdateAnalysisProgressRequest) GetGitilesCommit() *proto.GitilesCommit {
	if x != nil {
		return x.GitilesCommit
	}
	return nil
}

func (x *UpdateAnalysisProgressRequest) GetRerunResult() *RerunResult {
	if x != nil {
		return x.RerunResult
	}
	return nil
}

type UpdateAnalysisProgressResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The next revision for the bot to run.
	// This is because we can compile faster when the same bot runs
	// multiple revisions.
	// If this is not set, then there is no further revision to run.
	// The bot can finish and be released.
	NextRevisionToRun *proto.GitilesCommit `protobuf:"bytes,1,opt,name=next_revision_to_run,json=nextRevisionToRun,proto3" json:"next_revision_to_run,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateAnalysisProgressResponse) Reset() {
	*x = UpdateAnalysisProgressResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAnalysisProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAnalysisProgressResponse) ProtoMessage() {}

func (x *UpdateAnalysisProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAnalysisProgressResponse.ProtoReflect.Descriptor instead.
func (*UpdateAnalysisProgressResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateAnalysisProgressResponse) GetNextRevisionToRun() *proto.GitilesCommit {
	if x != nil {
		return x.NextRevisionToRun
	}
	return nil
}

type UpdateTestAnalysisProgressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BuildbucketID of the rerun build.
	Bbid int64 `protobuf:"varint,1,opt,name=bbid,proto3" json:"bbid,omitempty"`
	// Bot ID.
	BotId string `protobuf:"bytes,2,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// Contains the results of the tests that were run in the rerun.
	// Only the results of the requested tests (in tests_to_run properties of the recipe)
	// will be included. The non-requested test results will not be included.
	Results []*TestResult `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	// Indicate whether the recipe has finished running tests and is sending back test results.
	// This flag does not care about the test results, it only care about the tests
	// were run and the test results being sent to LUCI Bisection.
	// In cases of infra failure, or something went wrong (e.g. compile failure),
	// tests may not get run. In such cases, this should be set to false.
	// When this is set to false, LUCI Bisection will mark the rerun as INFRA_FAILURE.
	RunSucceeded  bool `protobuf:"varint,4,opt,name=run_succeeded,json=runSucceeded,proto3" json:"run_succeeded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTestAnalysisProgressRequest) Reset() {
	*x = UpdateTestAnalysisProgressRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTestAnalysisProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestAnalysisProgressRequest) ProtoMessage() {}

func (x *UpdateTestAnalysisProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestAnalysisProgressRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestAnalysisProgressRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateTestAnalysisProgressRequest) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

func (x *UpdateTestAnalysisProgressRequest) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *UpdateTestAnalysisProgressRequest) GetResults() []*TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UpdateTestAnalysisProgressRequest) GetRunSucceeded() bool {
	if x != nil {
		return x.RunSucceeded
	}
	return false
}

type TestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test ID of the test.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Variant hash of the test.
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Whether the result is expected or not.
	IsExpected bool `protobuf:"varint,3,opt,name=is_expected,json=isExpected,proto3" json:"is_expected,omitempty"`
	// ResultDB status, e.g. PASSED, FAILED...
	Status        TestResultStatus `protobuf:"varint,4,opt,name=status,proto3,enum=luci.bisection.v1.TestResultStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{3}
}

func (x *TestResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestResult) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestResult) GetIsExpected() bool {
	if x != nil {
		return x.IsExpected
	}
	return false
}

func (x *TestResult) GetStatus() TestResultStatus {
	if x != nil {
		return x.Status
	}
	return TestResultStatus_TEST_RESULT_STATUS_UNSPECIFIED
}

type UpdateTestAnalysisProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTestAnalysisProgressResponse) Reset() {
	*x = UpdateTestAnalysisProgressResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTestAnalysisProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestAnalysisProgressResponse) ProtoMessage() {}

func (x *UpdateTestAnalysisProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestAnalysisProgressResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestAnalysisProgressResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP(), []int{4}
}

var File_go_chromium_org_luci_bisection_proto_v1_botupdates_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc = string([]byte{
	0x0a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6f, 0x74, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x34, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x62, 0x62, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0d, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x0c,
	0x72, 0x65, 0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x70, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x52, 0x75,
	0x6e, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x62, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x62, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x75, 0x6e, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x97, 0x02, 0x0a, 0x0a, 0x42, 0x6f, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x7d,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescData []byte
)

func file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDescData
}

var file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_goTypes = []any{
	(*UpdateAnalysisProgressRequest)(nil),      // 0: luci.bisection.v1.UpdateAnalysisProgressRequest
	(*UpdateAnalysisProgressResponse)(nil),     // 1: luci.bisection.v1.UpdateAnalysisProgressResponse
	(*UpdateTestAnalysisProgressRequest)(nil),  // 2: luci.bisection.v1.UpdateTestAnalysisProgressRequest
	(*TestResult)(nil),                         // 3: luci.bisection.v1.TestResult
	(*UpdateTestAnalysisProgressResponse)(nil), // 4: luci.bisection.v1.UpdateTestAnalysisProgressResponse
	(*proto.GitilesCommit)(nil),                // 5: buildbucket.v2.GitilesCommit
	(*RerunResult)(nil),                        // 6: luci.bisection.v1.RerunResult
	(TestResultStatus)(0),                      // 7: luci.bisection.v1.TestResultStatus
}
var file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_depIdxs = []int32{
	5, // 0: luci.bisection.v1.UpdateAnalysisProgressRequest.gitiles_commit:type_name -> buildbucket.v2.GitilesCommit
	6, // 1: luci.bisection.v1.UpdateAnalysisProgressRequest.rerun_result:type_name -> luci.bisection.v1.RerunResult
	5, // 2: luci.bisection.v1.UpdateAnalysisProgressResponse.next_revision_to_run:type_name -> buildbucket.v2.GitilesCommit
	3, // 3: luci.bisection.v1.UpdateTestAnalysisProgressRequest.results:type_name -> luci.bisection.v1.TestResult
	7, // 4: luci.bisection.v1.TestResult.status:type_name -> luci.bisection.v1.TestResultStatus
	0, // 5: luci.bisection.v1.BotUpdates.UpdateAnalysisProgress:input_type -> luci.bisection.v1.UpdateAnalysisProgressRequest
	2, // 6: luci.bisection.v1.BotUpdates.UpdateTestAnalysisProgress:input_type -> luci.bisection.v1.UpdateTestAnalysisProgressRequest
	1, // 7: luci.bisection.v1.BotUpdates.UpdateAnalysisProgress:output_type -> luci.bisection.v1.UpdateAnalysisProgressResponse
	4, // 8: luci.bisection.v1.BotUpdates.UpdateTestAnalysisProgress:output_type -> luci.bisection.v1.UpdateTestAnalysisProgressResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_init() }
func file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_init() {
	if File_go_chromium_org_luci_bisection_proto_v1_botupdates_proto != nil {
		return
	}
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_bisection_proto_v1_botupdates_proto = out.File
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_goTypes = nil
	file_go_chromium_org_luci_bisection_proto_v1_botupdates_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BotUpdatesClient is the client API for BotUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BotUpdatesClient interface {
	// RPC called from bots to update the compile analysis progress.
	UpdateAnalysisProgress(ctx context.Context, in *UpdateAnalysisProgressRequest, opts ...grpc.CallOption) (*UpdateAnalysisProgressResponse, error)
	// RPC called from bots to update test analysis progress.
	UpdateTestAnalysisProgress(ctx context.Context, in *UpdateTestAnalysisProgressRequest, opts ...grpc.CallOption) (*UpdateTestAnalysisProgressResponse, error)
}
type botUpdatesPRPCClient struct {
	client *prpc.Client
}

func NewBotUpdatesPRPCClient(client *prpc.Client) BotUpdatesClient {
	return &botUpdatesPRPCClient{client}
}

func (c *botUpdatesPRPCClient) UpdateAnalysisProgress(ctx context.Context, in *UpdateAnalysisProgressRequest, opts ...grpc.CallOption) (*UpdateAnalysisProgressResponse, error) {
	out := new(UpdateAnalysisProgressResponse)
	err := c.client.Call(ctx, "luci.bisection.v1.BotUpdates", "UpdateAnalysisProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botUpdatesPRPCClient) UpdateTestAnalysisProgress(ctx context.Context, in *UpdateTestAnalysisProgressRequest, opts ...grpc.CallOption) (*UpdateTestAnalysisProgressResponse, error) {
	out := new(UpdateTestAnalysisProgressResponse)
	err := c.client.Call(ctx, "luci.bisection.v1.BotUpdates", "UpdateTestAnalysisProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type botUpdatesClient struct {
	cc grpc.ClientConnInterface
}

func NewBotUpdatesClient(cc grpc.ClientConnInterface) BotUpdatesClient {
	return &botUpdatesClient{cc}
}

func (c *botUpdatesClient) UpdateAnalysisProgress(ctx context.Context, in *UpdateAnalysisProgressRequest, opts ...grpc.CallOption) (*UpdateAnalysisProgressResponse, error) {
	out := new(UpdateAnalysisProgressResponse)
	err := c.cc.Invoke(ctx, "/luci.bisection.v1.BotUpdates/UpdateAnalysisProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botUpdatesClient) UpdateTestAnalysisProgress(ctx context.Context, in *UpdateTestAnalysisProgressRequest, opts ...grpc.CallOption) (*UpdateTestAnalysisProgressResponse, error) {
	out := new(UpdateTestAnalysisProgressResponse)
	err := c.cc.Invoke(ctx, "/luci.bisection.v1.BotUpdates/UpdateTestAnalysisProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotUpdatesServer is the server API for BotUpdates service.
type BotUpdatesServer interface {
	// RPC called from bots to update the compile analysis progress.
	UpdateAnalysisProgress(context.Context, *UpdateAnalysisProgressRequest) (*UpdateAnalysisProgressResponse, error)
	// RPC called from bots to update test analysis progress.
	UpdateTestAnalysisProgress(context.Context, *UpdateTestAnalysisProgressRequest) (*UpdateTestAnalysisProgressResponse, error)
}

// UnimplementedBotUpdatesServer can be embedded to have forward compatible implementations.
type UnimplementedBotUpdatesServer struct {
}

func (*UnimplementedBotUpdatesServer) UpdateAnalysisProgress(context.Context, *UpdateAnalysisProgressRequest) (*UpdateAnalysisProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnalysisProgress not implemented")
}
func (*UnimplementedBotUpdatesServer) UpdateTestAnalysisProgress(context.Context, *UpdateTestAnalysisProgressRequest) (*UpdateTestAnalysisProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestAnalysisProgress not implemented")
}

func RegisterBotUpdatesServer(s prpc.Registrar, srv BotUpdatesServer) {
	s.RegisterService(&_BotUpdates_serviceDesc, srv)
}

func _BotUpdates_UpdateAnalysisProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotUpdatesServer).UpdateAnalysisProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.bisection.v1.BotUpdates/UpdateAnalysisProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotUpdatesServer).UpdateAnalysisProgress(ctx, req.(*UpdateAnalysisProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotUpdates_UpdateTestAnalysisProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestAnalysisProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotUpdatesServer).UpdateTestAnalysisProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.bisection.v1.BotUpdates/UpdateTestAnalysisProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotUpdatesServer).UpdateTestAnalysisProgress(ctx, req.(*UpdateTestAnalysisProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotUpdates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.bisection.v1.BotUpdates",
	HandlerType: (*BotUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAnalysisProgress",
			Handler:    _BotUpdates_UpdateAnalysisProgress_Handler,
		},
		{
			MethodName: "UpdateTestAnalysisProgress",
			Handler:    _BotUpdates_UpdateTestAnalysisProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/bisection/proto/v1/botupdates.proto",
}
