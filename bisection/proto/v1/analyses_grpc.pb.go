// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: go.chromium.org/luci/bisection/proto/v1/analyses.proto

package bisectionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Analyses_GetAnalysis_FullMethodName          = "/luci.bisection.v1.Analyses/GetAnalysis"
	Analyses_QueryAnalysis_FullMethodName        = "/luci.bisection.v1.Analyses/QueryAnalysis"
	Analyses_ListAnalyses_FullMethodName         = "/luci.bisection.v1.Analyses/ListAnalyses"
	Analyses_TriggerAnalysis_FullMethodName      = "/luci.bisection.v1.Analyses/TriggerAnalysis"
	Analyses_UpdateAnalysis_FullMethodName       = "/luci.bisection.v1.Analyses/UpdateAnalysis"
	Analyses_ListTestAnalyses_FullMethodName     = "/luci.bisection.v1.Analyses/ListTestAnalyses"
	Analyses_GetTestAnalysis_FullMethodName      = "/luci.bisection.v1.Analyses/GetTestAnalysis"
	Analyses_BatchGetTestAnalyses_FullMethodName = "/luci.bisection.v1.Analyses/BatchGetTestAnalyses"
)

// AnalysesClient is the client API for Analyses service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Analyses service includes all methods related to failure analyses
// called from LUCI Bisection clients, such as SoM.
//
// Use of LUCI is subject to the Google [Terms of Service](https://policies.google.com/terms)
// and [Privacy Policy](https://policies.google.com/privacy).
type AnalysesClient interface {
	// GetAnalysis is used to get an analysis by analysis ID.
	GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*Analysis, error)
	// QueryAnalysis is used to query for the status and result of analyses.
	// The user can pass in the failure information to retrieve the analyses.
	QueryAnalysis(ctx context.Context, in *QueryAnalysisRequest, opts ...grpc.CallOption) (*QueryAnalysisResponse, error)
	// ListAnalyses is used to get existing analyses.
	// Most recently created analyses are returned first.
	ListAnalyses(ctx context.Context, in *ListAnalysesRequest, opts ...grpc.CallOption) (*ListAnalysesResponse, error)
	// TriggerAnalysis is used to trigger an analysis for a failed build.
	// This RPC is called from a LUCI Bisection client like SoM or Milo.
	// If an existing analysis is found for the same failure, no new analysis
	// will be triggered.
	TriggerAnalysis(ctx context.Context, in *TriggerAnalysisRequest, opts ...grpc.CallOption) (*TriggerAnalysisResponse, error)
	// Update the information of an analysis,
	// e.g. update the bugs associated with an analysis.
	// Mainly used by SoM, since LUCI Bisection does not have any information
	// about bugs created by sheriffs.
	UpdateAnalysis(ctx context.Context, in *UpdateAnalysisRequest, opts ...grpc.CallOption) (*Analysis, error)
	// ListTestAnalyses is used to get existing test analyses.
	// Most recently created test analyses are returned first.
	ListTestAnalyses(ctx context.Context, in *ListTestAnalysesRequest, opts ...grpc.CallOption) (*ListTestAnalysesResponse, error)
	// GetTestAnalysis is used to get a test analysis by its ID.
	GetTestAnalysis(ctx context.Context, in *GetTestAnalysisRequest, opts ...grpc.CallOption) (*TestAnalysis, error)
	// BatchGetTestAnalyses is an RPC to batch get test analyses for test failures.
	BatchGetTestAnalyses(ctx context.Context, in *BatchGetTestAnalysesRequest, opts ...grpc.CallOption) (*BatchGetTestAnalysesResponse, error)
}

type analysesClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalysesClient(cc grpc.ClientConnInterface) AnalysesClient {
	return &analysesClient{cc}
}

func (c *analysesClient) GetAnalysis(ctx context.Context, in *GetAnalysisRequest, opts ...grpc.CallOption) (*Analysis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Analysis)
	err := c.cc.Invoke(ctx, Analyses_GetAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesClient) QueryAnalysis(ctx context.Context, in *QueryAnalysisRequest, opts ...grpc.CallOption) (*QueryAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAnalysisResponse)
	err := c.cc.Invoke(ctx, Analyses_QueryAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesClient) ListAnalyses(ctx context.Context, in *ListAnalysesRequest, opts ...grpc.CallOption) (*ListAnalysesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAnalysesResponse)
	err := c.cc.Invoke(ctx, Analyses_ListAnalyses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesClient) TriggerAnalysis(ctx context.Context, in *TriggerAnalysisRequest, opts ...grpc.CallOption) (*TriggerAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerAnalysisResponse)
	err := c.cc.Invoke(ctx, Analyses_TriggerAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesClient) UpdateAnalysis(ctx context.Context, in *UpdateAnalysisRequest, opts ...grpc.CallOption) (*Analysis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Analysis)
	err := c.cc.Invoke(ctx, Analyses_UpdateAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesClient) ListTestAnalyses(ctx context.Context, in *ListTestAnalysesRequest, opts ...grpc.CallOption) (*ListTestAnalysesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTestAnalysesResponse)
	err := c.cc.Invoke(ctx, Analyses_ListTestAnalyses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesClient) GetTestAnalysis(ctx context.Context, in *GetTestAnalysisRequest, opts ...grpc.CallOption) (*TestAnalysis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestAnalysis)
	err := c.cc.Invoke(ctx, Analyses_GetTestAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analysesClient) BatchGetTestAnalyses(ctx context.Context, in *BatchGetTestAnalysesRequest, opts ...grpc.CallOption) (*BatchGetTestAnalysesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetTestAnalysesResponse)
	err := c.cc.Invoke(ctx, Analyses_BatchGetTestAnalyses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalysesServer is the server API for Analyses service.
// All implementations must embed UnimplementedAnalysesServer
// for forward compatibility.
//
// Analyses service includes all methods related to failure analyses
// called from LUCI Bisection clients, such as SoM.
//
// Use of LUCI is subject to the Google [Terms of Service](https://policies.google.com/terms)
// and [Privacy Policy](https://policies.google.com/privacy).
type AnalysesServer interface {
	// GetAnalysis is used to get an analysis by analysis ID.
	GetAnalysis(context.Context, *GetAnalysisRequest) (*Analysis, error)
	// QueryAnalysis is used to query for the status and result of analyses.
	// The user can pass in the failure information to retrieve the analyses.
	QueryAnalysis(context.Context, *QueryAnalysisRequest) (*QueryAnalysisResponse, error)
	// ListAnalyses is used to get existing analyses.
	// Most recently created analyses are returned first.
	ListAnalyses(context.Context, *ListAnalysesRequest) (*ListAnalysesResponse, error)
	// TriggerAnalysis is used to trigger an analysis for a failed build.
	// This RPC is called from a LUCI Bisection client like SoM or Milo.
	// If an existing analysis is found for the same failure, no new analysis
	// will be triggered.
	TriggerAnalysis(context.Context, *TriggerAnalysisRequest) (*TriggerAnalysisResponse, error)
	// Update the information of an analysis,
	// e.g. update the bugs associated with an analysis.
	// Mainly used by SoM, since LUCI Bisection does not have any information
	// about bugs created by sheriffs.
	UpdateAnalysis(context.Context, *UpdateAnalysisRequest) (*Analysis, error)
	// ListTestAnalyses is used to get existing test analyses.
	// Most recently created test analyses are returned first.
	ListTestAnalyses(context.Context, *ListTestAnalysesRequest) (*ListTestAnalysesResponse, error)
	// GetTestAnalysis is used to get a test analysis by its ID.
	GetTestAnalysis(context.Context, *GetTestAnalysisRequest) (*TestAnalysis, error)
	// BatchGetTestAnalyses is an RPC to batch get test analyses for test failures.
	BatchGetTestAnalyses(context.Context, *BatchGetTestAnalysesRequest) (*BatchGetTestAnalysesResponse, error)
	mustEmbedUnimplementedAnalysesServer()
}

// UnimplementedAnalysesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalysesServer struct{}

func (UnimplementedAnalysesServer) GetAnalysis(context.Context, *GetAnalysisRequest) (*Analysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysis not implemented")
}
func (UnimplementedAnalysesServer) QueryAnalysis(context.Context, *QueryAnalysisRequest) (*QueryAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAnalysis not implemented")
}
func (UnimplementedAnalysesServer) ListAnalyses(context.Context, *ListAnalysesRequest) (*ListAnalysesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnalyses not implemented")
}
func (UnimplementedAnalysesServer) TriggerAnalysis(context.Context, *TriggerAnalysisRequest) (*TriggerAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAnalysis not implemented")
}
func (UnimplementedAnalysesServer) UpdateAnalysis(context.Context, *UpdateAnalysisRequest) (*Analysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnalysis not implemented")
}
func (UnimplementedAnalysesServer) ListTestAnalyses(context.Context, *ListTestAnalysesRequest) (*ListTestAnalysesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestAnalyses not implemented")
}
func (UnimplementedAnalysesServer) GetTestAnalysis(context.Context, *GetTestAnalysisRequest) (*TestAnalysis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestAnalysis not implemented")
}
func (UnimplementedAnalysesServer) BatchGetTestAnalyses(context.Context, *BatchGetTestAnalysesRequest) (*BatchGetTestAnalysesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetTestAnalyses not implemented")
}
func (UnimplementedAnalysesServer) mustEmbedUnimplementedAnalysesServer() {}
func (UnimplementedAnalysesServer) testEmbeddedByValue()                  {}

// UnsafeAnalysesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalysesServer will
// result in compilation errors.
type UnsafeAnalysesServer interface {
	mustEmbedUnimplementedAnalysesServer()
}

func RegisterAnalysesServer(s grpc.ServiceRegistrar, srv AnalysesServer) {
	// If the following call pancis, it indicates UnimplementedAnalysesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Analyses_ServiceDesc, srv)
}

func _Analyses_GetAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).GetAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_GetAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).GetAnalysis(ctx, req.(*GetAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyses_QueryAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).QueryAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_QueryAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).QueryAnalysis(ctx, req.(*QueryAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyses_ListAnalyses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnalysesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).ListAnalyses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_ListAnalyses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).ListAnalyses(ctx, req.(*ListAnalysesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyses_TriggerAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).TriggerAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_TriggerAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).TriggerAnalysis(ctx, req.(*TriggerAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyses_UpdateAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).UpdateAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_UpdateAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).UpdateAnalysis(ctx, req.(*UpdateAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyses_ListTestAnalyses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestAnalysesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).ListTestAnalyses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_ListTestAnalyses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).ListTestAnalyses(ctx, req.(*ListTestAnalysesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyses_GetTestAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).GetTestAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_GetTestAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).GetTestAnalysis(ctx, req.(*GetTestAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyses_BatchGetTestAnalyses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetTestAnalysesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalysesServer).BatchGetTestAnalyses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analyses_BatchGetTestAnalyses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalysesServer).BatchGetTestAnalyses(ctx, req.(*BatchGetTestAnalysesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Analyses_ServiceDesc is the grpc.ServiceDesc for Analyses service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analyses_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "luci.bisection.v1.Analyses",
	HandlerType: (*AnalysesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnalysis",
			Handler:    _Analyses_GetAnalysis_Handler,
		},
		{
			MethodName: "QueryAnalysis",
			Handler:    _Analyses_QueryAnalysis_Handler,
		},
		{
			MethodName: "ListAnalyses",
			Handler:    _Analyses_ListAnalyses_Handler,
		},
		{
			MethodName: "TriggerAnalysis",
			Handler:    _Analyses_TriggerAnalysis_Handler,
		},
		{
			MethodName: "UpdateAnalysis",
			Handler:    _Analyses_UpdateAnalysis_Handler,
		},
		{
			MethodName: "ListTestAnalyses",
			Handler:    _Analyses_ListTestAnalyses_Handler,
		},
		{
			MethodName: "GetTestAnalysis",
			Handler:    _Analyses_GetTestAnalysis_Handler,
		},
		{
			MethodName: "BatchGetTestAnalyses",
			Handler:    _Analyses_BatchGetTestAnalyses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/bisection/proto/v1/analyses.proto",
}
