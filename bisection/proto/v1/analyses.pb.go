// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/bisection/proto/v1/analyses.proto

package bisectionpb

import (
	proto "go.chromium.org/luci/buildbucket/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AnalysisRunStatus focusses on whether the analysis is currently running, not
// the actual result of the analysis.
type AnalysisRunStatus int32

const (
	AnalysisRunStatus_ANALYSIS_RUN_STATUS_UNSPECIFIED AnalysisRunStatus = 0
	// The analysis started and is still running.
	AnalysisRunStatus_STARTED AnalysisRunStatus = 2
	// The analysis has ended (either it stopped naturally or ran into an error).
	AnalysisRunStatus_ENDED AnalysisRunStatus = 3
	// The analysis has been canceled.
	AnalysisRunStatus_CANCELED AnalysisRunStatus = 4
)

// Enum value maps for AnalysisRunStatus.
var (
	AnalysisRunStatus_name = map[int32]string{
		0: "ANALYSIS_RUN_STATUS_UNSPECIFIED",
		2: "STARTED",
		3: "ENDED",
		4: "CANCELED",
	}
	AnalysisRunStatus_value = map[string]int32{
		"ANALYSIS_RUN_STATUS_UNSPECIFIED": 0,
		"STARTED":                         2,
		"ENDED":                           3,
		"CANCELED":                        4,
	}
)

func (x AnalysisRunStatus) Enum() *AnalysisRunStatus {
	p := new(AnalysisRunStatus)
	*p = x
	return p
}

func (x AnalysisRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalysisRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_enumTypes[0].Descriptor()
}

func (AnalysisRunStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_enumTypes[0]
}

func (x AnalysisRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalysisRunStatus.Descriptor instead.
func (AnalysisRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{0}
}

type BuildFailureType int32

const (
	BuildFailureType_BUILD_FAILURE_TYPE_UNSPECIFIED BuildFailureType = 0
	BuildFailureType_COMPILE                        BuildFailureType = 1
	BuildFailureType_TEST                           BuildFailureType = 2
	BuildFailureType_INFRA                          BuildFailureType = 3
	BuildFailureType_OTHER                          BuildFailureType = 4
)

// Enum value maps for BuildFailureType.
var (
	BuildFailureType_name = map[int32]string{
		0: "BUILD_FAILURE_TYPE_UNSPECIFIED",
		1: "COMPILE",
		2: "TEST",
		3: "INFRA",
		4: "OTHER",
	}
	BuildFailureType_value = map[string]int32{
		"BUILD_FAILURE_TYPE_UNSPECIFIED": 0,
		"COMPILE":                        1,
		"TEST":                           2,
		"INFRA":                          3,
		"OTHER":                          4,
	}
)

func (x BuildFailureType) Enum() *BuildFailureType {
	p := new(BuildFailureType)
	*p = x
	return p
}

func (x BuildFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_enumTypes[1].Descriptor()
}

func (BuildFailureType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_enumTypes[1]
}

func (x BuildFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildFailureType.Descriptor instead.
func (BuildFailureType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{1}
}

type GetAnalysisRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the analysis.
	AnalysisId    int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAnalysisRequest) Reset() {
	*x = GetAnalysisRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnalysisRequest) ProtoMessage() {}

func (x *GetAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnalysisRequest.ProtoReflect.Descriptor instead.
func (*GetAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{0}
}

func (x *GetAnalysisRequest) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

type QueryAnalysisRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The build failure information to query for the analyses.
	BuildFailure  *BuildFailure `protobuf:"bytes,1,opt,name=build_failure,json=buildFailure,proto3" json:"build_failure,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAnalysisRequest) Reset() {
	*x = QueryAnalysisRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAnalysisRequest) ProtoMessage() {}

func (x *QueryAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAnalysisRequest.ProtoReflect.Descriptor instead.
func (*QueryAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{1}
}

func (x *QueryAnalysisRequest) GetBuildFailure() *BuildFailure {
	if x != nil {
		return x.BuildFailure
	}
	return nil
}

type QueryAnalysisResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The analyses corresponding to the QueryAnalysisRequest.
	Analyses      []*Analysis `protobuf:"bytes,1,rep,name=analyses,proto3" json:"analyses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAnalysisResponse) Reset() {
	*x = QueryAnalysisResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAnalysisResponse) ProtoMessage() {}

func (x *QueryAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAnalysisResponse.ProtoReflect.Descriptor instead.
func (*QueryAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{2}
}

func (x *QueryAnalysisResponse) GetAnalyses() []*Analysis {
	if x != nil {
		return x.Analyses
	}
	return nil
}

type ListAnalysesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The maximum number of analyses to be returned in the response.
	// The service may return fewer than this value.
	// If unspecified, at most 50 analyses will be returned.
	// The maximum value is 200; values above 200 will be coerced to 200.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListAnalyses` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListAnalyses` must
	// match the call that provided the page token,
	// with the exception of page_size and page_token.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAnalysesRequest) Reset() {
	*x = ListAnalysesRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAnalysesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnalysesRequest) ProtoMessage() {}

func (x *ListAnalysesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnalysesRequest.ProtoReflect.Descriptor instead.
func (*ListAnalysesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{3}
}

func (x *ListAnalysesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAnalysesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAnalysesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The analyses corresponding to the ListAnalysesRequest.
	Analyses []*Analysis `protobuf:"bytes,1,rep,name=analyses,proto3" json:"analyses,omitempty"`
	// The token to send as `page_token` to retrieve the next page of analyses.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAnalysesResponse) Reset() {
	*x = ListAnalysesResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAnalysesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnalysesResponse) ProtoMessage() {}

func (x *ListAnalysesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnalysesResponse.ProtoReflect.Descriptor instead.
func (*ListAnalysesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{4}
}

func (x *ListAnalysesResponse) GetAnalyses() []*Analysis {
	if x != nil {
		return x.Analyses
	}
	return nil
}

func (x *ListAnalysesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type TriggerAnalysisRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Failure for which to trigger the analysis.
	BuildFailure *BuildFailure `protobuf:"bytes,1,opt,name=build_failure,json=buildFailure,proto3" json:"build_failure,omitempty"`
	// Optionally, the client can pass the bug associated with the failure.
	// LUCI Bisection will update the bug with analysis progress/result.
	// This is mainly for SoM, which has information about bugs associated
	// with a failure.
	BugInfo       []*BugInfo `protobuf:"bytes,2,rep,name=bug_info,json=bugInfo,proto3" json:"bug_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerAnalysisRequest) Reset() {
	*x = TriggerAnalysisRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAnalysisRequest) ProtoMessage() {}

func (x *TriggerAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAnalysisRequest.ProtoReflect.Descriptor instead.
func (*TriggerAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{5}
}

func (x *TriggerAnalysisRequest) GetBuildFailure() *BuildFailure {
	if x != nil {
		return x.BuildFailure
	}
	return nil
}

func (x *TriggerAnalysisRequest) GetBugInfo() []*BugInfo {
	if x != nil {
		return x.BugInfo
	}
	return nil
}

type TriggerAnalysisResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The analysis result corresponding to the request.
	// It is either a new analysis or an existing one.
	Result *Analysis `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// is_new_analysis will be set to true if a new analysis is triggered.
	// It will be set to false if an existing analysis is used instead.
	IsNewAnalysis bool `protobuf:"varint,2,opt,name=is_new_analysis,json=isNewAnalysis,proto3" json:"is_new_analysis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerAnalysisResponse) Reset() {
	*x = TriggerAnalysisResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAnalysisResponse) ProtoMessage() {}

func (x *TriggerAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAnalysisResponse.ProtoReflect.Descriptor instead.
func (*TriggerAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{6}
}

func (x *TriggerAnalysisResponse) GetResult() *Analysis {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TriggerAnalysisResponse) GetIsNewAnalysis() bool {
	if x != nil {
		return x.IsNewAnalysis
	}
	return false
}

// Update the information of an analysis,
// e.g. update the bugs associated with an analysis.
// LUCI Bisection will comment on the bug with analysis progress/results.
// Note: Existing bugs associated with the analysis will be replaced.
type UpdateAnalysisRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the analysis.
	AnalysisId    string     `protobuf:"bytes,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	BugInfo       []*BugInfo `protobuf:"bytes,2,rep,name=bug_info,json=bugInfo,proto3" json:"bug_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAnalysisRequest) Reset() {
	*x = UpdateAnalysisRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAnalysisRequest) ProtoMessage() {}

func (x *UpdateAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAnalysisRequest.ProtoReflect.Descriptor instead.
func (*UpdateAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateAnalysisRequest) GetAnalysisId() string {
	if x != nil {
		return x.AnalysisId
	}
	return ""
}

func (x *UpdateAnalysisRequest) GetBugInfo() []*BugInfo {
	if x != nil {
		return x.BugInfo
	}
	return nil
}

// Analysis contains result of an analysis.
// Next available tag: 15.
type Analysis struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID to identify this analysis.
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// The failure associated with the analysis.
	BuildFailure *BuildFailure `protobuf:"bytes,2,opt,name=build_failure,json=buildFailure,proto3" json:"build_failure,omitempty"`
	// Result status of the analysis.
	Status AnalysisStatus `protobuf:"varint,3,opt,name=status,proto3,enum=luci.bisection.v1.AnalysisStatus" json:"status,omitempty"`
	// Run status of the analysis.
	// See https://go.chromium.org/luci/bisection/proto/v1/#AnalysisRunStatus
	RunStatus AnalysisRunStatus `protobuf:"varint,4,opt,name=run_status,json=runStatus,proto3,enum=luci.bisection.v1.AnalysisRunStatus" json:"run_status,omitempty"`
	// Buildbucket ID for the last passed build.
	LastPassedBbid int64 `protobuf:"varint,5,opt,name=last_passed_bbid,json=lastPassedBbid,proto3" json:"last_passed_bbid,omitempty"`
	// Buildbucket ID for the first failed build.
	FirstFailedBbid int64 `protobuf:"varint,6,opt,name=first_failed_bbid,json=firstFailedBbid,proto3" json:"first_failed_bbid,omitempty"`
	// Timestamp for the created time of the analysis.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Timestamp for the last updated time of the analysis.
	LastUpdatedTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Timestamp for the end time of the analysis.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Result of heuristic analysis.
	HeuristicResult *HeuristicAnalysisResult `protobuf:"bytes,10,opt,name=heuristic_result,json=heuristicResult,proto3" json:"heuristic_result,omitempty"`
	// Result of nth-section analysis.
	NthSectionResult *NthSectionAnalysisResult `protobuf:"bytes,11,opt,name=nth_section_result,json=nthSectionResult,proto3" json:"nth_section_result,omitempty"`
	// Builder for the first failed build.
	Builder *proto.BuilderID `protobuf:"bytes,12,opt,name=builder,proto3" json:"builder,omitempty"`
	// Type of the failure associated with the analysis.
	BuildFailureType BuildFailureType `protobuf:"varint,13,opt,name=build_failure_type,json=buildFailureType,proto3,enum=luci.bisection.v1.BuildFailureType" json:"build_failure_type,omitempty"`
	// The culprits for the analysis.
	// For some rare cases, we may get more than one culprit for a regression
	// range. So we set it as repeated field.
	Culprits []*Culprit `protobuf:"bytes,14,rep,name=culprits,proto3" json:"culprits,omitempty"`
	// Result of the GenAI culprit finder analysis.
	GenAiResult   *GenAiAnalysisResult `protobuf:"bytes,15,opt,name=gen_ai_result,json=genAiResult,proto3" json:"gen_ai_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Analysis) Reset() {
	*x = Analysis{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analysis) ProtoMessage() {}

func (x *Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analysis.ProtoReflect.Descriptor instead.
func (*Analysis) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{8}
}

func (x *Analysis) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *Analysis) GetBuildFailure() *BuildFailure {
	if x != nil {
		return x.BuildFailure
	}
	return nil
}

func (x *Analysis) GetStatus() AnalysisStatus {
	if x != nil {
		return x.Status
	}
	return AnalysisStatus_ANALYSIS_STATUS_UNSPECIFIED
}

func (x *Analysis) GetRunStatus() AnalysisRunStatus {
	if x != nil {
		return x.RunStatus
	}
	return AnalysisRunStatus_ANALYSIS_RUN_STATUS_UNSPECIFIED
}

func (x *Analysis) GetLastPassedBbid() int64 {
	if x != nil {
		return x.LastPassedBbid
	}
	return 0
}

func (x *Analysis) GetFirstFailedBbid() int64 {
	if x != nil {
		return x.FirstFailedBbid
	}
	return 0
}

func (x *Analysis) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Analysis) GetLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTime
	}
	return nil
}

func (x *Analysis) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Analysis) GetHeuristicResult() *HeuristicAnalysisResult {
	if x != nil {
		return x.HeuristicResult
	}
	return nil
}

func (x *Analysis) GetNthSectionResult() *NthSectionAnalysisResult {
	if x != nil {
		return x.NthSectionResult
	}
	return nil
}

func (x *Analysis) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *Analysis) GetBuildFailureType() BuildFailureType {
	if x != nil {
		return x.BuildFailureType
	}
	return BuildFailureType_BUILD_FAILURE_TYPE_UNSPECIFIED
}

func (x *Analysis) GetCulprits() []*Culprit {
	if x != nil {
		return x.Culprits
	}
	return nil
}

func (x *Analysis) GetGenAiResult() *GenAiAnalysisResult {
	if x != nil {
		return x.GenAiResult
	}
	return nil
}

type BuildFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Buildbucket ID for the failed build.
	Bbid int64 `protobuf:"varint,1,opt,name=bbid,proto3" json:"bbid,omitempty"`
	// failed_step_name should be 'compile' for compile failures.
	FailedStepName string `protobuf:"bytes,2,opt,name=failed_step_name,json=failedStepName,proto3" json:"failed_step_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BuildFailure) Reset() {
	*x = BuildFailure{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildFailure) ProtoMessage() {}

func (x *BuildFailure) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildFailure.ProtoReflect.Descriptor instead.
func (*BuildFailure) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{9}
}

func (x *BuildFailure) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

func (x *BuildFailure) GetFailedStepName() string {
	if x != nil {
		return x.FailedStepName
	}
	return ""
}

type ListTestAnalysesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project that the test analyses belong to.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Optional. The maximum number of analyses to be returned in the response.
	// The service may return fewer than this value.
	// If unspecified, at most 50 analyses will be returned.
	// The maximum value is 200; values above 200 will be coerced to 200.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListTestAnalyses` call.
	// Provide this to retrieve the subsequent page.
	// When paginating, all other parameters provided to `ListTestAnalyses` must
	// match the call that provided the page token,
	// with the exception of page_size and page_token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The fields to be included in the response.
	// By default, all fields are included.
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestAnalysesRequest) Reset() {
	*x = ListTestAnalysesRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestAnalysesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestAnalysesRequest) ProtoMessage() {}

func (x *ListTestAnalysesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestAnalysesRequest.ProtoReflect.Descriptor instead.
func (*ListTestAnalysesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{10}
}

func (x *ListTestAnalysesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListTestAnalysesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestAnalysesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTestAnalysesRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ListTestAnalysesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test analyses corresponding to the ListTestAnalysesRequest.
	Analyses []*TestAnalysis `protobuf:"bytes,1,rep,name=analyses,proto3" json:"analyses,omitempty"`
	// The token to send as `page_token` to retrieve the next page of analyses.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestAnalysesResponse) Reset() {
	*x = ListTestAnalysesResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestAnalysesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestAnalysesResponse) ProtoMessage() {}

func (x *ListTestAnalysesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestAnalysesResponse.ProtoReflect.Descriptor instead.
func (*ListTestAnalysesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{11}
}

func (x *ListTestAnalysesResponse) GetAnalyses() []*TestAnalysis {
	if x != nil {
		return x.Analyses
	}
	return nil
}

func (x *ListTestAnalysesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetTestAnalysisRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the analysis.
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// The fields to be included in the response.
	// By default, all fields are included.
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTestAnalysisRequest) Reset() {
	*x = GetTestAnalysisRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestAnalysisRequest) ProtoMessage() {}

func (x *GetTestAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestAnalysisRequest.ProtoReflect.Descriptor instead.
func (*GetTestAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{12}
}

func (x *GetTestAnalysisRequest) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *GetTestAnalysisRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TestAnalysis struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID to identify this analysis.
	AnalysisId int64 `protobuf:"varint,1,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// Timestamp for the create time of the analysis.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Timestamp for the start time of the analysis.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Timestamp for the end time of the analysis.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Result status of the analysis.
	Status AnalysisStatus `protobuf:"varint,5,opt,name=status,proto3,enum=luci.bisection.v1.AnalysisStatus" json:"status,omitempty"`
	// Run status of the analysis.
	RunStatus AnalysisRunStatus `protobuf:"varint,6,opt,name=run_status,json=runStatus,proto3,enum=luci.bisection.v1.AnalysisRunStatus" json:"run_status,omitempty"`
	// The verified culprit for the analysis.
	Culprit *TestCulprit `protobuf:"bytes,7,opt,name=culprit,proto3" json:"culprit,omitempty"`
	// The builder that the analysis analyzed.
	Builder *proto.BuilderID `protobuf:"bytes,8,opt,name=builder,proto3" json:"builder,omitempty"`
	// Test failures that the analysis analyzed.
	// The first item will be the primary failure, followed by other failures.
	// Bisection process will follow the path of the primary test failure.
	TestFailures []*TestFailure `protobuf:"bytes,9,rep,name=test_failures,json=testFailures,proto3" json:"test_failures,omitempty"`
	// The start commit of the regression range (exclusive).
	StartCommit *proto.GitilesCommit `protobuf:"bytes,10,opt,name=start_commit,json=startCommit,proto3" json:"start_commit,omitempty"`
	// The end commit of the regression range (inclusive).
	EndCommit *proto.GitilesCommit `protobuf:"bytes,11,opt,name=end_commit,json=endCommit,proto3" json:"end_commit,omitempty"`
	// Sample build bucket ID where the primary test failure failed.
	SampleBbid int64 `protobuf:"varint,14,opt,name=sample_bbid,json=sampleBbid,proto3" json:"sample_bbid,omitempty"`
	// Nthsection result.
	NthSectionResult *TestNthSectionAnalysisResult `protobuf:"bytes,15,opt,name=nth_section_result,json=nthSectionResult,proto3" json:"nth_section_result,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TestAnalysis) Reset() {
	*x = TestAnalysis{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAnalysis) ProtoMessage() {}

func (x *TestAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAnalysis.ProtoReflect.Descriptor instead.
func (*TestAnalysis) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{13}
}

func (x *TestAnalysis) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *TestAnalysis) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *TestAnalysis) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestAnalysis) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TestAnalysis) GetStatus() AnalysisStatus {
	if x != nil {
		return x.Status
	}
	return AnalysisStatus_ANALYSIS_STATUS_UNSPECIFIED
}

func (x *TestAnalysis) GetRunStatus() AnalysisRunStatus {
	if x != nil {
		return x.RunStatus
	}
	return AnalysisRunStatus_ANALYSIS_RUN_STATUS_UNSPECIFIED
}

func (x *TestAnalysis) GetCulprit() *TestCulprit {
	if x != nil {
		return x.Culprit
	}
	return nil
}

func (x *TestAnalysis) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *TestAnalysis) GetTestFailures() []*TestFailure {
	if x != nil {
		return x.TestFailures
	}
	return nil
}

func (x *TestAnalysis) GetStartCommit() *proto.GitilesCommit {
	if x != nil {
		return x.StartCommit
	}
	return nil
}

func (x *TestAnalysis) GetEndCommit() *proto.GitilesCommit {
	if x != nil {
		return x.EndCommit
	}
	return nil
}

func (x *TestAnalysis) GetSampleBbid() int64 {
	if x != nil {
		return x.SampleBbid
	}
	return 0
}

func (x *TestAnalysis) GetNthSectionResult() *TestNthSectionAnalysisResult {
	if x != nil {
		return x.NthSectionResult
	}
	return nil
}

type TestFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the test.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The variant hash of the test.
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Hash to identify the branch in the source control.
	RefHash string `protobuf:"bytes,3,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// The variant of the test.
	Variant *Variant `protobuf:"bytes,4,opt,name=variant,proto3" json:"variant,omitempty"`
	// Whether the test failure was diverged from the primary test failure
	// during the bisection process.
	IsDiverged bool `protobuf:"varint,5,opt,name=is_diverged,json=isDiverged,proto3" json:"is_diverged,omitempty"`
	// Whether the test failure is a primary failure or not.
	IsPrimary bool `protobuf:"varint,6,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	// Start hour of the test failure.
	StartHour *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// The unexpected test result rate at the start position of the changepoint.
	StartUnexpectedResultRate float32 `protobuf:"fixed32,8,opt,name=start_unexpected_result_rate,json=startUnexpectedResultRate,proto3" json:"start_unexpected_result_rate,omitempty"`
	// The unexpected test result rate at the end position of the changepoint.
	EndUnexpectedResultRate float32 `protobuf:"fixed32,9,opt,name=end_unexpected_result_rate,json=endUnexpectedResultRate,proto3" json:"end_unexpected_result_rate,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TestFailure) Reset() {
	*x = TestFailure{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFailure) ProtoMessage() {}

func (x *TestFailure) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFailure.ProtoReflect.Descriptor instead.
func (*TestFailure) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{14}
}

func (x *TestFailure) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestFailure) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestFailure) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *TestFailure) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestFailure) GetIsDiverged() bool {
	if x != nil {
		return x.IsDiverged
	}
	return false
}

func (x *TestFailure) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *TestFailure) GetStartHour() *timestamppb.Timestamp {
	if x != nil {
		return x.StartHour
	}
	return nil
}

func (x *TestFailure) GetStartUnexpectedResultRate() float32 {
	if x != nil {
		return x.StartUnexpectedResultRate
	}
	return 0
}

func (x *TestFailure) GetEndUnexpectedResultRate() float32 {
	if x != nil {
		return x.EndUnexpectedResultRate
	}
	return 0
}

type TestNthSectionAnalysisResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of the nth-section analysis.
	Status AnalysisStatus `protobuf:"varint,1,opt,name=status,proto3,enum=luci.bisection.v1.AnalysisStatus" json:"status,omitempty"`
	// The run status of the nth-section analysis.
	RunStatus AnalysisRunStatus `protobuf:"varint,2,opt,name=run_status,json=runStatus,proto3,enum=luci.bisection.v1.AnalysisRunStatus" json:"run_status,omitempty"`
	// Timestamp for the start time of the nth-section analysis.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Timestamp for the end time of the nth-section analysis.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Optional, when status = RUNNING. This is the possible commit range of the
	// culprit. This will be updated as the nth-section progress.
	// This will only be available if nthsection is still running (not ended).
	RemainingNthSectionRange *RegressionRange `protobuf:"bytes,5,opt,name=remaining_nth_section_range,json=remainingNthSectionRange,proto3" json:"remaining_nth_section_range,omitempty"`
	// List of the reruns that have been run so far for the nth-section analysis.
	// The runs are sorted by the create timestamp.
	Reruns []*TestSingleRerun `protobuf:"bytes,6,rep,name=reruns,proto3" json:"reruns,omitempty"`
	// The blame list of commits to run the nth-section analysis on.
	// The commits are sorted by recency, with the most recent commit first.
	BlameList *BlameList `protobuf:"bytes,7,opt,name=blame_list,json=blameList,proto3" json:"blame_list,omitempty"`
	// Optional, when nth-section has found a culprit.
	Suspect       *TestCulprit `protobuf:"bytes,8,opt,name=suspect,proto3" json:"suspect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestNthSectionAnalysisResult) Reset() {
	*x = TestNthSectionAnalysisResult{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestNthSectionAnalysisResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestNthSectionAnalysisResult) ProtoMessage() {}

func (x *TestNthSectionAnalysisResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestNthSectionAnalysisResult.ProtoReflect.Descriptor instead.
func (*TestNthSectionAnalysisResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{15}
}

func (x *TestNthSectionAnalysisResult) GetStatus() AnalysisStatus {
	if x != nil {
		return x.Status
	}
	return AnalysisStatus_ANALYSIS_STATUS_UNSPECIFIED
}

func (x *TestNthSectionAnalysisResult) GetRunStatus() AnalysisRunStatus {
	if x != nil {
		return x.RunStatus
	}
	return AnalysisRunStatus_ANALYSIS_RUN_STATUS_UNSPECIFIED
}

func (x *TestNthSectionAnalysisResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestNthSectionAnalysisResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TestNthSectionAnalysisResult) GetRemainingNthSectionRange() *RegressionRange {
	if x != nil {
		return x.RemainingNthSectionRange
	}
	return nil
}

func (x *TestNthSectionAnalysisResult) GetReruns() []*TestSingleRerun {
	if x != nil {
		return x.Reruns
	}
	return nil
}

func (x *TestNthSectionAnalysisResult) GetBlameList() *BlameList {
	if x != nil {
		return x.BlameList
	}
	return nil
}

func (x *TestNthSectionAnalysisResult) GetSuspect() *TestCulprit {
	if x != nil {
		return x.Suspect
	}
	return nil
}

type TestSingleRerun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Buildbucket ID of the rerun build.
	Bbid int64 `protobuf:"varint,1,opt,name=bbid,proto3" json:"bbid,omitempty"`
	// Timestamp for the create time of the rerun.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Timestamp for the start time of the rerun.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Timestamp for the end time of the rerun.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Timestamp when the rerun send the result to bisection from recipe.
	ReportTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	// ID of the bot that runs the rerun.
	BotId string `protobuf:"bytes,6,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// Result of the rerun.
	RerunResult *RerunTestResults `protobuf:"bytes,7,opt,name=rerun_result,json=rerunResult,proto3" json:"rerun_result,omitempty"`
	// Gitiles commit to do the rerun with.
	Commit *proto.GitilesCommit `protobuf:"bytes,8,opt,name=commit,proto3" json:"commit,omitempty"`
	// Index of the commit to rerun within the blamelist, if this is an
	// nth-section rerun. We need to use a string instead of an int here because
	// 0 is a possible valid value but would get lost due to the "omitempty" flag
	// in the generated proto.
	// There is one case where the index is not populated (empty string). It is when
	// the culprit is the (last pass + 1) position, and this rerun is for parent commit
	// of the culprit verification. In such cases, the parent commit (last pass) is not found in the
	// blamelist (this blamelist is (last pass, first fail]). In such case, index will be "".
	Index         string `protobuf:"bytes,9,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSingleRerun) Reset() {
	*x = TestSingleRerun{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSingleRerun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSingleRerun) ProtoMessage() {}

func (x *TestSingleRerun) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSingleRerun.ProtoReflect.Descriptor instead.
func (*TestSingleRerun) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{16}
}

func (x *TestSingleRerun) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

func (x *TestSingleRerun) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TestSingleRerun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestSingleRerun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TestSingleRerun) GetReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

func (x *TestSingleRerun) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *TestSingleRerun) GetRerunResult() *RerunTestResults {
	if x != nil {
		return x.RerunResult
	}
	return nil
}

func (x *TestSingleRerun) GetCommit() *proto.GitilesCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *TestSingleRerun) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type RerunTestResults struct {
	state   protoimpl.MessageState   `protogen:"open.v1"`
	Results []*RerunTestSingleResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// Status of the rerun.
	RerunStatus   RerunStatus `protobuf:"varint,2,opt,name=rerun_status,json=rerunStatus,proto3,enum=luci.bisection.v1.RerunStatus" json:"rerun_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RerunTestResults) Reset() {
	*x = RerunTestResults{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RerunTestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunTestResults) ProtoMessage() {}

func (x *RerunTestResults) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunTestResults.ProtoReflect.Descriptor instead.
func (*RerunTestResults) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{17}
}

func (x *RerunTestResults) GetResults() []*RerunTestSingleResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RerunTestResults) GetRerunStatus() RerunStatus {
	if x != nil {
		return x.RerunStatus
	}
	return RerunStatus_RERUN_STATUS_UNSPECIFIED
}

type RerunTestSingleResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test ID of the result.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Variant hash of the result.
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Number of expected results.
	ExpectedCount int64 `protobuf:"varint,3,opt,name=expected_count,json=expectedCount,proto3" json:"expected_count,omitempty"`
	// Number of unexpected results.
	UnexpectedCount int64 `protobuf:"varint,4,opt,name=unexpected_count,json=unexpectedCount,proto3" json:"unexpected_count,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RerunTestSingleResult) Reset() {
	*x = RerunTestSingleResult{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RerunTestSingleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunTestSingleResult) ProtoMessage() {}

func (x *RerunTestSingleResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunTestSingleResult.ProtoReflect.Descriptor instead.
func (*RerunTestSingleResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{18}
}

func (x *RerunTestSingleResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *RerunTestSingleResult) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *RerunTestSingleResult) GetExpectedCount() int64 {
	if x != nil {
		return x.ExpectedCount
	}
	return 0
}

func (x *RerunTestSingleResult) GetUnexpectedCount() int64 {
	if x != nil {
		return x.UnexpectedCount
	}
	return 0
}

type TestSuspectVerificationDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of the suspect verification.
	Status SuspectVerificationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=luci.bisection.v1.SuspectVerificationStatus" json:"status,omitempty"`
	// The verification rerun build for the suspect commit.
	SuspectRerun *TestSingleRerun `protobuf:"bytes,2,opt,name=suspect_rerun,json=suspectRerun,proto3" json:"suspect_rerun,omitempty"`
	// The verification rerun build for the parent commit of the suspect.
	ParentRerun   *TestSingleRerun `protobuf:"bytes,3,opt,name=parent_rerun,json=parentRerun,proto3" json:"parent_rerun,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSuspectVerificationDetails) Reset() {
	*x = TestSuspectVerificationDetails{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSuspectVerificationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuspectVerificationDetails) ProtoMessage() {}

func (x *TestSuspectVerificationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuspectVerificationDetails.ProtoReflect.Descriptor instead.
func (*TestSuspectVerificationDetails) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{19}
}

func (x *TestSuspectVerificationDetails) GetStatus() SuspectVerificationStatus {
	if x != nil {
		return x.Status
	}
	return SuspectVerificationStatus_SUSPECT_VERIFICATION_STATUS_UNSPECIFIED
}

func (x *TestSuspectVerificationDetails) GetSuspectRerun() *TestSingleRerun {
	if x != nil {
		return x.SuspectRerun
	}
	return nil
}

func (x *TestSuspectVerificationDetails) GetParentRerun() *TestSingleRerun {
	if x != nil {
		return x.ParentRerun
	}
	return nil
}

type TestCulprit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The gitiles commit for the culprit.
	Commit *proto.GitilesCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// The review URL for the culprit.
	ReviewUrl string `protobuf:"bytes,2,opt,name=review_url,json=reviewUrl,proto3" json:"review_url,omitempty"`
	// The review title for the culprit.
	ReviewTitle string `protobuf:"bytes,3,opt,name=review_title,json=reviewTitle,proto3" json:"review_title,omitempty"`
	// Actions we have taken with the culprit.
	// More than one action may be taken, for example, reverting the culprit and
	// commenting on the bug.
	CulpritAction []*CulpritAction `protobuf:"bytes,4,rep,name=culprit_action,json=culpritAction,proto3" json:"culprit_action,omitempty"`
	// The details of suspect verification for the culprit.
	VerificationDetails *TestSuspectVerificationDetails `protobuf:"bytes,5,opt,name=verification_details,json=verificationDetails,proto3" json:"verification_details,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TestCulprit) Reset() {
	*x = TestCulprit{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCulprit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCulprit) ProtoMessage() {}

func (x *TestCulprit) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCulprit.ProtoReflect.Descriptor instead.
func (*TestCulprit) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{20}
}

func (x *TestCulprit) GetCommit() *proto.GitilesCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *TestCulprit) GetReviewUrl() string {
	if x != nil {
		return x.ReviewUrl
	}
	return ""
}

func (x *TestCulprit) GetReviewTitle() string {
	if x != nil {
		return x.ReviewTitle
	}
	return ""
}

func (x *TestCulprit) GetCulpritAction() []*CulpritAction {
	if x != nil {
		return x.CulpritAction
	}
	return nil
}

func (x *TestCulprit) GetVerificationDetails() *TestSuspectVerificationDetails {
	if x != nil {
		return x.VerificationDetails
	}
	return nil
}

type BatchGetTestAnalysesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The response will only contain analyses which analyze failures in this list.
	// It is an error to request for more than 100 test failures.
	TestFailures []*BatchGetTestAnalysesRequest_TestFailureIdentifier `protobuf:"bytes,2,rep,name=test_failures,json=testFailures,proto3" json:"test_failures,omitempty"`
	// The fields to be included in the response.
	// By default, all fields are included.
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetTestAnalysesRequest) Reset() {
	*x = BatchGetTestAnalysesRequest{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetTestAnalysesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestAnalysesRequest) ProtoMessage() {}

func (x *BatchGetTestAnalysesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestAnalysesRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTestAnalysesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{21}
}

func (x *BatchGetTestAnalysesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BatchGetTestAnalysesRequest) GetTestFailures() []*BatchGetTestAnalysesRequest_TestFailureIdentifier {
	if x != nil {
		return x.TestFailures
	}
	return nil
}

func (x *BatchGetTestAnalysesRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type BatchGetTestAnalysesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test analyses for each test failure in the order they were requested.
	// The test analysis will be null if the requested test failure has not been
	// analyzed by any bisection.
	TestAnalyses  []*TestAnalysis `protobuf:"bytes,1,rep,name=test_analyses,json=testAnalyses,proto3" json:"test_analyses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetTestAnalysesResponse) Reset() {
	*x = BatchGetTestAnalysesResponse{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetTestAnalysesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestAnalysesResponse) ProtoMessage() {}

func (x *BatchGetTestAnalysesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestAnalysesResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTestAnalysesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{22}
}

func (x *BatchGetTestAnalysesResponse) GetTestAnalyses() []*TestAnalysis {
	if x != nil {
		return x.TestAnalyses
	}
	return nil
}

// Identify a test failure.
type BatchGetTestAnalysesRequest_TestFailureIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identify a test variant. All fields are required.
	// This represents the ongoing test failure of this test variant.
	TestId      string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	RefHash     string `protobuf:"bytes,3,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// If there is source_position specified, the bisection corresponding to the
	// source position will be returned (if the bisection exists).
	// If no source position is specified, the bisection for the ongoing
	// test failure will be returned (if the bisection exists).
	SourcePosition int64 `protobuf:"varint,4,opt,name=source_position,json=sourcePosition,proto3" json:"source_position,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchGetTestAnalysesRequest_TestFailureIdentifier) Reset() {
	*x = BatchGetTestAnalysesRequest_TestFailureIdentifier{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetTestAnalysesRequest_TestFailureIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestAnalysesRequest_TestFailureIdentifier) ProtoMessage() {}

func (x *BatchGetTestAnalysesRequest_TestFailureIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestAnalysesRequest_TestFailureIdentifier.ProtoReflect.Descriptor instead.
func (*BatchGetTestAnalysesRequest_TestFailureIdentifier) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP(), []int{21, 0}
}

func (x *BatchGetTestAnalysesRequest_TestFailureIdentifier) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *BatchGetTestAnalysesRequest_TestFailureIdentifier) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *BatchGetTestAnalysesRequest_TestFailureIdentifier) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *BatchGetTestAnalysesRequest_TestFailureIdentifier) GetSourcePosition() int64 {
	if x != nil {
		return x.SourcePosition
	}
	return 0
}

var File_go_chromium_org_luci_bisection_proto_v1_analyses_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDesc = "" +
	"\n" +
	"6go.chromium.org/luci/bisection/proto/v1/analyses.proto\x12\x11luci.bisection.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a2go.chromium.org/luci/bisection/proto/v1/bugs.proto\x1a4go.chromium.org/luci/bisection/proto/v1/common.proto\x1a6go.chromium.org/luci/bisection/proto/v1/culprits.proto\x1a3go.chromium.org/luci/bisection/proto/v1/genai.proto\x1a7go.chromium.org/luci/bisection/proto/v1/heuristic.proto\x1a8go.chromium.org/luci/bisection/proto/v1/nthsection.proto\x1a3go.chromium.org/luci/buildbucket/proto/common.proto\x1a;go.chromium.org/luci/buildbucket/proto/builder_common.proto\":\n" +
	"\x12GetAnalysisRequest\x12$\n" +
	"\vanalysis_id\x18\x01 \x01(\x03B\x03\xe0A\x02R\n" +
	"analysisId\"\\\n" +
	"\x14QueryAnalysisRequest\x12D\n" +
	"\rbuild_failure\x18\x01 \x01(\v2\x1f.luci.bisection.v1.BuildFailureR\fbuildFailure\"P\n" +
	"\x15QueryAnalysisResponse\x127\n" +
	"\banalyses\x18\x01 \x03(\v2\x1b.luci.bisection.v1.AnalysisR\banalyses\"Q\n" +
	"\x13ListAnalysesRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\"w\n" +
	"\x14ListAnalysesResponse\x127\n" +
	"\banalyses\x18\x01 \x03(\v2\x1b.luci.bisection.v1.AnalysisR\banalyses\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x95\x01\n" +
	"\x16TriggerAnalysisRequest\x12D\n" +
	"\rbuild_failure\x18\x01 \x01(\v2\x1f.luci.bisection.v1.BuildFailureR\fbuildFailure\x125\n" +
	"\bbug_info\x18\x02 \x03(\v2\x1a.luci.bisection.v1.BugInfoR\abugInfo\"v\n" +
	"\x17TriggerAnalysisResponse\x123\n" +
	"\x06result\x18\x01 \x01(\v2\x1b.luci.bisection.v1.AnalysisR\x06result\x12&\n" +
	"\x0fis_new_analysis\x18\x02 \x01(\bR\risNewAnalysis\"t\n" +
	"\x15UpdateAnalysisRequest\x12$\n" +
	"\vanalysis_id\x18\x01 \x01(\tB\x03\xe0A\x02R\n" +
	"analysisId\x125\n" +
	"\bbug_info\x18\x02 \x03(\v2\x1a.luci.bisection.v1.BugInfoR\abugInfo\"\xc3\a\n" +
	"\bAnalysis\x12\x1f\n" +
	"\vanalysis_id\x18\x01 \x01(\x03R\n" +
	"analysisId\x12D\n" +
	"\rbuild_failure\x18\x02 \x01(\v2\x1f.luci.bisection.v1.BuildFailureR\fbuildFailure\x129\n" +
	"\x06status\x18\x03 \x01(\x0e2!.luci.bisection.v1.AnalysisStatusR\x06status\x12C\n" +
	"\n" +
	"run_status\x18\x04 \x01(\x0e2$.luci.bisection.v1.AnalysisRunStatusR\trunStatus\x12(\n" +
	"\x10last_passed_bbid\x18\x05 \x01(\x03R\x0elastPassedBbid\x12*\n" +
	"\x11first_failed_bbid\x18\x06 \x01(\x03R\x0ffirstFailedBbid\x12=\n" +
	"\fcreated_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\vcreatedTime\x12F\n" +
	"\x11last_updated_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x0flastUpdatedTime\x125\n" +
	"\bend_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12U\n" +
	"\x10heuristic_result\x18\n" +
	" \x01(\v2*.luci.bisection.v1.HeuristicAnalysisResultR\x0fheuristicResult\x12Y\n" +
	"\x12nth_section_result\x18\v \x01(\v2+.luci.bisection.v1.NthSectionAnalysisResultR\x10nthSectionResult\x123\n" +
	"\abuilder\x18\f \x01(\v2\x19.buildbucket.v2.BuilderIDR\abuilder\x12Q\n" +
	"\x12build_failure_type\x18\r \x01(\x0e2#.luci.bisection.v1.BuildFailureTypeR\x10buildFailureType\x126\n" +
	"\bculprits\x18\x0e \x03(\v2\x1a.luci.bisection.v1.CulpritR\bculprits\x12J\n" +
	"\rgen_ai_result\x18\x0f \x01(\v2&.luci.bisection.v1.GenAiAnalysisResultR\vgenAiResult\"L\n" +
	"\fBuildFailure\x12\x12\n" +
	"\x04bbid\x18\x01 \x01(\x03R\x04bbid\x12(\n" +
	"\x10failed_step_name\x18\x02 \x01(\tR\x0efailedStepName\"\xa8\x01\n" +
	"\x17ListTestAnalysesRequest\x12\x1d\n" +
	"\aproject\x18\x01 \x01(\tB\x03\xe0A\x02R\aproject\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x122\n" +
	"\x06fields\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskR\x06fields\"\x7f\n" +
	"\x18ListTestAnalysesResponse\x12;\n" +
	"\banalyses\x18\x01 \x03(\v2\x1f.luci.bisection.v1.TestAnalysisR\banalyses\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"r\n" +
	"\x16GetTestAnalysisRequest\x12$\n" +
	"\vanalysis_id\x18\x01 \x01(\x03B\x03\xe0A\x02R\n" +
	"analysisId\x122\n" +
	"\x06fields\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\x06fields\"\xa0\x06\n" +
	"\fTestAnalysis\x12\x1f\n" +
	"\vanalysis_id\x18\x01 \x01(\x03R\n" +
	"analysisId\x12=\n" +
	"\fcreated_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\vcreatedTime\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x129\n" +
	"\x06status\x18\x05 \x01(\x0e2!.luci.bisection.v1.AnalysisStatusR\x06status\x12C\n" +
	"\n" +
	"run_status\x18\x06 \x01(\x0e2$.luci.bisection.v1.AnalysisRunStatusR\trunStatus\x128\n" +
	"\aculprit\x18\a \x01(\v2\x1e.luci.bisection.v1.TestCulpritR\aculprit\x123\n" +
	"\abuilder\x18\b \x01(\v2\x19.buildbucket.v2.BuilderIDR\abuilder\x12C\n" +
	"\rtest_failures\x18\t \x03(\v2\x1e.luci.bisection.v1.TestFailureR\ftestFailures\x12@\n" +
	"\fstart_commit\x18\n" +
	" \x01(\v2\x1d.buildbucket.v2.GitilesCommitR\vstartCommit\x12<\n" +
	"\n" +
	"end_commit\x18\v \x01(\v2\x1d.buildbucket.v2.GitilesCommitR\tendCommit\x12\x1f\n" +
	"\vsample_bbid\x18\x0e \x01(\x03R\n" +
	"sampleBbid\x12]\n" +
	"\x12nth_section_result\x18\x0f \x01(\v2/.luci.bisection.v1.TestNthSectionAnalysisResultR\x10nthSectionResultJ\x04\b\f\x10\rJ\x04\b\r\x10\x0e\"\x93\x03\n" +
	"\vTestFailure\x12\x17\n" +
	"\atest_id\x18\x01 \x01(\tR\x06testId\x12!\n" +
	"\fvariant_hash\x18\x02 \x01(\tR\vvariantHash\x12\x19\n" +
	"\bref_hash\x18\x03 \x01(\tR\arefHash\x124\n" +
	"\avariant\x18\x04 \x01(\v2\x1a.luci.bisection.v1.VariantR\avariant\x12\x1f\n" +
	"\vis_diverged\x18\x05 \x01(\bR\n" +
	"isDiverged\x12\x1d\n" +
	"\n" +
	"is_primary\x18\x06 \x01(\bR\tisPrimary\x129\n" +
	"\n" +
	"start_hour\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstartHour\x12?\n" +
	"\x1cstart_unexpected_result_rate\x18\b \x01(\x02R\x19startUnexpectedResultRate\x12;\n" +
	"\x1aend_unexpected_result_rate\x18\t \x01(\x02R\x17endUnexpectedResultRate\"\xa6\x04\n" +
	"\x1cTestNthSectionAnalysisResult\x129\n" +
	"\x06status\x18\x01 \x01(\x0e2!.luci.bisection.v1.AnalysisStatusR\x06status\x12C\n" +
	"\n" +
	"run_status\x18\x02 \x01(\x0e2$.luci.bisection.v1.AnalysisRunStatusR\trunStatus\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12a\n" +
	"\x1bremaining_nth_section_range\x18\x05 \x01(\v2\".luci.bisection.v1.RegressionRangeR\x18remainingNthSectionRange\x12:\n" +
	"\x06reruns\x18\x06 \x03(\v2\".luci.bisection.v1.TestSingleRerunR\x06reruns\x12;\n" +
	"\n" +
	"blame_list\x18\a \x01(\v2\x1c.luci.bisection.v1.BlameListR\tblameList\x128\n" +
	"\asuspect\x18\b \x01(\v2\x1e.luci.bisection.v1.TestCulpritR\asuspect\"\xbd\x03\n" +
	"\x0fTestSingleRerun\x12\x12\n" +
	"\x04bbid\x18\x01 \x01(\x03R\x04bbid\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12;\n" +
	"\vreport_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"reportTime\x12\x15\n" +
	"\x06bot_id\x18\x06 \x01(\tR\x05botId\x12F\n" +
	"\frerun_result\x18\a \x01(\v2#.luci.bisection.v1.RerunTestResultsR\vrerunResult\x125\n" +
	"\x06commit\x18\b \x01(\v2\x1d.buildbucket.v2.GitilesCommitR\x06commit\x12\x14\n" +
	"\x05index\x18\t \x01(\tR\x05index\"\x99\x01\n" +
	"\x10RerunTestResults\x12B\n" +
	"\aresults\x18\x01 \x03(\v2(.luci.bisection.v1.RerunTestSingleResultR\aresults\x12A\n" +
	"\frerun_status\x18\x02 \x01(\x0e2\x1e.luci.bisection.v1.RerunStatusR\vrerunStatus\"\xa5\x01\n" +
	"\x15RerunTestSingleResult\x12\x17\n" +
	"\atest_id\x18\x01 \x01(\tR\x06testId\x12!\n" +
	"\fvariant_hash\x18\x02 \x01(\tR\vvariantHash\x12%\n" +
	"\x0eexpected_count\x18\x03 \x01(\x03R\rexpectedCount\x12)\n" +
	"\x10unexpected_count\x18\x04 \x01(\x03R\x0funexpectedCount\"\xf6\x01\n" +
	"\x1eTestSuspectVerificationDetails\x12D\n" +
	"\x06status\x18\x01 \x01(\x0e2,.luci.bisection.v1.SuspectVerificationStatusR\x06status\x12G\n" +
	"\rsuspect_rerun\x18\x02 \x01(\v2\".luci.bisection.v1.TestSingleRerunR\fsuspectRerun\x12E\n" +
	"\fparent_rerun\x18\x03 \x01(\v2\".luci.bisection.v1.TestSingleRerunR\vparentRerun\"\xb5\x02\n" +
	"\vTestCulprit\x125\n" +
	"\x06commit\x18\x01 \x01(\v2\x1d.buildbucket.v2.GitilesCommitR\x06commit\x12\x1d\n" +
	"\n" +
	"review_url\x18\x02 \x01(\tR\treviewUrl\x12!\n" +
	"\freview_title\x18\x03 \x01(\tR\vreviewTitle\x12G\n" +
	"\x0eculprit_action\x18\x04 \x03(\v2 .luci.bisection.v1.CulpritActionR\rculpritAction\x12d\n" +
	"\x14verification_details\x18\x05 \x01(\v21.luci.bisection.v1.TestSuspectVerificationDetailsR\x13verificationDetails\"\xf0\x02\n" +
	"\x1bBatchGetTestAnalysesRequest\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12i\n" +
	"\rtest_failures\x18\x02 \x03(\v2D.luci.bisection.v1.BatchGetTestAnalysesRequest.TestFailureIdentifierR\ftestFailures\x122\n" +
	"\x06fields\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\x06fields\x1a\x97\x01\n" +
	"\x15TestFailureIdentifier\x12\x17\n" +
	"\atest_id\x18\x01 \x01(\tR\x06testId\x12!\n" +
	"\fvariant_hash\x18\x02 \x01(\tR\vvariantHash\x12\x19\n" +
	"\bref_hash\x18\x03 \x01(\tR\arefHash\x12'\n" +
	"\x0fsource_position\x18\x04 \x01(\x03R\x0esourcePosition\"d\n" +
	"\x1cBatchGetTestAnalysesResponse\x12D\n" +
	"\rtest_analyses\x18\x01 \x03(\v2\x1f.luci.bisection.v1.TestAnalysisR\ftestAnalyses*^\n" +
	"\x11AnalysisRunStatus\x12#\n" +
	"\x1fANALYSIS_RUN_STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aSTARTED\x10\x02\x12\t\n" +
	"\x05ENDED\x10\x03\x12\f\n" +
	"\bCANCELED\x10\x04*c\n" +
	"\x10BuildFailureType\x12\"\n" +
	"\x1eBUILD_FAILURE_TYPE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aCOMPILE\x10\x01\x12\b\n" +
	"\x04TEST\x10\x02\x12\t\n" +
	"\x05INFRA\x10\x03\x12\t\n" +
	"\x05OTHER\x10\x042\xaa\x06\n" +
	"\bAnalyses\x12Q\n" +
	"\vGetAnalysis\x12%.luci.bisection.v1.GetAnalysisRequest\x1a\x1b.luci.bisection.v1.Analysis\x12b\n" +
	"\rQueryAnalysis\x12'.luci.bisection.v1.QueryAnalysisRequest\x1a(.luci.bisection.v1.QueryAnalysisResponse\x12_\n" +
	"\fListAnalyses\x12&.luci.bisection.v1.ListAnalysesRequest\x1a'.luci.bisection.v1.ListAnalysesResponse\x12h\n" +
	"\x0fTriggerAnalysis\x12).luci.bisection.v1.TriggerAnalysisRequest\x1a*.luci.bisection.v1.TriggerAnalysisResponse\x12W\n" +
	"\x0eUpdateAnalysis\x12(.luci.bisection.v1.UpdateAnalysisRequest\x1a\x1b.luci.bisection.v1.Analysis\x12k\n" +
	"\x10ListTestAnalyses\x12*.luci.bisection.v1.ListTestAnalysesRequest\x1a+.luci.bisection.v1.ListTestAnalysesResponse\x12]\n" +
	"\x0fGetTestAnalysis\x12).luci.bisection.v1.GetTestAnalysisRequest\x1a\x1f.luci.bisection.v1.TestAnalysis\x12w\n" +
	"\x14BatchGetTestAnalyses\x12..luci.bisection.v1.BatchGetTestAnalysesRequest\x1a/.luci.bisection.v1.BatchGetTestAnalysesResponseB5Z3go.chromium.org/luci/bisection/proto/v1;bisectionpbb\x06proto3"

var (
	file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescData []byte
)

func file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDescData
}

var file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_goTypes = []any{
	(AnalysisRunStatus)(0),                                    // 0: luci.bisection.v1.AnalysisRunStatus
	(BuildFailureType)(0),                                     // 1: luci.bisection.v1.BuildFailureType
	(*GetAnalysisRequest)(nil),                                // 2: luci.bisection.v1.GetAnalysisRequest
	(*QueryAnalysisRequest)(nil),                              // 3: luci.bisection.v1.QueryAnalysisRequest
	(*QueryAnalysisResponse)(nil),                             // 4: luci.bisection.v1.QueryAnalysisResponse
	(*ListAnalysesRequest)(nil),                               // 5: luci.bisection.v1.ListAnalysesRequest
	(*ListAnalysesResponse)(nil),                              // 6: luci.bisection.v1.ListAnalysesResponse
	(*TriggerAnalysisRequest)(nil),                            // 7: luci.bisection.v1.TriggerAnalysisRequest
	(*TriggerAnalysisResponse)(nil),                           // 8: luci.bisection.v1.TriggerAnalysisResponse
	(*UpdateAnalysisRequest)(nil),                             // 9: luci.bisection.v1.UpdateAnalysisRequest
	(*Analysis)(nil),                                          // 10: luci.bisection.v1.Analysis
	(*BuildFailure)(nil),                                      // 11: luci.bisection.v1.BuildFailure
	(*ListTestAnalysesRequest)(nil),                           // 12: luci.bisection.v1.ListTestAnalysesRequest
	(*ListTestAnalysesResponse)(nil),                          // 13: luci.bisection.v1.ListTestAnalysesResponse
	(*GetTestAnalysisRequest)(nil),                            // 14: luci.bisection.v1.GetTestAnalysisRequest
	(*TestAnalysis)(nil),                                      // 15: luci.bisection.v1.TestAnalysis
	(*TestFailure)(nil),                                       // 16: luci.bisection.v1.TestFailure
	(*TestNthSectionAnalysisResult)(nil),                      // 17: luci.bisection.v1.TestNthSectionAnalysisResult
	(*TestSingleRerun)(nil),                                   // 18: luci.bisection.v1.TestSingleRerun
	(*RerunTestResults)(nil),                                  // 19: luci.bisection.v1.RerunTestResults
	(*RerunTestSingleResult)(nil),                             // 20: luci.bisection.v1.RerunTestSingleResult
	(*TestSuspectVerificationDetails)(nil),                    // 21: luci.bisection.v1.TestSuspectVerificationDetails
	(*TestCulprit)(nil),                                       // 22: luci.bisection.v1.TestCulprit
	(*BatchGetTestAnalysesRequest)(nil),                       // 23: luci.bisection.v1.BatchGetTestAnalysesRequest
	(*BatchGetTestAnalysesResponse)(nil),                      // 24: luci.bisection.v1.BatchGetTestAnalysesResponse
	(*BatchGetTestAnalysesRequest_TestFailureIdentifier)(nil), // 25: luci.bisection.v1.BatchGetTestAnalysesRequest.TestFailureIdentifier
	(*BugInfo)(nil),                                           // 26: luci.bisection.v1.BugInfo
	(AnalysisStatus)(0),                                       // 27: luci.bisection.v1.AnalysisStatus
	(*timestamppb.Timestamp)(nil),                             // 28: google.protobuf.Timestamp
	(*HeuristicAnalysisResult)(nil),                           // 29: luci.bisection.v1.HeuristicAnalysisResult
	(*NthSectionAnalysisResult)(nil),                          // 30: luci.bisection.v1.NthSectionAnalysisResult
	(*proto.BuilderID)(nil),                                   // 31: buildbucket.v2.BuilderID
	(*Culprit)(nil),                                           // 32: luci.bisection.v1.Culprit
	(*GenAiAnalysisResult)(nil),                               // 33: luci.bisection.v1.GenAiAnalysisResult
	(*fieldmaskpb.FieldMask)(nil),                             // 34: google.protobuf.FieldMask
	(*proto.GitilesCommit)(nil),                               // 35: buildbucket.v2.GitilesCommit
	(*Variant)(nil),                                           // 36: luci.bisection.v1.Variant
	(*RegressionRange)(nil),                                   // 37: luci.bisection.v1.RegressionRange
	(*BlameList)(nil),                                         // 38: luci.bisection.v1.BlameList
	(RerunStatus)(0),                                          // 39: luci.bisection.v1.RerunStatus
	(SuspectVerificationStatus)(0),                            // 40: luci.bisection.v1.SuspectVerificationStatus
	(*CulpritAction)(nil),                                     // 41: luci.bisection.v1.CulpritAction
}
var file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_depIdxs = []int32{
	11, // 0: luci.bisection.v1.QueryAnalysisRequest.build_failure:type_name -> luci.bisection.v1.BuildFailure
	10, // 1: luci.bisection.v1.QueryAnalysisResponse.analyses:type_name -> luci.bisection.v1.Analysis
	10, // 2: luci.bisection.v1.ListAnalysesResponse.analyses:type_name -> luci.bisection.v1.Analysis
	11, // 3: luci.bisection.v1.TriggerAnalysisRequest.build_failure:type_name -> luci.bisection.v1.BuildFailure
	26, // 4: luci.bisection.v1.TriggerAnalysisRequest.bug_info:type_name -> luci.bisection.v1.BugInfo
	10, // 5: luci.bisection.v1.TriggerAnalysisResponse.result:type_name -> luci.bisection.v1.Analysis
	26, // 6: luci.bisection.v1.UpdateAnalysisRequest.bug_info:type_name -> luci.bisection.v1.BugInfo
	11, // 7: luci.bisection.v1.Analysis.build_failure:type_name -> luci.bisection.v1.BuildFailure
	27, // 8: luci.bisection.v1.Analysis.status:type_name -> luci.bisection.v1.AnalysisStatus
	0,  // 9: luci.bisection.v1.Analysis.run_status:type_name -> luci.bisection.v1.AnalysisRunStatus
	28, // 10: luci.bisection.v1.Analysis.created_time:type_name -> google.protobuf.Timestamp
	28, // 11: luci.bisection.v1.Analysis.last_updated_time:type_name -> google.protobuf.Timestamp
	28, // 12: luci.bisection.v1.Analysis.end_time:type_name -> google.protobuf.Timestamp
	29, // 13: luci.bisection.v1.Analysis.heuristic_result:type_name -> luci.bisection.v1.HeuristicAnalysisResult
	30, // 14: luci.bisection.v1.Analysis.nth_section_result:type_name -> luci.bisection.v1.NthSectionAnalysisResult
	31, // 15: luci.bisection.v1.Analysis.builder:type_name -> buildbucket.v2.BuilderID
	1,  // 16: luci.bisection.v1.Analysis.build_failure_type:type_name -> luci.bisection.v1.BuildFailureType
	32, // 17: luci.bisection.v1.Analysis.culprits:type_name -> luci.bisection.v1.Culprit
	33, // 18: luci.bisection.v1.Analysis.gen_ai_result:type_name -> luci.bisection.v1.GenAiAnalysisResult
	34, // 19: luci.bisection.v1.ListTestAnalysesRequest.fields:type_name -> google.protobuf.FieldMask
	15, // 20: luci.bisection.v1.ListTestAnalysesResponse.analyses:type_name -> luci.bisection.v1.TestAnalysis
	34, // 21: luci.bisection.v1.GetTestAnalysisRequest.fields:type_name -> google.protobuf.FieldMask
	28, // 22: luci.bisection.v1.TestAnalysis.created_time:type_name -> google.protobuf.Timestamp
	28, // 23: luci.bisection.v1.TestAnalysis.start_time:type_name -> google.protobuf.Timestamp
	28, // 24: luci.bisection.v1.TestAnalysis.end_time:type_name -> google.protobuf.Timestamp
	27, // 25: luci.bisection.v1.TestAnalysis.status:type_name -> luci.bisection.v1.AnalysisStatus
	0,  // 26: luci.bisection.v1.TestAnalysis.run_status:type_name -> luci.bisection.v1.AnalysisRunStatus
	22, // 27: luci.bisection.v1.TestAnalysis.culprit:type_name -> luci.bisection.v1.TestCulprit
	31, // 28: luci.bisection.v1.TestAnalysis.builder:type_name -> buildbucket.v2.BuilderID
	16, // 29: luci.bisection.v1.TestAnalysis.test_failures:type_name -> luci.bisection.v1.TestFailure
	35, // 30: luci.bisection.v1.TestAnalysis.start_commit:type_name -> buildbucket.v2.GitilesCommit
	35, // 31: luci.bisection.v1.TestAnalysis.end_commit:type_name -> buildbucket.v2.GitilesCommit
	17, // 32: luci.bisection.v1.TestAnalysis.nth_section_result:type_name -> luci.bisection.v1.TestNthSectionAnalysisResult
	36, // 33: luci.bisection.v1.TestFailure.variant:type_name -> luci.bisection.v1.Variant
	28, // 34: luci.bisection.v1.TestFailure.start_hour:type_name -> google.protobuf.Timestamp
	27, // 35: luci.bisection.v1.TestNthSectionAnalysisResult.status:type_name -> luci.bisection.v1.AnalysisStatus
	0,  // 36: luci.bisection.v1.TestNthSectionAnalysisResult.run_status:type_name -> luci.bisection.v1.AnalysisRunStatus
	28, // 37: luci.bisection.v1.TestNthSectionAnalysisResult.start_time:type_name -> google.protobuf.Timestamp
	28, // 38: luci.bisection.v1.TestNthSectionAnalysisResult.end_time:type_name -> google.protobuf.Timestamp
	37, // 39: luci.bisection.v1.TestNthSectionAnalysisResult.remaining_nth_section_range:type_name -> luci.bisection.v1.RegressionRange
	18, // 40: luci.bisection.v1.TestNthSectionAnalysisResult.reruns:type_name -> luci.bisection.v1.TestSingleRerun
	38, // 41: luci.bisection.v1.TestNthSectionAnalysisResult.blame_list:type_name -> luci.bisection.v1.BlameList
	22, // 42: luci.bisection.v1.TestNthSectionAnalysisResult.suspect:type_name -> luci.bisection.v1.TestCulprit
	28, // 43: luci.bisection.v1.TestSingleRerun.create_time:type_name -> google.protobuf.Timestamp
	28, // 44: luci.bisection.v1.TestSingleRerun.start_time:type_name -> google.protobuf.Timestamp
	28, // 45: luci.bisection.v1.TestSingleRerun.end_time:type_name -> google.protobuf.Timestamp
	28, // 46: luci.bisection.v1.TestSingleRerun.report_time:type_name -> google.protobuf.Timestamp
	19, // 47: luci.bisection.v1.TestSingleRerun.rerun_result:type_name -> luci.bisection.v1.RerunTestResults
	35, // 48: luci.bisection.v1.TestSingleRerun.commit:type_name -> buildbucket.v2.GitilesCommit
	20, // 49: luci.bisection.v1.RerunTestResults.results:type_name -> luci.bisection.v1.RerunTestSingleResult
	39, // 50: luci.bisection.v1.RerunTestResults.rerun_status:type_name -> luci.bisection.v1.RerunStatus
	40, // 51: luci.bisection.v1.TestSuspectVerificationDetails.status:type_name -> luci.bisection.v1.SuspectVerificationStatus
	18, // 52: luci.bisection.v1.TestSuspectVerificationDetails.suspect_rerun:type_name -> luci.bisection.v1.TestSingleRerun
	18, // 53: luci.bisection.v1.TestSuspectVerificationDetails.parent_rerun:type_name -> luci.bisection.v1.TestSingleRerun
	35, // 54: luci.bisection.v1.TestCulprit.commit:type_name -> buildbucket.v2.GitilesCommit
	41, // 55: luci.bisection.v1.TestCulprit.culprit_action:type_name -> luci.bisection.v1.CulpritAction
	21, // 56: luci.bisection.v1.TestCulprit.verification_details:type_name -> luci.bisection.v1.TestSuspectVerificationDetails
	25, // 57: luci.bisection.v1.BatchGetTestAnalysesRequest.test_failures:type_name -> luci.bisection.v1.BatchGetTestAnalysesRequest.TestFailureIdentifier
	34, // 58: luci.bisection.v1.BatchGetTestAnalysesRequest.fields:type_name -> google.protobuf.FieldMask
	15, // 59: luci.bisection.v1.BatchGetTestAnalysesResponse.test_analyses:type_name -> luci.bisection.v1.TestAnalysis
	2,  // 60: luci.bisection.v1.Analyses.GetAnalysis:input_type -> luci.bisection.v1.GetAnalysisRequest
	3,  // 61: luci.bisection.v1.Analyses.QueryAnalysis:input_type -> luci.bisection.v1.QueryAnalysisRequest
	5,  // 62: luci.bisection.v1.Analyses.ListAnalyses:input_type -> luci.bisection.v1.ListAnalysesRequest
	7,  // 63: luci.bisection.v1.Analyses.TriggerAnalysis:input_type -> luci.bisection.v1.TriggerAnalysisRequest
	9,  // 64: luci.bisection.v1.Analyses.UpdateAnalysis:input_type -> luci.bisection.v1.UpdateAnalysisRequest
	12, // 65: luci.bisection.v1.Analyses.ListTestAnalyses:input_type -> luci.bisection.v1.ListTestAnalysesRequest
	14, // 66: luci.bisection.v1.Analyses.GetTestAnalysis:input_type -> luci.bisection.v1.GetTestAnalysisRequest
	23, // 67: luci.bisection.v1.Analyses.BatchGetTestAnalyses:input_type -> luci.bisection.v1.BatchGetTestAnalysesRequest
	10, // 68: luci.bisection.v1.Analyses.GetAnalysis:output_type -> luci.bisection.v1.Analysis
	4,  // 69: luci.bisection.v1.Analyses.QueryAnalysis:output_type -> luci.bisection.v1.QueryAnalysisResponse
	6,  // 70: luci.bisection.v1.Analyses.ListAnalyses:output_type -> luci.bisection.v1.ListAnalysesResponse
	8,  // 71: luci.bisection.v1.Analyses.TriggerAnalysis:output_type -> luci.bisection.v1.TriggerAnalysisResponse
	10, // 72: luci.bisection.v1.Analyses.UpdateAnalysis:output_type -> luci.bisection.v1.Analysis
	13, // 73: luci.bisection.v1.Analyses.ListTestAnalyses:output_type -> luci.bisection.v1.ListTestAnalysesResponse
	15, // 74: luci.bisection.v1.Analyses.GetTestAnalysis:output_type -> luci.bisection.v1.TestAnalysis
	24, // 75: luci.bisection.v1.Analyses.BatchGetTestAnalyses:output_type -> luci.bisection.v1.BatchGetTestAnalysesResponse
	68, // [68:76] is the sub-list for method output_type
	60, // [60:68] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_init() }
func file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_init() {
	if File_go_chromium_org_luci_bisection_proto_v1_analyses_proto != nil {
		return
	}
	file_go_chromium_org_luci_bisection_proto_v1_bugs_proto_init()
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_init()
	file_go_chromium_org_luci_bisection_proto_v1_culprits_proto_init()
	file_go_chromium_org_luci_bisection_proto_v1_genai_proto_init()
	file_go_chromium_org_luci_bisection_proto_v1_heuristic_proto_init()
	file_go_chromium_org_luci_bisection_proto_v1_nthsection_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_bisection_proto_v1_analyses_proto = out.File
	file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_goTypes = nil
	file_go_chromium_org_luci_bisection_proto_v1_analyses_proto_depIdxs = nil
}
