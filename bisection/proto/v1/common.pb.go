// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/bisection/proto/v1/common.proto

package bisectionpb

import (
	proto "go.chromium.org/luci/buildbucket/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AnalysisStatus represents the result status of an analysis.
type AnalysisStatus int32

const (
	AnalysisStatus_ANALYSIS_STATUS_UNSPECIFIED AnalysisStatus = 0
	// The analysis has been created, but not yet started.
	// We don't have this status in code. It's here for backward-compatability.
	AnalysisStatus_CREATED AnalysisStatus = 1
	// The analysis is running, but results have not been finalised.
	AnalysisStatus_RUNNING AnalysisStatus = 2
	// The analysis has finished and found (and verified) the culprit.
	AnalysisStatus_FOUND AnalysisStatus = 3
	// The analysis has finished but no culprit/suspect has been found.
	AnalysisStatus_NOTFOUND AnalysisStatus = 4
	// The analysis resulted in an error.
	AnalysisStatus_ERROR AnalysisStatus = 5
	// The analysis found some suspects, either from heuristic or nth-section.
	AnalysisStatus_SUSPECTFOUND AnalysisStatus = 6
	// The analysis is unsupported (unsupported project, test...).
	AnalysisStatus_UNSUPPORTED AnalysisStatus = 7
	// The analysis was disabled (e.g. from config).
	AnalysisStatus_DISABLED AnalysisStatus = 8
	// This status is to mark for the case when an analysis was created,
	// but was not sent to bisector, because we couldn't get sufficient data
	// to proceed.
	// One example is if we cannot get the commit ID for the regression range
	// because the commit was too old.
	AnalysisStatus_INSUFFICENTDATA AnalysisStatus = 9
)

// Enum value maps for AnalysisStatus.
var (
	AnalysisStatus_name = map[int32]string{
		0: "ANALYSIS_STATUS_UNSPECIFIED",
		1: "CREATED",
		2: "RUNNING",
		3: "FOUND",
		4: "NOTFOUND",
		5: "ERROR",
		6: "SUSPECTFOUND",
		7: "UNSUPPORTED",
		8: "DISABLED",
		9: "INSUFFICENTDATA",
	}
	AnalysisStatus_value = map[string]int32{
		"ANALYSIS_STATUS_UNSPECIFIED": 0,
		"CREATED":                     1,
		"RUNNING":                     2,
		"FOUND":                       3,
		"NOTFOUND":                    4,
		"ERROR":                       5,
		"SUSPECTFOUND":                6,
		"UNSUPPORTED":                 7,
		"DISABLED":                    8,
		"INSUFFICENTDATA":             9,
	}
)

func (x AnalysisStatus) Enum() *AnalysisStatus {
	p := new(AnalysisStatus)
	*p = x
	return p
}

func (x AnalysisStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalysisStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[0].Descriptor()
}

func (AnalysisStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[0]
}

func (x AnalysisStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalysisStatus.Descriptor instead.
func (AnalysisStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

type RerunStatus int32

const (
	RerunStatus_RERUN_STATUS_UNSPECIFIED RerunStatus = 0
	// The rerun is in progress.
	// It may be scheduled or started, but not finished yet.
	RerunStatus_RERUN_STATUS_IN_PROGRESS RerunStatus = 1
	// For compile failure, it means the rerun succeeded.
	// For deterministic test failure, it means that the primary test failure
	// got expected result.
	RerunStatus_RERUN_STATUS_PASSED RerunStatus = 2
	// For compile failure, it means the compile was unsuccessful.
	// For deterministic test failure, it means that the primary test failure
	// got unexpected result.
	RerunStatus_RERUN_STATUS_FAILED RerunStatus = 3
	// The rerun ended with infra failure.
	// It means we will not know which direction to continue the bisection.
	// This case usually mean that the bisection will not be able to
	// find culprit.
	RerunStatus_RERUN_STATUS_INFRA_FAILED RerunStatus = 4
	// The rerun was canceled.
	RerunStatus_RERUN_STATUS_CANCELED RerunStatus = 5
	// Only used for test failure rerun.
	// The rerun ended, but the primary test failure was not run.
	// It usually means that we won't be able to continue the bisection.
	RerunStatus_RERUN_STATUS_TEST_SKIPPED RerunStatus = 6
)

// Enum value maps for RerunStatus.
var (
	RerunStatus_name = map[int32]string{
		0: "RERUN_STATUS_UNSPECIFIED",
		1: "RERUN_STATUS_IN_PROGRESS",
		2: "RERUN_STATUS_PASSED",
		3: "RERUN_STATUS_FAILED",
		4: "RERUN_STATUS_INFRA_FAILED",
		5: "RERUN_STATUS_CANCELED",
		6: "RERUN_STATUS_TEST_SKIPPED",
	}
	RerunStatus_value = map[string]int32{
		"RERUN_STATUS_UNSPECIFIED":  0,
		"RERUN_STATUS_IN_PROGRESS":  1,
		"RERUN_STATUS_PASSED":       2,
		"RERUN_STATUS_FAILED":       3,
		"RERUN_STATUS_INFRA_FAILED": 4,
		"RERUN_STATUS_CANCELED":     5,
		"RERUN_STATUS_TEST_SKIPPED": 6,
	}
)

func (x RerunStatus) Enum() *RerunStatus {
	p := new(RerunStatus)
	*p = x
	return p
}

func (x RerunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RerunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[1].Descriptor()
}

func (RerunStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[1]
}

func (x RerunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RerunStatus.Descriptor instead.
func (RerunStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

// Status of a test result.
// It is a mirror of luci.resultdb.v1.TestStatus, but the right to evolve
// it independently is reserved.
type TestResultStatus int32

const (
	// Status was not specified.
	// Not to be used in actual test results; serves as a default value for an
	// unset field.
	TestResultStatus_TEST_RESULT_STATUS_UNSPECIFIED TestResultStatus = 0
	// The test case has passed.
	TestResultStatus_PASS TestResultStatus = 1
	// The test case has failed.
	// Suggests that the code under test is incorrect, but it is also possible
	// that the test is incorrect or it is a flake.
	TestResultStatus_FAIL TestResultStatus = 2
	// The test case has crashed during execution.
	// The outcome is inconclusive: the code under test might or might not be
	// correct, but the test+code is incorrect.
	TestResultStatus_CRASH TestResultStatus = 3
	// The test case has started, but was aborted before finishing.
	// A common reason: timeout.
	TestResultStatus_ABORT TestResultStatus = 4
	// The test case did not execute.
	// Examples:
	//   - The execution of the collection of test cases, such as a test
	//     binary, was aborted prematurely and execution of some test cases was
	//     skipped.
	//   - The test harness configuration specified that the test case MUST be
	//     skipped.
	TestResultStatus_SKIP TestResultStatus = 5
)

// Enum value maps for TestResultStatus.
var (
	TestResultStatus_name = map[int32]string{
		0: "TEST_RESULT_STATUS_UNSPECIFIED",
		1: "PASS",
		2: "FAIL",
		3: "CRASH",
		4: "ABORT",
		5: "SKIP",
	}
	TestResultStatus_value = map[string]int32{
		"TEST_RESULT_STATUS_UNSPECIFIED": 0,
		"PASS":                           1,
		"FAIL":                           2,
		"CRASH":                          3,
		"ABORT":                          4,
		"SKIP":                           5,
	}
)

func (x TestResultStatus) Enum() *TestResultStatus {
	p := new(TestResultStatus)
	*p = x
	return p
}

func (x TestResultStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResultStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[2].Descriptor()
}

func (TestResultStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[2]
}

func (x TestResultStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResultStatus.Descriptor instead.
func (TestResultStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

// AnalysisType specifies type of the analysis.
type AnalysisType int32

const (
	AnalysisType_ANALYSIS_TYPE_UNSPECIFIED AnalysisType = 0
	// Compile analysis type.
	AnalysisType_COMPILE_FAILURE_ANALYSIS AnalysisType = 1
	// Test analysis type.
	AnalysisType_TEST_FAILURE_ANALYSIS AnalysisType = 2
)

// Enum value maps for AnalysisType.
var (
	AnalysisType_name = map[int32]string{
		0: "ANALYSIS_TYPE_UNSPECIFIED",
		1: "COMPILE_FAILURE_ANALYSIS",
		2: "TEST_FAILURE_ANALYSIS",
	}
	AnalysisType_value = map[string]int32{
		"ANALYSIS_TYPE_UNSPECIFIED": 0,
		"COMPILE_FAILURE_ANALYSIS":  1,
		"TEST_FAILURE_ANALYSIS":     2,
	}
)

func (x AnalysisType) Enum() *AnalysisType {
	p := new(AnalysisType)
	*p = x
	return p
}

func (x AnalysisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalysisType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[3].Descriptor()
}

func (AnalysisType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[3]
}

func (x AnalysisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalysisType.Descriptor instead.
func (AnalysisType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{3}
}

type SuspectVerificationStatus int32

const (
	SuspectVerificationStatus_SUSPECT_VERIFICATION_STATUS_UNSPECIFIED SuspectVerificationStatus = 0
	SuspectVerificationStatus_UNVERIFIED                              SuspectVerificationStatus = 1
	SuspectVerificationStatus_VERIFICATION_SCHEDULED                  SuspectVerificationStatus = 2
	SuspectVerificationStatus_UNDER_VERIFICATION                      SuspectVerificationStatus = 3
	SuspectVerificationStatus_CONFIRMED_CULPRIT                       SuspectVerificationStatus = 4
	SuspectVerificationStatus_VINDICATED                              SuspectVerificationStatus = 5
	SuspectVerificationStatus_VERIFICATION_ERROR                      SuspectVerificationStatus = 6
	SuspectVerificationStatus_VERIFICATION_CANCELED                   SuspectVerificationStatus = 7
)

// Enum value maps for SuspectVerificationStatus.
var (
	SuspectVerificationStatus_name = map[int32]string{
		0: "SUSPECT_VERIFICATION_STATUS_UNSPECIFIED",
		1: "UNVERIFIED",
		2: "VERIFICATION_SCHEDULED",
		3: "UNDER_VERIFICATION",
		4: "CONFIRMED_CULPRIT",
		5: "VINDICATED",
		6: "VERIFICATION_ERROR",
		7: "VERIFICATION_CANCELED",
	}
	SuspectVerificationStatus_value = map[string]int32{
		"SUSPECT_VERIFICATION_STATUS_UNSPECIFIED": 0,
		"UNVERIFIED":             1,
		"VERIFICATION_SCHEDULED": 2,
		"UNDER_VERIFICATION":     3,
		"CONFIRMED_CULPRIT":      4,
		"VINDICATED":             5,
		"VERIFICATION_ERROR":     6,
		"VERIFICATION_CANCELED":  7,
	}
)

func (x SuspectVerificationStatus) Enum() *SuspectVerificationStatus {
	p := new(SuspectVerificationStatus)
	*p = x
	return p
}

func (x SuspectVerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuspectVerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[4].Descriptor()
}

func (SuspectVerificationStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[4]
}

func (x SuspectVerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuspectVerificationStatus.Descriptor instead.
func (SuspectVerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{4}
}

// Status of a test verdict.
// It is a mirror of luci.resultdb.v1.TestVariantStatus.
type TestVerdictStatus int32

const (
	// a test verdict must not have this status.
	// This is only used when filtering verdicts.
	TestVerdictStatus_TEST_VERDICT_STATUS_UNSPECIFIED TestVerdictStatus = 0
	// The test verdict has no exonerations, and all results are unexpected.
	TestVerdictStatus_UNEXPECTED TestVerdictStatus = 10
	// The test verdict has no exonerations, and all results are unexpectedly skipped.
	TestVerdictStatus_UNEXPECTEDLY_SKIPPED TestVerdictStatus = 20
	// The test verdict has no exonerations, and has both expected and unexpected
	// results.
	TestVerdictStatus_FLAKY TestVerdictStatus = 30
	// The test verdict has one or more test exonerations.
	TestVerdictStatus_EXONERATED TestVerdictStatus = 40
	// The test verdict has no exonerations, and all results are expected.
	TestVerdictStatus_EXPECTED TestVerdictStatus = 50
)

// Enum value maps for TestVerdictStatus.
var (
	TestVerdictStatus_name = map[int32]string{
		0:  "TEST_VERDICT_STATUS_UNSPECIFIED",
		10: "UNEXPECTED",
		20: "UNEXPECTEDLY_SKIPPED",
		30: "FLAKY",
		40: "EXONERATED",
		50: "EXPECTED",
	}
	TestVerdictStatus_value = map[string]int32{
		"TEST_VERDICT_STATUS_UNSPECIFIED": 0,
		"UNEXPECTED":                      10,
		"UNEXPECTEDLY_SKIPPED":            20,
		"FLAKY":                           30,
		"EXONERATED":                      40,
		"EXPECTED":                        50,
	}
)

func (x TestVerdictStatus) Enum() *TestVerdictStatus {
	p := new(TestVerdictStatus)
	*p = x
	return p
}

func (x TestVerdictStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestVerdictStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[5].Descriptor()
}

func (TestVerdictStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes[5]
}

func (x TestVerdictStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestVerdictStatus.Descriptor instead.
func (TestVerdictStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{5}
}

// RerunResult contains the result of one rerun.
// It is for the bots to update result back to LUCI Bisection.
type RerunResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Status of the rerun.
	RerunStatus RerunStatus `protobuf:"varint,1,opt,name=rerun_status,json=rerunStatus,proto3,enum=luci.bisection.v1.RerunStatus" json:"rerun_status,omitempty"`
	// Error message, in case of FAILED or INFRA_FAILED status.
	ErrorMessage  string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RerunResult) Reset() {
	*x = RerunResult{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RerunResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunResult) ProtoMessage() {}

func (x *RerunResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunResult.ProtoReflect.Descriptor instead.
func (*RerunResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *RerunResult) GetRerunStatus() RerunStatus {
	if x != nil {
		return x.RerunStatus
	}
	return RerunStatus_RERUN_STATUS_UNSPECIFIED
}

func (x *RerunResult) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// SingleRerun contains information about a single rerun.
// The same bot may be reused for multiple rerun (to speed up compilation time).
type SingleRerun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp for the created time of the rerun.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Timestamp for the last updated time of the rerun.
	LastUpdatedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_updated_time,json=lastUpdatedTime,proto3" json:"last_updated_time,omitempty"`
	// Timestamp for the end time of the rerun.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Buildbucket ID of the rerun build.
	Bbid int64 `protobuf:"varint,4,opt,name=bbid,proto3" json:"bbid,omitempty"`
	// Task ID of the rerun.
	TaskId string `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// ID of the bot.
	BotId string `protobuf:"bytes,6,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// Result of the rerun.
	RerunResult *RerunResult `protobuf:"bytes,7,opt,name=rerun_result,json=rerunResult,proto3" json:"rerun_result,omitempty"`
	// Gitiles commit to do the rerun with.
	Commit *proto.GitilesCommit `protobuf:"bytes,8,opt,name=commit,proto3" json:"commit,omitempty"`
	// Index of the commit to rerun within the blamelist, if this is an
	// nth-section rerun. We need to use a string instead of an int here because
	// 0 is a possible valid value but would get lost due to the "omitempty" flag
	// in the generated proto.
	Index string `protobuf:"bytes,9,opt,name=index,proto3" json:"index,omitempty"`
	// Type of rerun: either "Culprit Verification" or "NthSection".
	Type          string `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SingleRerun) Reset() {
	*x = SingleRerun{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleRerun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleRerun) ProtoMessage() {}

func (x *SingleRerun) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleRerun.ProtoReflect.Descriptor instead.
func (*SingleRerun) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *SingleRerun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SingleRerun) GetLastUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedTime
	}
	return nil
}

func (x *SingleRerun) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SingleRerun) GetBbid() int64 {
	if x != nil {
		return x.Bbid
	}
	return 0
}

func (x *SingleRerun) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SingleRerun) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *SingleRerun) GetRerunResult() *RerunResult {
	if x != nil {
		return x.RerunResult
	}
	return nil
}

func (x *SingleRerun) GetCommit() *proto.GitilesCommit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *SingleRerun) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *SingleRerun) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type SuspectVerificationDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The status of the suspect verification.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// The verification rerun build for the suspect commit.
	SuspectRerun *SingleRerun `protobuf:"bytes,2,opt,name=suspect_rerun,json=suspectRerun,proto3" json:"suspect_rerun,omitempty"`
	// The verification rerun build for the parent commit of the suspect.
	ParentRerun   *SingleRerun `protobuf:"bytes,3,opt,name=parent_rerun,json=parentRerun,proto3" json:"parent_rerun,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SuspectVerificationDetails) Reset() {
	*x = SuspectVerificationDetails{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SuspectVerificationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspectVerificationDetails) ProtoMessage() {}

func (x *SuspectVerificationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspectVerificationDetails.ProtoReflect.Descriptor instead.
func (*SuspectVerificationDetails) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *SuspectVerificationDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SuspectVerificationDetails) GetSuspectRerun() *SingleRerun {
	if x != nil {
		return x.SuspectRerun
	}
	return nil
}

func (x *SuspectVerificationDetails) GetParentRerun() *SingleRerun {
	if x != nil {
		return x.ParentRerun
	}
	return nil
}

// Variant represents a way of running a test case.
//
// The same test case can be executed in different ways, for example on
// different OS, GPUs, with different compile options or runtime flags.
type Variant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The definition of the variant. Each key-value pair represents a
	// parameter describing how the test was run (e.g. OS, GPU, etc.).
	Def           map[string]string `protobuf:"bytes,1,rep,name=def,proto3" json:"def,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Variant) Reset() {
	*x = Variant{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant) ProtoMessage() {}

func (x *Variant) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variant.ProtoReflect.Descriptor instead.
func (*Variant) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *Variant) GetDef() map[string]string {
	if x != nil {
		return x.Def
	}
	return nil
}

// Represents a reference in a source control system.
type SourceRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source control system used.
	// Only gitiles is supported at this moment. If other systems need to be
	// supported in future (e.g. non-gitiles git, subversion, google storage
	// buckets), they can be added here
	//
	// Types that are valid to be assigned to System:
	//
	//	*SourceRef_Gitiles
	System        isSourceRef_System `protobuf_oneof:"system"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceRef) Reset() {
	*x = SourceRef{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRef) ProtoMessage() {}

func (x *SourceRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRef.ProtoReflect.Descriptor instead.
func (*SourceRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *SourceRef) GetSystem() isSourceRef_System {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *SourceRef) GetGitiles() *GitilesRef {
	if x != nil {
		if x, ok := x.System.(*SourceRef_Gitiles); ok {
			return x.Gitiles
		}
	}
	return nil
}

type isSourceRef_System interface {
	isSourceRef_System()
}

type SourceRef_Gitiles struct {
	// A branch in gitiles repository.
	Gitiles *GitilesRef `protobuf:"bytes,1,opt,name=gitiles,proto3,oneof"`
}

func (*SourceRef_Gitiles) isSourceRef_System() {}

// Represents a branch in a gitiles repository.
type GitilesRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The gitiles host, e.g. "chromium.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The project on the gitiles host, e.g. "chromium/src".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
	// Not the branch name, use "refs/heads/branch"
	Ref           string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitilesRef) Reset() {
	*x = GitilesRef{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitilesRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesRef) ProtoMessage() {}

func (x *GitilesRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesRef.ProtoReflect.Descriptor instead.
func (*GitilesRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *GitilesRef) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitilesRef) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GitilesRef) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

// Represents dimensions requested to buildbucket.
type Dimensions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of dimensions, ordered by key ascendingly.
	Dimensions    []*Dimension `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dimensions) Reset() {
	*x = Dimensions{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dimensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimensions) ProtoMessage() {}

func (x *Dimensions) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimensions.ProtoReflect.Descriptor instead.
func (*Dimensions) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *Dimensions) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

// Represent one dimension requested to buildbucket.
type Dimension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key, e.g. "os".
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value, e.g. "Ubuntu".
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *Dimension) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Dimension) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_go_chromium_org_luci_bisection_proto_v1_common_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDesc = string([]byte{
	0x0a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x75, 0x0a, 0x0b, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x62, 0x62, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62,
	0x6f, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x72, 0x75,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x43, 0x0a, 0x0d, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x72, 0x75, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x0c, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x72, 0x75, 0x6e, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x72, 0x75, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x22, 0x78, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x64, 0x65, 0x66, 0x1a, 0x36, 0x0a, 0x08, 0x44, 0x65, 0x66,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x50, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x39,
	0x0a, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x48, 0x00,
	0x52, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x22, 0x4c, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x22, 0x4a, 0x0a, 0x0a, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x33, 0x0a,
	0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0xb5, 0x01, 0x0a, 0x0e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x45, 0x4e, 0x54, 0x44, 0x41, 0x54, 0x41, 0x10, 0x09, 0x2a, 0xd4, 0x01, 0x0a, 0x0b, 0x52,
	0x65, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x52, 0x55,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x52, 0x55,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x52, 0x55, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x06, 0x2a, 0x6a, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x52, 0x41, 0x53, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x4f, 0x52,
	0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x05, 0x2a, 0x66, 0x0a,
	0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59,
	0x53, 0x49, 0x53, 0x10, 0x02, 0x2a, 0xe6, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x5f, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x5f, 0x43, 0x55, 0x4c, 0x50, 0x52, 0x49, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x56,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x56,
	0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x2a, 0x8b,
	0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x45, 0x52,
	0x44, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x45,
	0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x4c, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x41, 0x4b, 0x59, 0x10, 0x1e, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x28, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x32, 0x42, 0x35, 0x5a, 0x33,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescData []byte
)

func file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDescData
}

var file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_go_chromium_org_luci_bisection_proto_v1_common_proto_goTypes = []any{
	(AnalysisStatus)(0),                // 0: luci.bisection.v1.AnalysisStatus
	(RerunStatus)(0),                   // 1: luci.bisection.v1.RerunStatus
	(TestResultStatus)(0),              // 2: luci.bisection.v1.TestResultStatus
	(AnalysisType)(0),                  // 3: luci.bisection.v1.AnalysisType
	(SuspectVerificationStatus)(0),     // 4: luci.bisection.v1.SuspectVerificationStatus
	(TestVerdictStatus)(0),             // 5: luci.bisection.v1.TestVerdictStatus
	(*RerunResult)(nil),                // 6: luci.bisection.v1.RerunResult
	(*SingleRerun)(nil),                // 7: luci.bisection.v1.SingleRerun
	(*SuspectVerificationDetails)(nil), // 8: luci.bisection.v1.SuspectVerificationDetails
	(*Variant)(nil),                    // 9: luci.bisection.v1.Variant
	(*SourceRef)(nil),                  // 10: luci.bisection.v1.SourceRef
	(*GitilesRef)(nil),                 // 11: luci.bisection.v1.GitilesRef
	(*Dimensions)(nil),                 // 12: luci.bisection.v1.Dimensions
	(*Dimension)(nil),                  // 13: luci.bisection.v1.Dimension
	nil,                                // 14: luci.bisection.v1.Variant.DefEntry
	(*timestamppb.Timestamp)(nil),      // 15: google.protobuf.Timestamp
	(*proto.GitilesCommit)(nil),        // 16: buildbucket.v2.GitilesCommit
}
var file_go_chromium_org_luci_bisection_proto_v1_common_proto_depIdxs = []int32{
	1,  // 0: luci.bisection.v1.RerunResult.rerun_status:type_name -> luci.bisection.v1.RerunStatus
	15, // 1: luci.bisection.v1.SingleRerun.start_time:type_name -> google.protobuf.Timestamp
	15, // 2: luci.bisection.v1.SingleRerun.last_updated_time:type_name -> google.protobuf.Timestamp
	15, // 3: luci.bisection.v1.SingleRerun.end_time:type_name -> google.protobuf.Timestamp
	6,  // 4: luci.bisection.v1.SingleRerun.rerun_result:type_name -> luci.bisection.v1.RerunResult
	16, // 5: luci.bisection.v1.SingleRerun.commit:type_name -> buildbucket.v2.GitilesCommit
	7,  // 6: luci.bisection.v1.SuspectVerificationDetails.suspect_rerun:type_name -> luci.bisection.v1.SingleRerun
	7,  // 7: luci.bisection.v1.SuspectVerificationDetails.parent_rerun:type_name -> luci.bisection.v1.SingleRerun
	14, // 8: luci.bisection.v1.Variant.def:type_name -> luci.bisection.v1.Variant.DefEntry
	11, // 9: luci.bisection.v1.SourceRef.gitiles:type_name -> luci.bisection.v1.GitilesRef
	13, // 10: luci.bisection.v1.Dimensions.dimensions:type_name -> luci.bisection.v1.Dimension
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_bisection_proto_v1_common_proto_init() }
func file_go_chromium_org_luci_bisection_proto_v1_common_proto_init() {
	if File_go_chromium_org_luci_bisection_proto_v1_common_proto != nil {
		return
	}
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes[4].OneofWrappers = []any{
		(*SourceRef_Gitiles)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_v1_common_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_bisection_proto_v1_common_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_bisection_proto_v1_common_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_bisection_proto_v1_common_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_bisection_proto_v1_common_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_bisection_proto_v1_common_proto = out.File
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_goTypes = nil
	file_go_chromium_org_luci_bisection_proto_v1_common_proto_depIdxs = nil
}
