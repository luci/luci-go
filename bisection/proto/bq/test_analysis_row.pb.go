// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/bisection/proto/bq/test_analysis_row.proto

package bqpb

import (
	v1 "go.chromium.org/luci/bisection/proto/v1"
	proto "go.chromium.org/luci/buildbucket/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TestAnalysisRow Represents a test analysis exported to BigQuery.
// A test analysis is only exported to BigQuery if it has finished,
// and all the culprit actions have been taken.
// It means once a row has been exported, its data is immutable.
type TestAnalysisRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project of the analysis.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// ID to identify this analysis, same as the one in Datastore.
	AnalysisId int64 `protobuf:"varint,2,opt,name=analysis_id,json=analysisId,proto3" json:"analysis_id,omitempty"`
	// Timestamp for the create time of the analysis.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Timestamp for the start time of the analysis.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Timestamp for the end time of the analysis.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Result status of the analysis.
	Status v1.AnalysisStatus `protobuf:"varint,6,opt,name=status,proto3,enum=luci.bisection.v1.AnalysisStatus" json:"status,omitempty"`
	// Run status of the analysis.
	RunStatus v1.AnalysisRunStatus `protobuf:"varint,7,opt,name=run_status,json=runStatus,proto3,enum=luci.bisection.v1.AnalysisRunStatus" json:"run_status,omitempty"`
	// The verified culprit for the analysis.
	Culprit *v1.TestCulprit `protobuf:"bytes,8,opt,name=culprit,proto3" json:"culprit,omitempty"`
	// The builder that the analysis analyzed.
	Builder *proto.BuilderID `protobuf:"bytes,9,opt,name=builder,proto3" json:"builder,omitempty"`
	// Test failures that the analysis analyzed.
	// The first item will be the primary failure, followed by other failures.
	TestFailures []*v1.TestFailure `protobuf:"bytes,10,rep,name=test_failures,json=testFailures,proto3" json:"test_failures,omitempty"`
	// The start commit of the regression range (exclusive).
	StartGitilesCommit *proto.GitilesCommit `protobuf:"bytes,11,opt,name=start_gitiles_commit,json=startGitilesCommit,proto3" json:"start_gitiles_commit,omitempty"`
	// The end commit of the regression range (inclusive).
	EndGitilesCommit *proto.GitilesCommit `protobuf:"bytes,12,opt,name=end_gitiles_commit,json=endGitilesCommit,proto3" json:"end_gitiles_commit,omitempty"`
	// Sample build bucket ID where the primary test failure failed.
	SampleBbid int64 `protobuf:"varint,15,opt,name=sample_bbid,json=sampleBbid,proto3" json:"sample_bbid,omitempty"`
	// Details of nthsection analysis, including the reruns.
	NthSectionResult *v1.TestNthSectionAnalysisResult `protobuf:"bytes,16,opt,name=nth_section_result,json=nthSectionResult,proto3" json:"nth_section_result,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TestAnalysisRow) Reset() {
	*x = TestAnalysisRow{}
	mi := &file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAnalysisRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAnalysisRow) ProtoMessage() {}

func (x *TestAnalysisRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAnalysisRow.ProtoReflect.Descriptor instead.
func (*TestAnalysisRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDescGZIP(), []int{0}
}

func (x *TestAnalysisRow) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestAnalysisRow) GetAnalysisId() int64 {
	if x != nil {
		return x.AnalysisId
	}
	return 0
}

func (x *TestAnalysisRow) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *TestAnalysisRow) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestAnalysisRow) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TestAnalysisRow) GetStatus() v1.AnalysisStatus {
	if x != nil {
		return x.Status
	}
	return v1.AnalysisStatus(0)
}

func (x *TestAnalysisRow) GetRunStatus() v1.AnalysisRunStatus {
	if x != nil {
		return x.RunStatus
	}
	return v1.AnalysisRunStatus(0)
}

func (x *TestAnalysisRow) GetCulprit() *v1.TestCulprit {
	if x != nil {
		return x.Culprit
	}
	return nil
}

func (x *TestAnalysisRow) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *TestAnalysisRow) GetTestFailures() []*v1.TestFailure {
	if x != nil {
		return x.TestFailures
	}
	return nil
}

func (x *TestAnalysisRow) GetStartGitilesCommit() *proto.GitilesCommit {
	if x != nil {
		return x.StartGitilesCommit
	}
	return nil
}

func (x *TestAnalysisRow) GetEndGitilesCommit() *proto.GitilesCommit {
	if x != nil {
		return x.EndGitilesCommit
	}
	return nil
}

func (x *TestAnalysisRow) GetSampleBbid() int64 {
	if x != nil {
		return x.SampleBbid
	}
	return 0
}

func (x *TestAnalysisRow) GetNthSectionResult() *v1.TestNthSectionAnalysisResult {
	if x != nil {
		return x.NthSectionResult
	}
	return nil
}

var File_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDesc = string([]byte{
	0x0a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x71, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x06, 0x0a, 0x0f,
	0x54, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x6f, 0x77, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x63,
	0x75, 0x6c, 0x70, 0x72, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x75, 0x6c, 0x70, 0x72, 0x69, 0x74, 0x52, 0x07, 0x63, 0x75,
	0x6c, 0x70, 0x72, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x4b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x10, 0x65, 0x6e, 0x64,
	0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x62, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x42, 0x62, 0x69, 0x64, 0x12, 0x5d,
	0x0a, 0x12, 0x6e, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4e, 0x74, 0x68, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x6e, 0x74, 0x68,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x04, 0x08,
	0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x62, 0x69, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x71, 0x3b, 0x62, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDescData []byte
)

func file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDescData
}

var file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_goTypes = []any{
	(*TestAnalysisRow)(nil),                 // 0: luci.bisection.proto.bq.TestAnalysisRow
	(*timestamppb.Timestamp)(nil),           // 1: google.protobuf.Timestamp
	(v1.AnalysisStatus)(0),                  // 2: luci.bisection.v1.AnalysisStatus
	(v1.AnalysisRunStatus)(0),               // 3: luci.bisection.v1.AnalysisRunStatus
	(*v1.TestCulprit)(nil),                  // 4: luci.bisection.v1.TestCulprit
	(*proto.BuilderID)(nil),                 // 5: buildbucket.v2.BuilderID
	(*v1.TestFailure)(nil),                  // 6: luci.bisection.v1.TestFailure
	(*proto.GitilesCommit)(nil),             // 7: buildbucket.v2.GitilesCommit
	(*v1.TestNthSectionAnalysisResult)(nil), // 8: luci.bisection.v1.TestNthSectionAnalysisResult
}
var file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_depIdxs = []int32{
	1,  // 0: luci.bisection.proto.bq.TestAnalysisRow.created_time:type_name -> google.protobuf.Timestamp
	1,  // 1: luci.bisection.proto.bq.TestAnalysisRow.start_time:type_name -> google.protobuf.Timestamp
	1,  // 2: luci.bisection.proto.bq.TestAnalysisRow.end_time:type_name -> google.protobuf.Timestamp
	2,  // 3: luci.bisection.proto.bq.TestAnalysisRow.status:type_name -> luci.bisection.v1.AnalysisStatus
	3,  // 4: luci.bisection.proto.bq.TestAnalysisRow.run_status:type_name -> luci.bisection.v1.AnalysisRunStatus
	4,  // 5: luci.bisection.proto.bq.TestAnalysisRow.culprit:type_name -> luci.bisection.v1.TestCulprit
	5,  // 6: luci.bisection.proto.bq.TestAnalysisRow.builder:type_name -> buildbucket.v2.BuilderID
	6,  // 7: luci.bisection.proto.bq.TestAnalysisRow.test_failures:type_name -> luci.bisection.v1.TestFailure
	7,  // 8: luci.bisection.proto.bq.TestAnalysisRow.start_gitiles_commit:type_name -> buildbucket.v2.GitilesCommit
	7,  // 9: luci.bisection.proto.bq.TestAnalysisRow.end_gitiles_commit:type_name -> buildbucket.v2.GitilesCommit
	8,  // 10: luci.bisection.proto.bq.TestAnalysisRow.nth_section_result:type_name -> luci.bisection.v1.TestNthSectionAnalysisResult
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_init() }
func file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_init() {
	if File_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDesc), len(file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto = out.File
	file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_goTypes = nil
	file_go_chromium_org_luci_bisection_proto_bq_test_analysis_row_proto_depIdxs = nil
}
