// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/deploy/api/modelpb/asset.proto

package modelpb

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Traffic splitting method.
type AppengineState_Service_TrafficSplitting int32

const (
	AppengineState_Service_TRAFFIC_SPLITTING_UNSPECIFIED AppengineState_Service_TrafficSplitting = 0
	AppengineState_Service_COOKIE                        AppengineState_Service_TrafficSplitting = 1
	AppengineState_Service_IP                            AppengineState_Service_TrafficSplitting = 2
	AppengineState_Service_RANDOM                        AppengineState_Service_TrafficSplitting = 3
)

// Enum value maps for AppengineState_Service_TrafficSplitting.
var (
	AppengineState_Service_TrafficSplitting_name = map[int32]string{
		0: "TRAFFIC_SPLITTING_UNSPECIFIED",
		1: "COOKIE",
		2: "IP",
		3: "RANDOM",
	}
	AppengineState_Service_TrafficSplitting_value = map[string]int32{
		"TRAFFIC_SPLITTING_UNSPECIFIED": 0,
		"COOKIE":                        1,
		"IP":                            2,
		"RANDOM":                        3,
	}
)

func (x AppengineState_Service_TrafficSplitting) Enum() *AppengineState_Service_TrafficSplitting {
	p := new(AppengineState_Service_TrafficSplitting)
	*p = x
	return p
}

func (x AppengineState_Service_TrafficSplitting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppengineState_Service_TrafficSplitting) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_enumTypes[0].Descriptor()
}

func (AppengineState_Service_TrafficSplitting) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_enumTypes[0]
}

func (x AppengineState_Service_TrafficSplitting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppengineState_Service_TrafficSplitting.Descriptor instead.
func (AppengineState_Service_TrafficSplitting) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 0, 0}
}

// What kind of a database is associated with the app.
type AppengineState_CapturedState_DatabaseType int32

const (
	AppengineState_CapturedState_DATABASE_TYPE_UNSPECIFIED     AppengineState_CapturedState_DatabaseType = 0
	AppengineState_CapturedState_CLOUD_DATASTORE               AppengineState_CapturedState_DatabaseType = 1
	AppengineState_CapturedState_CLOUD_FIRESTORE               AppengineState_CapturedState_DatabaseType = 2
	AppengineState_CapturedState_CLOUD_DATASTORE_COMPATIBILITY AppengineState_CapturedState_DatabaseType = 3
)

// Enum value maps for AppengineState_CapturedState_DatabaseType.
var (
	AppengineState_CapturedState_DatabaseType_name = map[int32]string{
		0: "DATABASE_TYPE_UNSPECIFIED",
		1: "CLOUD_DATASTORE",
		2: "CLOUD_FIRESTORE",
		3: "CLOUD_DATASTORE_COMPATIBILITY",
	}
	AppengineState_CapturedState_DatabaseType_value = map[string]int32{
		"DATABASE_TYPE_UNSPECIFIED":     0,
		"CLOUD_DATASTORE":               1,
		"CLOUD_FIRESTORE":               2,
		"CLOUD_DATASTORE_COMPATIBILITY": 3,
	}
)

func (x AppengineState_CapturedState_DatabaseType) Enum() *AppengineState_CapturedState_DatabaseType {
	p := new(AppengineState_CapturedState_DatabaseType)
	*p = x
	return p
}

func (x AppengineState_CapturedState_DatabaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppengineState_CapturedState_DatabaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_enumTypes[1].Descriptor()
}

func (AppengineState_CapturedState_DatabaseType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_enumTypes[1]
}

func (x AppengineState_CapturedState_DatabaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppengineState_CapturedState_DatabaseType.Descriptor instead.
func (AppengineState_CapturedState_DatabaseType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 2, 0}
}

// Asset represents a Cloud resource (or a bunch of resources) actuated as
// a single unit.
type Asset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID of this asset.
	//
	// Defines the asset type (in particular what oneof branch is expected to
	// be populated in AssetState).
	//
	// Matches full resource name of the asset's root resource per Google Cloud
	// API conventions. For now only Appengine services are supported with asset
	// ID being "apps/<app-id>".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The snapshot of the most recent actuation.
	//
	// This is the most recent actuation. Most of the time it will be an actuation
	// that made SKIP_UPTODATE decision (since most of the time assets are
	// up-to-date).
	//
	// May still be in-flight.
	LastActuation *Actuation `protobuf:"bytes,2,opt,name=last_actuation,json=lastActuation,proto3" json:"last_actuation,omitempty"`
	// The last actuation decision regarding this asset.
	//
	// It is the decision that was made by the `last_actuation` when it started.
	LastDecision *ActuationDecision `protobuf:"bytes,3,opt,name=last_decision,json=lastDecision,proto3" json:"last_decision,omitempty"`
	// The snapshot of the most recent actuation with ACTUATE_* decision.
	//
	// It is the actuation that changed (or attempted to change) this asset the
	// last time.
	//
	// May still be in-flight.
	LastActuateActuation *Actuation `protobuf:"bytes,4,opt,name=last_actuate_actuation,json=lastActuateActuation,proto3" json:"last_actuate_actuation,omitempty"`
	// The last ACTUATE_* actuation decision regarding this asset.
	//
	// It is the decision that was made by the `last_actuate_actuation` when it
	// started.
	LastActuateDecision *ActuationDecision `protobuf:"bytes,5,opt,name=last_actuate_decision,json=lastActuateDecision,proto3" json:"last_actuate_decision,omitempty"`
	// Asset configuration as defined in the IaC repo.
	//
	// It's the configuration consumed the deployment system itself. Actuated
	// resources are configured via `intended_state`.
	Config *AssetConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// The intended state of the asset as defined in the IaC repo.
	//
	// It is the intended asset state reported by the actuator during its most
	// recent BeginActuation call. This state is derived purely from the committed
	// configuration. The actuator will try to move the asset into this state.
	//
	// Has its `state` oneof populated according to the asset kind using
	// IntendedState sub-fields. Never contains an erroneous AssetState.
	//
	// May be missing for new assets if they are misconfigured in the IaC repo.
	IntendedState *AssetState `protobuf:"bytes,7,opt,name=intended_state,json=intendedState,proto3" json:"intended_state,omitempty"`
	// The last successfully applied intended state.
	//
	// May be different from `intended_state` for assets being actuated right now
	// of for disabled, locked or broken assets.
	//
	// Has its `state` oneof populated according to the asset kind using
	// IntendedState sub-fields. Never contains an erroneous AssetState.
	//
	// May be missing for new assets if they never had successful actuations.
	AppliedState *AssetState `protobuf:"bytes,8,opt,name=applied_state,json=appliedState,proto3" json:"applied_state,omitempty"`
	// The actual state of the asset as reported by the actuator most recently.
	//
	// It is the captured asset state reported by the actuator during its most
	// BeginActuation or EndActuation calls. Matches some real most recently
	// observed state of the asset, regardless how this state came to be.
	//
	// Has its `state` oneof populated according to the asset kind using
	// CapturedState sub-fields. Never contains an erroneous AssetState.
	//
	// May be missing for new assets if the actuator fails to capture their state.
	ReportedState *AssetState `protobuf:"bytes,9,opt,name=reported_state,json=reportedState,proto3" json:"reported_state,omitempty"`
	// The last state applied by the actuator itself.
	//
	// For up-to-date assets it matches `intended_state` and `reported_state`.
	//
	// If during an actuation cycle the actuator partially updates some resources
	// and then fails, `actuated_state` may be some intermediate state between
	// the intended and the initial pre-actuation states.
	//
	// If some external entity (not the actuator) messes with the asset,
	// `reported_state` may be different from `actuated_state`.
	//
	// Has its `state` oneof populated according to the asset kind using
	// CapturedState sub-fields. Never contains an erroneous AssetState.
	//
	// May be missing for new assets while they are being actuated or if the
	// actuator fails to capture their post-actuation state.
	ActuatedState *AssetState `protobuf:"bytes,10,opt,name=actuated_state,json=actuatedState,proto3" json:"actuated_state,omitempty"`
	// Populated if the actuator failed to capture the post-actuation state.
	//
	// If this field is set then `actuated_state` likely doesn't match reality
	// and the next actuation attempt will likely trigger the anti-stomp
	// protection.
	PostActuationStatus *status.Status `protobuf:"bytes,11,opt,name=post_actuation_status,json=postActuationStatus,proto3" json:"post_actuation_status,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Asset) Reset() {
	*x = Asset{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{0}
}

func (x *Asset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Asset) GetLastActuation() *Actuation {
	if x != nil {
		return x.LastActuation
	}
	return nil
}

func (x *Asset) GetLastDecision() *ActuationDecision {
	if x != nil {
		return x.LastDecision
	}
	return nil
}

func (x *Asset) GetLastActuateActuation() *Actuation {
	if x != nil {
		return x.LastActuateActuation
	}
	return nil
}

func (x *Asset) GetLastActuateDecision() *ActuationDecision {
	if x != nil {
		return x.LastActuateDecision
	}
	return nil
}

func (x *Asset) GetConfig() *AssetConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Asset) GetIntendedState() *AssetState {
	if x != nil {
		return x.IntendedState
	}
	return nil
}

func (x *Asset) GetAppliedState() *AssetState {
	if x != nil {
		return x.AppliedState
	}
	return nil
}

func (x *Asset) GetReportedState() *AssetState {
	if x != nil {
		return x.ReportedState
	}
	return nil
}

func (x *Asset) GetActuatedState() *AssetState {
	if x != nil {
		return x.ActuatedState
	}
	return nil
}

func (x *Asset) GetPostActuationStatus() *status.Status {
	if x != nil {
		return x.PostActuationStatus
	}
	return nil
}

// AssetHistory captures an actuation decision made by the backend regarding
// some asset along with all data that led to it, as well as the corresponding
// actuation outcome.
type AssetHistory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent asset ID.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// Index in the asset's history log, monotonically increasing starting with 1.
	HistoryId int64 `protobuf:"varint,2,opt,name=history_id,json=historyId,proto3" json:"history_id,omitempty"`
	// The decision made by the backend.
	Decision *ActuationDecision `protobuf:"bytes,3,opt,name=decision,proto3" json:"decision,omitempty"`
	// The snapshot of the associated actuation.
	Actuation *Actuation `protobuf:"bytes,4,opt,name=actuation,proto3" json:"actuation,omitempty"`
	// Reported asset configuration as defined in the IaC repo.
	Config *AssetConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Reported intended state of the asset as defined in the IaC repo.
	IntendedState *AssetState `protobuf:"bytes,6,opt,name=intended_state,json=intendedState,proto3" json:"intended_state,omitempty"`
	// Reported actual state of the asset (as scanned by the actuator).
	ReportedState *AssetState `protobuf:"bytes,7,opt,name=reported_state,json=reportedState,proto3" json:"reported_state,omitempty"`
	// The last successfully applied intended state **prior** to the actuation.
	LastAppliedState *AssetState `protobuf:"bytes,8,opt,name=last_applied_state,json=lastAppliedState,proto3" json:"last_applied_state,omitempty"`
	// The reported state **after** the actuation, if it was performed.
	PostActuationState *AssetState `protobuf:"bytes,9,opt,name=post_actuation_state,json=postActuationState,proto3" json:"post_actuation_state,omitempty"`
	// Number of consecutive failures prior to this entry (excluding itself).
	PriorConsecutiveFailures int64 `protobuf:"varint,10,opt,name=prior_consecutive_failures,json=priorConsecutiveFailures,proto3" json:"prior_consecutive_failures,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *AssetHistory) Reset() {
	*x = AssetHistory{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetHistory) ProtoMessage() {}

func (x *AssetHistory) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetHistory.ProtoReflect.Descriptor instead.
func (*AssetHistory) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{1}
}

func (x *AssetHistory) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *AssetHistory) GetHistoryId() int64 {
	if x != nil {
		return x.HistoryId
	}
	return 0
}

func (x *AssetHistory) GetDecision() *ActuationDecision {
	if x != nil {
		return x.Decision
	}
	return nil
}

func (x *AssetHistory) GetActuation() *Actuation {
	if x != nil {
		return x.Actuation
	}
	return nil
}

func (x *AssetHistory) GetConfig() *AssetConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *AssetHistory) GetIntendedState() *AssetState {
	if x != nil {
		return x.IntendedState
	}
	return nil
}

func (x *AssetHistory) GetReportedState() *AssetState {
	if x != nil {
		return x.ReportedState
	}
	return nil
}

func (x *AssetHistory) GetLastAppliedState() *AssetState {
	if x != nil {
		return x.LastAppliedState
	}
	return nil
}

func (x *AssetHistory) GetPostActuationState() *AssetState {
	if x != nil {
		return x.PostActuationState
	}
	return nil
}

func (x *AssetHistory) GetPriorConsecutiveFailures() int64 {
	if x != nil {
		return x.PriorConsecutiveFailures
	}
	return 0
}

// Asset configuration as defined in the IaC repo.
type AssetConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// True to actuate the asset, false to leave it alone.
	EnableAutomation bool `protobuf:"varint,1,opt,name=enable_automation,json=enableAutomation,proto3" json:"enable_automation,omitempty"`
	// How many inactive GAE versions to keep.
	InactiveVersionsToKeep int32 `protobuf:"varint,2,opt,name=inactive_versions_to_keep,json=inactiveVersionsToKeep,proto3" json:"inactive_versions_to_keep,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *AssetConfig) Reset() {
	*x = AssetConfig{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetConfig) ProtoMessage() {}

func (x *AssetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetConfig.ProtoReflect.Descriptor instead.
func (*AssetConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{2}
}

func (x *AssetConfig) GetEnableAutomation() bool {
	if x != nil {
		return x.EnableAutomation
	}
	return false
}

func (x *AssetConfig) GetInactiveVersionsToKeep() int32 {
	if x != nil {
		return x.InactiveVersionsToKeep
	}
	return 0
}

// A snapshot of the intended or captured state of an asset.
//
// Also contains information about the actuator and the deployment at the time
// the state was captured. This is useful for the historical log of states.
type AssetState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When this state was captured.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The deployment configuration at the time the state was captured.
	Deployment *Deployment `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// The actuator that performed the capture.
	Actuator *ActuatorInfo `protobuf:"bytes,3,opt,name=actuator,proto3" json:"actuator,omitempty"`
	// Error details if the asset state could not be captured.
	Status *status.Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// The intended or captured state of the asset if `status` is OK.
	//
	// Types that are valid to be assigned to State:
	//
	//	*AssetState_Appengine
	State         isAssetState_State `protobuf_oneof:"state"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetState) Reset() {
	*x = AssetState{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetState) ProtoMessage() {}

func (x *AssetState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetState.ProtoReflect.Descriptor instead.
func (*AssetState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{3}
}

func (x *AssetState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AssetState) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *AssetState) GetActuator() *ActuatorInfo {
	if x != nil {
		return x.Actuator
	}
	return nil
}

func (x *AssetState) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *AssetState) GetState() isAssetState_State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AssetState) GetAppengine() *AppengineState {
	if x != nil {
		if x, ok := x.State.(*AssetState_Appengine); ok {
			return x.Appengine
		}
	}
	return nil
}

type isAssetState_State interface {
	isAssetState_State()
}

type AssetState_Appengine struct {
	// For assets with ID "apps/<app-id>".
	Appengine *AppengineState `protobuf:"bytes,10,opt,name=appengine,proto3,oneof"`
}

func (*AssetState_Appengine) isAssetState_State() {}

// Intended or captured state of an Appengine service.
type AppengineState struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Services      []*AppengineState_Service     `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	IntendedState *AppengineState_IntendedState `protobuf:"bytes,2,opt,name=intended_state,json=intendedState,proto3" json:"intended_state,omitempty"`
	CapturedState *AppengineState_CapturedState `protobuf:"bytes,3,opt,name=captured_state,json=capturedState,proto3" json:"captured_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppengineState) Reset() {
	*x = AppengineState{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState) ProtoMessage() {}

func (x *AppengineState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState.ProtoReflect.Descriptor instead.
func (*AppengineState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4}
}

func (x *AppengineState) GetServices() []*AppengineState_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *AppengineState) GetIntendedState() *AppengineState_IntendedState {
	if x != nil {
		return x.IntendedState
	}
	return nil
}

func (x *AppengineState) GetCapturedState() *AppengineState_CapturedState {
	if x != nil {
		return x.CapturedState
	}
	return nil
}

// A list of services (sorted by name) with intended or captured state.
type AppengineState_Service struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the service e.g. "default".
	Name             string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Versions         []*AppengineState_Service_Version       `protobuf:"bytes,2,rep,name=versions,proto3" json:"versions,omitempty"`
	TrafficSplitting AppengineState_Service_TrafficSplitting `protobuf:"varint,3,opt,name=traffic_splitting,json=trafficSplitting,proto3,enum=deploy.model.AppengineState_Service_TrafficSplitting" json:"traffic_splitting,omitempty"`
	// Traffic allocation as a map from version name to [0, 1000].
	TrafficAllocation map[string]int32 `protobuf:"bytes,4,rep,name=traffic_allocation,json=trafficAllocation,proto3" json:"traffic_allocation,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AppengineState_Service) Reset() {
	*x = AppengineState_Service{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState_Service) ProtoMessage() {}

func (x *AppengineState_Service) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState_Service.ProtoReflect.Descriptor instead.
func (*AppengineState_Service) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AppengineState_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppengineState_Service) GetVersions() []*AppengineState_Service_Version {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AppengineState_Service) GetTrafficSplitting() AppengineState_Service_TrafficSplitting {
	if x != nil {
		return x.TrafficSplitting
	}
	return AppengineState_Service_TRAFFIC_SPLITTING_UNSPECIFIED
}

func (x *AppengineState_Service) GetTrafficAllocation() map[string]int32 {
	if x != nil {
		return x.TrafficAllocation
	}
	return nil
}

// State which is defined in the config and which can't be easily captured
// using Cloud APIs.
//
// This field is populated in `intended_state`.
type AppengineState_IntendedState struct {
	state           protoimpl.MessageState                         `protogen:"open.v1"`
	DeployableYamls []*AppengineState_IntendedState_DeployableYaml `protobuf:"bytes,1,rep,name=deployable_yamls,json=deployableYamls,proto3" json:"deployable_yamls,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AppengineState_IntendedState) Reset() {
	*x = AppengineState_IntendedState{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState_IntendedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState_IntendedState) ProtoMessage() {}

func (x *AppengineState_IntendedState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState_IntendedState.ProtoReflect.Descriptor instead.
func (*AppengineState_IntendedState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 1}
}

func (x *AppengineState_IntendedState) GetDeployableYamls() []*AppengineState_IntendedState_DeployableYaml {
	if x != nil {
		return x.DeployableYamls
	}
	return nil
}

// State which is captured using Cloud APIs and which can't be defined
// in the config (at least not directly).
//
// This field is populated in `reported_state` and `actuated_state`.
//
// See https://cloud.google.com/appengine/docs/admin-api/reference/rpc/google.appengine.v1#google.appengine.v1.Application
type AppengineState_CapturedState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// E.g. "us-central".
	LocationId string `protobuf:"bytes,1,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	// Default service hostname.
	DefaultHostname string                                    `protobuf:"bytes,2,opt,name=default_hostname,json=defaultHostname,proto3" json:"default_hostname,omitempty"`
	DatabaseType    AppengineState_CapturedState_DatabaseType `protobuf:"varint,3,opt,name=database_type,json=databaseType,proto3,enum=deploy.model.AppengineState_CapturedState_DatabaseType" json:"database_type,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AppengineState_CapturedState) Reset() {
	*x = AppengineState_CapturedState{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState_CapturedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState_CapturedState) ProtoMessage() {}

func (x *AppengineState_CapturedState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState_CapturedState.ProtoReflect.Descriptor instead.
func (*AppengineState_CapturedState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 2}
}

func (x *AppengineState_CapturedState) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *AppengineState_CapturedState) GetDefaultHostname() string {
	if x != nil {
		return x.DefaultHostname
	}
	return ""
}

func (x *AppengineState_CapturedState) GetDatabaseType() AppengineState_CapturedState_DatabaseType {
	if x != nil {
		return x.DatabaseType
	}
	return AppengineState_CapturedState_DATABASE_TYPE_UNSPECIFIED
}

// A list of service versions sorted by name.
type AppengineState_Service_Version struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the version e.g. "11120-9f81d82".
	Name          string                                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IntendedState *AppengineState_Service_Version_IntendedState `protobuf:"bytes,2,opt,name=intended_state,json=intendedState,proto3" json:"intended_state,omitempty"`
	CapturedState *AppengineState_Service_Version_CapturedState `protobuf:"bytes,3,opt,name=captured_state,json=capturedState,proto3" json:"captured_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppengineState_Service_Version) Reset() {
	*x = AppengineState_Service_Version{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState_Service_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState_Service_Version) ProtoMessage() {}

func (x *AppengineState_Service_Version) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState_Service_Version.ProtoReflect.Descriptor instead.
func (*AppengineState_Service_Version) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *AppengineState_Service_Version) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppengineState_Service_Version) GetIntendedState() *AppengineState_Service_Version_IntendedState {
	if x != nil {
		return x.IntendedState
	}
	return nil
}

func (x *AppengineState_Service_Version) GetCapturedState() *AppengineState_Service_Version_CapturedState {
	if x != nil {
		return x.CapturedState
	}
	return nil
}

// State which is defined in the config and which can't be easily captured
// using Cloud APIs.
//
// This field is populated in `intended_state`.
type AppengineState_Service_Version_IntendedState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The artifact (GAE tarball) that should be running there.
	Artifact *ArtifactID `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// Path to the service YAML within the tarball.
	YamlPath string `protobuf:"bytes,2,opt,name=yaml_path,json=yamlPath,proto3" json:"yaml_path,omitempty"`
	// Vars passed to `gaedeploy` for substitution in the YAML.
	LuciVars      map[string]string `protobuf:"bytes,3,rep,name=luci_vars,json=luciVars,proto3" json:"luci_vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppengineState_Service_Version_IntendedState) Reset() {
	*x = AppengineState_Service_Version_IntendedState{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState_Service_Version_IntendedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState_Service_Version_IntendedState) ProtoMessage() {}

func (x *AppengineState_Service_Version_IntendedState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState_Service_Version_IntendedState.ProtoReflect.Descriptor instead.
func (*AppengineState_Service_Version_IntendedState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 0, 0, 0}
}

func (x *AppengineState_Service_Version_IntendedState) GetArtifact() *ArtifactID {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *AppengineState_Service_Version_IntendedState) GetYamlPath() string {
	if x != nil {
		return x.YamlPath
	}
	return ""
}

func (x *AppengineState_Service_Version_IntendedState) GetLuciVars() map[string]string {
	if x != nil {
		return x.LuciVars
	}
	return nil
}

// State which is captured using Cloud APIs and which can't be defined
// in the config (at least not directly).
//
// This field is populated in `reported_state` and `actuated_state`.
//
// See https://cloud.google.com/appengine/docs/admin-api/reference/rpc/google.appengine.v1#google.appengine.v1.Version
type AppengineState_Service_Version_CapturedState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// E.g. "F4".
	InstanceClass string `protobuf:"bytes,1,opt,name=instance_class,json=instanceClass,proto3" json:"instance_class,omitempty"`
	// E.g. "standard".
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// E.g. "go116"
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// Some runtimes have channels.
	RuntimeChannel string `protobuf:"bytes,4,opt,name=runtime_channel,json=runtimeChannel,proto3" json:"runtime_channel,omitempty"`
	// Some runtimes have API versions.
	RuntimeApiVersion string `protobuf:"bytes,5,opt,name=runtime_api_version,json=runtimeApiVersion,proto3" json:"runtime_api_version,omitempty"`
	// Email of who uploaded this version.
	CreatedBy string `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// When it was uploaded.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Serving URL of this version specifically.
	VersionUrl    string `protobuf:"bytes,8,opt,name=version_url,json=versionUrl,proto3" json:"version_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppengineState_Service_Version_CapturedState) Reset() {
	*x = AppengineState_Service_Version_CapturedState{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState_Service_Version_CapturedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState_Service_Version_CapturedState) ProtoMessage() {}

func (x *AppengineState_Service_Version_CapturedState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState_Service_Version_CapturedState.ProtoReflect.Descriptor instead.
func (*AppengineState_Service_Version_CapturedState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 0, 0, 1}
}

func (x *AppengineState_Service_Version_CapturedState) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *AppengineState_Service_Version_CapturedState) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *AppengineState_Service_Version_CapturedState) GetRuntime() string {
	if x != nil {
		return x.Runtime
	}
	return ""
}

func (x *AppengineState_Service_Version_CapturedState) GetRuntimeChannel() string {
	if x != nil {
		return x.RuntimeChannel
	}
	return ""
}

func (x *AppengineState_Service_Version_CapturedState) GetRuntimeApiVersion() string {
	if x != nil {
		return x.RuntimeApiVersion
	}
	return ""
}

func (x *AppengineState_Service_Version_CapturedState) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AppengineState_Service_Version_CapturedState) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *AppengineState_Service_Version_CapturedState) GetVersionUrl() string {
	if x != nil {
		return x.VersionUrl
	}
	return ""
}

// The list of deployable YAMLs (such as "cron.yaml").
type AppengineState_IntendedState_DeployableYaml struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The artifact (GAE tarball) with the YAML.
	Artifact *ArtifactID `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// Path to the YAML within the tarball.
	YamlPath      string `protobuf:"bytes,2,opt,name=yaml_path,json=yamlPath,proto3" json:"yaml_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppengineState_IntendedState_DeployableYaml) Reset() {
	*x = AppengineState_IntendedState_DeployableYaml{}
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppengineState_IntendedState_DeployableYaml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppengineState_IntendedState_DeployableYaml) ProtoMessage() {}

func (x *AppengineState_IntendedState_DeployableYaml) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppengineState_IntendedState_DeployableYaml.ProtoReflect.Descriptor instead.
func (*AppengineState_IntendedState_DeployableYaml) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *AppengineState_IntendedState_DeployableYaml) GetArtifact() *ArtifactID {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *AppengineState_IntendedState_DeployableYaml) GetYamlPath() string {
	if x != nil {
		return x.YamlPath
	}
	return ""
}

var File_go_chromium_org_luci_deploy_api_modelpb_asset_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDesc = string([]byte{
	0x0a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x70, 0x62, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x70, 0x62, 0x2f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x70, 0x62, 0x2f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x70, 0x62, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x05, 0x0a, 0x05, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3f, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x15, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc3, 0x04, 0x0a, 0x0c, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x70,
	0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x75, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x54, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x22, 0xab, 0x02, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x38, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x10, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x0e,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0xfe, 0x09, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x48, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x6a, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa7, 0x06, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x86, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x79, 0x61, 0x6d, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6d, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x65, 0x0a, 0x09, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x4c, 0x75, 0x63, 0x69, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6c, 0x75, 0x63, 0x69, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4c,
	0x75, 0x63, 0x69, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb8, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x1d, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02,
	0x49, 0x50, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03,
	0x1a, 0xda, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x59, 0x61, 0x6d, 0x6c, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x61,
	0x62, 0x6c, 0x65, 0x59, 0x61, 0x6d, 0x6c, 0x73, 0x1a, 0x63, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x59, 0x61, 0x6d, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x49, 0x44, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x61, 0x6d, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x1a, 0xb5, 0x02,
	0x0a, 0x0d, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x0c, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x03, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescData []byte
)

func file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDesc), len(file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDescData
}

var file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_goTypes = []any{
	(AppengineState_Service_TrafficSplitting)(0),   // 0: deploy.model.AppengineState.Service.TrafficSplitting
	(AppengineState_CapturedState_DatabaseType)(0), // 1: deploy.model.AppengineState.CapturedState.DatabaseType
	(*Asset)(nil),                          // 2: deploy.model.Asset
	(*AssetHistory)(nil),                   // 3: deploy.model.AssetHistory
	(*AssetConfig)(nil),                    // 4: deploy.model.AssetConfig
	(*AssetState)(nil),                     // 5: deploy.model.AssetState
	(*AppengineState)(nil),                 // 6: deploy.model.AppengineState
	(*AppengineState_Service)(nil),         // 7: deploy.model.AppengineState.Service
	(*AppengineState_IntendedState)(nil),   // 8: deploy.model.AppengineState.IntendedState
	(*AppengineState_CapturedState)(nil),   // 9: deploy.model.AppengineState.CapturedState
	(*AppengineState_Service_Version)(nil), // 10: deploy.model.AppengineState.Service.Version
	nil,                                    // 11: deploy.model.AppengineState.Service.TrafficAllocationEntry
	(*AppengineState_Service_Version_IntendedState)(nil), // 12: deploy.model.AppengineState.Service.Version.IntendedState
	(*AppengineState_Service_Version_CapturedState)(nil), // 13: deploy.model.AppengineState.Service.Version.CapturedState
	nil, // 14: deploy.model.AppengineState.Service.Version.IntendedState.LuciVarsEntry
	(*AppengineState_IntendedState_DeployableYaml)(nil), // 15: deploy.model.AppengineState.IntendedState.DeployableYaml
	(*Actuation)(nil),             // 16: deploy.model.Actuation
	(*ActuationDecision)(nil),     // 17: deploy.model.ActuationDecision
	(*status.Status)(nil),         // 18: google.rpc.Status
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
	(*Deployment)(nil),            // 20: deploy.model.Deployment
	(*ActuatorInfo)(nil),          // 21: deploy.model.ActuatorInfo
	(*ArtifactID)(nil),            // 22: deploy.model.ArtifactID
}
var file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_depIdxs = []int32{
	16, // 0: deploy.model.Asset.last_actuation:type_name -> deploy.model.Actuation
	17, // 1: deploy.model.Asset.last_decision:type_name -> deploy.model.ActuationDecision
	16, // 2: deploy.model.Asset.last_actuate_actuation:type_name -> deploy.model.Actuation
	17, // 3: deploy.model.Asset.last_actuate_decision:type_name -> deploy.model.ActuationDecision
	4,  // 4: deploy.model.Asset.config:type_name -> deploy.model.AssetConfig
	5,  // 5: deploy.model.Asset.intended_state:type_name -> deploy.model.AssetState
	5,  // 6: deploy.model.Asset.applied_state:type_name -> deploy.model.AssetState
	5,  // 7: deploy.model.Asset.reported_state:type_name -> deploy.model.AssetState
	5,  // 8: deploy.model.Asset.actuated_state:type_name -> deploy.model.AssetState
	18, // 9: deploy.model.Asset.post_actuation_status:type_name -> google.rpc.Status
	17, // 10: deploy.model.AssetHistory.decision:type_name -> deploy.model.ActuationDecision
	16, // 11: deploy.model.AssetHistory.actuation:type_name -> deploy.model.Actuation
	4,  // 12: deploy.model.AssetHistory.config:type_name -> deploy.model.AssetConfig
	5,  // 13: deploy.model.AssetHistory.intended_state:type_name -> deploy.model.AssetState
	5,  // 14: deploy.model.AssetHistory.reported_state:type_name -> deploy.model.AssetState
	5,  // 15: deploy.model.AssetHistory.last_applied_state:type_name -> deploy.model.AssetState
	5,  // 16: deploy.model.AssetHistory.post_actuation_state:type_name -> deploy.model.AssetState
	19, // 17: deploy.model.AssetState.timestamp:type_name -> google.protobuf.Timestamp
	20, // 18: deploy.model.AssetState.deployment:type_name -> deploy.model.Deployment
	21, // 19: deploy.model.AssetState.actuator:type_name -> deploy.model.ActuatorInfo
	18, // 20: deploy.model.AssetState.status:type_name -> google.rpc.Status
	6,  // 21: deploy.model.AssetState.appengine:type_name -> deploy.model.AppengineState
	7,  // 22: deploy.model.AppengineState.services:type_name -> deploy.model.AppengineState.Service
	8,  // 23: deploy.model.AppengineState.intended_state:type_name -> deploy.model.AppengineState.IntendedState
	9,  // 24: deploy.model.AppengineState.captured_state:type_name -> deploy.model.AppengineState.CapturedState
	10, // 25: deploy.model.AppengineState.Service.versions:type_name -> deploy.model.AppengineState.Service.Version
	0,  // 26: deploy.model.AppengineState.Service.traffic_splitting:type_name -> deploy.model.AppengineState.Service.TrafficSplitting
	11, // 27: deploy.model.AppengineState.Service.traffic_allocation:type_name -> deploy.model.AppengineState.Service.TrafficAllocationEntry
	15, // 28: deploy.model.AppengineState.IntendedState.deployable_yamls:type_name -> deploy.model.AppengineState.IntendedState.DeployableYaml
	1,  // 29: deploy.model.AppengineState.CapturedState.database_type:type_name -> deploy.model.AppengineState.CapturedState.DatabaseType
	12, // 30: deploy.model.AppengineState.Service.Version.intended_state:type_name -> deploy.model.AppengineState.Service.Version.IntendedState
	13, // 31: deploy.model.AppengineState.Service.Version.captured_state:type_name -> deploy.model.AppengineState.Service.Version.CapturedState
	22, // 32: deploy.model.AppengineState.Service.Version.IntendedState.artifact:type_name -> deploy.model.ArtifactID
	14, // 33: deploy.model.AppengineState.Service.Version.IntendedState.luci_vars:type_name -> deploy.model.AppengineState.Service.Version.IntendedState.LuciVarsEntry
	19, // 34: deploy.model.AppengineState.Service.Version.CapturedState.create_time:type_name -> google.protobuf.Timestamp
	22, // 35: deploy.model.AppengineState.IntendedState.DeployableYaml.artifact:type_name -> deploy.model.ArtifactID
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_init() }
func file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_init() {
	if File_go_chromium_org_luci_deploy_api_modelpb_asset_proto != nil {
		return
	}
	file_go_chromium_org_luci_deploy_api_modelpb_actuation_proto_init()
	file_go_chromium_org_luci_deploy_api_modelpb_artifact_proto_init()
	file_go_chromium_org_luci_deploy_api_modelpb_deployment_proto_init()
	file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes[3].OneofWrappers = []any{
		(*AssetState_Appengine)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDesc), len(file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_deploy_api_modelpb_asset_proto = out.File
	file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_goTypes = nil
	file_go_chromium_org_luci_deploy_api_modelpb_asset_proto_depIdxs = nil
}
