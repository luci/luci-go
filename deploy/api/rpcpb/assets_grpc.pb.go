// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: go.chromium.org/luci/deploy/api/rpcpb/assets.proto

package rpcpb

import (
	context "context"
	modelpb "go.chromium.org/luci/deploy/api/modelpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Assets_GetAsset_FullMethodName         = "/deploy.service.Assets/GetAsset"
	Assets_ListAssets_FullMethodName       = "/deploy.service.Assets/ListAssets"
	Assets_ListAssetHistory_FullMethodName = "/deploy.service.Assets/ListAssetHistory"
)

// AssetsClient is the client API for Assets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Assets service allows to view and interact with Assets.
type AssetsClient interface {
	// GetAsset returns an Asset given its ID.
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*modelpb.Asset, error)
	// ListAssets lists assets matching specified filters (if any).
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	// ListAssetHistory fetches an asset and its actuation history.
	ListAssetHistory(ctx context.Context, in *ListAssetHistoryRequest, opts ...grpc.CallOption) (*ListAssetHistoryResponse, error)
}

type assetsClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsClient(cc grpc.ClientConnInterface) AssetsClient {
	return &assetsClient{cc}
}

func (c *assetsClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*modelpb.Asset, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(modelpb.Asset)
	err := c.cc.Invoke(ctx, Assets_GetAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, Assets_ListAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsClient) ListAssetHistory(ctx context.Context, in *ListAssetHistoryRequest, opts ...grpc.CallOption) (*ListAssetHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssetHistoryResponse)
	err := c.cc.Invoke(ctx, Assets_ListAssetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServer is the server API for Assets service.
// All implementations must embed UnimplementedAssetsServer
// for forward compatibility.
//
// Assets service allows to view and interact with Assets.
type AssetsServer interface {
	// GetAsset returns an Asset given its ID.
	GetAsset(context.Context, *GetAssetRequest) (*modelpb.Asset, error)
	// ListAssets lists assets matching specified filters (if any).
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	// ListAssetHistory fetches an asset and its actuation history.
	ListAssetHistory(context.Context, *ListAssetHistoryRequest) (*ListAssetHistoryResponse, error)
	mustEmbedUnimplementedAssetsServer()
}

// UnimplementedAssetsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetsServer struct{}

func (UnimplementedAssetsServer) GetAsset(context.Context, *GetAssetRequest) (*modelpb.Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetsServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedAssetsServer) ListAssetHistory(context.Context, *ListAssetHistoryRequest) (*ListAssetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetHistory not implemented")
}
func (UnimplementedAssetsServer) mustEmbedUnimplementedAssetsServer() {}
func (UnimplementedAssetsServer) testEmbeddedByValue()                {}

// UnsafeAssetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServer will
// result in compilation errors.
type UnsafeAssetsServer interface {
	mustEmbedUnimplementedAssetsServer()
}

func RegisterAssetsServer(s grpc.ServiceRegistrar, srv AssetsServer) {
	// If the following call pancis, it indicates UnimplementedAssetsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Assets_ServiceDesc, srv)
}

func _Assets_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assets_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assets_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assets_ListAssetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServer).ListAssetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Assets_ListAssetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServer).ListAssetHistory(ctx, req.(*ListAssetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Assets_ServiceDesc is the grpc.ServiceDesc for Assets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Assets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deploy.service.Assets",
	HandlerType: (*AssetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAsset",
			Handler:    _Assets_GetAsset_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _Assets_ListAssets_Handler,
		},
		{
			MethodName: "ListAssetHistory",
			Handler:    _Assets_ListAssetHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/deploy/api/rpcpb/assets.proto",
}
