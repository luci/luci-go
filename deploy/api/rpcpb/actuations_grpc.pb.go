// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: go.chromium.org/luci/deploy/api/rpcpb/actuations.proto

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Actuations_BeginActuation_FullMethodName = "/deploy.service.Actuations/BeginActuation"
	Actuations_EndActuation_FullMethodName   = "/deploy.service.Actuations/EndActuation"
)

// ActuationsClient is the client API for Actuations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Actuations service is used exclusively by the actuator agents.
//
// For each deployment the actuator first calls BeginActuation to report the
// state of assets there and to get a decision from the backend if it should
// perform the actuation.
//
// Once the actuation is complete (successfully or not), the actuator calls
// EndActuation to notify the backend about the results.
type ActuationsClient interface {
	// Called by the actuator before it starts updating a deployment.
	//
	// The request contains the intended and current states of all assets in the
	// deployment. For each asset the backend responds if it should be actuated
	// or skipped.
	BeginActuation(ctx context.Context, in *BeginActuationRequest, opts ...grpc.CallOption) (*BeginActuationResponse, error)
	// Called by the actuator after it updated all assets it was asked to actuate.
	//
	// If there were no assets that needed actuation, this call is skipped.
	EndActuation(ctx context.Context, in *EndActuationRequest, opts ...grpc.CallOption) (*EndActuationResponse, error)
}

type actuationsClient struct {
	cc grpc.ClientConnInterface
}

func NewActuationsClient(cc grpc.ClientConnInterface) ActuationsClient {
	return &actuationsClient{cc}
}

func (c *actuationsClient) BeginActuation(ctx context.Context, in *BeginActuationRequest, opts ...grpc.CallOption) (*BeginActuationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeginActuationResponse)
	err := c.cc.Invoke(ctx, Actuations_BeginActuation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actuationsClient) EndActuation(ctx context.Context, in *EndActuationRequest, opts ...grpc.CallOption) (*EndActuationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndActuationResponse)
	err := c.cc.Invoke(ctx, Actuations_EndActuation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActuationsServer is the server API for Actuations service.
// All implementations must embed UnimplementedActuationsServer
// for forward compatibility.
//
// Actuations service is used exclusively by the actuator agents.
//
// For each deployment the actuator first calls BeginActuation to report the
// state of assets there and to get a decision from the backend if it should
// perform the actuation.
//
// Once the actuation is complete (successfully or not), the actuator calls
// EndActuation to notify the backend about the results.
type ActuationsServer interface {
	// Called by the actuator before it starts updating a deployment.
	//
	// The request contains the intended and current states of all assets in the
	// deployment. For each asset the backend responds if it should be actuated
	// or skipped.
	BeginActuation(context.Context, *BeginActuationRequest) (*BeginActuationResponse, error)
	// Called by the actuator after it updated all assets it was asked to actuate.
	//
	// If there were no assets that needed actuation, this call is skipped.
	EndActuation(context.Context, *EndActuationRequest) (*EndActuationResponse, error)
	mustEmbedUnimplementedActuationsServer()
}

// UnimplementedActuationsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActuationsServer struct{}

func (UnimplementedActuationsServer) BeginActuation(context.Context, *BeginActuationRequest) (*BeginActuationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginActuation not implemented")
}
func (UnimplementedActuationsServer) EndActuation(context.Context, *EndActuationRequest) (*EndActuationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndActuation not implemented")
}
func (UnimplementedActuationsServer) mustEmbedUnimplementedActuationsServer() {}
func (UnimplementedActuationsServer) testEmbeddedByValue()                    {}

// UnsafeActuationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActuationsServer will
// result in compilation errors.
type UnsafeActuationsServer interface {
	mustEmbedUnimplementedActuationsServer()
}

func RegisterActuationsServer(s grpc.ServiceRegistrar, srv ActuationsServer) {
	// If the following call pancis, it indicates UnimplementedActuationsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Actuations_ServiceDesc, srv)
}

func _Actuations_BeginActuation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginActuationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActuationsServer).BeginActuation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actuations_BeginActuation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActuationsServer).BeginActuation(ctx, req.(*BeginActuationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actuations_EndActuation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndActuationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActuationsServer).EndActuation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actuations_EndActuation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActuationsServer).EndActuation(ctx, req.(*EndActuationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Actuations_ServiceDesc is the grpc.ServiceDesc for Actuations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actuations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deploy.service.Actuations",
	HandlerType: (*ActuationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginActuation",
			Handler:    _Actuations_BeginActuation_Handler,
		},
		{
			MethodName: "EndActuation",
			Handler:    _Actuations_EndActuation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/deploy/api/rpcpb/actuations.proto",
}
