// Copyright 2015 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/logdog/api/logpb/log.proto

package logpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A log stream type.
type StreamType int32

const (
	StreamType_TEXT     StreamType = 0
	StreamType_BINARY   StreamType = 1
	StreamType_DATAGRAM StreamType = 2
)

// Enum value maps for StreamType.
var (
	StreamType_name = map[int32]string{
		0: "TEXT",
		1: "BINARY",
		2: "DATAGRAM",
	}
	StreamType_value = map[string]int32{
		"TEXT":     0,
		"BINARY":   1,
		"DATAGRAM": 2,
	}
)

func (x StreamType) Enum() *StreamType {
	p := new(StreamType)
	*p = x
	return p
}

func (x StreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_enumTypes[0].Descriptor()
}

func (StreamType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_logdog_api_logpb_log_proto_enumTypes[0]
}

func (x StreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamType.Descriptor instead.
func (StreamType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{0}
}

// *
// Log stream descriptor data. This is the full set of information that
// describes a logging stream.
type LogStreamDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The stream's prefix (required).
	//
	// Logs originating from the same Butler instance will share a Prefix.
	//
	// A valid prefix value is a StreamName described in:
	// https://go.chromium.org/luci/logdog/common/types#StreamName
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The log stream's name (required).
	//
	// This is used to uniquely identify a log stream within the scope of its
	// prefix.
	//
	// A valid name value is a StreamName described in:
	// https://go.chromium.org/luci/logdog/common/types#StreamName
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The log stream's content type (required).
	StreamType StreamType `protobuf:"varint,3,opt,name=stream_type,json=streamType,proto3,enum=logpb.StreamType" json:"stream_type,omitempty"`
	// The stream's content type (required).
	//
	// This must be an HTTP Content-Type value. Begins with MIME media type; may
	// include a charset directive. It is made available to LogDog clients when
	// querying stream metadata. It will also be applied to archived binary log
	// data.
	ContentType string `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The log stream's base timestamp (required).
	//
	// This notes the start time of the log stream. All LogEntries express their
	// timestamp as microsecond offsets from this field.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Tag is an arbitrary key/value tag associated with this log stream.
	//
	// LogDog clients can query for log streams based on tag values.
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If set, the stream will be joined together during archival to recreate the
	// original stream and made available at <prefix>/+/<name>.ext.
	BinaryFileExt string `protobuf:"bytes,7,opt,name=binary_file_ext,json=binaryFileExt,proto3" json:"binary_file_ext,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogStreamDescriptor) Reset() {
	*x = LogStreamDescriptor{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogStreamDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStreamDescriptor) ProtoMessage() {}

func (x *LogStreamDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStreamDescriptor.ProtoReflect.Descriptor instead.
func (*LogStreamDescriptor) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogStreamDescriptor) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *LogStreamDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogStreamDescriptor) GetStreamType() StreamType {
	if x != nil {
		return x.StreamType
	}
	return StreamType_TEXT
}

func (x *LogStreamDescriptor) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *LogStreamDescriptor) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LogStreamDescriptor) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *LogStreamDescriptor) GetBinaryFileExt() string {
	if x != nil {
		return x.BinaryFileExt
	}
	return ""
}

// Text stream content.
type Text struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lines         []*Text_Line           `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Text) Reset() {
	*x = Text{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text) ProtoMessage() {}

func (x *Text) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text.ProtoReflect.Descriptor instead.
func (*Text) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{1}
}

func (x *Text) GetLines() []*Text_Line {
	if x != nil {
		return x.Lines
	}
	return nil
}

// Binary stream content.
type Binary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The binary stream's data.
	Data          []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Binary) Reset() {
	*x = Binary{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binary.ProtoReflect.Descriptor instead.
func (*Binary) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{2}
}

func (x *Binary) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Datagram stream content type.
type Datagram struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This datagram data.
	Data          []byte            `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Partial       *Datagram_Partial `protobuf:"bytes,2,opt,name=partial,proto3" json:"partial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Datagram) Reset() {
	*x = Datagram{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datagram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datagram) ProtoMessage() {}

func (x *Datagram) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datagram.ProtoReflect.Descriptor instead.
func (*Datagram) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{3}
}

func (x *Datagram) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Datagram) GetPartial() *Datagram_Partial {
	if x != nil {
		return x.Partial
	}
	return nil
}

// *
// An individual log entry.
//
// This contains the superset of transmissible log data. Its content fields
// should be interpreted in the context of the log stream's content type.
type LogEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The stream time offset for this content.
	//
	// This offset is added to the log stream's base "timestamp" to resolve the
	// timestamp for this specific Content.
	TimeOffset *durationpb.Duration `protobuf:"bytes,1,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
	// The message index within the Prefix (required).
	//
	// This is value is unique to this LogEntry across the entire set of entries
	// sharing the stream's Prefix. It is used to designate unambiguous log
	// ordering.
	PrefixIndex uint64 `protobuf:"varint,2,opt,name=prefix_index,json=prefixIndex,proto3" json:"prefix_index,omitempty"`
	// The message index within its Stream (required).
	//
	// This value is unique across all entries sharing the same Prefix and Stream
	// Name. It is used to designate unambiguous log ordering within the stream.
	StreamIndex uint64 `protobuf:"varint,3,opt,name=stream_index,json=streamIndex,proto3" json:"stream_index,omitempty"`
	// The sequence number of the first content entry in this LogEntry.
	//
	// Text: This is the line index of the first included line. Line indices begin
	//
	//	at zero.
	//
	// Binary: This is the byte offset of the first byte in the included data.
	// Datagram: This is the index of the datagram. The first datagram has index
	//
	//	zero.
	Sequence uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The content of the message. The field that is populated here must
	// match the log's `stream_type`.
	//
	// Types that are valid to be assigned to Content:
	//
	//	*LogEntry_Text
	//	*LogEntry_Binary
	//	*LogEntry_Datagram
	Content       isLogEntry_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{4}
}

func (x *LogEntry) GetTimeOffset() *durationpb.Duration {
	if x != nil {
		return x.TimeOffset
	}
	return nil
}

func (x *LogEntry) GetPrefixIndex() uint64 {
	if x != nil {
		return x.PrefixIndex
	}
	return 0
}

func (x *LogEntry) GetStreamIndex() uint64 {
	if x != nil {
		return x.StreamIndex
	}
	return 0
}

func (x *LogEntry) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *LogEntry) GetContent() isLogEntry_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *LogEntry) GetText() *Text {
	if x != nil {
		if x, ok := x.Content.(*LogEntry_Text); ok {
			return x.Text
		}
	}
	return nil
}

func (x *LogEntry) GetBinary() *Binary {
	if x != nil {
		if x, ok := x.Content.(*LogEntry_Binary); ok {
			return x.Binary
		}
	}
	return nil
}

func (x *LogEntry) GetDatagram() *Datagram {
	if x != nil {
		if x, ok := x.Content.(*LogEntry_Datagram); ok {
			return x.Datagram
		}
	}
	return nil
}

type isLogEntry_Content interface {
	isLogEntry_Content()
}

type LogEntry_Text struct {
	// Text Stream: Lines of log text.
	Text *Text `protobuf:"bytes,10,opt,name=text,proto3,oneof"`
}

type LogEntry_Binary struct {
	// Binary stream: data segment.
	Binary *Binary `protobuf:"bytes,11,opt,name=binary,proto3,oneof"`
}

type LogEntry_Datagram struct {
	// Datagram stream: Datagrams.
	Datagram *Datagram `protobuf:"bytes,12,opt,name=datagram,proto3,oneof"`
}

func (*LogEntry_Text) isLogEntry_Content() {}

func (*LogEntry_Binary) isLogEntry_Content() {}

func (*LogEntry_Datagram) isLogEntry_Content() {}

// *
// LogIndex is an index into an at-rest log storage.
//
// The log stream and log index are generated by the Archivist during archival.
//
// An archived log stream is a series of contiguous LogEntry frames. The index
// maps a log's logical logation in its stream, prefix, and timeline to its
// frame's binary offset in the archived log stream blob.
type LogIndex struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LogStreamDescriptor for this log stream (required).
	//
	// The index stores the stream's LogStreamDescriptor so that a client can
	// know the full set of log metadata by downloading its index.
	Desc *LogStreamDescriptor `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	// A series of ascending-ordered Entry messages representing snapshots of an
	// archived log stream.
	//
	// Within this set of Entry messages, the "offset", "prefix_index",
	// "stream_index", and "time_offset" fields will be ascending.
	//
	// The frequency of Entry messages is not defined; it is up to the Archivist
	// process to choose a frequency.
	Entries []*LogIndex_Entry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	// *
	// The last prefix index in the log stream.
	//
	// This is optional. If zero, there is either no information about the last
	// prefix index, or there are zero entries in the prefix.
	LastPrefixIndex uint64 `protobuf:"varint,3,opt,name=last_prefix_index,json=lastPrefixIndex,proto3" json:"last_prefix_index,omitempty"`
	// *
	// The last stream index in the log stream.
	//
	// This is optional. If zero, there is either no information about the last
	// stream index, or there are zero entries in the stream.
	LastStreamIndex uint64 `protobuf:"varint,4,opt,name=last_stream_index,json=lastStreamIndex,proto3" json:"last_stream_index,omitempty"`
	// *
	// The number of log entries in the stream.
	//
	// This is optional. If zero, there is either no information about the number
	// of log entries, or there are zero entries in the stream.
	LogEntryCount uint64 `protobuf:"varint,5,opt,name=log_entry_count,json=logEntryCount,proto3" json:"log_entry_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogIndex) Reset() {
	*x = LogIndex{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogIndex) ProtoMessage() {}

func (x *LogIndex) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogIndex.ProtoReflect.Descriptor instead.
func (*LogIndex) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{5}
}

func (x *LogIndex) GetDesc() *LogStreamDescriptor {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *LogIndex) GetEntries() []*LogIndex_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *LogIndex) GetLastPrefixIndex() uint64 {
	if x != nil {
		return x.LastPrefixIndex
	}
	return 0
}

func (x *LogIndex) GetLastStreamIndex() uint64 {
	if x != nil {
		return x.LastStreamIndex
	}
	return 0
}

func (x *LogIndex) GetLogEntryCount() uint64 {
	if x != nil {
		return x.LogEntryCount
	}
	return 0
}

// Contiguous text lines and their delimiters.
//
// The array of lines follows the following pattern:
//   - 0 or 1 completion lines completing the last LogEntry's Text (i.e. with
//     a delimiter but not itself the full line)
//   - any number of complete lines (i.e. with delimiter, each its own line)
//   - 0 or 1 partial lines
type Text_Line struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The line's text content, not including its delimiter.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The line's delimiter string.
	//
	// If this is an empty string, this line is continued in the next sequential
	// line, and the line's sequence number does not advance.
	Delimiter     string `protobuf:"bytes,2,opt,name=delimiter,proto3" json:"delimiter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Text_Line) Reset() {
	*x = Text_Line{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Text_Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Text_Line) ProtoMessage() {}

func (x *Text_Line) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Text_Line.ProtoReflect.Descriptor instead.
func (*Text_Line) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Text_Line) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Text_Line) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

// If this is not a partial datagram, this field will include reassembly and
// state details for the full datagram.
type Datagram_Partial struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The index, starting with zero, of this datagram fragment in the full
	// datagram.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The size of the full datagram
	Size uint64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// If true, this is the last partial datagram in the overall datagram.
	Last          bool `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Datagram_Partial) Reset() {
	*x = Datagram_Partial{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Datagram_Partial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Datagram_Partial) ProtoMessage() {}

func (x *Datagram_Partial) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Datagram_Partial.ProtoReflect.Descriptor instead.
func (*Datagram_Partial) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Datagram_Partial) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Datagram_Partial) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Datagram_Partial) GetLast() bool {
	if x != nil {
		return x.Last
	}
	return false
}

// Entry is a single index entry.
//
// The index is composed of a series of entries, each corresponding to a
// sequential snapshot of of the log stream.
type LogIndex_Entry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The byte offset in the emitted log stream of the RecordIO entry for the
	// LogEntry corresponding to this Entry.
	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// The sequence number of the first content entry.
	//
	// Text: This is the line index of the first included line. Line indices
	//
	//	begin at zero.
	//
	// Binary: This is the byte offset of the first byte in the included data.
	// Datagram: This is the index of the datagram. The first datagram has index
	//
	//	zero.
	Sequence uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The log index that this entry describes (required).
	//
	// This is used by clients to identify a specific LogEntry within a set of
	// streams sharing a Prefix.
	PrefixIndex uint64 `protobuf:"varint,3,opt,name=prefix_index,json=prefixIndex,proto3" json:"prefix_index,omitempty"`
	// The time offset of this log entry (required).
	//
	// This is used by clients to identify a specific LogEntry within a log
	// stream.
	StreamIndex uint64 `protobuf:"varint,4,opt,name=stream_index,json=streamIndex,proto3" json:"stream_index,omitempty"`
	// The time offset of this log entry, in microseconds.
	//
	// This is added to the descriptor's "timestamp" field to identify the
	// specific timestamp of this log. It is used by clients to identify a
	// specific LogEntry by time.
	TimeOffset    *durationpb.Duration `protobuf:"bytes,5,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogIndex_Entry) Reset() {
	*x = LogIndex_Entry{}
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogIndex_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogIndex_Entry) ProtoMessage() {}

func (x *LogIndex_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogIndex_Entry.ProtoReflect.Descriptor instead.
func (*LogIndex_Entry) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP(), []int{5, 0}
}

func (x *LogIndex_Entry) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LogIndex_Entry) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *LogIndex_Entry) GetPrefixIndex() uint64 {
	if x != nil {
		return x.PrefixIndex
	}
	return 0
}

func (x *LogIndex_Entry) GetStreamIndex() uint64 {
	if x != nil {
		return x.StreamIndex
	}
	return 0
}

func (x *LogIndex_Entry) GetTimeOffset() *durationpb.Duration {
	if x != nil {
		return x.TimeOffset
	}
	return nil
}

var File_go_chromium_org_luci_logdog_api_logpb_log_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDesc = string([]byte{
	0x0a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x6f, 0x67, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x13, 0x4c, 0x6f,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x6f, 0x67, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x04, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x26, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x9a, 0x01, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x6f,
	0x67, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x47, 0x0a,
	0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0xae, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2e, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2d, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xab, 0x03, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x67, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xbd, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x2a, 0x30, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54,
	0x41, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x02, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x6c, 0x6f, 0x67, 0x64, 0x6f, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x6f, 0x67, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescData []byte
)

func file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDesc), len(file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDescData
}

var file_go_chromium_org_luci_logdog_api_logpb_log_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_go_chromium_org_luci_logdog_api_logpb_log_proto_goTypes = []any{
	(StreamType)(0),               // 0: logpb.StreamType
	(*LogStreamDescriptor)(nil),   // 1: logpb.LogStreamDescriptor
	(*Text)(nil),                  // 2: logpb.Text
	(*Binary)(nil),                // 3: logpb.Binary
	(*Datagram)(nil),              // 4: logpb.Datagram
	(*LogEntry)(nil),              // 5: logpb.LogEntry
	(*LogIndex)(nil),              // 6: logpb.LogIndex
	nil,                           // 7: logpb.LogStreamDescriptor.TagsEntry
	(*Text_Line)(nil),             // 8: logpb.Text.Line
	(*Datagram_Partial)(nil),      // 9: logpb.Datagram.Partial
	(*LogIndex_Entry)(nil),        // 10: logpb.LogIndex.Entry
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 12: google.protobuf.Duration
}
var file_go_chromium_org_luci_logdog_api_logpb_log_proto_depIdxs = []int32{
	0,  // 0: logpb.LogStreamDescriptor.stream_type:type_name -> logpb.StreamType
	11, // 1: logpb.LogStreamDescriptor.timestamp:type_name -> google.protobuf.Timestamp
	7,  // 2: logpb.LogStreamDescriptor.tags:type_name -> logpb.LogStreamDescriptor.TagsEntry
	8,  // 3: logpb.Text.lines:type_name -> logpb.Text.Line
	9,  // 4: logpb.Datagram.partial:type_name -> logpb.Datagram.Partial
	12, // 5: logpb.LogEntry.time_offset:type_name -> google.protobuf.Duration
	2,  // 6: logpb.LogEntry.text:type_name -> logpb.Text
	3,  // 7: logpb.LogEntry.binary:type_name -> logpb.Binary
	4,  // 8: logpb.LogEntry.datagram:type_name -> logpb.Datagram
	1,  // 9: logpb.LogIndex.desc:type_name -> logpb.LogStreamDescriptor
	10, // 10: logpb.LogIndex.entries:type_name -> logpb.LogIndex.Entry
	12, // 11: logpb.LogIndex.Entry.time_offset:type_name -> google.protobuf.Duration
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_logdog_api_logpb_log_proto_init() }
func file_go_chromium_org_luci_logdog_api_logpb_log_proto_init() {
	if File_go_chromium_org_luci_logdog_api_logpb_log_proto != nil {
		return
	}
	file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes[4].OneofWrappers = []any{
		(*LogEntry_Text)(nil),
		(*LogEntry_Binary)(nil),
		(*LogEntry_Datagram)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDesc), len(file_go_chromium_org_luci_logdog_api_logpb_log_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_logdog_api_logpb_log_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_logdog_api_logpb_log_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_logdog_api_logpb_log_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_logdog_api_logpb_log_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_logdog_api_logpb_log_proto = out.File
	file_go_chromium_org_luci_logdog_api_logpb_log_proto_goTypes = nil
	file_go_chromium_org_luci_logdog_api_logpb_log_proto_depIdxs = nil
}
