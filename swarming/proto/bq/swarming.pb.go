// Copyright 2024 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/swarming/proto/bq/swarming.proto

package bqpb

import (
	api_v2 "go.chromium.org/luci/swarming/proto/api_v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BotEventType defines the reason why BotEvent was created.
type BotEventType int32

const (
	// Invalid bot event type, do not use.
	BotEventType_BOT_EVENT_TYPE_UNSPECIFIED BotEventType = 0
	// Bot connected and started a new session.
	//
	// BotEvent.event_msg shall not be set.
	BotEventType_BOT_NEW_SESSION BotEventType = 1
	// Unused.
	BotEventType_BOT_INTERNAL_FAILURE BotEventType = 2
	// Bot had an hook error to report to the server. This shall send a report to
	// the administrator of the instance.
	//
	// BotEvent.event_msg shall contain the error message.
	BotEventType_BOT_HOOK_ERROR BotEventType = 3
	// Bot hook logged information. The bot hooks can log locally to the local log
	// file, which itself can be streamed out of band. For special notifications
	// that are worth notifying the administrator, this event can be used to raise
	// these. Due to the cost of doing an RPC just for this, this should be used
	// sparingly; vs local logging.
	//
	// BotEvent.event_msg shall contain the log entry.
	BotEventType_BOT_HOOK_LOG BotEventType = 4
	// Bot initiated a host reboot. An example is a bot hook requesting to reboot
	// the host after a task failure.
	//
	// BotEvent.event_msg shall contain the reason for rebooting the host, if any.
	BotEventType_BOT_REBOOTING_HOST BotEventType = 5
	// Bot is shutting down. It may be restarting for an update.
	//
	// BotEvent.event_msg shall contain the reason.
	BotEventType_BOT_SHUTDOWN BotEventType = 6
	// Unused.
	BotEventType_BOT_DELETED BotEventType = 7
	// Bot is missing. There have been no communication from the bot for longer
	// than deadline configured on server side.
	BotEventType_BOT_MISSING BotEventType = 8
	// The server instructs the bot to stay idle. This is when there is no task
	// pending for this bot. Will only be stored when there are other state
	// changes.
	//
	// BotEvent.event_msg shall not be set.
	BotEventType_INSTRUCT_IDLE BotEventType = 10
	// The server instructs the bot to start a task.
	//
	// BotEvent.event_msg shall not be set. BotEvent.bot.current_task_id shall
	// contain the task ID.
	BotEventType_INSTRUCT_START_TASK BotEventType = 11
	// The server instructs the bot to restart without self-updating. This is to
	// initiate a new bot session, with potentially new bot hooks.
	//
	// BotEvent.event_msg can be set to the rationale, if any.
	BotEventType_INSTRUCT_RESTART_BOT BotEventType = 12
	// The server instructs the bot to self-update.
	//
	// BotEvent.event_msg shall be set to the version to update to.
	// BotEvent.bot.info.version contains the bot's previous version.
	BotEventType_INSTRUCT_UPDATE_BOT_CODE BotEventType = 13
	// The server instructs the bot to stop its process.
	//
	// BotEvent.event_msg shall not be set. BotEvent.bot.current_task_id shall
	// contain the task ID.
	BotEventType_INSTRUCT_TERMINATE_BOT BotEventType = 14
	// Bot completed a task.
	//
	// BotEvent.event_msg shall not be set. BotEvent.bot.current_task_id shall
	// contain the task ID.
	BotEventType_TASK_COMPLETED BotEventType = 20
	// Bot had an internal failure (RAN_INTERNAL_FAILURE) to report to the server
	// while processing a task. This shall send a report to the administrator of
	// the instance and service author.
	//
	// This event shall not be filed in case of a MISSING_INPUTS.
	//
	// BotEvent.event_msg shall contain the error message.
	// BotEvent.bot.current_task_id shall contain the task ID.
	BotEventType_TASK_INTERNAL_FAILURE BotEventType = 21
	// Bot is forcibly killing the task.
	//
	// This can be induced by a server side request (KILLED, PREEMPTED) or by a
	// bot side decision (TIMED_OUT, TIMED_OUT_SILENCE).
	//
	// BotEvent.event_msg shall not be set. BotEvent.bot.current_task_id shall
	// contain the task ID.
	BotEventType_TASK_KILLED BotEventType = 22
)

// Enum value maps for BotEventType.
var (
	BotEventType_name = map[int32]string{
		0:  "BOT_EVENT_TYPE_UNSPECIFIED",
		1:  "BOT_NEW_SESSION",
		2:  "BOT_INTERNAL_FAILURE",
		3:  "BOT_HOOK_ERROR",
		4:  "BOT_HOOK_LOG",
		5:  "BOT_REBOOTING_HOST",
		6:  "BOT_SHUTDOWN",
		7:  "BOT_DELETED",
		8:  "BOT_MISSING",
		10: "INSTRUCT_IDLE",
		11: "INSTRUCT_START_TASK",
		12: "INSTRUCT_RESTART_BOT",
		13: "INSTRUCT_UPDATE_BOT_CODE",
		14: "INSTRUCT_TERMINATE_BOT",
		20: "TASK_COMPLETED",
		21: "TASK_INTERNAL_FAILURE",
		22: "TASK_KILLED",
	}
	BotEventType_value = map[string]int32{
		"BOT_EVENT_TYPE_UNSPECIFIED": 0,
		"BOT_NEW_SESSION":            1,
		"BOT_INTERNAL_FAILURE":       2,
		"BOT_HOOK_ERROR":             3,
		"BOT_HOOK_LOG":               4,
		"BOT_REBOOTING_HOST":         5,
		"BOT_SHUTDOWN":               6,
		"BOT_DELETED":                7,
		"BOT_MISSING":                8,
		"INSTRUCT_IDLE":              10,
		"INSTRUCT_START_TASK":        11,
		"INSTRUCT_RESTART_BOT":       12,
		"INSTRUCT_UPDATE_BOT_CODE":   13,
		"INSTRUCT_TERMINATE_BOT":     14,
		"TASK_COMPLETED":             20,
		"TASK_INTERNAL_FAILURE":      21,
		"TASK_KILLED":                22,
	}
)

func (x BotEventType) Enum() *BotEventType {
	p := new(BotEventType)
	*p = x
	return p
}

func (x BotEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[0].Descriptor()
}

func (BotEventType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[0]
}

func (x BotEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotEventType.Descriptor instead.
func (BotEventType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{0}
}

// BotStatusType is one of the states the bot can be in.
//
// A bot status implies being in this status for a certain amount of time, for
// example a hook running for N seconds, contrary to BotEventType which is about
// an event that doesn't have an inherent duration.
//
// Some values are more important than others. For example if a bot is now
// MISSING but used to be QUARANTINED, the value is still MISSING.
type BotStatusType int32

const (
	// Invalid bot status, do not use.
	BotStatusType_BOT_STATUS_UNSPECIFIED BotStatusType = 0
	// The server detected that the bot is not pinging the server anymore. Unlike
	// other statuses, this value is set after a timeout.
	//
	// Bot.status_msg shall not be set.
	BotStatusType_MISSING BotStatusType = 1
	// Unused.
	BotStatusType_QUARANTINED_BY_SERVER BotStatusType = 2
	// Bot self-reported as unhealthy.
	//
	// What is currently called as 'quarantined' in the old API.
	//
	// Bot.status_msg shall include the bot provided rationale.
	BotStatusType_QUARANTINED_BY_BOT BotStatusType = 3
	// Bot self-reported as unable to run tasks due to externally induced
	// overhead.
	//
	// Examples include:
	//   - The temperature of the DUT (Device Under Test) is too high, and the bot
	//     is waiting for cool down
	//   - host is doing self-cleaning work out of the bot's control (puppet is
	//     running), etc.
	//
	// Bot.status_msg shall include the bot provided rationale.
	BotStatusType_OVERHEAD_MAINTENANCE_EXTERNAL BotStatusType = 4
	// Unused.
	BotStatusType_OVERHEAD_BOT_INTERNAL BotStatusType = 5
	// Unused.
	BotStatusType_HOST_REBOOTING BotStatusType = 6
	// Running a task.
	//
	// Bot.status_msg shall not be set.
	BotStatusType_BUSY BotStatusType = 7
	// Unused.
	BotStatusType_RESERVED BotStatusType = 8
	// Bot is healthy and waiting for tasks.
	//
	// Bot.status_msg shall not be set.
	BotStatusType_IDLE BotStatusType = 9
)

// Enum value maps for BotStatusType.
var (
	BotStatusType_name = map[int32]string{
		0: "BOT_STATUS_UNSPECIFIED",
		1: "MISSING",
		2: "QUARANTINED_BY_SERVER",
		3: "QUARANTINED_BY_BOT",
		4: "OVERHEAD_MAINTENANCE_EXTERNAL",
		5: "OVERHEAD_BOT_INTERNAL",
		6: "HOST_REBOOTING",
		7: "BUSY",
		8: "RESERVED",
		9: "IDLE",
	}
	BotStatusType_value = map[string]int32{
		"BOT_STATUS_UNSPECIFIED":        0,
		"MISSING":                       1,
		"QUARANTINED_BY_SERVER":         2,
		"QUARANTINED_BY_BOT":            3,
		"OVERHEAD_MAINTENANCE_EXTERNAL": 4,
		"OVERHEAD_BOT_INTERNAL":         5,
		"HOST_REBOOTING":                6,
		"BUSY":                          7,
		"RESERVED":                      8,
		"IDLE":                          9,
	}
)

func (x BotStatusType) Enum() *BotStatusType {
	p := new(BotStatusType)
	*p = x
	return p
}

func (x BotStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BotStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[1].Descriptor()
}

func (BotStatusType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[1]
}

func (x BotStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BotStatusType.Descriptor instead.
func (BotStatusType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{1}
}

// TaskStateCategory represents different categories of task state.
type TaskStateCategory int32

const (
	// Invalid value.
	TaskStateCategory_TASK_STATE_CATEGORY_UNSPECIFIED TaskStateCategory = 0
	// The task is enqueued and pending bot availability.
	TaskStateCategory_CATEGORY_PENDING TaskStateCategory = 16
	// The task is running.
	TaskStateCategory_CATEGORY_RUNNING TaskStateCategory = 32
	// Transient done states are uncertain states; something ran but the result
	// was inconclusive.
	TaskStateCategory_CATEGORY_TRANSIENT_DONE TaskStateCategory = 48
	// The task ran, and it is done.
	TaskStateCategory_CATEGORY_EXECUTION_DONE TaskStateCategory = 64
	// The task did not run, and won't.
	TaskStateCategory_CATEGORY_NEVER_RAN_DONE TaskStateCategory = 80
)

// Enum value maps for TaskStateCategory.
var (
	TaskStateCategory_name = map[int32]string{
		0:  "TASK_STATE_CATEGORY_UNSPECIFIED",
		16: "CATEGORY_PENDING",
		32: "CATEGORY_RUNNING",
		48: "CATEGORY_TRANSIENT_DONE",
		64: "CATEGORY_EXECUTION_DONE",
		80: "CATEGORY_NEVER_RAN_DONE",
	}
	TaskStateCategory_value = map[string]int32{
		"TASK_STATE_CATEGORY_UNSPECIFIED": 0,
		"CATEGORY_PENDING":                16,
		"CATEGORY_RUNNING":                32,
		"CATEGORY_TRANSIENT_DONE":         48,
		"CATEGORY_EXECUTION_DONE":         64,
		"CATEGORY_NEVER_RAN_DONE":         80,
	}
)

func (x TaskStateCategory) Enum() *TaskStateCategory {
	p := new(TaskStateCategory)
	*p = x
	return p
}

func (x TaskStateCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStateCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[2].Descriptor()
}

func (TaskStateCategory) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[2]
}

func (x TaskStateCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStateCategory.Descriptor instead.
func (TaskStateCategory) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{2}
}

// TaskState represents the different possible states for a Task.
//
// Each state is in one of the bitmask in TaskStateCategory.
type TaskState int32

const (
	// Invalid task state.
	TaskState_TASK_STATE_INVALID TaskState = 0
	// The task is currently pending.
	//
	// This means that no bot reaped the task yet. It will stay in this state
	// until either a bot reaps the task, or the expiration elapsed or all bots
	// become MISSING, leading to a NO_RESOURCE. The task pending expiration is
	// specified as TaskSlice.expiration, one per task slice.
	//
	// The task may go through multiple pending TaskSlice as they expire or are
	// skipped due to NO_RESOURCE (see definition below). In this situation the
	// task state still stays in PENDING state as long as there's a chance for a
	// bot to reap the task.
	TaskState_PENDING TaskState = 16
	// Unused.
	TaskState_PENDING_DEDUPING TaskState = 17
	// The task is currently running.
	//
	// For new tasks, this is only the actual tasks runtime. For old tasks, this
	// includes RUNNING_OVERHEAD_START and RUNNING_OVERHEAD_END.
	TaskState_RUNNING TaskState = 32
	// Unused.
	TaskState_RUNNING_OVERHEAD_SETUP TaskState = 33
	// Unused.
	TaskState_RUNNING_OVERHEAD_TEARDOWN TaskState = 34
	// Unused.
	TaskState_TERMINATING TaskState = 35
	// Unused.
	TaskState_COMPLETING TaskState = 47
	// The task ran but the bot had an internal failure, unrelated to the task
	// itself. It can be due to disk or network I/O issues.
	TaskState_RAN_INTERNAL_FAILURE TaskState = 48
	// Unused.
	TaskState_DUT_FAILURE TaskState = 49
	// Unused.
	TaskState_BOT_DISAPPEARED TaskState = 50
	// Unused.
	TaskState_PREEMPTED TaskState = 51
	// The task ran and completed normally. The task process exit code may be 0 or
	// another value.
	//
	// This value is also used when the task is deduped against a previous task.
	TaskState_COMPLETED TaskState = 64
	// The task ran for longer than the allowed time in
	// TaskProperties.execution_timeout.
	//
	// This means the bot forcefully killed the task process as described in the
	// graceful termination dance in the documentation.
	TaskState_TIMED_OUT TaskState = 65
	// Unused.
	TaskState_TIMED_OUT_SILENCE TaskState = 66
	// The task ran but was manually killed via the 'cancel' API.
	//
	// This means the bot forcefully killed the task process as described in the
	// graceful termination dance in the documentation.
	TaskState_KILLED TaskState = 67
	// Unused.
	TaskState_MISSING_INPUTS TaskState = 68
	// The task didn't have to run, because a previous task had results. It is
	// functionally equivalent to COMPLETED, except that previous results were
	// returned as-is.
	TaskState_DEDUPED TaskState = 80
	// The task is not pending anymore; it never ran due to lack of capacity.
	//
	// This means that other higher priority tasks ran instead and that not enough
	// bots were available to run this task for TaskSlice.expiration.
	TaskState_EXPIRED TaskState = 81
	// The task never ran, and was manually cancelled via the 'cancel' API before
	// it was reaped.
	TaskState_CANCELED TaskState = 82
	// The task was never set to PENDING and was immediately refused, as the
	// server determined that there is no bot capacity to run this task. This
	// happens because no bot exposes a superset of the requested task dimensions.
	//
	// There can be a situation where a task goes from PENDING to NO_RESOURCE if
	// capacity (bots) is removed.
	//
	// Set TaskSlice.wait_for_capacity to True to force the server to keep the
	// task slice pending even in this case. Generally speaking, the task will
	// eventually switch to EXPIRED, as there's no bot to run it. That said, there
	// are situations where it is known that in some not-too-distant future a wild
	// bot will appear that will be able to run this task.
	TaskState_NO_RESOURCE TaskState = 83
	// Unused.
	TaskState_LOAD_SHED TaskState = 84
	// Unused.
	TaskState_RESOURCE_EXHAUSTED TaskState = 85
	// Unused.
	TaskState_SKIPPED_INTERNAL_FAILURE TaskState = 86
	// The task encountered an error caused by the client. This means that
	// rerunning the task with the same parameters will not change the result
	TaskState_CLIENT_ERROR TaskState = 87
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		0:  "TASK_STATE_INVALID",
		16: "PENDING",
		17: "PENDING_DEDUPING",
		32: "RUNNING",
		33: "RUNNING_OVERHEAD_SETUP",
		34: "RUNNING_OVERHEAD_TEARDOWN",
		35: "TERMINATING",
		47: "COMPLETING",
		48: "RAN_INTERNAL_FAILURE",
		49: "DUT_FAILURE",
		50: "BOT_DISAPPEARED",
		51: "PREEMPTED",
		64: "COMPLETED",
		65: "TIMED_OUT",
		66: "TIMED_OUT_SILENCE",
		67: "KILLED",
		68: "MISSING_INPUTS",
		80: "DEDUPED",
		81: "EXPIRED",
		82: "CANCELED",
		83: "NO_RESOURCE",
		84: "LOAD_SHED",
		85: "RESOURCE_EXHAUSTED",
		86: "SKIPPED_INTERNAL_FAILURE",
		87: "CLIENT_ERROR",
	}
	TaskState_value = map[string]int32{
		"TASK_STATE_INVALID":        0,
		"PENDING":                   16,
		"PENDING_DEDUPING":          17,
		"RUNNING":                   32,
		"RUNNING_OVERHEAD_SETUP":    33,
		"RUNNING_OVERHEAD_TEARDOWN": 34,
		"TERMINATING":               35,
		"COMPLETING":                47,
		"RAN_INTERNAL_FAILURE":      48,
		"DUT_FAILURE":               49,
		"BOT_DISAPPEARED":           50,
		"PREEMPTED":                 51,
		"COMPLETED":                 64,
		"TIMED_OUT":                 65,
		"TIMED_OUT_SILENCE":         66,
		"KILLED":                    67,
		"MISSING_INPUTS":            68,
		"DEDUPED":                   80,
		"EXPIRED":                   81,
		"CANCELED":                  82,
		"NO_RESOURCE":               83,
		"LOAD_SHED":                 84,
		"RESOURCE_EXHAUSTED":        85,
		"SKIPPED_INTERNAL_FAILURE":  86,
		"CLIENT_ERROR":              87,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[3].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[3]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{3}
}

// Unused.
type User int32

const (
	User_USER_UNSPECIFIED User = 0
	User_USER_SWARMING    User = 1
	User_USER_TEMPORARY   User = 2
)

// Enum value maps for User.
var (
	User_name = map[int32]string{
		0: "USER_UNSPECIFIED",
		1: "USER_SWARMING",
		2: "USER_TEMPORARY",
	}
	User_value = map[string]int32{
		"USER_UNSPECIFIED": 0,
		"USER_SWARMING":    1,
		"USER_TEMPORARY":   2,
	}
)

func (x User) Enum() *User {
	p := new(User)
	*p = x
	return p
}

func (x User) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[4].Descriptor()
}

func (User) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes[4]
}

func (x User) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User.Descriptor instead.
func (User) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{4}
}

// What has been submitted to Swarming for execution.
type TaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of TaskSlice, along with their scheduling parameters.
	//
	// Each TaskSlice defines where to run the task and what it does. They are
	// processed in order until the first successfully scheduled one. It is
	// guaranteed that at most one of these will be attempted.
	TaskSlices []*TaskSlice `protobuf:"bytes,1,rep,name=task_slices,json=taskSlices,proto3" json:"task_slices,omitempty"`
	// Task priority, the lower the more important.
	//
	// Valid values are between 1 and 255.
	Priority int32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	// Defines what OAuth2 credentials the task uses when calling other services.
	//
	// Possible values are:
	//   - 'none': do not use a task service account at all, this is the default.
	//   - 'bot': use bot's own account, works only if bots authenticate with
	//     OAuth2.
	//   - <some email>: use this specific service account if it is allowed in the
	//     pool (via 'allowed_service_account' pools.cfg setting) and configured
	//     in the token server's service_accounts.cfg.
	//
	// Note that the service account name is specified outside of task properties,
	// and thus it is possible to have two tasks with different service accounts,
	// but identical properties hash (so one can be deduped).
	ServiceAccount string `protobuf:"bytes,3,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// When the task was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Task name for display purpose.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Tags are 'key:value' strings that describes what the task is about (it's
	// semantic meaning).
	//
	// It is fine to reuse the same 'key' multiple times. It is not fine to use a
	// key that is also used as a dimension.
	//
	// Tags are sorted.
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// User for this task is run, if relevant. Not validated.
	User string `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	// Authenticated client that triggered this task.
	Authenticated string `protobuf:"bytes,13,opt,name=authenticated,proto3" json:"authenticated,omitempty"`
	// Task realm is used to control who can interact with the task e.g. get,
	// cancel etc, and which task service accounts can be used in the realm.
	Realm string `protobuf:"bytes,14,opt,name=realm,proto3" json:"realm,omitempty"`
	// ResultDB integration configuration for a task.
	Resultdb *api_v2.ResultDBCfg `protobuf:"bytes,15,opt,name=resultdb,proto3" json:"resultdb,omitempty"`
	// The task ID.
	//
	// This is an overall ID of the task (not a concrete run attempt). Such IDs
	// end with 0.
	TaskId string `protobuf:"bytes,8,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Parent Swarming task ID of the process requesting this task (if any).
	//
	// This is an overall ID of the task (not a concrete run attempt). Such IDs
	// end with 0.
	ParentTaskId string `protobuf:"bytes,9,opt,name=parent_task_id,json=parentTaskId,proto3" json:"parent_task_id,omitempty"`
	// Parent Swarming task run ID of the process requesting this task (if any).
	//
	// This is an ID of a concrete run attempt. Such IDs end with 1.
	ParentRunId string `protobuf:"bytes,11,opt,name=parent_run_id,json=parentRunId,proto3" json:"parent_run_id,omitempty"`
	// Root task id, independent of the depth of recursive tasks.
	//
	// This is an overall ID of the task (not a concrete run attempt). Such IDs
	// end with 0.
	RootTaskId string `protobuf:"bytes,16,opt,name=root_task_id,json=rootTaskId,proto3" json:"root_task_id,omitempty"`
	// Root task run id, independent of the depth of recursive tasks.
	//
	// This is an ID of a concrete run attempt. Such IDs end with 1.
	RootRunId string `protobuf:"bytes,17,opt,name=root_run_id,json=rootRunId,proto3" json:"root_run_id,omitempty"`
	// PubSub topic that receives notifications from this task.
	PubsubNotification *PubSub `protobuf:"bytes,10,opt,name=pubsub_notification,json=pubsubNotification,proto3" json:"pubsub_notification,omitempty"`
	// Maximum delay between bot pings before the bot is considered dead
	// while running a task in seconds.
	BotPingTolerance float64 `protobuf:"fixed64,12,opt,name=bot_ping_tolerance,json=botPingTolerance,proto3" json:"bot_ping_tolerance,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{0}
}

func (x *TaskRequest) GetTaskSlices() []*TaskSlice {
	if x != nil {
		return x.TaskSlices
	}
	return nil
}

func (x *TaskRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TaskRequest) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *TaskRequest) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *TaskRequest) GetAuthenticated() string {
	if x != nil {
		return x.Authenticated
	}
	return ""
}

func (x *TaskRequest) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *TaskRequest) GetResultdb() *api_v2.ResultDBCfg {
	if x != nil {
		return x.Resultdb
	}
	return nil
}

func (x *TaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskRequest) GetParentTaskId() string {
	if x != nil {
		return x.ParentTaskId
	}
	return ""
}

func (x *TaskRequest) GetParentRunId() string {
	if x != nil {
		return x.ParentRunId
	}
	return ""
}

func (x *TaskRequest) GetRootTaskId() string {
	if x != nil {
		return x.RootTaskId
	}
	return ""
}

func (x *TaskRequest) GetRootRunId() string {
	if x != nil {
		return x.RootRunId
	}
	return ""
}

func (x *TaskRequest) GetPubsubNotification() *PubSub {
	if x != nil {
		return x.PubsubNotification
	}
	return nil
}

func (x *TaskRequest) GetBotPingTolerance() float64 {
	if x != nil {
		return x.BotPingTolerance
	}
	return 0
}

// Defines where to run the task and what it does.
//
// A single TaskRequest can have multiple TaskSlices. They are processed in
// order until the first successfully scheduled one.
type TaskSlice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The property of the task to try to run.
	//
	// In particular properties.dimensions are used to find bots that can run this
	// slice.
	Properties *TaskProperties `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
	// If this task slice is not picked up by a bot after waiting this number of
	// seconds, the next one will be processed. If this is the last slice, the
	// task will fail with EXPIRED error.
	Expiration float64 `protobuf:"fixed64,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// This flag controls what to do if there are no bots online with requested
	// dimensions when this slice is submitted.
	//
	// A bot is consider online if it is present (sends pings to Swarming) and not
	// quarantined. It may be busy running some other task though.
	//
	// If wait_for_capacity is false and there are no bots online that match
	// requested dimensions, the slice is skipped immediately with NO_RESOURCE
	// error (the next slice is processed instead).
	//
	// If wait_for_capacity is true, the slice will be put into the pending queue
	// and will stay there either until a matching bot appears and picks it up,
	// or the slice reaches its expiration timeout.
	WaitForCapacity bool `protobuf:"varint,3,opt,name=wait_for_capacity,json=waitForCapacity,proto3" json:"wait_for_capacity,omitempty"`
	// Digest of a serialized form of TaskProperties.
	//
	// This is used for DEDUPED and PENDING_DEDUPING when idempotent is true.
	// Consider this value as opaque string, only use to check equality.
	//
	// It is set even if idempotent is false.
	PropertiesHash string `protobuf:"bytes,4,opt,name=properties_hash,json=propertiesHash,proto3" json:"properties_hash,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskSlice) Reset() {
	*x = TaskSlice{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSlice) ProtoMessage() {}

func (x *TaskSlice) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSlice.ProtoReflect.Descriptor instead.
func (*TaskSlice) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{1}
}

func (x *TaskSlice) GetProperties() *TaskProperties {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *TaskSlice) GetExpiration() float64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

func (x *TaskSlice) GetWaitForCapacity() bool {
	if x != nil {
		return x.WaitForCapacity
	}
	return false
}

func (x *TaskSlice) GetPropertiesHash() string {
	if x != nil {
		return x.PropertiesHash
	}
	return ""
}

// Defines what to run.
//
// A serialization of this message is hashed and this hash is what is used for
// task deduping.
type TaskProperties struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Isolated inputs to map in the working directory.
	//
	// Deprecated: Isolate server is being migrated to RBE-CAS. `cas_input_root`
	// will be used to reference to the input root on RBE-CAS.
	//
	// Deprecated: the isolated file may optionally specify a command to run.
	// Otherwise, 'command' must be specified.
	CasInputs *CASTree `protobuf:"bytes,1,opt,name=cas_inputs,json=casInputs,proto3" json:"cas_inputs,omitempty"`
	// Digest of the input root on RBE-CAS.
	//
	// cas_input_root.digest MUST be digest of [build.bazel.remote.execution.v2.Directory].
	CasInputRoot *api_v2.CASReference `protobuf:"bytes,18,opt,name=cas_input_root,json=casInputRoot,proto3" json:"cas_input_root,omitempty"`
	// Set of CIPD packages to install prior to running the task.
	//
	// Sorted.
	CipdInputs []*CIPDPackage `protobuf:"bytes,2,rep,name=cipd_inputs,json=cipdInputs,proto3" json:"cipd_inputs,omitempty"`
	// Named caches to map into the working directory.
	//
	// Sorted.
	NamedCaches []*NamedCacheEntry `protobuf:"bytes,3,rep,name=named_caches,json=namedCaches,proto3" json:"named_caches,omitempty"`
	// The command line to run.
	Command []string `protobuf:"bytes,4,rep,name=command,proto3" json:"command,omitempty"`
	// Relative working directory to start the 'command' in, defaults to the root
	// mapped directory or what is provided in the isolated file, if any.
	RelativeCwd string `protobuf:"bytes,5,opt,name=relative_cwd,json=relativeCwd,proto3" json:"relative_cwd,omitempty"`
	// Extraneous arguments to append to the command specified in the isolated
	// file. Can only be used when an isolated file specifies a command.
	//
	// Deprecated.
	ExtraArgs []string `protobuf:"bytes,6,rep,name=extra_args,json=extraArgs,proto3" json:"extra_args,omitempty"`
	// Secret bytes to provide to the task. Write only, cannot be retrieved back.
	//
	// Always empty in BQ exports.
	SecretBytes []byte `protobuf:"bytes,7,opt,name=secret_bytes,json=secretBytes,proto3" json:"secret_bytes,omitempty"`
	// True if properties had secret bytes in them.
	HasSecretBytes bool `protobuf:"varint,8,opt,name=has_secret_bytes,json=hasSecretBytes,proto3" json:"has_secret_bytes,omitempty"`
	// Dimensions are what is used to determine which bot can run the task.
	//
	// The values are effectively an AND, a bot must match all dimensions to be
	// selected to run the task.
	//
	// Sorted.
	Dimensions []*StringListPair `protobuf:"bytes,9,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Environment variables to set when running the task.
	//
	// Sorted.
	Env []*StringPair `protobuf:"bytes,10,rep,name=env,proto3" json:"env,omitempty"`
	// Task root relative paths to prepend to a given environment variable.
	//
	// This allows one to safely modify variables like PATH, PYTHONPATH, or other
	// PATH-like environment variables. The order of operations is:
	//   - Turn slashes into native-platform slashes
	//   - Make the path absolute
	//   - Prepend it to the current value of the envvar using the os-native list
	//     separator (`;` on Windows, `:` on POSIX)
	//
	// Each key can have multiple paths to prepend. They will be prepended in
	// the order seen here.
	//
	// For example, if env_paths is:
	//
	//	[ (key="PATH", values=["foo", "bar"]),
	//	  (key="CUSTOMPATH", values=["custom"]), ]
	//
	// The task would see:
	//
	//	PATH=/path/to/swarming/rundir/foo:/path/to/swarming/rundir/bar:$PATH
	//	CUSTOMPATH=/path/to/swarming/rundir/custom
	//
	// Paths must always be specified here with forward-slashes, and must not
	// attempt to escape the task's root (i.e. must not contain `..`).
	//
	// This is applied AFTER evaluating `env`.
	//
	// Sorted by key.
	EnvPaths []*StringListPair `protobuf:"bytes,11,rep,name=env_paths,json=envPaths,proto3" json:"env_paths,omitempty"`
	// Unused.
	Containment *api_v2.Containment `protobuf:"bytes,12,opt,name=containment,proto3" json:"containment,omitempty"`
	// Maximum number of seconds the task can run before its process is forcibly
	// terminated and the task results in TIMED_OUT.
	ExecutionTimeout float64 `protobuf:"fixed64,13,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	// Maximum number of seconds the task may be silent (no output to stdout nor
	// stderr) before it is considered hung and it forcibly terminated early and
	// the task results in TIMED_OUT_SILENCE.
	IoTimeout float64 `protobuf:"fixed64,14,opt,name=io_timeout,json=ioTimeout,proto3" json:"io_timeout,omitempty"`
	// Number of second to give the child process after a SIGTERM before sending a
	// SIGKILL.
	GracePeriod float64 `protobuf:"fixed64,15,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	// True if it is OK to reuse results of a previously successfully completed
	// idempotent task with them same Properties.
	//
	// Should be set only for tasks that do not have side effects and produce same
	// outputs given the same inputs.
	//
	// Tasks that reuse results of existing tasks have state DEDUPED.
	Idempotent bool `protobuf:"varint,16,opt,name=idempotent,proto3" json:"idempotent,omitempty"`
	// Paths in the working directory to archive back and store as
	// TaskResult.outputs.
	//
	// Sorted.
	Outputs []string `protobuf:"bytes,17,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Unused.
	User          User `protobuf:"varint,19,opt,name=user,proto3,enum=swarming.bq.User" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskProperties) Reset() {
	*x = TaskProperties{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProperties) ProtoMessage() {}

func (x *TaskProperties) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProperties.ProtoReflect.Descriptor instead.
func (*TaskProperties) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{2}
}

func (x *TaskProperties) GetCasInputs() *CASTree {
	if x != nil {
		return x.CasInputs
	}
	return nil
}

func (x *TaskProperties) GetCasInputRoot() *api_v2.CASReference {
	if x != nil {
		return x.CasInputRoot
	}
	return nil
}

func (x *TaskProperties) GetCipdInputs() []*CIPDPackage {
	if x != nil {
		return x.CipdInputs
	}
	return nil
}

func (x *TaskProperties) GetNamedCaches() []*NamedCacheEntry {
	if x != nil {
		return x.NamedCaches
	}
	return nil
}

func (x *TaskProperties) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *TaskProperties) GetRelativeCwd() string {
	if x != nil {
		return x.RelativeCwd
	}
	return ""
}

func (x *TaskProperties) GetExtraArgs() []string {
	if x != nil {
		return x.ExtraArgs
	}
	return nil
}

func (x *TaskProperties) GetSecretBytes() []byte {
	if x != nil {
		return x.SecretBytes
	}
	return nil
}

func (x *TaskProperties) GetHasSecretBytes() bool {
	if x != nil {
		return x.HasSecretBytes
	}
	return false
}

func (x *TaskProperties) GetDimensions() []*StringListPair {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *TaskProperties) GetEnv() []*StringPair {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskProperties) GetEnvPaths() []*StringListPair {
	if x != nil {
		return x.EnvPaths
	}
	return nil
}

func (x *TaskProperties) GetContainment() *api_v2.Containment {
	if x != nil {
		return x.Containment
	}
	return nil
}

func (x *TaskProperties) GetExecutionTimeout() float64 {
	if x != nil {
		return x.ExecutionTimeout
	}
	return 0
}

func (x *TaskProperties) GetIoTimeout() float64 {
	if x != nil {
		return x.IoTimeout
	}
	return 0
}

func (x *TaskProperties) GetGracePeriod() float64 {
	if x != nil {
		return x.GracePeriod
	}
	return 0
}

func (x *TaskProperties) GetIdempotent() bool {
	if x != nil {
		return x.Idempotent
	}
	return false
}

func (x *TaskProperties) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TaskProperties) GetUser() User {
	if x != nil {
		return x.User
	}
	return User_USER_UNSPECIFIED
}

// Describes a named cache that should be reused on the bot.
//
// A NamedCacheEntry in a task specifies that the task wants a directory to be
// persisted on the bot across tasks.
//
// If the cache was not present on the bot prior the task's execution, the
// directory is empty when the task starts. Any change done in the directory by
// the task is persisted on the bot after the task completes.
//
// If another task runs on the same bot and requests the same named cache, even
// if mapped to a different path, it will get the updated content.
type NamedCacheEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique name of the cache. Length is limited to 4096.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Path to directory relative to the task's root dir, where the named cache is
	// to be installed.
	//
	// A path cannot be shared among multiple caches or CIPD installations.
	// A task will fail if a file/dir with the same name already exists.
	DestPath      string `protobuf:"bytes,2,opt,name=dest_path,json=destPath,proto3" json:"dest_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedCacheEntry) Reset() {
	*x = NamedCacheEntry{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedCacheEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedCacheEntry) ProtoMessage() {}

func (x *NamedCacheEntry) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedCacheEntry.ProtoReflect.Descriptor instead.
func (*NamedCacheEntry) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{3}
}

func (x *NamedCacheEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedCacheEntry) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

// PubSub is a Cloud Pub/Sub topic to send task updates to.
type PubSub struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Full topic name to post updates to, e.g. "projects/<id>/topics/<id>".
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// Secret string to put into "auth_token" attribute of PubSub messages.
	//
	// Always empty in BQ exports.
	AuthToken string `protobuf:"bytes,2,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// String to put into "userdata" attribute of PubSub messages.
	Userdata      string `protobuf:"bytes,3,opt,name=userdata,proto3" json:"userdata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PubSub) Reset() {
	*x = PubSub{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSub) ProtoMessage() {}

func (x *PubSub) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSub.ProtoReflect.Descriptor instead.
func (*PubSub) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{4}
}

func (x *PubSub) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PubSub) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *PubSub) GetUserdata() string {
	if x != nil {
		return x.Userdata
	}
	return ""
}

// BotEvent represents an event on a bot.
type BotEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When this event happened.
	EventTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// Snapshot of the Bot at the moment the event happened.
	Bot *Bot `protobuf:"bytes,2,opt,name=bot,proto3" json:"bot,omitempty"`
	// What has happened to the bot.
	Event BotEventType `protobuf:"varint,3,opt,name=event,proto3,enum=swarming.bq.BotEventType" json:"event,omitempty"`
	// Human readable event message.
	//
	// See BotEventType for the meaning of this string for each status.
	EventMsg      string `protobuf:"bytes,4,opt,name=event_msg,json=eventMsg,proto3" json:"event_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BotEvent) Reset() {
	*x = BotEvent{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotEvent) ProtoMessage() {}

func (x *BotEvent) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotEvent.ProtoReflect.Descriptor instead.
func (*BotEvent) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{5}
}

func (x *BotEvent) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

func (x *BotEvent) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *BotEvent) GetEvent() BotEventType {
	if x != nil {
		return x.Event
	}
	return BotEventType_BOT_EVENT_TYPE_UNSPECIFIED
}

func (x *BotEvent) GetEventMsg() string {
	if x != nil {
		return x.EventMsg
	}
	return ""
}

// Bot is a snapshot of the state of a Swarming bot.
type Bot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Bot ID.
	//
	// It is unique across the Swarming fleet. It is generally based on the
	// hostname where the bot runs, but that's not a requirement
	//
	// This value is also included in dimensions for the key 'id'.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// The bot session name as reported by the bot when it was connecting.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Pools that this bot belongs to.
	//
	// Normally a bot belongs to a single pool, but it can be in multiple pools
	// simultaneously. This is helpful when moving bots between pools.
	//
	// This value is also included in dimensions for the key 'pool'.
	Pools []string `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty"`
	// Current bot status. A bot status is a state in which the bot is for a
	// certain amount of time.
	Status BotStatusType `protobuf:"varint,4,opt,name=status,proto3,enum=swarming.bq.BotStatusType" json:"status,omitempty"`
	// Supplemental information to describe the bot status. Human readable.
	//
	// See BotStatusType for the meaning of this string for each status.
	StatusMsg string `protobuf:"bytes,5,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	// Current task being handled by the bot, if there is one.
	//
	// This is an ID of a concrete run attempt. Such IDs end with 1.
	CurrentTaskId string `protobuf:"bytes,6,opt,name=current_task_id,json=currentTaskId,proto3" json:"current_task_id,omitempty"`
	// Dimensions reported by the bot.
	//
	// Sorted.
	Dimensions []*StringListPair `protobuf:"bytes,7,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Extra information describing the bot or its host.
	//
	// This is NOT used for task selection.
	Info          *BotInfo `protobuf:"bytes,8,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bot) Reset() {
	*x = Bot{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bot) ProtoMessage() {}

func (x *Bot) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bot.ProtoReflect.Descriptor instead.
func (*Bot) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{6}
}

func (x *Bot) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *Bot) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Bot) GetPools() []string {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *Bot) GetStatus() BotStatusType {
	if x != nil {
		return x.Status
	}
	return BotStatusType_BOT_STATUS_UNSPECIFIED
}

func (x *Bot) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *Bot) GetCurrentTaskId() string {
	if x != nil {
		return x.CurrentTaskId
	}
	return ""
}

func (x *Bot) GetDimensions() []*StringListPair {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *Bot) GetInfo() *BotInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// Extra information describing the bot or its host
//
// This is NOT used for task selection.
type BotInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Free form JSON data that includes interesting information about the bot
	// that doesn't fit in any of the fields below.
	//
	// Anything that is usable by multiple customers should eventually be moved to
	// a new field below.
	Supplemental string `protobuf:"bytes,1,opt,name=supplemental,proto3" json:"supplemental,omitempty"`
	// Bot's version. An opaque value.
	//
	// This value is Swarming instance and configuration dependent.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// External IP address as visible by the server.
	//
	// This could be a NAT'ing router external IP.
	//
	// Can be either IPv4 or IPv6.
	ExternalIp string `protobuf:"bytes,3,opt,name=external_ip,json=externalIp,proto3" json:"external_ip,omitempty"`
	// Authentication identity that the bot identified as. An opaque value.
	AuthenticatedAs string `protobuf:"bytes,4,opt,name=authenticated_as,json=authenticatedAs,proto3" json:"authenticated_as,omitempty"`
	// State of the content addressed cache on the bot.
	//
	// This is used for input files.
	CasStats *CASStats `protobuf:"bytes,5,opt,name=cas_stats,json=casStats,proto3" json:"cas_stats,omitempty"`
	// State of the named caches on the bot.
	//
	// Sorted.
	NamedCachesStats []*NamedCacheStats `protobuf:"bytes,6,rep,name=named_caches_stats,json=namedCachesStats,proto3" json:"named_caches_stats,omitempty"`
	// State of the CIPD packages cache on the bot.
	//
	// Sorted.
	CipdPackagesCacheStats []*CIPDPackageCacheStats `protobuf:"bytes,7,rep,name=cipd_packages_cache_stats,json=cipdPackagesCacheStats,proto3" json:"cipd_packages_cache_stats,omitempty"`
	// Unused.
	Host *PhysicalEntity `protobuf:"bytes,8,opt,name=host,proto3" json:"host,omitempty"`
	// Unused.
	Devices []*PhysicalEntity `protobuf:"bytes,9,rep,name=devices,proto3" json:"devices,omitempty"`
	// This field is used in BOT_MISSING event to know the timestamp of the last
	// activity.
	LastSeenTs *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_seen_ts,json=lastSeenTs,proto3" json:"last_seen_ts,omitempty"`
	// The time when the bot became idle.
	IdleSinceTs *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=idle_since_ts,json=idleSinceTs,proto3" json:"idle_since_ts,omitempty"`
	// The list of bot owners from bots.cfg entry for this bot.
	Owners        []string `protobuf:"bytes,12,rep,name=owners,proto3" json:"owners,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BotInfo) Reset() {
	*x = BotInfo{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotInfo) ProtoMessage() {}

func (x *BotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotInfo.ProtoReflect.Descriptor instead.
func (*BotInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{7}
}

func (x *BotInfo) GetSupplemental() string {
	if x != nil {
		return x.Supplemental
	}
	return ""
}

func (x *BotInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BotInfo) GetExternalIp() string {
	if x != nil {
		return x.ExternalIp
	}
	return ""
}

func (x *BotInfo) GetAuthenticatedAs() string {
	if x != nil {
		return x.AuthenticatedAs
	}
	return ""
}

func (x *BotInfo) GetCasStats() *CASStats {
	if x != nil {
		return x.CasStats
	}
	return nil
}

func (x *BotInfo) GetNamedCachesStats() []*NamedCacheStats {
	if x != nil {
		return x.NamedCachesStats
	}
	return nil
}

func (x *BotInfo) GetCipdPackagesCacheStats() []*CIPDPackageCacheStats {
	if x != nil {
		return x.CipdPackagesCacheStats
	}
	return nil
}

func (x *BotInfo) GetHost() *PhysicalEntity {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *BotInfo) GetDevices() []*PhysicalEntity {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *BotInfo) GetLastSeenTs() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeenTs
	}
	return nil
}

func (x *BotInfo) GetIdleSinceTs() *timestamppb.Timestamp {
	if x != nil {
		return x.IdleSinceTs
	}
	return nil
}

func (x *BotInfo) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

// PhysicalEntity includes information about an host or device.
//
// Unused.
type PhysicalEntity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name that represents this physical entity.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Free form JSON data that includes interesting information about the device
	// that doesn't fit in any of the fields below.
	//
	// Anything that is usable by multiple customers should eventually be moved to
	// a new field below.
	Supplemental string `protobuf:"bytes,2,opt,name=supplemental,proto3" json:"supplemental,omitempty"`
	// IP address as visible by the bot process (bot_main) itself.
	//
	// In the case of the host, it will be one of the IP addresses assigned to it.
	// In the case of the host where the bot is running inside docker, it will be
	// the IP address assigned to the docker container.
	// In the case of a device, it is the IP address of the device, if any.
	//
	// Can be either IPv4 or IPv6.
	Ip            string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PhysicalEntity) Reset() {
	*x = PhysicalEntity{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PhysicalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalEntity) ProtoMessage() {}

func (x *PhysicalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalEntity.ProtoReflect.Descriptor instead.
func (*PhysicalEntity) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{8}
}

func (x *PhysicalEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhysicalEntity) GetSupplemental() string {
	if x != nil {
		return x.Supplemental
	}
	return ""
}

func (x *PhysicalEntity) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// TaskResult is the result of a TaskRequest as it is processed by Swarming.
//
// The TaskResult represents one attempt (run on a bot) and/or the final result
// (summary). When the task never ran (for example EXPIRED), there's one summary
// but no run.
type TaskResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The task request that concluded with this result.
	Request *TaskRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Time the task was requested.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Time the task started being run by a bot, before RUNNING_OVERHEAD_SETUP.
	//
	// Doing "start_time - create_time" gives the task pending time.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Time when the task was abandoned instead of normal completion.
	//
	// This happens for example when a task was KILLED, this then represents the
	// time a client requested the task to be killed, which is before end_time.
	// Same for TIMED_OUT state, this then represents the time when the bot
	// decided to abort the task.
	AbandonTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=abandon_time,json=abandonTime,proto3" json:"abandon_time,omitempty"`
	// Time the task completed and teared down, after RUNNING_OVERHEAD_TEARDOWN.
	//
	// Doing "end_time - start_time" will not lead to the exact task duration,
	// since this time frame includes overheads.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Duration of the task in seconds. This excludes overheads.
	Duration float64 `protobuf:"fixed64,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// Current state of the task (e.g. PENDING, RUNNING, COMPLETED, EXPIRED, etc).
	State TaskState `protobuf:"varint,7,opt,name=state,proto3,enum=swarming.bq.TaskState" json:"state,omitempty"`
	// The category of the current task state. This is primarily useful to
	// simplify BigQuery queries. This can be used to determine if a task is done
	// or if still considered for execution.
	StateCategory TaskStateCategory `protobuf:"varint,8,opt,name=state_category,json=stateCategory,proto3,enum=swarming.bq.TaskStateCategory" json:"state_category,omitempty"`
	// The task try number.
	//
	// It is 0 for a deduped task, since nothing ran. It is 0 if the task is still
	// PENDING.
	//
	// It is normally 1 for a task that started running and runs a normal flow.
	TryNumber int32 `protobuf:"varint,9,opt,name=try_number,json=tryNumber,proto3" json:"try_number,omitempty"`
	// Index in the TaskRequest.task_slices (TaskSlice instance) that this result
	// represents.
	//
	// The TaskSlice contains a TaskProperties, which defines what is run.
	CurrentTaskSlice int32 `protobuf:"varint,10,opt,name=current_task_slice,json=currentTaskSlice,proto3" json:"current_task_slice,omitempty"`
	// Snapshot of the bot that was assigned to this task at the start of the
	// task. This includes bot local cache information.
	Bot *Bot `protobuf:"bytes,11,opt,name=bot,proto3" json:"bot,omitempty"`
	// Server versions that touched this task.
	//
	// A different version of the server may get the request and hand it to the
	// bot. This is primarily useful to detect if a new server version introduced
	// a bug and for canarying purpose.
	ServerVersions []string `protobuf:"bytes,12,rep,name=server_versions,json=serverVersions,proto3" json:"server_versions,omitempty"`
	// List of children task IDs that this task triggered, if any.
	//
	// This is populate only in the case this Swarming task triggers more Swarming
	// tasks. Each of these task will have 'run_id' set as their 'TaskRequest.parent_task_id'.
	ChildrenTaskIds []string `protobuf:"bytes,13,rep,name=children_task_ids,json=childrenTaskIds,proto3" json:"children_task_ids,omitempty"`
	// Task ID which results was reused for state DEDUPED.
	//
	// This is the run_id (ending with '1', '2' or more).
	DedupedFrom string `protobuf:"bytes,14,opt,name=deduped_from,json=dedupedFrom,proto3" json:"deduped_from,omitempty"`
	// Summary task ID (ending with '0') when creating a new task.
	TaskId string `protobuf:"bytes,15,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Actual executed task id that this task represents.
	//
	// This value is only set if it ran, that is, the task went through one of the
	// state in CATEGORY_RUNNING.
	RunId string `protobuf:"bytes,16,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// Listing of the actual pinned CIPDPackages that the task used.
	//
	// These can vary from the input packages if the inputs included non-identity
	// versions (e.g. a ref like "latest"). This can be available once task setup
	// is completed.
	CipdPins *CIPDPins `protobuf:"bytes,17,opt,name=cipd_pins,json=cipdPins,proto3" json:"cipd_pins,omitempty"`
	// Statistics about overhead for an isolated task. This is populated as the
	// task goes through setup, execution and teardown.
	Performance *TaskPerformance `protobuf:"bytes,18,opt,name=performance,proto3" json:"performance,omitempty"`
	// Process exit code if relevant. May be forcibly set to -1 in exceptional
	// cases.
	ExitCode int64 `protobuf:"zigzag64,19,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Isolated outputs, if any.
	//
	// Deprecated: `cas_output_root` will be used.
	Outputs *CASTree `protobuf:"bytes,20,opt,name=outputs,proto3" json:"outputs,omitempty"`
	// RBE-CAS output, if any.
	CasOutputRoot *api_v2.CASReference `protobuf:"bytes,21,opt,name=cas_output_root,json=casOutputRoot,proto3" json:"cas_output_root,omitempty"`
	// ResultDB related properties for this task.
	ResultdbInfo  *api_v2.ResultDBInfo `protobuf:"bytes,22,opt,name=resultdb_info,json=resultdbInfo,proto3" json:"resultdb_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{9}
}

func (x *TaskResult) GetRequest() *TaskRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *TaskResult) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskResult) GetAbandonTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AbandonTime
	}
	return nil
}

func (x *TaskResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskResult) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TaskResult) GetState() TaskState {
	if x != nil {
		return x.State
	}
	return TaskState_TASK_STATE_INVALID
}

func (x *TaskResult) GetStateCategory() TaskStateCategory {
	if x != nil {
		return x.StateCategory
	}
	return TaskStateCategory_TASK_STATE_CATEGORY_UNSPECIFIED
}

func (x *TaskResult) GetTryNumber() int32 {
	if x != nil {
		return x.TryNumber
	}
	return 0
}

func (x *TaskResult) GetCurrentTaskSlice() int32 {
	if x != nil {
		return x.CurrentTaskSlice
	}
	return 0
}

func (x *TaskResult) GetBot() *Bot {
	if x != nil {
		return x.Bot
	}
	return nil
}

func (x *TaskResult) GetServerVersions() []string {
	if x != nil {
		return x.ServerVersions
	}
	return nil
}

func (x *TaskResult) GetChildrenTaskIds() []string {
	if x != nil {
		return x.ChildrenTaskIds
	}
	return nil
}

func (x *TaskResult) GetDedupedFrom() string {
	if x != nil {
		return x.DedupedFrom
	}
	return ""
}

func (x *TaskResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResult) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TaskResult) GetCipdPins() *CIPDPins {
	if x != nil {
		return x.CipdPins
	}
	return nil
}

func (x *TaskResult) GetPerformance() *TaskPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

func (x *TaskResult) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *TaskResult) GetOutputs() *CASTree {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TaskResult) GetCasOutputRoot() *api_v2.CASReference {
	if x != nil {
		return x.CasOutputRoot
	}
	return nil
}

func (x *TaskResult) GetResultdbInfo() *api_v2.ResultDBInfo {
	if x != nil {
		return x.ResultdbInfo
	}
	return nil
}

// Deprecated and unused.
type CASTree struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        string                 `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Digest        string                 `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	Namespace     string                 `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CASTree) Reset() {
	*x = CASTree{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CASTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CASTree) ProtoMessage() {}

func (x *CASTree) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CASTree.ProtoReflect.Descriptor instead.
func (*CASTree) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{10}
}

func (x *CASTree) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *CASTree) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *CASTree) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Defines one CIPD package to install prior to running the task.
//
// CIPD packages are versioned and ACL'ed packages that are meant for tools that
// are kept for a long time.
type CIPDPackage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The template for the CIPD package name that will have its variables
	// evaluated, e.g. "infra/tools/authutil/${platform}".
	PackageName string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// Package version for the requested package.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Path to directory relative to the task's root dir, where the package is to
	// be installed.
	//
	// If empty, the package will be installed at the root of the mapped
	// directory.
	DestPath      string `protobuf:"bytes,3,opt,name=dest_path,json=destPath,proto3" json:"dest_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CIPDPackage) Reset() {
	*x = CIPDPackage{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CIPDPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPDPackage) ProtoMessage() {}

func (x *CIPDPackage) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPDPackage.ProtoReflect.Descriptor instead.
func (*CIPDPackage) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{11}
}

func (x *CIPDPackage) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *CIPDPackage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CIPDPackage) GetDestPath() string {
	if x != nil {
		return x.DestPath
	}
	return ""
}

// Defines pinned CIPD packages that were installed during the task.
type CIPDPins struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The CIPD server where the CIPD packages were fetched from. Must contain
	// "https://" or "http://" prefix.
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// The pinned package + version of the CIPD client that was actually used.
	ClientPackage *CIPDPackage `protobuf:"bytes,2,opt,name=client_package,json=clientPackage,proto3" json:"client_package,omitempty"`
	// List of CIPD packages that were installed in the task with fully resolved
	// package names and versions.
	Packages      []*CIPDPackage `protobuf:"bytes,3,rep,name=packages,proto3" json:"packages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CIPDPins) Reset() {
	*x = CIPDPins{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CIPDPins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPDPins) ProtoMessage() {}

func (x *CIPDPins) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPDPins.ProtoReflect.Descriptor instead.
func (*CIPDPins) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{12}
}

func (x *CIPDPins) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *CIPDPins) GetClientPackage() *CIPDPackage {
	if x != nil {
		return x.ClientPackage
	}
	return nil
}

func (x *CIPDPins) GetPackages() []*CIPDPackage {
	if x != nil {
		return x.Packages
	}
	return nil
}

// Bot local content addressed cache information.
type CASStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumberItems   int64                  `protobuf:"varint,1,opt,name=number_items,json=numberItems,proto3" json:"number_items,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	OldestTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=oldest_time,json=oldestTime,proto3" json:"oldest_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CASStats) Reset() {
	*x = CASStats{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CASStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CASStats) ProtoMessage() {}

func (x *CASStats) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CASStats.ProtoReflect.Descriptor instead.
func (*CASStats) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{13}
}

func (x *CASStats) GetNumberItems() int64 {
	if x != nil {
		return x.NumberItems
	}
	return 0
}

func (x *CASStats) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CASStats) GetOldestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OldestTime
	}
	return nil
}

// Bot local named cache information.
type NamedCacheStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	LastUseTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_use_time,json=lastUseTime,proto3" json:"last_use_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedCacheStats) Reset() {
	*x = NamedCacheStats{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedCacheStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedCacheStats) ProtoMessage() {}

func (x *NamedCacheStats) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedCacheStats.ProtoReflect.Descriptor instead.
func (*NamedCacheStats) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{14}
}

func (x *NamedCacheStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedCacheStats) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *NamedCacheStats) GetLastUseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUseTime
	}
	return nil
}

// Bot local CIPD package cache information.
type CIPDPackageCacheStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	LastUseTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_use_time,json=lastUseTime,proto3" json:"last_use_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CIPDPackageCacheStats) Reset() {
	*x = CIPDPackageCacheStats{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CIPDPackageCacheStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPDPackageCacheStats) ProtoMessage() {}

func (x *CIPDPackageCacheStats) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPDPackageCacheStats.ProtoReflect.Descriptor instead.
func (*CIPDPackageCacheStats) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{15}
}

func (x *CIPDPackageCacheStats) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CIPDPackageCacheStats) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CIPDPackageCacheStats) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CIPDPackageCacheStats) GetLastUseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUseTime
	}
	return nil
}

// Information about the task's performance.
type TaskPerformance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total cost of running this task in $USD. In the case of DEDUPED task, this
	// represents the amount saved.
	CostUsd float32 `protobuf:"fixed32,1,opt,name=cost_usd,json=costUsd,proto3" json:"cost_usd,omitempty"`
	// Total overhead caused by the bot in seconds.
	//
	// This is calculated by subtracting the duration of the actual task command
	// from the overall duration of the task (that includes fetching of inputs
	// reporting of results).
	TotalOverhead float64 `protobuf:"fixed64,5,opt,name=total_overhead,json=totalOverhead,proto3" json:"total_overhead,omitempty"`
	// Overhead in seconds that is not accounted for by the other overheads.
	OtherOverhead float64 `protobuf:"fixed64,2,opt,name=other_overhead,json=otherOverhead,proto3" json:"other_overhead,omitempty"`
	// Deprecated: use setup_overhead instead.
	// Task environment setup overhead. This is the task state
	// RUNNING_OVERHEAD_SETUP.
	Setup *TaskOverheadStats `protobuf:"bytes,3,opt,name=setup,proto3" json:"setup,omitempty"`
	// Deprecated: use teardown_overhead instead.
	// Task environment teardown overhead. This is the task state
	// RUNNING_OVERHEAD_TEARDOWN.
	Teardown *TaskOverheadStats `protobuf:"bytes,4,opt,name=teardown,proto3" json:"teardown,omitempty"`
	// Task environment setup overhead. This is the task state
	// RUNNING_OVERHEAD_SETUP.
	SetupOverhead *TaskSetupOverhead `protobuf:"bytes,6,opt,name=setup_overhead,json=setupOverhead,proto3" json:"setup_overhead,omitempty"`
	// Task environment teardown overhead. This is the task state
	// RUNNING_OVERHEAD_TEARDOWN.
	TeardownOverhead *TaskTeardownOverhead `protobuf:"bytes,7,opt,name=teardown_overhead,json=teardownOverhead,proto3" json:"teardown_overhead,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaskPerformance) Reset() {
	*x = TaskPerformance{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPerformance) ProtoMessage() {}

func (x *TaskPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPerformance.ProtoReflect.Descriptor instead.
func (*TaskPerformance) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{16}
}

func (x *TaskPerformance) GetCostUsd() float32 {
	if x != nil {
		return x.CostUsd
	}
	return 0
}

func (x *TaskPerformance) GetTotalOverhead() float64 {
	if x != nil {
		return x.TotalOverhead
	}
	return 0
}

func (x *TaskPerformance) GetOtherOverhead() float64 {
	if x != nil {
		return x.OtherOverhead
	}
	return 0
}

func (x *TaskPerformance) GetSetup() *TaskOverheadStats {
	if x != nil {
		return x.Setup
	}
	return nil
}

func (x *TaskPerformance) GetTeardown() *TaskOverheadStats {
	if x != nil {
		return x.Teardown
	}
	return nil
}

func (x *TaskPerformance) GetSetupOverhead() *TaskSetupOverhead {
	if x != nil {
		return x.SetupOverhead
	}
	return nil
}

func (x *TaskPerformance) GetTeardownOverhead() *TaskTeardownOverhead {
	if x != nil {
		return x.TeardownOverhead
	}
	return nil
}

// Overhead information about setup.
type TaskSetupOverhead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// Cache trimming overhead.
	CacheTrim *CacheTrimOverhead `protobuf:"bytes,2,opt,name=cache_trim,json=cacheTrim,proto3" json:"cache_trim,omitempty"`
	// CIPD package installation overhead.
	Cipd *CIPDOverhead `protobuf:"bytes,3,opt,name=cipd,proto3" json:"cipd,omitempty"`
	// Named cache install overhead.
	NamedCache *NamedCacheOverhead `protobuf:"bytes,4,opt,name=named_cache,json=namedCache,proto3" json:"named_cache,omitempty"`
	// CAS download overhead.
	Cas           *CASOverhead `protobuf:"bytes,5,opt,name=cas,proto3" json:"cas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskSetupOverhead) Reset() {
	*x = TaskSetupOverhead{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSetupOverhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSetupOverhead) ProtoMessage() {}

func (x *TaskSetupOverhead) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSetupOverhead.ProtoReflect.Descriptor instead.
func (*TaskSetupOverhead) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{17}
}

func (x *TaskSetupOverhead) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TaskSetupOverhead) GetCacheTrim() *CacheTrimOverhead {
	if x != nil {
		return x.CacheTrim
	}
	return nil
}

func (x *TaskSetupOverhead) GetCipd() *CIPDOverhead {
	if x != nil {
		return x.Cipd
	}
	return nil
}

func (x *TaskSetupOverhead) GetNamedCache() *NamedCacheOverhead {
	if x != nil {
		return x.NamedCache
	}
	return nil
}

func (x *TaskSetupOverhead) GetCas() *CASOverhead {
	if x != nil {
		return x.Cas
	}
	return nil
}

// Overhead information about teardown.
type TaskTeardownOverhead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// CAS upload overhead.
	Cas *CASOverhead `protobuf:"bytes,2,opt,name=cas,proto3" json:"cas,omitempty"`
	// Named cache uninstall overhead.
	NamedCache *NamedCacheOverhead `protobuf:"bytes,3,opt,name=named_cache,json=namedCache,proto3" json:"named_cache,omitempty"`
	// Directory cleanup overhead.
	Cleanup       *CleanupOverhead `protobuf:"bytes,4,opt,name=cleanup,proto3" json:"cleanup,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskTeardownOverhead) Reset() {
	*x = TaskTeardownOverhead{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskTeardownOverhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskTeardownOverhead) ProtoMessage() {}

func (x *TaskTeardownOverhead) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskTeardownOverhead.ProtoReflect.Descriptor instead.
func (*TaskTeardownOverhead) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{18}
}

func (x *TaskTeardownOverhead) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TaskTeardownOverhead) GetCas() *CASOverhead {
	if x != nil {
		return x.Cas
	}
	return nil
}

func (x *TaskTeardownOverhead) GetNamedCache() *NamedCacheOverhead {
	if x != nil {
		return x.NamedCache
	}
	return nil
}

func (x *TaskTeardownOverhead) GetCleanup() *CleanupOverhead {
	if x != nil {
		return x.Cleanup
	}
	return nil
}

// Overhead information about cache trimming.
type CacheTrimOverhead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration      float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheTrimOverhead) Reset() {
	*x = CacheTrimOverhead{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheTrimOverhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheTrimOverhead) ProtoMessage() {}

func (x *CacheTrimOverhead) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheTrimOverhead.ProtoReflect.Descriptor instead.
func (*CacheTrimOverhead) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{19}
}

func (x *CacheTrimOverhead) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Overhead information about CIPD package installation.
type CIPDOverhead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration      float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CIPDOverhead) Reset() {
	*x = CIPDOverhead{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CIPDOverhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CIPDOverhead) ProtoMessage() {}

func (x *CIPDOverhead) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CIPDOverhead.ProtoReflect.Descriptor instead.
func (*CIPDOverhead) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{20}
}

func (x *CIPDOverhead) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Overhead information about Named Caches install or uninstall.
type NamedCacheOverhead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration      float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedCacheOverhead) Reset() {
	*x = NamedCacheOverhead{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedCacheOverhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedCacheOverhead) ProtoMessage() {}

func (x *NamedCacheOverhead) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedCacheOverhead.ProtoReflect.Descriptor instead.
func (*NamedCacheOverhead) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{21}
}

func (x *NamedCacheOverhead) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Overhead information about CAS download or upload.
type CASOverhead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// CAS entries that were not present in the local or remote cache and had to
	// be sent across the network.
	Cold *CASEntriesStats `protobuf:"bytes,2,opt,name=cold,proto3" json:"cold,omitempty"`
	// CAS entries that were in the cache and thus didn't have to be transferred.
	Hot           *CASEntriesStats `protobuf:"bytes,3,opt,name=hot,proto3" json:"hot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CASOverhead) Reset() {
	*x = CASOverhead{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CASOverhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CASOverhead) ProtoMessage() {}

func (x *CASOverhead) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CASOverhead.ProtoReflect.Descriptor instead.
func (*CASOverhead) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{22}
}

func (x *CASOverhead) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CASOverhead) GetCold() *CASEntriesStats {
	if x != nil {
		return x.Cold
	}
	return nil
}

func (x *CASOverhead) GetHot() *CASEntriesStats {
	if x != nil {
		return x.Hot
	}
	return nil
}

// Overhead information about cleanup step.
type CleanupOverhead struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration      float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CleanupOverhead) Reset() {
	*x = CleanupOverhead{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupOverhead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupOverhead) ProtoMessage() {}

func (x *CleanupOverhead) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupOverhead.ProtoReflect.Descriptor instead.
func (*CleanupOverhead) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{23}
}

func (x *CleanupOverhead) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// Deprecated: Use TaskSetupOverhead or TaskTeardownOverhead instead.
type TaskOverheadStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Duration of this overhead in seconds.
	Duration float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// CAS entries that were not present in the local or remote cache and had to
	// be sent across the network.
	Cold *CASEntriesStats `protobuf:"bytes,2,opt,name=cold,proto3" json:"cold,omitempty"`
	// CAS entries that were in the cache and thus didn't have to be transferred.
	Hot           *CASEntriesStats `protobuf:"bytes,3,opt,name=hot,proto3" json:"hot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskOverheadStats) Reset() {
	*x = TaskOverheadStats{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskOverheadStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOverheadStats) ProtoMessage() {}

func (x *TaskOverheadStats) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOverheadStats.ProtoReflect.Descriptor instead.
func (*TaskOverheadStats) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{24}
}

func (x *TaskOverheadStats) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TaskOverheadStats) GetCold() *CASEntriesStats {
	if x != nil {
		return x.Cold
	}
	return nil
}

func (x *TaskOverheadStats) GetHot() *CASEntriesStats {
	if x != nil {
		return x.Hot
	}
	return nil
}

// Statistics for differential CAS entries in the context of I/O for a task.
type CASEntriesStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of entries in the cache.
	NumItems int64 `protobuf:"varint,1,opt,name=num_items,json=numItems,proto3" json:"num_items,omitempty"`
	// Total size of the cached items.
	TotalBytesItems int64 `protobuf:"varint,2,opt,name=total_bytes_items,json=totalBytesItems,proto3" json:"total_bytes_items,omitempty"`
	// Unused.
	Items         []byte `protobuf:"bytes,6,opt,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CASEntriesStats) Reset() {
	*x = CASEntriesStats{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CASEntriesStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CASEntriesStats) ProtoMessage() {}

func (x *CASEntriesStats) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CASEntriesStats.ProtoReflect.Descriptor instead.
func (*CASEntriesStats) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{25}
}

func (x *CASEntriesStats) GetNumItems() int64 {
	if x != nil {
		return x.NumItems
	}
	return 0
}

func (x *CASEntriesStats) GetTotalBytesItems() int64 {
	if x != nil {
		return x.TotalBytesItems
	}
	return 0
}

func (x *CASEntriesStats) GetItems() []byte {
	if x != nil {
		return x.Items
	}
	return nil
}

// Represents a mapping of a string to a string.
type StringPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringPair) Reset() {
	*x = StringPair{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringPair) ProtoMessage() {}

func (x *StringPair) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringPair.ProtoReflect.Descriptor instead.
func (*StringPair) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{26}
}

func (x *StringPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Represents a mapping of a string to a list of strings.
type StringListPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values        []string               `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringListPair) Reset() {
	*x = StringListPair{}
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringListPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringListPair) ProtoMessage() {}

func (x *StringListPair) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringListPair.ProtoReflect.Descriptor instead.
func (*StringListPair) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP(), []int{27}
}

func (x *StringListPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringListPair) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_go_chromium_org_luci_swarming_proto_bq_swarming_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDesc = "" +
	"\n" +
	"5go.chromium.org/luci/swarming/proto/bq/swarming.proto\x12\vswarming.bq\x1a\x1fgoogle/protobuf/timestamp.proto\x1a9go.chromium.org/luci/swarming/proto/api_v2/swarming.proto\x1a4go.chromium.org/luci/swarming/proto/bq/options.proto\"\x95\x05\n" +
	"\vTaskRequest\x127\n" +
	"\vtask_slices\x18\x01 \x03(\v2\x16.swarming.bq.TaskSliceR\n" +
	"taskSlices\x12\x1a\n" +
	"\bpriority\x18\x02 \x01(\x05R\bpriority\x12'\n" +
	"\x0fservice_account\x18\x03 \x01(\tR\x0eserviceAccount\x12;\n" +
	"\vcreate_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\x12\x12\n" +
	"\x04user\x18\a \x01(\tR\x04user\x12$\n" +
	"\rauthenticated\x18\r \x01(\tR\rauthenticated\x12\x14\n" +
	"\x05realm\x18\x0e \x01(\tR\x05realm\x124\n" +
	"\bresultdb\x18\x0f \x01(\v2\x18.swarming.v2.ResultDBCfgR\bresultdb\x12\x17\n" +
	"\atask_id\x18\b \x01(\tR\x06taskId\x12$\n" +
	"\x0eparent_task_id\x18\t \x01(\tR\fparentTaskId\x12\"\n" +
	"\rparent_run_id\x18\v \x01(\tR\vparentRunId\x12 \n" +
	"\froot_task_id\x18\x10 \x01(\tR\n" +
	"rootTaskId\x12\x1e\n" +
	"\vroot_run_id\x18\x11 \x01(\tR\trootRunId\x12D\n" +
	"\x13pubsub_notification\x18\n" +
	" \x01(\v2\x13.swarming.bq.PubSubR\x12pubsubNotification\x122\n" +
	"\x12bot_ping_tolerance\x18\f \x01(\x01B\x04\xe0\xb9%\x02R\x10botPingTolerance\"\xc3\x01\n" +
	"\tTaskSlice\x12;\n" +
	"\n" +
	"properties\x18\x01 \x01(\v2\x1b.swarming.bq.TaskPropertiesR\n" +
	"properties\x12$\n" +
	"\n" +
	"expiration\x18\x02 \x01(\x01B\x04\xe0\xb9%\x02R\n" +
	"expiration\x12*\n" +
	"\x11wait_for_capacity\x18\x03 \x01(\bR\x0fwaitForCapacity\x12'\n" +
	"\x0fproperties_hash\x18\x04 \x01(\tR\x0epropertiesHash\"\xeb\x06\n" +
	"\x0eTaskProperties\x123\n" +
	"\n" +
	"cas_inputs\x18\x01 \x01(\v2\x14.swarming.bq.CASTreeR\tcasInputs\x12?\n" +
	"\x0ecas_input_root\x18\x12 \x01(\v2\x19.swarming.v2.CASReferenceR\fcasInputRoot\x129\n" +
	"\vcipd_inputs\x18\x02 \x03(\v2\x18.swarming.bq.CIPDPackageR\n" +
	"cipdInputs\x12?\n" +
	"\fnamed_caches\x18\x03 \x03(\v2\x1c.swarming.bq.NamedCacheEntryR\vnamedCaches\x12\x18\n" +
	"\acommand\x18\x04 \x03(\tR\acommand\x12!\n" +
	"\frelative_cwd\x18\x05 \x01(\tR\vrelativeCwd\x12\x1d\n" +
	"\n" +
	"extra_args\x18\x06 \x03(\tR\textraArgs\x12!\n" +
	"\fsecret_bytes\x18\a \x01(\fR\vsecretBytes\x12(\n" +
	"\x10has_secret_bytes\x18\b \x01(\bR\x0ehasSecretBytes\x12;\n" +
	"\n" +
	"dimensions\x18\t \x03(\v2\x1b.swarming.bq.StringListPairR\n" +
	"dimensions\x12)\n" +
	"\x03env\x18\n" +
	" \x03(\v2\x17.swarming.bq.StringPairR\x03env\x128\n" +
	"\tenv_paths\x18\v \x03(\v2\x1b.swarming.bq.StringListPairR\benvPaths\x12:\n" +
	"\vcontainment\x18\f \x01(\v2\x18.swarming.v2.ContainmentR\vcontainment\x121\n" +
	"\x11execution_timeout\x18\r \x01(\x01B\x04\xe0\xb9%\x02R\x10executionTimeout\x12#\n" +
	"\n" +
	"io_timeout\x18\x0e \x01(\x01B\x04\xe0\xb9%\x02R\tioTimeout\x12'\n" +
	"\fgrace_period\x18\x0f \x01(\x01B\x04\xe0\xb9%\x02R\vgracePeriod\x12\x1e\n" +
	"\n" +
	"idempotent\x18\x10 \x01(\bR\n" +
	"idempotent\x12\x18\n" +
	"\aoutputs\x18\x11 \x03(\tR\aoutputs\x12%\n" +
	"\x04user\x18\x13 \x01(\x0e2\x11.swarming.bq.UserR\x04user\"B\n" +
	"\x0fNamedCacheEntry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tdest_path\x18\x02 \x01(\tR\bdestPath\"Y\n" +
	"\x06PubSub\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1d\n" +
	"\n" +
	"auth_token\x18\x02 \x01(\tR\tauthToken\x12\x1a\n" +
	"\buserdata\x18\x03 \x01(\tR\buserdata\"\xb7\x01\n" +
	"\bBotEvent\x129\n" +
	"\n" +
	"event_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\teventTime\x12\"\n" +
	"\x03bot\x18\x02 \x01(\v2\x10.swarming.bq.BotR\x03bot\x12/\n" +
	"\x05event\x18\x03 \x01(\x0e2\x19.swarming.bq.BotEventTypeR\x05event\x12\x1b\n" +
	"\tevent_msg\x18\x04 \x01(\tR\beventMsg\"\xb3\x02\n" +
	"\x03Bot\x12\x15\n" +
	"\x06bot_id\x18\x01 \x01(\tR\x05botId\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x14\n" +
	"\x05pools\x18\x03 \x03(\tR\x05pools\x122\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1a.swarming.bq.BotStatusTypeR\x06status\x12\x1d\n" +
	"\n" +
	"status_msg\x18\x05 \x01(\tR\tstatusMsg\x12&\n" +
	"\x0fcurrent_task_id\x18\x06 \x01(\tR\rcurrentTaskId\x12;\n" +
	"\n" +
	"dimensions\x18\a \x03(\v2\x1b.swarming.bq.StringListPairR\n" +
	"dimensions\x12(\n" +
	"\x04info\x18\b \x01(\v2\x14.swarming.bq.BotInfoR\x04info\"\xf6\x04\n" +
	"\aBotInfo\x12(\n" +
	"\fsupplemental\x18\x01 \x01(\tB\x04\xe0\xb9%\x01R\fsupplemental\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1f\n" +
	"\vexternal_ip\x18\x03 \x01(\tR\n" +
	"externalIp\x12)\n" +
	"\x10authenticated_as\x18\x04 \x01(\tR\x0fauthenticatedAs\x122\n" +
	"\tcas_stats\x18\x05 \x01(\v2\x15.swarming.bq.CASStatsR\bcasStats\x12J\n" +
	"\x12named_caches_stats\x18\x06 \x03(\v2\x1c.swarming.bq.NamedCacheStatsR\x10namedCachesStats\x12]\n" +
	"\x19cipd_packages_cache_stats\x18\a \x03(\v2\".swarming.bq.CIPDPackageCacheStatsR\x16cipdPackagesCacheStats\x12/\n" +
	"\x04host\x18\b \x01(\v2\x1b.swarming.bq.PhysicalEntityR\x04host\x125\n" +
	"\adevices\x18\t \x03(\v2\x1b.swarming.bq.PhysicalEntityR\adevices\x12<\n" +
	"\flast_seen_ts\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastSeenTs\x12>\n" +
	"\ridle_since_ts\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\vidleSinceTs\x12\x16\n" +
	"\x06owners\x18\f \x03(\tR\x06owners\"^\n" +
	"\x0ePhysicalEntity\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12(\n" +
	"\fsupplemental\x18\x02 \x01(\tB\x04\xe0\xb9%\x01R\fsupplemental\x12\x0e\n" +
	"\x02ip\x18\x03 \x01(\tR\x02ip\"\xa2\b\n" +
	"\n" +
	"TaskResult\x122\n" +
	"\arequest\x18\x01 \x01(\v2\x18.swarming.bq.TaskRequestR\arequest\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12=\n" +
	"\fabandon_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vabandonTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12 \n" +
	"\bduration\x18\x06 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\x12,\n" +
	"\x05state\x18\a \x01(\x0e2\x16.swarming.bq.TaskStateR\x05state\x12E\n" +
	"\x0estate_category\x18\b \x01(\x0e2\x1e.swarming.bq.TaskStateCategoryR\rstateCategory\x12\x1d\n" +
	"\n" +
	"try_number\x18\t \x01(\x05R\ttryNumber\x12,\n" +
	"\x12current_task_slice\x18\n" +
	" \x01(\x05R\x10currentTaskSlice\x12\"\n" +
	"\x03bot\x18\v \x01(\v2\x10.swarming.bq.BotR\x03bot\x12'\n" +
	"\x0fserver_versions\x18\f \x03(\tR\x0eserverVersions\x12*\n" +
	"\x11children_task_ids\x18\r \x03(\tR\x0fchildrenTaskIds\x12!\n" +
	"\fdeduped_from\x18\x0e \x01(\tR\vdedupedFrom\x12\x17\n" +
	"\atask_id\x18\x0f \x01(\tR\x06taskId\x12\x15\n" +
	"\x06run_id\x18\x10 \x01(\tR\x05runId\x122\n" +
	"\tcipd_pins\x18\x11 \x01(\v2\x15.swarming.bq.CIPDPinsR\bcipdPins\x12>\n" +
	"\vperformance\x18\x12 \x01(\v2\x1c.swarming.bq.TaskPerformanceR\vperformance\x12\x1b\n" +
	"\texit_code\x18\x13 \x01(\x12R\bexitCode\x12.\n" +
	"\aoutputs\x18\x14 \x01(\v2\x14.swarming.bq.CASTreeR\aoutputs\x12A\n" +
	"\x0fcas_output_root\x18\x15 \x01(\v2\x19.swarming.v2.CASReferenceR\rcasOutputRoot\x12>\n" +
	"\rresultdb_info\x18\x16 \x01(\v2\x19.swarming.v2.ResultDBInfoR\fresultdbInfo\"W\n" +
	"\aCASTree\x12\x16\n" +
	"\x06server\x18\x01 \x01(\tR\x06server\x12\x16\n" +
	"\x06digest\x18\x02 \x01(\tR\x06digest\x12\x1c\n" +
	"\tnamespace\x18\x03 \x01(\tR\tnamespace\"g\n" +
	"\vCIPDPackage\x12!\n" +
	"\fpackage_name\x18\x01 \x01(\tR\vpackageName\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x1b\n" +
	"\tdest_path\x18\x03 \x01(\tR\bdestPath\"\x99\x01\n" +
	"\bCIPDPins\x12\x16\n" +
	"\x06server\x18\x01 \x01(\tR\x06server\x12?\n" +
	"\x0eclient_package\x18\x02 \x01(\v2\x18.swarming.bq.CIPDPackageR\rclientPackage\x124\n" +
	"\bpackages\x18\x03 \x03(\v2\x18.swarming.bq.CIPDPackageR\bpackages\"~\n" +
	"\bCASStats\x12!\n" +
	"\fnumber_items\x18\x01 \x01(\x03R\vnumberItems\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12;\n" +
	"\voldest_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"oldestTime\"y\n" +
	"\x0fNamedCacheStats\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12>\n" +
	"\rlast_use_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\vlastUseTime\"\x99\x01\n" +
	"\x15CIPDPackageCacheStats\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12>\n" +
	"\rlast_use_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\vlastUseTime\"\x8f\x03\n" +
	"\x0fTaskPerformance\x12\x19\n" +
	"\bcost_usd\x18\x01 \x01(\x02R\acostUsd\x12+\n" +
	"\x0etotal_overhead\x18\x05 \x01(\x01B\x04\xe0\xb9%\x02R\rtotalOverhead\x12+\n" +
	"\x0eother_overhead\x18\x02 \x01(\x01B\x04\xe0\xb9%\x02R\rotherOverhead\x124\n" +
	"\x05setup\x18\x03 \x01(\v2\x1e.swarming.bq.TaskOverheadStatsR\x05setup\x12:\n" +
	"\bteardown\x18\x04 \x01(\v2\x1e.swarming.bq.TaskOverheadStatsR\bteardown\x12E\n" +
	"\x0esetup_overhead\x18\x06 \x01(\v2\x1e.swarming.bq.TaskSetupOverheadR\rsetupOverhead\x12N\n" +
	"\x11teardown_overhead\x18\a \x01(\v2!.swarming.bq.TaskTeardownOverheadR\x10teardownOverhead\"\x91\x02\n" +
	"\x11TaskSetupOverhead\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\x12=\n" +
	"\n" +
	"cache_trim\x18\x02 \x01(\v2\x1e.swarming.bq.CacheTrimOverheadR\tcacheTrim\x12-\n" +
	"\x04cipd\x18\x03 \x01(\v2\x19.swarming.bq.CIPDOverheadR\x04cipd\x12@\n" +
	"\vnamed_cache\x18\x04 \x01(\v2\x1f.swarming.bq.NamedCacheOverheadR\n" +
	"namedCache\x12*\n" +
	"\x03cas\x18\x05 \x01(\v2\x18.swarming.bq.CASOverheadR\x03cas\"\xde\x01\n" +
	"\x14TaskTeardownOverhead\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\x12*\n" +
	"\x03cas\x18\x02 \x01(\v2\x18.swarming.bq.CASOverheadR\x03cas\x12@\n" +
	"\vnamed_cache\x18\x03 \x01(\v2\x1f.swarming.bq.NamedCacheOverheadR\n" +
	"namedCache\x126\n" +
	"\acleanup\x18\x04 \x01(\v2\x1c.swarming.bq.CleanupOverheadR\acleanup\"5\n" +
	"\x11CacheTrimOverhead\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\"0\n" +
	"\fCIPDOverhead\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\"6\n" +
	"\x12NamedCacheOverhead\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\"\x91\x01\n" +
	"\vCASOverhead\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\x120\n" +
	"\x04cold\x18\x02 \x01(\v2\x1c.swarming.bq.CASEntriesStatsR\x04cold\x12.\n" +
	"\x03hot\x18\x03 \x01(\v2\x1c.swarming.bq.CASEntriesStatsR\x03hot\"3\n" +
	"\x0fCleanupOverhead\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\"\x97\x01\n" +
	"\x11TaskOverheadStats\x12 \n" +
	"\bduration\x18\x01 \x01(\x01B\x04\xe0\xb9%\x02R\bduration\x120\n" +
	"\x04cold\x18\x02 \x01(\v2\x1c.swarming.bq.CASEntriesStatsR\x04cold\x12.\n" +
	"\x03hot\x18\x03 \x01(\v2\x1c.swarming.bq.CASEntriesStatsR\x03hot\"p\n" +
	"\x0fCASEntriesStats\x12\x1b\n" +
	"\tnum_items\x18\x01 \x01(\x03R\bnumItems\x12*\n" +
	"\x11total_bytes_items\x18\x02 \x01(\x03R\x0ftotalBytesItems\x12\x14\n" +
	"\x05items\x18\x06 \x01(\fR\x05items\"4\n" +
	"\n" +
	"StringPair\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\":\n" +
	"\x0eStringListPair\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06values*\x8f\x03\n" +
	"\fBotEventType\x12\x1e\n" +
	"\x1aBOT_EVENT_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fBOT_NEW_SESSION\x10\x01\x12\x18\n" +
	"\x14BOT_INTERNAL_FAILURE\x10\x02\x12\x12\n" +
	"\x0eBOT_HOOK_ERROR\x10\x03\x12\x10\n" +
	"\fBOT_HOOK_LOG\x10\x04\x12\x16\n" +
	"\x12BOT_REBOOTING_HOST\x10\x05\x12\x10\n" +
	"\fBOT_SHUTDOWN\x10\x06\x12\x0f\n" +
	"\vBOT_DELETED\x10\a\x12\x0f\n" +
	"\vBOT_MISSING\x10\b\x12\x11\n" +
	"\rINSTRUCT_IDLE\x10\n" +
	"\x12\x17\n" +
	"\x13INSTRUCT_START_TASK\x10\v\x12\x18\n" +
	"\x14INSTRUCT_RESTART_BOT\x10\f\x12\x1c\n" +
	"\x18INSTRUCT_UPDATE_BOT_CODE\x10\r\x12\x1a\n" +
	"\x16INSTRUCT_TERMINATE_BOT\x10\x0e\x12\x12\n" +
	"\x0eTASK_COMPLETED\x10\x14\x12\x19\n" +
	"\x15TASK_INTERNAL_FAILURE\x10\x15\x12\x0f\n" +
	"\vTASK_KILLED\x10\x16*\xdf\x01\n" +
	"\rBotStatusType\x12\x1a\n" +
	"\x16BOT_STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aMISSING\x10\x01\x12\x19\n" +
	"\x15QUARANTINED_BY_SERVER\x10\x02\x12\x16\n" +
	"\x12QUARANTINED_BY_BOT\x10\x03\x12!\n" +
	"\x1dOVERHEAD_MAINTENANCE_EXTERNAL\x10\x04\x12\x19\n" +
	"\x15OVERHEAD_BOT_INTERNAL\x10\x05\x12\x12\n" +
	"\x0eHOST_REBOOTING\x10\x06\x12\b\n" +
	"\x04BUSY\x10\a\x12\f\n" +
	"\bRESERVED\x10\b\x12\b\n" +
	"\x04IDLE\x10\t*\xbb\x01\n" +
	"\x11TaskStateCategory\x12#\n" +
	"\x1fTASK_STATE_CATEGORY_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10CATEGORY_PENDING\x10\x10\x12\x14\n" +
	"\x10CATEGORY_RUNNING\x10 \x12\x1b\n" +
	"\x17CATEGORY_TRANSIENT_DONE\x100\x12\x1b\n" +
	"\x17CATEGORY_EXECUTION_DONE\x10@\x12\x1b\n" +
	"\x17CATEGORY_NEVER_RAN_DONE\x10P*\xe3\x03\n" +
	"\tTaskState\x12\x16\n" +
	"\x12TASK_STATE_INVALID\x10\x00\x12\v\n" +
	"\aPENDING\x10\x10\x12\x14\n" +
	"\x10PENDING_DEDUPING\x10\x11\x12\v\n" +
	"\aRUNNING\x10 \x12\x1a\n" +
	"\x16RUNNING_OVERHEAD_SETUP\x10!\x12\x1d\n" +
	"\x19RUNNING_OVERHEAD_TEARDOWN\x10\"\x12\x0f\n" +
	"\vTERMINATING\x10#\x12\x0e\n" +
	"\n" +
	"COMPLETING\x10/\x12\x18\n" +
	"\x14RAN_INTERNAL_FAILURE\x100\x12\x0f\n" +
	"\vDUT_FAILURE\x101\x12\x13\n" +
	"\x0fBOT_DISAPPEARED\x102\x12\r\n" +
	"\tPREEMPTED\x103\x12\r\n" +
	"\tCOMPLETED\x10@\x12\r\n" +
	"\tTIMED_OUT\x10A\x12\x15\n" +
	"\x11TIMED_OUT_SILENCE\x10B\x12\n" +
	"\n" +
	"\x06KILLED\x10C\x12\x12\n" +
	"\x0eMISSING_INPUTS\x10D\x12\v\n" +
	"\aDEDUPED\x10P\x12\v\n" +
	"\aEXPIRED\x10Q\x12\f\n" +
	"\bCANCELED\x10R\x12\x0f\n" +
	"\vNO_RESOURCE\x10S\x12\r\n" +
	"\tLOAD_SHED\x10T\x12\x16\n" +
	"\x12RESOURCE_EXHAUSTED\x10U\x12\x1c\n" +
	"\x18SKIPPED_INTERNAL_FAILURE\x10V\x12\x10\n" +
	"\fCLIENT_ERROR\x10W*C\n" +
	"\x04User\x12\x14\n" +
	"\x10USER_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rUSER_SWARMING\x10\x01\x12\x12\n" +
	"\x0eUSER_TEMPORARY\x10\x02B-Z+go.chromium.org/luci/swarming/proto/bq;bqpbb\x06proto3"

var (
	file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescData []byte
)

func file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDescData
}

var file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_goTypes = []any{
	(BotEventType)(0),             // 0: swarming.bq.BotEventType
	(BotStatusType)(0),            // 1: swarming.bq.BotStatusType
	(TaskStateCategory)(0),        // 2: swarming.bq.TaskStateCategory
	(TaskState)(0),                // 3: swarming.bq.TaskState
	(User)(0),                     // 4: swarming.bq.User
	(*TaskRequest)(nil),           // 5: swarming.bq.TaskRequest
	(*TaskSlice)(nil),             // 6: swarming.bq.TaskSlice
	(*TaskProperties)(nil),        // 7: swarming.bq.TaskProperties
	(*NamedCacheEntry)(nil),       // 8: swarming.bq.NamedCacheEntry
	(*PubSub)(nil),                // 9: swarming.bq.PubSub
	(*BotEvent)(nil),              // 10: swarming.bq.BotEvent
	(*Bot)(nil),                   // 11: swarming.bq.Bot
	(*BotInfo)(nil),               // 12: swarming.bq.BotInfo
	(*PhysicalEntity)(nil),        // 13: swarming.bq.PhysicalEntity
	(*TaskResult)(nil),            // 14: swarming.bq.TaskResult
	(*CASTree)(nil),               // 15: swarming.bq.CASTree
	(*CIPDPackage)(nil),           // 16: swarming.bq.CIPDPackage
	(*CIPDPins)(nil),              // 17: swarming.bq.CIPDPins
	(*CASStats)(nil),              // 18: swarming.bq.CASStats
	(*NamedCacheStats)(nil),       // 19: swarming.bq.NamedCacheStats
	(*CIPDPackageCacheStats)(nil), // 20: swarming.bq.CIPDPackageCacheStats
	(*TaskPerformance)(nil),       // 21: swarming.bq.TaskPerformance
	(*TaskSetupOverhead)(nil),     // 22: swarming.bq.TaskSetupOverhead
	(*TaskTeardownOverhead)(nil),  // 23: swarming.bq.TaskTeardownOverhead
	(*CacheTrimOverhead)(nil),     // 24: swarming.bq.CacheTrimOverhead
	(*CIPDOverhead)(nil),          // 25: swarming.bq.CIPDOverhead
	(*NamedCacheOverhead)(nil),    // 26: swarming.bq.NamedCacheOverhead
	(*CASOverhead)(nil),           // 27: swarming.bq.CASOverhead
	(*CleanupOverhead)(nil),       // 28: swarming.bq.CleanupOverhead
	(*TaskOverheadStats)(nil),     // 29: swarming.bq.TaskOverheadStats
	(*CASEntriesStats)(nil),       // 30: swarming.bq.CASEntriesStats
	(*StringPair)(nil),            // 31: swarming.bq.StringPair
	(*StringListPair)(nil),        // 32: swarming.bq.StringListPair
	(*timestamppb.Timestamp)(nil), // 33: google.protobuf.Timestamp
	(*api_v2.ResultDBCfg)(nil),    // 34: swarming.v2.ResultDBCfg
	(*api_v2.CASReference)(nil),   // 35: swarming.v2.CASReference
	(*api_v2.Containment)(nil),    // 36: swarming.v2.Containment
	(*api_v2.ResultDBInfo)(nil),   // 37: swarming.v2.ResultDBInfo
}
var file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_depIdxs = []int32{
	6,  // 0: swarming.bq.TaskRequest.task_slices:type_name -> swarming.bq.TaskSlice
	33, // 1: swarming.bq.TaskRequest.create_time:type_name -> google.protobuf.Timestamp
	34, // 2: swarming.bq.TaskRequest.resultdb:type_name -> swarming.v2.ResultDBCfg
	9,  // 3: swarming.bq.TaskRequest.pubsub_notification:type_name -> swarming.bq.PubSub
	7,  // 4: swarming.bq.TaskSlice.properties:type_name -> swarming.bq.TaskProperties
	15, // 5: swarming.bq.TaskProperties.cas_inputs:type_name -> swarming.bq.CASTree
	35, // 6: swarming.bq.TaskProperties.cas_input_root:type_name -> swarming.v2.CASReference
	16, // 7: swarming.bq.TaskProperties.cipd_inputs:type_name -> swarming.bq.CIPDPackage
	8,  // 8: swarming.bq.TaskProperties.named_caches:type_name -> swarming.bq.NamedCacheEntry
	32, // 9: swarming.bq.TaskProperties.dimensions:type_name -> swarming.bq.StringListPair
	31, // 10: swarming.bq.TaskProperties.env:type_name -> swarming.bq.StringPair
	32, // 11: swarming.bq.TaskProperties.env_paths:type_name -> swarming.bq.StringListPair
	36, // 12: swarming.bq.TaskProperties.containment:type_name -> swarming.v2.Containment
	4,  // 13: swarming.bq.TaskProperties.user:type_name -> swarming.bq.User
	33, // 14: swarming.bq.BotEvent.event_time:type_name -> google.protobuf.Timestamp
	11, // 15: swarming.bq.BotEvent.bot:type_name -> swarming.bq.Bot
	0,  // 16: swarming.bq.BotEvent.event:type_name -> swarming.bq.BotEventType
	1,  // 17: swarming.bq.Bot.status:type_name -> swarming.bq.BotStatusType
	32, // 18: swarming.bq.Bot.dimensions:type_name -> swarming.bq.StringListPair
	12, // 19: swarming.bq.Bot.info:type_name -> swarming.bq.BotInfo
	18, // 20: swarming.bq.BotInfo.cas_stats:type_name -> swarming.bq.CASStats
	19, // 21: swarming.bq.BotInfo.named_caches_stats:type_name -> swarming.bq.NamedCacheStats
	20, // 22: swarming.bq.BotInfo.cipd_packages_cache_stats:type_name -> swarming.bq.CIPDPackageCacheStats
	13, // 23: swarming.bq.BotInfo.host:type_name -> swarming.bq.PhysicalEntity
	13, // 24: swarming.bq.BotInfo.devices:type_name -> swarming.bq.PhysicalEntity
	33, // 25: swarming.bq.BotInfo.last_seen_ts:type_name -> google.protobuf.Timestamp
	33, // 26: swarming.bq.BotInfo.idle_since_ts:type_name -> google.protobuf.Timestamp
	5,  // 27: swarming.bq.TaskResult.request:type_name -> swarming.bq.TaskRequest
	33, // 28: swarming.bq.TaskResult.create_time:type_name -> google.protobuf.Timestamp
	33, // 29: swarming.bq.TaskResult.start_time:type_name -> google.protobuf.Timestamp
	33, // 30: swarming.bq.TaskResult.abandon_time:type_name -> google.protobuf.Timestamp
	33, // 31: swarming.bq.TaskResult.end_time:type_name -> google.protobuf.Timestamp
	3,  // 32: swarming.bq.TaskResult.state:type_name -> swarming.bq.TaskState
	2,  // 33: swarming.bq.TaskResult.state_category:type_name -> swarming.bq.TaskStateCategory
	11, // 34: swarming.bq.TaskResult.bot:type_name -> swarming.bq.Bot
	17, // 35: swarming.bq.TaskResult.cipd_pins:type_name -> swarming.bq.CIPDPins
	21, // 36: swarming.bq.TaskResult.performance:type_name -> swarming.bq.TaskPerformance
	15, // 37: swarming.bq.TaskResult.outputs:type_name -> swarming.bq.CASTree
	35, // 38: swarming.bq.TaskResult.cas_output_root:type_name -> swarming.v2.CASReference
	37, // 39: swarming.bq.TaskResult.resultdb_info:type_name -> swarming.v2.ResultDBInfo
	16, // 40: swarming.bq.CIPDPins.client_package:type_name -> swarming.bq.CIPDPackage
	16, // 41: swarming.bq.CIPDPins.packages:type_name -> swarming.bq.CIPDPackage
	33, // 42: swarming.bq.CASStats.oldest_time:type_name -> google.protobuf.Timestamp
	33, // 43: swarming.bq.NamedCacheStats.last_use_time:type_name -> google.protobuf.Timestamp
	33, // 44: swarming.bq.CIPDPackageCacheStats.last_use_time:type_name -> google.protobuf.Timestamp
	29, // 45: swarming.bq.TaskPerformance.setup:type_name -> swarming.bq.TaskOverheadStats
	29, // 46: swarming.bq.TaskPerformance.teardown:type_name -> swarming.bq.TaskOverheadStats
	22, // 47: swarming.bq.TaskPerformance.setup_overhead:type_name -> swarming.bq.TaskSetupOverhead
	23, // 48: swarming.bq.TaskPerformance.teardown_overhead:type_name -> swarming.bq.TaskTeardownOverhead
	24, // 49: swarming.bq.TaskSetupOverhead.cache_trim:type_name -> swarming.bq.CacheTrimOverhead
	25, // 50: swarming.bq.TaskSetupOverhead.cipd:type_name -> swarming.bq.CIPDOverhead
	26, // 51: swarming.bq.TaskSetupOverhead.named_cache:type_name -> swarming.bq.NamedCacheOverhead
	27, // 52: swarming.bq.TaskSetupOverhead.cas:type_name -> swarming.bq.CASOverhead
	27, // 53: swarming.bq.TaskTeardownOverhead.cas:type_name -> swarming.bq.CASOverhead
	26, // 54: swarming.bq.TaskTeardownOverhead.named_cache:type_name -> swarming.bq.NamedCacheOverhead
	28, // 55: swarming.bq.TaskTeardownOverhead.cleanup:type_name -> swarming.bq.CleanupOverhead
	30, // 56: swarming.bq.CASOverhead.cold:type_name -> swarming.bq.CASEntriesStats
	30, // 57: swarming.bq.CASOverhead.hot:type_name -> swarming.bq.CASEntriesStats
	30, // 58: swarming.bq.TaskOverheadStats.cold:type_name -> swarming.bq.CASEntriesStats
	30, // 59: swarming.bq.TaskOverheadStats.hot:type_name -> swarming.bq.CASEntriesStats
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_init() }
func file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_init() {
	if File_go_chromium_org_luci_swarming_proto_bq_swarming_proto != nil {
		return
	}
	file_go_chromium_org_luci_swarming_proto_bq_options_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_swarming_proto_bq_swarming_proto = out.File
	file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_goTypes = nil
	file_go_chromium_org_luci_swarming_proto_bq_swarming_proto_depIdxs = nil
}
