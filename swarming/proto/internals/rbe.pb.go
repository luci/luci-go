// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.1
// source: go.chromium.org/luci/swarming/proto/internals/rbe.proto

package internalspb

import (
	config "go.chromium.org/luci/swarming/proto/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The reason the slice is marked as expired.
type ExpireSliceRequest_Reason int32

const (
	ExpireSliceRequest_REASON_UNSPECIFIED ExpireSliceRequest_Reason = 0
	ExpireSliceRequest_NO_RESOURCE        ExpireSliceRequest_Reason = 1 // no bots alive that match the requested dimensions
	ExpireSliceRequest_PERMISSION_DENIED  ExpireSliceRequest_Reason = 2 // no access to the RBE instance
	ExpireSliceRequest_INVALID_ARGUMENT   ExpireSliceRequest_Reason = 3 // RBE didn't like something about the reservation
	ExpireSliceRequest_BOT_INTERNAL_ERROR ExpireSliceRequest_Reason = 4 // the bot picked up the reservation and then died
	ExpireSliceRequest_EXPIRED            ExpireSliceRequest_Reason = 5 // the scheduling deadline exceeded
)

// Enum value maps for ExpireSliceRequest_Reason.
var (
	ExpireSliceRequest_Reason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "NO_RESOURCE",
		2: "PERMISSION_DENIED",
		3: "INVALID_ARGUMENT",
		4: "BOT_INTERNAL_ERROR",
		5: "EXPIRED",
	}
	ExpireSliceRequest_Reason_value = map[string]int32{
		"REASON_UNSPECIFIED": 0,
		"NO_RESOURCE":        1,
		"PERMISSION_DENIED":  2,
		"INVALID_ARGUMENT":   3,
		"BOT_INTERNAL_ERROR": 4,
		"EXPIRED":            5,
	}
)

func (x ExpireSliceRequest_Reason) Enum() *ExpireSliceRequest_Reason {
	p := new(ExpireSliceRequest_Reason)
	*p = x
	return p
}

func (x ExpireSliceRequest_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpireSliceRequest_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_enumTypes[0].Descriptor()
}

func (ExpireSliceRequest_Reason) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_enumTypes[0]
}

func (x ExpireSliceRequest_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpireSliceRequest_Reason.Descriptor instead.
func (ExpireSliceRequest_Reason) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{4, 0}
}

// EnqueueRBETask describes payload of `rbe-enqueue` TQ tasks.
//
// It is submitted into `rbe-enqueue` Cloud Tasks queue by the Python side and
// processed by the Go side (resulting in a new RBE reservation on success).
type EnqueueRBETask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Payload of the new RBE reservation. It will eventually be routed to a bot.
	Payload *TaskPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// Full RBE instance ID to submit this task to, extracted from TaskRequest.
	RbeInstance string `protobuf:"bytes,2,opt,name=rbe_instance,json=rbeInstance,proto3" json:"rbe_instance,omitempty"`
	// When this particular slice expires, extracted from TaskToRunShard.
	Expiry *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// A bot that should execute this slice (if any), extracted from TaskSlice.
	RequestedBotId string                       `protobuf:"bytes,4,opt,name=requested_bot_id,json=requestedBotId,proto3" json:"requested_bot_id,omitempty"`
	Constraints    []*EnqueueRBETask_Constraint `protobuf:"bytes,5,rep,name=constraints,proto3" json:"constraints,omitempty"`
	// Swarming task priority, as submitted by the client.
	Priority int32 `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	// Swarming scheduling algorithm, as specified in pools.cfg.
	SchedulingAlgorithm config.Pool_SchedulingAlgorithm `protobuf:"varint,7,opt,name=scheduling_algorithm,json=schedulingAlgorithm,proto3,enum=swarming.config.Pool_SchedulingAlgorithm" json:"scheduling_algorithm,omitempty"`
	// How long the task is allowed to run once it starts on the bot.
	ExecutionTimeout *durationpb.Duration `protobuf:"bytes,8,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	// A flag indicating whether RBE should keep the reservation in queue until
	// `expiry` if there is no matching bot online, instead of directly killing
	// it.
	WaitForCapacity bool `protobuf:"varint,9,opt,name=wait_for_capacity,json=waitForCapacity,proto3" json:"wait_for_capacity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EnqueueRBETask) Reset() {
	*x = EnqueueRBETask{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueRBETask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueRBETask) ProtoMessage() {}

func (x *EnqueueRBETask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueRBETask.ProtoReflect.Descriptor instead.
func (*EnqueueRBETask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{0}
}

func (x *EnqueueRBETask) GetPayload() *TaskPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *EnqueueRBETask) GetRbeInstance() string {
	if x != nil {
		return x.RbeInstance
	}
	return ""
}

func (x *EnqueueRBETask) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *EnqueueRBETask) GetRequestedBotId() string {
	if x != nil {
		return x.RequestedBotId
	}
	return ""
}

func (x *EnqueueRBETask) GetConstraints() []*EnqueueRBETask_Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *EnqueueRBETask) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *EnqueueRBETask) GetSchedulingAlgorithm() config.Pool_SchedulingAlgorithm {
	if x != nil {
		return x.SchedulingAlgorithm
	}
	return config.Pool_SchedulingAlgorithm(0)
}

func (x *EnqueueRBETask) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

func (x *EnqueueRBETask) GetWaitForCapacity() bool {
	if x != nil {
		return x.WaitForCapacity
	}
	return false
}

// CancelRBETask describes payload of `rbe-cancel` TQ tasks.
//
// It is submitted into `rbe-cancel` Cloud Tasks queue and
// processed by the Go side (resulting in cancellation of an RBE reservation).
type CancelRBETask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Full RBE instance ID with the reservation, extracted from TaskRequest.
	RbeInstance string `protobuf:"bytes,1,opt,name=rbe_instance,json=rbeInstance,proto3" json:"rbe_instance,omitempty"`
	// Reservation to cancel (scoped to the instance).
	ReservationId string                   `protobuf:"bytes,2,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	DebugInfo     *CancelRBETask_DebugInfo `protobuf:"bytes,3,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelRBETask) Reset() {
	*x = CancelRBETask{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelRBETask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRBETask) ProtoMessage() {}

func (x *CancelRBETask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRBETask.ProtoReflect.Descriptor instead.
func (*CancelRBETask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{1}
}

func (x *CancelRBETask) GetRbeInstance() string {
	if x != nil {
		return x.RbeInstance
	}
	return ""
}

func (x *CancelRBETask) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *CancelRBETask) GetDebugInfo() *CancelRBETask_DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

// TaskPayload is used as an RBE task payload.
//
// It is serialized as anypb.Any when passed to RBE, and its full proto name
// is thus sensitive.
//
// It points to an existing TaskToRunShardXXX entity representing the pending
// request to execute a single task slice plus some extra information useful
// for debugging.
//
// It also contains the name of the RBE reservation that will be created to
// represent this task.
type TaskPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique (within the RBE instance) ID of the reservation, for idempotency.
	ReservationId string `protobuf:"bytes,1,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
	// Swarming task ID (aka TaskResultSummary packed id), identifies TaskRequest.
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Task slice index (mostly FYI).
	SliceIndex int32 `protobuf:"varint,3,opt,name=slice_index,json=sliceIndex,proto3" json:"slice_index,omitempty"`
	// Shard index of TaskToRunShardXXX entity class.
	TaskToRunShard int32 `protobuf:"varint,4,opt,name=task_to_run_shard,json=taskToRunShard,proto3" json:"task_to_run_shard,omitempty"`
	// Datastore ID of TaskToRunShardXXX entity (a child of the TaskRequest).
	TaskToRunId int64                  `protobuf:"varint,5,opt,name=task_to_run_id,json=taskToRunId,proto3" json:"task_to_run_id,omitempty"`
	DebugInfo   *TaskPayload_DebugInfo `protobuf:"bytes,6,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	// If true, the bot should not contact Python Swarming, don't execute
	// anything, just immediately move the reservation into COMPLETED state.
	//
	// This is useful during initial development to test RBE task distribution
	// mechanism in isolation from other Swarming guts.
	Noop          bool `protobuf:"varint,7,opt,name=noop,proto3" json:"noop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskPayload) Reset() {
	*x = TaskPayload{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPayload) ProtoMessage() {}

func (x *TaskPayload) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPayload.ProtoReflect.Descriptor instead.
func (*TaskPayload) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{2}
}

func (x *TaskPayload) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

func (x *TaskPayload) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskPayload) GetSliceIndex() int32 {
	if x != nil {
		return x.SliceIndex
	}
	return 0
}

func (x *TaskPayload) GetTaskToRunShard() int32 {
	if x != nil {
		return x.TaskToRunShard
	}
	return 0
}

func (x *TaskPayload) GetTaskToRunId() int64 {
	if x != nil {
		return x.TaskToRunId
	}
	return 0
}

func (x *TaskPayload) GetDebugInfo() *TaskPayload_DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *TaskPayload) GetNoop() bool {
	if x != nil {
		return x.Noop
	}
	return false
}

// TaskResult is used as an RBE task result.
//
// TaskResult represents an outcome of a reservation that was processed by a bot
// (successfully or not). If a bot never saw the reservation, or crashed midway,
// TaskResult is not available. There's more generic Reservation.status field
// for these cases in the RBE API.
//
// TaskResult is serialized into anypb.Any when passed to RBE, and its full
// proto name is thus sensitive.
//
// Note that the corresponding TaskPayload is available in the same RBE
// Reservation proto that contains TaskResult, so TaskPayload fields are not
// duplicated in the TaskResult.
type TaskResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set to a human readable string if the bot legitimately skipped executing
	// the reservation e.g. because it was already claimed. Used for debugging
	// only.
	SkipReason string `protobuf:"bytes,1,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	// Set if the bot picked up the reservation, but could not work on it and
	// gave up. This usually happens if the bot can't claim the TaskToRun after
	// many attempts. This is an internal Swarming error and it results in the
	// task failing with BOT_DIED error.
	BotInternalError string `protobuf:"bytes,2,opt,name=bot_internal_error,json=botInternalError,proto3" json:"bot_internal_error,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{3}
}

func (x *TaskResult) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *TaskResult) GetBotInternalError() string {
	if x != nil {
		return x.BotInternalError
	}
	return ""
}

// Body of ExpireSlice internal RPC call.
//
// It identifies a concrete TaskToRunShardXXX entity and the reason it has
// expired.
type ExpireSliceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Swarming task ID (aka TaskResultSummary packed id), identifies TaskRequest.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Shard index of TaskToRunShardXXX entity class.
	TaskToRunShard int32 `protobuf:"varint,2,opt,name=task_to_run_shard,json=taskToRunShard,proto3" json:"task_to_run_shard,omitempty"`
	// Datastore ID of TaskToRunShardXXX entity (a child of the TaskRequest).
	TaskToRunId int64                     `protobuf:"varint,3,opt,name=task_to_run_id,json=taskToRunId,proto3" json:"task_to_run_id,omitempty"`
	Reason      ExpireSliceRequest_Reason `protobuf:"varint,4,opt,name=reason,proto3,enum=swarming.internals.rbe.ExpireSliceRequest_Reason" json:"reason,omitempty"`
	Details     string                    `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	// Set if we know a bot that is likely responsible for BOT_INTERNAL_ERROR.
	CulpritBotId  string `protobuf:"bytes,6,opt,name=culprit_bot_id,json=culpritBotId,proto3" json:"culprit_bot_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpireSliceRequest) Reset() {
	*x = ExpireSliceRequest{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpireSliceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireSliceRequest) ProtoMessage() {}

func (x *ExpireSliceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireSliceRequest.ProtoReflect.Descriptor instead.
func (*ExpireSliceRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{4}
}

func (x *ExpireSliceRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *ExpireSliceRequest) GetTaskToRunShard() int32 {
	if x != nil {
		return x.TaskToRunShard
	}
	return 0
}

func (x *ExpireSliceRequest) GetTaskToRunId() int64 {
	if x != nil {
		return x.TaskToRunId
	}
	return 0
}

func (x *ExpireSliceRequest) GetReason() ExpireSliceRequest_Reason {
	if x != nil {
		return x.Reason
	}
	return ExpireSliceRequest_REASON_UNSPECIFIED
}

func (x *ExpireSliceRequest) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *ExpireSliceRequest) GetCulpritBotId() string {
	if x != nil {
		return x.CulpritBotId
	}
	return ""
}

// Constraints on dimensions reported by a matching bot (ANDed together).
type EnqueueRBETask_Constraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The dimension key e.g. "python_version".
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Allowed dimension values to satisfy the constraint, e.g. ["3.8", "3.9"].
	AllowedValues []string `protobuf:"bytes,2,rep,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnqueueRBETask_Constraint) Reset() {
	*x = EnqueueRBETask_Constraint{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnqueueRBETask_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueRBETask_Constraint) ProtoMessage() {}

func (x *EnqueueRBETask_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueRBETask_Constraint.ProtoReflect.Descriptor instead.
func (*EnqueueRBETask_Constraint) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EnqueueRBETask_Constraint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EnqueueRBETask_Constraint) GetAllowedValues() []string {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

// Optional information used for debugging and tracing purposes.
type CancelRBETask_DebugInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`                                                // when this message was created
	PySwarmingVersion string                 `protobuf:"bytes,2,opt,name=py_swarming_version,json=pySwarmingVersion,proto3" json:"py_swarming_version,omitempty"` // version of the Python Swarming
	TaskName          string                 `protobuf:"bytes,3,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`                              // the user-supplied task name FYI
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CancelRBETask_DebugInfo) Reset() {
	*x = CancelRBETask_DebugInfo{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelRBETask_DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRBETask_DebugInfo) ProtoMessage() {}

func (x *CancelRBETask_DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRBETask_DebugInfo.ProtoReflect.Descriptor instead.
func (*CancelRBETask_DebugInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CancelRBETask_DebugInfo) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CancelRBETask_DebugInfo) GetPySwarmingVersion() string {
	if x != nil {
		return x.PySwarmingVersion
	}
	return ""
}

func (x *CancelRBETask_DebugInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

// Optional information used for debugging and tracing purposes.
type TaskPayload_DebugInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Created           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`                                                // when this message was created
	PySwarmingVersion string                 `protobuf:"bytes,2,opt,name=py_swarming_version,json=pySwarmingVersion,proto3" json:"py_swarming_version,omitempty"` // version of the Python Swarming
	GoSwarmingVersion string                 `protobuf:"bytes,3,opt,name=go_swarming_version,json=goSwarmingVersion,proto3" json:"go_swarming_version,omitempty"` // version of the Go Swarming
	TaskName          string                 `protobuf:"bytes,4,opt,name=task_name,json=taskName,proto3" json:"task_name,omitempty"`                              // the user-supplied task name FYI
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskPayload_DebugInfo) Reset() {
	*x = TaskPayload_DebugInfo{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskPayload_DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPayload_DebugInfo) ProtoMessage() {}

func (x *TaskPayload_DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPayload_DebugInfo.ProtoReflect.Descriptor instead.
func (*TaskPayload_DebugInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP(), []int{2, 0}
}

func (x *TaskPayload_DebugInfo) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TaskPayload_DebugInfo) GetPySwarmingVersion() string {
	if x != nil {
		return x.PySwarmingVersion
	}
	return ""
}

func (x *TaskPayload_DebugInfo) GetGoSwarmingVersion() string {
	if x != nil {
		return x.GoSwarmingVersion
	}
	return ""
}

func (x *TaskPayload_DebugInfo) GetTaskName() string {
	if x != nil {
		return x.TaskName
	}
	return ""
}

var File_go_chromium_org_luci_swarming_proto_internals_rbe_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDesc = string([]byte{
	0x0a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2f,
	0x72, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x77, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x72, 0x62,
	0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x36, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x04, 0x0a, 0x0e, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x42, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x77,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73,
	0x2e, 0x72, 0x62, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x62, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x62, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x72, 0x62, 0x65, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x42, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5c, 0x0a, 0x14, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x77, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x45, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x42, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x62, 0x65, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x62,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4e, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x72, 0x62, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x42, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x8e, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x79, 0x5f, 0x73, 0x77, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x70, 0x79, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xe1, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a,
	0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x72, 0x62, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6e, 0x6f, 0x6f, 0x70, 0x1a, 0xbe, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x79, 0x5f, 0x73,
	0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x79, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x6f, 0x5f, 0x73,
	0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x6f, 0x53, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x73,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x8e, 0x03, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a,
	0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x52, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x72, 0x62, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x6c, 0x70, 0x72,
	0x69, 0x74, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x75, 0x6c, 0x70, 0x72, 0x69, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x16,
	0x0a, 0x12, 0x42, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x32, 0x5e, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73,
	0x12, 0x51, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12,
	0x2a, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x72, 0x62, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x73, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescData []byte
)

func file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDescData
}

var file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_goTypes = []any{
	(ExpireSliceRequest_Reason)(0),       // 0: swarming.internals.rbe.ExpireSliceRequest.Reason
	(*EnqueueRBETask)(nil),               // 1: swarming.internals.rbe.EnqueueRBETask
	(*CancelRBETask)(nil),                // 2: swarming.internals.rbe.CancelRBETask
	(*TaskPayload)(nil),                  // 3: swarming.internals.rbe.TaskPayload
	(*TaskResult)(nil),                   // 4: swarming.internals.rbe.TaskResult
	(*ExpireSliceRequest)(nil),           // 5: swarming.internals.rbe.ExpireSliceRequest
	(*EnqueueRBETask_Constraint)(nil),    // 6: swarming.internals.rbe.EnqueueRBETask.Constraint
	(*CancelRBETask_DebugInfo)(nil),      // 7: swarming.internals.rbe.CancelRBETask.DebugInfo
	(*TaskPayload_DebugInfo)(nil),        // 8: swarming.internals.rbe.TaskPayload.DebugInfo
	(*timestamppb.Timestamp)(nil),        // 9: google.protobuf.Timestamp
	(config.Pool_SchedulingAlgorithm)(0), // 10: swarming.config.Pool.SchedulingAlgorithm
	(*durationpb.Duration)(nil),          // 11: google.protobuf.Duration
	(*emptypb.Empty)(nil),                // 12: google.protobuf.Empty
}
var file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_depIdxs = []int32{
	3,  // 0: swarming.internals.rbe.EnqueueRBETask.payload:type_name -> swarming.internals.rbe.TaskPayload
	9,  // 1: swarming.internals.rbe.EnqueueRBETask.expiry:type_name -> google.protobuf.Timestamp
	6,  // 2: swarming.internals.rbe.EnqueueRBETask.constraints:type_name -> swarming.internals.rbe.EnqueueRBETask.Constraint
	10, // 3: swarming.internals.rbe.EnqueueRBETask.scheduling_algorithm:type_name -> swarming.config.Pool.SchedulingAlgorithm
	11, // 4: swarming.internals.rbe.EnqueueRBETask.execution_timeout:type_name -> google.protobuf.Duration
	7,  // 5: swarming.internals.rbe.CancelRBETask.debug_info:type_name -> swarming.internals.rbe.CancelRBETask.DebugInfo
	8,  // 6: swarming.internals.rbe.TaskPayload.debug_info:type_name -> swarming.internals.rbe.TaskPayload.DebugInfo
	0,  // 7: swarming.internals.rbe.ExpireSliceRequest.reason:type_name -> swarming.internals.rbe.ExpireSliceRequest.Reason
	9,  // 8: swarming.internals.rbe.CancelRBETask.DebugInfo.created:type_name -> google.protobuf.Timestamp
	9,  // 9: swarming.internals.rbe.TaskPayload.DebugInfo.created:type_name -> google.protobuf.Timestamp
	5,  // 10: swarming.internals.rbe.Internals.ExpireSlice:input_type -> swarming.internals.rbe.ExpireSliceRequest
	12, // 11: swarming.internals.rbe.Internals.ExpireSlice:output_type -> google.protobuf.Empty
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_init() }
func file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_init() {
	if File_go_chromium_org_luci_swarming_proto_internals_rbe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_swarming_proto_internals_rbe_proto = out.File
	file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_goTypes = nil
	file_go_chromium_org_luci_swarming_proto_internals_rbe_proto_depIdxs = nil
}
