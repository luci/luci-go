// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

package swarming.internals.rbe;

option go_package = "go.chromium.org/luci/swarming/proto/internals;internalspb";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "go.chromium.org/luci/swarming/proto/config/pools.proto";


// EnqueueRBETask describes payload of `rbe-enqueue` TQ tasks.
message EnqueueRBETask {
  // Payload of the new RBE reservation. It will eventually be routed to a bot.
  TaskPayload payload = 1;

  // Fields below are used to decide how to schedule the reservation.

  // Full RBE instance ID to submit this task to, extracted from TaskRequest.
  string rbe_instance = 2;
  // When this particular slice expires, extracted from TaskToRunShard.
  google.protobuf.Timestamp expiry = 3;
  // A bot that should execute this slice (if any), extracted from TaskSlice.
  string requested_bot_id = 4;
  // Constraints on dimensions reported by a matching bot (ANDed together).
  message Constraint {
    // The dimension key e.g. "python_version".
    string key = 1;
    // Allowed dimension values to satisfy the constraint, e.g. ["3.8", "3.9"].
    repeated string allowed_values = 2;
  }
  repeated Constraint constraints = 5;
  // Swarming task priority, as submitted by the client.
  int32 priority = 6;
  // Swarming scheduling algorithm, as specified in pools.cfg.
  swarming.config.Pool.SchedulingAlgorithm scheduling_algorithm = 7;
  // How long the task is allowed to run once it starts on the bot.
  google.protobuf.Duration execution_timeout = 8;
  // A flag indicating whether RBE should keep the reservation in queue until
  // `expiry` if there is no matching bot online, instead of directly killing
  // it.
  bool wait_for_capacity = 9;
}


// CancelRBETask describes payload of `rbe-cancel` TQ tasks.
message CancelRBETask {
  // Full RBE instance ID with the reservation, extracted from TaskRequest.
  string rbe_instance = 1;
  // Reservation to cancel (scoped to the instance).
  string reservation_id = 2;

  // Optional information used for debugging and tracing purposes.
  //
  // TODO: replace py_swarming_version with swarming_version.
  message DebugInfo {
    google.protobuf.Timestamp created = 1;  // when this message was created
    string py_swarming_version = 2;         // version of the Python Swarming
    string task_name = 3;                   // the user-supplied task name FYI
  }
  DebugInfo debug_info = 3;
}


// TaskPayload is used as an RBE task payload.
//
// It is serialized as anypb.Any when passed to RBE, and its full proto name
// is thus sensitive.
//
// It points to an existing TaskToRunShardXXX entity representing the pending
// request to execute a single task slice plus some extra information useful
// for debugging.
//
// It also contains the name of the RBE reservation that will be created to
// represent this task.
message TaskPayload {
  // Unique (within the RBE instance) ID of the reservation, for idempotency.
  string reservation_id = 1;
  // Swarming task ID (aka TaskResultSummary packed id), identifies TaskRequest.
  string task_id = 2;
  // Task slice index (mostly FYI).
  int32 slice_index = 3;
  // Shard index of TaskToRunShardXXX entity class.
  int32 task_to_run_shard = 4;
  // Datastore ID of TaskToRunShardXXX entity (a child of the TaskRequest).
  int64 task_to_run_id = 5;

  // Optional information used for debugging and tracing purposes.
  //
  // TODO: replace py|go_swarming_version with swarming_version.
  message DebugInfo {
    google.protobuf.Timestamp created = 1;  // when this message was created
    string py_swarming_version = 2;         // version of the Python Swarming
    string go_swarming_version = 3;         // version of the Go Swarming
    string task_name = 4;                   // the user-supplied task name FYI
  }
  DebugInfo debug_info = 6;

  // If true, the bot should not contact Swarming, don't execute anything, just
  // immediately move the reservation into COMPLETED state.
  //
  // This is useful during initial development to test RBE task distribution
  // mechanism in isolation from other Swarming guts.
  bool noop = 7;
}


// TaskResult is used as an RBE task result.
//
// TaskResult represents an outcome of a reservation that was processed by a bot
// (successfully or not). If a bot never saw the reservation, or crashed midway,
// TaskResult is not available. There's more generic Reservation.status field
// for these cases in the RBE API.
//
// TaskResult is serialized into anypb.Any when passed to RBE, and its full
// proto name is thus sensitive.
//
// Note that the corresponding TaskPayload is available in the same RBE
// Reservation proto that contains TaskResult, so TaskPayload fields are not
// duplicated in the TaskResult.
message TaskResult {
  // Set to a human readable string if the bot legitimately skipped executing
  // the reservation e.g. because it was already claimed. Used for debugging
  // only.
  string skip_reason = 1;

  // Set if the bot picked up the reservation, but could not work on it and
  // gave up. This usually happens if the bot can't claim the TaskToRun after
  // many attempts. This is an internal Swarming error and it results in the
  // task failing with BOT_DIED error.
  string bot_internal_error = 2;
}
