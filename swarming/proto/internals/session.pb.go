// Copyright 2024 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0
// source: go.chromium.org/luci/swarming/proto/internals/session.proto

package internalspb

import (
	config "go.chromium.org/luci/swarming/proto/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SessionToken is an encoded and (optionally) encrypted Session proto.
//
// It is sent to the bot in response to "/handshake" and other bot API calls,
// and the bot then sends it back with every request. This allows to
// authenticate the bot session and to round-trip server-specific session state
// through the bot without making bot know too much about it.
//
// In JSON it is encoded using standard base64 encoding with paddings (just like
// any other `bytes` JSONPB field).
//
// Secret key IDs used for HMAC and AEAD are part of the server configuration
// and not included in the token.
type SessionToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*SessionToken_HmacTagged_
	//	*SessionToken_AeadEncrypted_
	Kind          isSessionToken_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionToken) Reset() {
	*x = SessionToken{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken) ProtoMessage() {}

func (x *SessionToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken.ProtoReflect.Descriptor instead.
func (*SessionToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescGZIP(), []int{0}
}

func (x *SessionToken) GetKind() isSessionToken_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *SessionToken) GetHmacTagged() *SessionToken_HmacTagged {
	if x != nil {
		if x, ok := x.Kind.(*SessionToken_HmacTagged_); ok {
			return x.HmacTagged
		}
	}
	return nil
}

func (x *SessionToken) GetAeadEncrypted() *SessionToken_AeadEncrypted {
	if x != nil {
		if x, ok := x.Kind.(*SessionToken_AeadEncrypted_); ok {
			return x.AeadEncrypted
		}
	}
	return nil
}

type isSessionToken_Kind interface {
	isSessionToken_Kind()
}

type SessionToken_HmacTagged_ struct {
	HmacTagged *SessionToken_HmacTagged `protobuf:"bytes,1,opt,name=hmac_tagged,json=hmacTagged,proto3,oneof"`
}

type SessionToken_AeadEncrypted_ struct {
	AeadEncrypted *SessionToken_AeadEncrypted `protobuf:"bytes,2,opt,name=aead_encrypted,json=aeadEncrypted,proto3,oneof"`
}

func (*SessionToken_HmacTagged_) isSessionToken_Kind() {}

func (*SessionToken_AeadEncrypted_) isSessionToken_Kind() {}

// Session is a payload of a SessionToken.
//
// It is used to authenticate the bot session and to round-trip some
// server-specific state through the bot. This state is used by the server to
// decide how to handle bot calls or when to restart the bot, etc.
type Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the bot as reported in /handshake.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// The session ID as reported in /handshake.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Expiration time of this message. Refreshed on RPC calls.
	Expiry *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Information for logs and debugging.
	DebugInfo *DebugInfo `protobuf:"bytes,4,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	// The snapshot of server's bots.cfg the last time /poll was called.
	BotConfig *BotConfig `protobuf:"bytes,5,opt,name=bot_config,json=botConfig,proto3" json:"bot_config,omitempty"`
	// A hash of a config assigned to bot in /handshake to know when to restart.
	HandshakeConfigHash []byte `protobuf:"bytes,6,opt,name=handshake_config_hash,json=handshakeConfigHash,proto3" json:"handshake_config_hash,omitempty"`
	// ID of the RBE's BotSession if there's an established RBE session.
	RbeBotSessionId string `protobuf:"bytes,7,opt,name=rbe_bot_session_id,json=rbeBotSessionId,proto3" json:"rbe_bot_session_id,omitempty"`
	// The monotonic timestamp of the last server config used with this bot.
	LastSeenConfig *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_seen_config,json=lastSeenConfig,proto3" json:"last_seen_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescGZIP(), []int{1}
}

func (x *Session) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *Session) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *Session) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *Session) GetDebugInfo() *DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *Session) GetBotConfig() *BotConfig {
	if x != nil {
		return x.BotConfig
	}
	return nil
}

func (x *Session) GetHandshakeConfigHash() []byte {
	if x != nil {
		return x.HandshakeConfigHash
	}
	return nil
}

func (x *Session) GetRbeBotSessionId() string {
	if x != nil {
		return x.RbeBotSessionId
	}
	return ""
}

func (x *Session) GetLastSeenConfig() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeenConfig
	}
	return nil
}

// BotConfig is a snapshot of the server's bots.cfg the last time /poll
// was called.
//
// It is used to authenticate the bot while it runs a task. That way even if
// the bot is removed from the server config, it still is able to finish its
// current task (as long as BotConfig hasn't expired yet or the bot session
// hasn't been closed on the server).
//
// Its fields are taken from swarming.config.BotGroup proto that matches
// the bot. Only fields that are needed to finishing running a task are
// included.
type BotConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When this config should no longer be used.
	Expiry *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Information for logs and debugging.
	DebugInfo *DebugInfo `protobuf:"bytes,2,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	// Instructions on how to authenticate the bot.
	BotAuth []*config.BotAuth `protobuf:"bytes,3,rep,name=bot_auth,json=botAuth,proto3" json:"bot_auth,omitempty"`
	// A service account to use to authenticate calls to system-level services.
	SystemServiceAccount string `protobuf:"bytes,4,opt,name=system_service_account,json=systemServiceAccount,proto3" json:"system_service_account,omitempty"`
	// The cloud project id where the bot saves its logs.
	LogsCloudProject string `protobuf:"bytes,5,opt,name=logs_cloud_project,json=logsCloudProject,proto3" json:"logs_cloud_project,omitempty"`
	// The RBE instance to establish an RBE session at.
	RbeInstance   string `protobuf:"bytes,6,opt,name=rbe_instance,json=rbeInstance,proto3" json:"rbe_instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BotConfig) Reset() {
	*x = BotConfig{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotConfig) ProtoMessage() {}

func (x *BotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotConfig.ProtoReflect.Descriptor instead.
func (*BotConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescGZIP(), []int{2}
}

func (x *BotConfig) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *BotConfig) GetDebugInfo() *DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *BotConfig) GetBotAuth() []*config.BotAuth {
	if x != nil {
		return x.BotAuth
	}
	return nil
}

func (x *BotConfig) GetSystemServiceAccount() string {
	if x != nil {
		return x.SystemServiceAccount
	}
	return ""
}

func (x *BotConfig) GetLogsCloudProject() string {
	if x != nil {
		return x.LogsCloudProject
	}
	return ""
}

func (x *BotConfig) GetRbeInstance() string {
	if x != nil {
		return x.RbeInstance
	}
	return ""
}

// DebugInfo captures when and where a message was created, for logs.
type DebugInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// When this message was created.
	Created *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created,proto3" json:"created,omitempty"`
	// Version of the Swarming server that generated the message.
	SwarmingVersion string `protobuf:"bytes,2,opt,name=swarming_version,json=swarmingVersion,proto3" json:"swarming_version,omitempty"`
	// Trace ID of the request that generated the message.
	RequestId     string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugInfo) Reset() {
	*x = DebugInfo{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugInfo) ProtoMessage() {}

func (x *DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugInfo.ProtoReflect.Descriptor instead.
func (*DebugInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescGZIP(), []int{3}
}

func (x *DebugInfo) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DebugInfo) GetSwarmingVersion() string {
	if x != nil {
		return x.SwarmingVersion
	}
	return ""
}

func (x *DebugInfo) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Unencrypted token with its integrity protected by a HMAC256.
//
// Will be used temporarily until the Python backend is gone (since doing AEAD
// from Python2 GAE is hard).
//
// session = proto_wirepb(Session{...})
// hmac_sha256 = hmac_sha256("swarming.Session" + session, secret_key).
type SessionToken_HmacTagged struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       []byte                 `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	HmacSha256    []byte                 `protobuf:"bytes,2,opt,name=hmac_sha256,json=hmacSha256,proto3" json:"hmac_sha256,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionToken_HmacTagged) Reset() {
	*x = SessionToken_HmacTagged{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionToken_HmacTagged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken_HmacTagged) ProtoMessage() {}

func (x *SessionToken_HmacTagged) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken_HmacTagged.ProtoReflect.Descriptor instead.
func (*SessionToken_HmacTagged) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SessionToken_HmacTagged) GetSession() []byte {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *SessionToken_HmacTagged) GetHmacSha256() []byte {
	if x != nil {
		return x.HmacSha256
	}
	return nil
}

// An encrypted and authenticate token.
//
// cipher_text = aead_encrypt(
//
//	plain_text=proto_wirepb(Session{...}),
//	additional_data="swarming.Session",
//	key=secret_key,
//
// )
type SessionToken_AeadEncrypted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CipherText    []byte                 `protobuf:"bytes,1,opt,name=cipher_text,json=cipherText,proto3" json:"cipher_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionToken_AeadEncrypted) Reset() {
	*x = SessionToken_AeadEncrypted{}
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionToken_AeadEncrypted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken_AeadEncrypted) ProtoMessage() {}

func (x *SessionToken_AeadEncrypted) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken_AeadEncrypted.ProtoReflect.Descriptor instead.
func (*SessionToken_AeadEncrypted) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescGZIP(), []int{0, 1}
}

func (x *SessionToken_AeadEncrypted) GetCipherText() []byte {
	if x != nil {
		return x.CipherText
	}
	return nil
}

var File_go_chromium_org_luci_swarming_proto_internals_session_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDesc = string([]byte{
	0x0a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x73,
	0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x73, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x62, 0x6f, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xca, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x2e, 0x48, 0x6d, 0x61, 0x63, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x68, 0x6d, 0x61, 0x63, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x61, 0x65,
	0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x41, 0x65, 0x61,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x65,
	0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x1a, 0x47, 0x0a, 0x0a, 0x48,
	0x6d, 0x61, 0x63, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x6d, 0x61, 0x63, 0x53, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x1a, 0x30, 0x0a, 0x0d, 0x41, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xa6,
	0x03, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0a, 0x62, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x73, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x32, 0x0a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x62, 0x65, 0x5f, 0x62, 0x6f, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x62, 0x65, 0x42, 0x6f, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc1, 0x02, 0x0a, 0x09, 0x42, 0x6f, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x73, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x74, 0x41, 0x75, 0x74, 0x68, 0x52, 0x07, 0x62, 0x6f, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f,
	0x67, 0x73, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x73, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x62, 0x65, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x62, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x09,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x77, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x73, 0x3b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescData []byte
)

func file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDescData
}

var file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_go_chromium_org_luci_swarming_proto_internals_session_proto_goTypes = []any{
	(*SessionToken)(nil),               // 0: swarming.internals.session.SessionToken
	(*Session)(nil),                    // 1: swarming.internals.session.Session
	(*BotConfig)(nil),                  // 2: swarming.internals.session.BotConfig
	(*DebugInfo)(nil),                  // 3: swarming.internals.session.DebugInfo
	(*SessionToken_HmacTagged)(nil),    // 4: swarming.internals.session.SessionToken.HmacTagged
	(*SessionToken_AeadEncrypted)(nil), // 5: swarming.internals.session.SessionToken.AeadEncrypted
	(*timestamppb.Timestamp)(nil),      // 6: google.protobuf.Timestamp
	(*config.BotAuth)(nil),             // 7: swarming.config.BotAuth
}
var file_go_chromium_org_luci_swarming_proto_internals_session_proto_depIdxs = []int32{
	4,  // 0: swarming.internals.session.SessionToken.hmac_tagged:type_name -> swarming.internals.session.SessionToken.HmacTagged
	5,  // 1: swarming.internals.session.SessionToken.aead_encrypted:type_name -> swarming.internals.session.SessionToken.AeadEncrypted
	6,  // 2: swarming.internals.session.Session.expiry:type_name -> google.protobuf.Timestamp
	3,  // 3: swarming.internals.session.Session.debug_info:type_name -> swarming.internals.session.DebugInfo
	2,  // 4: swarming.internals.session.Session.bot_config:type_name -> swarming.internals.session.BotConfig
	6,  // 5: swarming.internals.session.Session.last_seen_config:type_name -> google.protobuf.Timestamp
	6,  // 6: swarming.internals.session.BotConfig.expiry:type_name -> google.protobuf.Timestamp
	3,  // 7: swarming.internals.session.BotConfig.debug_info:type_name -> swarming.internals.session.DebugInfo
	7,  // 8: swarming.internals.session.BotConfig.bot_auth:type_name -> swarming.config.BotAuth
	6,  // 9: swarming.internals.session.DebugInfo.created:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_swarming_proto_internals_session_proto_init() }
func file_go_chromium_org_luci_swarming_proto_internals_session_proto_init() {
	if File_go_chromium_org_luci_swarming_proto_internals_session_proto != nil {
		return
	}
	file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes[0].OneofWrappers = []any{
		(*SessionToken_HmacTagged_)(nil),
		(*SessionToken_AeadEncrypted_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_internals_session_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_swarming_proto_internals_session_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_swarming_proto_internals_session_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_swarming_proto_internals_session_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_swarming_proto_internals_session_proto = out.File
	file_go_chromium_org_luci_swarming_proto_internals_session_proto_goTypes = nil
	file_go_chromium_org_luci_swarming_proto_internals_session_proto_depIdxs = nil
}
