// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// This proto file describes the external scheduler plugin API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/swarming/proto/plugin/plugin.proto

package pluginpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents the 5 different categories of task state.
type TaskSpec_StateCategory int32

const (
	// Invalid value.
	TaskSpec_TASK_STATE_CATEGORY_UNSPECIFIED TaskSpec_StateCategory = 0
	// Bit mask for the State inside each category.
	TaskSpec_TASK_STATE_MASK TaskSpec_StateCategory = 15
	// The task is enqueued and pending bot availability.
	TaskSpec_CATEGORY_PENDING TaskSpec_StateCategory = 16
	// The task is running.
	TaskSpec_CATEGORY_RUNNING TaskSpec_StateCategory = 32
	// Transient done states are uncertain states.
	TaskSpec_CATEGORY_TRANSIENT_DONE TaskSpec_StateCategory = 48
	// The task ran, and it is done.
	TaskSpec_CATEGORY_EXECUTION_DONE TaskSpec_StateCategory = 64
	// The task did not run, and won't.
	TaskSpec_CATEGORY_NEVER_RAN_DONE TaskSpec_StateCategory = 80
)

// Enum value maps for TaskSpec_StateCategory.
var (
	TaskSpec_StateCategory_name = map[int32]string{
		0:  "TASK_STATE_CATEGORY_UNSPECIFIED",
		15: "TASK_STATE_MASK",
		16: "CATEGORY_PENDING",
		32: "CATEGORY_RUNNING",
		48: "CATEGORY_TRANSIENT_DONE",
		64: "CATEGORY_EXECUTION_DONE",
		80: "CATEGORY_NEVER_RAN_DONE",
	}
	TaskSpec_StateCategory_value = map[string]int32{
		"TASK_STATE_CATEGORY_UNSPECIFIED": 0,
		"TASK_STATE_MASK":                 15,
		"CATEGORY_PENDING":                16,
		"CATEGORY_RUNNING":                32,
		"CATEGORY_TRANSIENT_DONE":         48,
		"CATEGORY_EXECUTION_DONE":         64,
		"CATEGORY_NEVER_RAN_DONE":         80,
	}
)

func (x TaskSpec_StateCategory) Enum() *TaskSpec_StateCategory {
	p := new(TaskSpec_StateCategory)
	*p = x
	return p
}

func (x TaskSpec_StateCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskSpec_StateCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes[0].Descriptor()
}

func (TaskSpec_StateCategory) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes[0]
}

func (x TaskSpec_StateCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskSpec_StateCategory.Descriptor instead.
func (TaskSpec_StateCategory) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{0, 0}
}

// Represents the different possible states for a TaskSpec.
type TaskSpec_State int32

const (
	// Invalid task state.
	TaskSpec_TASK_STATE_INVALID TaskSpec_State = 0
	// The task is currently pending.
	TaskSpec_PENDING TaskSpec_State = 16
	// Unused.
	TaskSpec_PENDING_DEDUPING TaskSpec_State = 17
	// The task is currently running.
	TaskSpec_RUNNING TaskSpec_State = 32
	// Unused.
	TaskSpec_RUNNING_OVERHEAD_SETUP TaskSpec_State = 33
	// Unused.
	TaskSpec_RUNNING_OVERHEAD_TEARDOWN TaskSpec_State = 34
	// Unused.
	TaskSpec_TERMINATING TaskSpec_State = 35
	// Unused.
	TaskSpec_COMPLETING TaskSpec_State = 47
	// The task ran but the bot had an internal failure.
	TaskSpec_RAN_INTERNAL_FAILURE TaskSpec_State = 48
	// Unused.
	TaskSpec_DUT_FAILURE TaskSpec_State = 49
	// Unused.
	TaskSpec_BOT_DISAPPEARED TaskSpec_State = 50
	// Unused.
	TaskSpec_PREEMPTED TaskSpec_State = 51
	// The task ran and completed normally.
	TaskSpec_COMPLETED TaskSpec_State = 64
	// The task ran for longer than the allowed time.
	TaskSpec_TIMED_OUT TaskSpec_State = 65
	// Unused.
	TaskSpec_TIMED_OUT_SILENCE TaskSpec_State = 66
	// The task ran but was manually killed via the 'cancel' API.
	TaskSpec_KILLED TaskSpec_State = 67
	// Unused.
	TaskSpec_MISSING_INPUTS TaskSpec_State = 68
	// The task didn't have to run, because a previous task had results.
	TaskSpec_DEDUPED TaskSpec_State = 80
	// The task is not pending anymore; it never ran due to lack of capacity.
	TaskSpec_EXPIRED TaskSpec_State = 81
	// The task never ran, and was manually cancelled via the 'cancel' API.
	TaskSpec_CANCELED TaskSpec_State = 82
	// The task was never set to PENDING and was immediately refused.
	TaskSpec_NO_RESOURCE TaskSpec_State = 83
	// Unused.
	TaskSpec_LOAD_SHED TaskSpec_State = 84
	// Unused.
	TaskSpec_RESOURCE_EXHAUSTED TaskSpec_State = 85
	// Unused.
	TaskSpec_SKIPPED_INTERNAL_FAILURE TaskSpec_State = 86
	// The task encountered an error caused by the client.
	TaskSpec_CLIENT_ERROR TaskSpec_State = 87
)

// Enum value maps for TaskSpec_State.
var (
	TaskSpec_State_name = map[int32]string{
		0:  "TASK_STATE_INVALID",
		16: "PENDING",
		17: "PENDING_DEDUPING",
		32: "RUNNING",
		33: "RUNNING_OVERHEAD_SETUP",
		34: "RUNNING_OVERHEAD_TEARDOWN",
		35: "TERMINATING",
		47: "COMPLETING",
		48: "RAN_INTERNAL_FAILURE",
		49: "DUT_FAILURE",
		50: "BOT_DISAPPEARED",
		51: "PREEMPTED",
		64: "COMPLETED",
		65: "TIMED_OUT",
		66: "TIMED_OUT_SILENCE",
		67: "KILLED",
		68: "MISSING_INPUTS",
		80: "DEDUPED",
		81: "EXPIRED",
		82: "CANCELED",
		83: "NO_RESOURCE",
		84: "LOAD_SHED",
		85: "RESOURCE_EXHAUSTED",
		86: "SKIPPED_INTERNAL_FAILURE",
		87: "CLIENT_ERROR",
	}
	TaskSpec_State_value = map[string]int32{
		"TASK_STATE_INVALID":        0,
		"PENDING":                   16,
		"PENDING_DEDUPING":          17,
		"RUNNING":                   32,
		"RUNNING_OVERHEAD_SETUP":    33,
		"RUNNING_OVERHEAD_TEARDOWN": 34,
		"TERMINATING":               35,
		"COMPLETING":                47,
		"RAN_INTERNAL_FAILURE":      48,
		"DUT_FAILURE":               49,
		"BOT_DISAPPEARED":           50,
		"PREEMPTED":                 51,
		"COMPLETED":                 64,
		"TIMED_OUT":                 65,
		"TIMED_OUT_SILENCE":         66,
		"KILLED":                    67,
		"MISSING_INPUTS":            68,
		"DEDUPED":                   80,
		"EXPIRED":                   81,
		"CANCELED":                  82,
		"NO_RESOURCE":               83,
		"LOAD_SHED":                 84,
		"RESOURCE_EXHAUSTED":        85,
		"SKIPPED_INTERNAL_FAILURE":  86,
		"CLIENT_ERROR":              87,
	}
)

func (x TaskSpec_State) Enum() *TaskSpec_State {
	p := new(TaskSpec_State)
	*p = x
	return p
}

func (x TaskSpec_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskSpec_State) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes[1].Descriptor()
}

func (TaskSpec_State) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes[1]
}

func (x TaskSpec_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskSpec_State.Descriptor instead.
func (TaskSpec_State) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{0, 1}
}

type GetCancellationsResponse_Cancellation_Reason int32

const (
	// Invalid reason, do not use.
	GetCancellationsResponse_Cancellation_INVALID GetCancellationsResponse_Cancellation_Reason = 0
	// Task was running on a worker, but was interrupted by another task.
	// Task may be retried by swarming.
	GetCancellationsResponse_Cancellation_PREEMPTED GetCancellationsResponse_Cancellation_Reason = 1
	// Task had invalid or erroneous properties that make it not handleable
	// by scheduler. Task should not be retried.
	GetCancellationsResponse_Cancellation_ERROR GetCancellationsResponse_Cancellation_Reason = 2
)

// Enum value maps for GetCancellationsResponse_Cancellation_Reason.
var (
	GetCancellationsResponse_Cancellation_Reason_name = map[int32]string{
		0: "INVALID",
		1: "PREEMPTED",
		2: "ERROR",
	}
	GetCancellationsResponse_Cancellation_Reason_value = map[string]int32{
		"INVALID":   0,
		"PREEMPTED": 1,
		"ERROR":     2,
	}
)

func (x GetCancellationsResponse_Cancellation_Reason) Enum() *GetCancellationsResponse_Cancellation_Reason {
	p := new(GetCancellationsResponse_Cancellation_Reason)
	*p = x
	return p
}

func (x GetCancellationsResponse_Cancellation_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCancellationsResponse_Cancellation_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes[2].Descriptor()
}

func (GetCancellationsResponse_Cancellation_Reason) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes[2]
}

func (x GetCancellationsResponse_Cancellation_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCancellationsResponse_Cancellation_Reason.Descriptor instead.
func (GetCancellationsResponse_Cancellation_Reason) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{7, 0, 0}
}

// TaskSpec describes a task request and its state, for the purposes of the
// external scheduler API.
//
// It intentionally elides aspects of a task request that are irrelevant
// to scheduling decisions, to keep this proto small for performance reasons.
//
// This message format is in its early stages, and may be subject to frequent
// or even breaking changes as the external scheduler API is rolled out.
type TaskSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id is the swarming task request ID.
	//
	// Other than being a unique string to track the lifecycle of this request,
	// it is opaque to external scheduler. By convention, swarming uses a task's
	// summary ID (trailing '0') here, not the run ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tags is the list of tags applied to this task request.
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// Slices is the set of task slices for this spec. A TaskSpec must contain
	// at least 1 slice.
	Slices []*SliceSpec `protobuf:"bytes,3,rep,name=slices,proto3" json:"slices,omitempty"`
	// State is the current state of this task.
	State TaskSpec_State `protobuf:"varint,4,opt,name=state,proto3,enum=swarming.v1.TaskSpec_State" json:"state,omitempty"`
	// BotID is the id of the bot that this task is running on. It is only
	// valid if state=RUNNING.
	BotId string `protobuf:"bytes,5,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// EnqueuedTime is the time at which a task was enqueued. It is only valid
	// if state=PENDING.
	EnqueuedTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=enqueued_time,json=enqueuedTime,proto3" json:"enqueued_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskSpec) Reset() {
	*x = TaskSpec{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskSpec) ProtoMessage() {}

func (x *TaskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskSpec.ProtoReflect.Descriptor instead.
func (*TaskSpec) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *TaskSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskSpec) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TaskSpec) GetSlices() []*SliceSpec {
	if x != nil {
		return x.Slices
	}
	return nil
}

func (x *TaskSpec) GetState() TaskSpec_State {
	if x != nil {
		return x.State
	}
	return TaskSpec_TASK_STATE_INVALID
}

func (x *TaskSpec) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *TaskSpec) GetEnqueuedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EnqueuedTime
	}
	return nil
}

// SliceSpec describes a task request slice, for the purposes of TaskSpec.
type SliceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Dimensions is set dimension strings for this slice.
	Dimensions    []string `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SliceSpec) Reset() {
	*x = SliceSpec{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SliceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceSpec) ProtoMessage() {}

func (x *SliceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceSpec.ProtoReflect.Descriptor instead.
func (*SliceSpec) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *SliceSpec) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type IdleBot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BotId is the id of the bot that is idle.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// Dimensions is the dimension set of the idle bot.
	Dimensions    []string `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdleBot) Reset() {
	*x = IdleBot{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdleBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleBot) ProtoMessage() {}

func (x *IdleBot) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleBot.ProtoReflect.Descriptor instead.
func (*IdleBot) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *IdleBot) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *IdleBot) GetDimensions() []string {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type AssignTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SchedulerID is the id of the scheduler that this request should be run on.
	SchedulerId string `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3" json:"scheduler_id,omitempty"`
	// IdleBots is the set of idle bots that are trying to get tasks assigned.
	IdleBots []*IdleBot `protobuf:"bytes,2,rep,name=idle_bots,json=idleBots,proto3" json:"idle_bots,omitempty"`
	// Time is the current time (according to swarming) at which these bots
	// are attempting to have tasks assigned to them.
	Time          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignTasksRequest) Reset() {
	*x = AssignTasksRequest{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTasksRequest) ProtoMessage() {}

func (x *AssignTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTasksRequest.ProtoReflect.Descriptor instead.
func (*AssignTasksRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *AssignTasksRequest) GetSchedulerId() string {
	if x != nil {
		return x.SchedulerId
	}
	return ""
}

func (x *AssignTasksRequest) GetIdleBots() []*IdleBot {
	if x != nil {
		return x.IdleBots
	}
	return nil
}

func (x *AssignTasksRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AssignTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Assignments is the set of (bot, task) assignments that the scheduler
	// determined should be made.
	Assignments   []*TaskAssignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignTasksResponse) Reset() {
	*x = AssignTasksResponse{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignTasksResponse) ProtoMessage() {}

func (x *AssignTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignTasksResponse.ProtoReflect.Descriptor instead.
func (*AssignTasksResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *AssignTasksResponse) GetAssignments() []*TaskAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type TaskAssignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BotID is the bot that should be assigned a task.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// TaskID is the task that should be assigned to the bot.
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// SliceNumber is the slice within the task that should be assigned to the bot.
	// If absent, slice 0 will be assumed.
	SliceNumber   int32 `protobuf:"varint,3,opt,name=slice_number,json=sliceNumber,proto3" json:"slice_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskAssignment) Reset() {
	*x = TaskAssignment{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAssignment) ProtoMessage() {}

func (x *TaskAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAssignment.ProtoReflect.Descriptor instead.
func (*TaskAssignment) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *TaskAssignment) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *TaskAssignment) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskAssignment) GetSliceNumber() int32 {
	if x != nil {
		return x.SliceNumber
	}
	return 0
}

type GetCancellationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SchedulerID is the id of the scheduler that this request should be run on.
	SchedulerId   string `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3" json:"scheduler_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCancellationsRequest) Reset() {
	*x = GetCancellationsRequest{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCancellationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCancellationsRequest) ProtoMessage() {}

func (x *GetCancellationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCancellationsRequest.ProtoReflect.Descriptor instead.
func (*GetCancellationsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *GetCancellationsRequest) GetSchedulerId() string {
	if x != nil {
		return x.SchedulerId
	}
	return ""
}

type GetCancellationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cancellations is the set of (bot, task) pairs for tasks that should be
	// cancelled on bots.
	Cancellations []*GetCancellationsResponse_Cancellation `protobuf:"bytes,1,rep,name=cancellations,proto3" json:"cancellations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCancellationsResponse) Reset() {
	*x = GetCancellationsResponse{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCancellationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCancellationsResponse) ProtoMessage() {}

func (x *GetCancellationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCancellationsResponse.ProtoReflect.Descriptor instead.
func (*GetCancellationsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *GetCancellationsResponse) GetCancellations() []*GetCancellationsResponse_Cancellation {
	if x != nil {
		return x.Cancellations
	}
	return nil
}

type NotifyTasksItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Time is the time at which the given task was in the given state.
	Time *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Task describes a task request and its current state.
	Task          *TaskSpec `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyTasksItem) Reset() {
	*x = NotifyTasksItem{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyTasksItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyTasksItem) ProtoMessage() {}

func (x *NotifyTasksItem) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyTasksItem.ProtoReflect.Descriptor instead.
func (*NotifyTasksItem) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *NotifyTasksItem) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *NotifyTasksItem) GetTask() *TaskSpec {
	if x != nil {
		return x.Task
	}
	return nil
}

type NotifyTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SchedulerID is the id of the scheduler that this request should be run on.
	SchedulerId string `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3" json:"scheduler_id,omitempty"`
	// Notifications is the set of task notifications to send to the scheduler.
	Notifications []*NotifyTasksItem `protobuf:"bytes,2,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// IsCallback specifies whether these notifications are in response to
	// updates that were requested by a previous GetCallbacks call.
	//
	// This is for diagnostic purposes only.
	IsCallback    bool `protobuf:"varint,3,opt,name=is_callback,json=isCallback,proto3" json:"is_callback,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyTasksRequest) Reset() {
	*x = NotifyTasksRequest{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyTasksRequest) ProtoMessage() {}

func (x *NotifyTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyTasksRequest.ProtoReflect.Descriptor instead.
func (*NotifyTasksRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *NotifyTasksRequest) GetSchedulerId() string {
	if x != nil {
		return x.SchedulerId
	}
	return ""
}

func (x *NotifyTasksRequest) GetNotifications() []*NotifyTasksItem {
	if x != nil {
		return x.Notifications
	}
	return nil
}

func (x *NotifyTasksRequest) GetIsCallback() bool {
	if x != nil {
		return x.IsCallback
	}
	return false
}

type NotifyTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyTasksResponse) Reset() {
	*x = NotifyTasksResponse{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyTasksResponse) ProtoMessage() {}

func (x *NotifyTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyTasksResponse.ProtoReflect.Descriptor instead.
func (*NotifyTasksResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{10}
}

type GetCallbacksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SchedulerID is the id of the scheduler that this request should be run on.
	SchedulerId   string `protobuf:"bytes,1,opt,name=scheduler_id,json=schedulerId,proto3" json:"scheduler_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCallbacksRequest) Reset() {
	*x = GetCallbacksRequest{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCallbacksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallbacksRequest) ProtoMessage() {}

func (x *GetCallbacksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallbacksRequest.ProtoReflect.Descriptor instead.
func (*GetCallbacksRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *GetCallbacksRequest) GetSchedulerId() string {
	if x != nil {
		return x.SchedulerId
	}
	return ""
}

type GetCallbacksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TaskIds is the list of tasks that the external scheduler would like
	// callback notifications about.
	TaskIds       []string `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCallbacksResponse) Reset() {
	*x = GetCallbacksResponse{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCallbacksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCallbacksResponse) ProtoMessage() {}

func (x *GetCallbacksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCallbacksResponse.ProtoReflect.Descriptor instead.
func (*GetCallbacksResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{12}
}

func (x *GetCallbacksResponse) GetTaskIds() []string {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type GetCancellationsResponse_Cancellation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BotID is the bot that a task should be cancelled on.
	BotId string `protobuf:"bytes,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	// TaskID is the task that should be cancelled on the bot.
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Reason is the reason the task was cancelled.
	Reason GetCancellationsResponse_Cancellation_Reason `protobuf:"varint,3,opt,name=reason,proto3,enum=swarming.v1.GetCancellationsResponse_Cancellation_Reason" json:"reason,omitempty"`
	// ExtraInfo is optional, human readable extra information about why the
	// task was cancelled.
	ExtraInfo     string `protobuf:"bytes,4,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCancellationsResponse_Cancellation) Reset() {
	*x = GetCancellationsResponse_Cancellation{}
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCancellationsResponse_Cancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCancellationsResponse_Cancellation) ProtoMessage() {}

func (x *GetCancellationsResponse_Cancellation) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCancellationsResponse_Cancellation.ProtoReflect.Descriptor instead.
func (*GetCancellationsResponse_Cancellation) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetCancellationsResponse_Cancellation) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *GetCancellationsResponse_Cancellation) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *GetCancellationsResponse_Cancellation) GetReason() GetCancellationsResponse_Cancellation_Reason {
	if x != nil {
		return x.Reason
	}
	return GetCancellationsResponse_Cancellation_INVALID
}

func (x *GetCancellationsResponse_Cancellation) GetExtraInfo() string {
	if x != nil {
		return x.ExtraInfo
	}
	return ""
}

var File_go_chromium_org_luci_swarming_proto_plugin_plugin_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDesc = "" +
	"\n" +
	"7go.chromium.org/luci/swarming/proto/plugin/plugin.proto\x12\vswarming.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9a\a\n" +
	"\bTaskSpec\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04tags\x18\x02 \x03(\tR\x04tags\x12.\n" +
	"\x06slices\x18\x03 \x03(\v2\x16.swarming.v1.SliceSpecR\x06slices\x121\n" +
	"\x05state\x18\x04 \x01(\x0e2\x1b.swarming.v1.TaskSpec.StateR\x05state\x12\x15\n" +
	"\x06bot_id\x18\x05 \x01(\tR\x05botId\x12?\n" +
	"\renqueued_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\fenqueuedTime\"\xcc\x01\n" +
	"\rStateCategory\x12#\n" +
	"\x1fTASK_STATE_CATEGORY_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fTASK_STATE_MASK\x10\x0f\x12\x14\n" +
	"\x10CATEGORY_PENDING\x10\x10\x12\x14\n" +
	"\x10CATEGORY_RUNNING\x10 \x12\x1b\n" +
	"\x17CATEGORY_TRANSIENT_DONE\x100\x12\x1b\n" +
	"\x17CATEGORY_EXECUTION_DONE\x10@\x12\x1b\n" +
	"\x17CATEGORY_NEVER_RAN_DONE\x10P\"\xdf\x03\n" +
	"\x05State\x12\x16\n" +
	"\x12TASK_STATE_INVALID\x10\x00\x12\v\n" +
	"\aPENDING\x10\x10\x12\x14\n" +
	"\x10PENDING_DEDUPING\x10\x11\x12\v\n" +
	"\aRUNNING\x10 \x12\x1a\n" +
	"\x16RUNNING_OVERHEAD_SETUP\x10!\x12\x1d\n" +
	"\x19RUNNING_OVERHEAD_TEARDOWN\x10\"\x12\x0f\n" +
	"\vTERMINATING\x10#\x12\x0e\n" +
	"\n" +
	"COMPLETING\x10/\x12\x18\n" +
	"\x14RAN_INTERNAL_FAILURE\x100\x12\x0f\n" +
	"\vDUT_FAILURE\x101\x12\x13\n" +
	"\x0fBOT_DISAPPEARED\x102\x12\r\n" +
	"\tPREEMPTED\x103\x12\r\n" +
	"\tCOMPLETED\x10@\x12\r\n" +
	"\tTIMED_OUT\x10A\x12\x15\n" +
	"\x11TIMED_OUT_SILENCE\x10B\x12\n" +
	"\n" +
	"\x06KILLED\x10C\x12\x12\n" +
	"\x0eMISSING_INPUTS\x10D\x12\v\n" +
	"\aDEDUPED\x10P\x12\v\n" +
	"\aEXPIRED\x10Q\x12\f\n" +
	"\bCANCELED\x10R\x12\x0f\n" +
	"\vNO_RESOURCE\x10S\x12\r\n" +
	"\tLOAD_SHED\x10T\x12\x16\n" +
	"\x12RESOURCE_EXHAUSTED\x10U\x12\x1c\n" +
	"\x18SKIPPED_INTERNAL_FAILURE\x10V\x12\x10\n" +
	"\fCLIENT_ERROR\x10W\"+\n" +
	"\tSliceSpec\x12\x1e\n" +
	"\n" +
	"dimensions\x18\x01 \x03(\tR\n" +
	"dimensions\"@\n" +
	"\aIdleBot\x12\x15\n" +
	"\x06bot_id\x18\x01 \x01(\tR\x05botId\x12\x1e\n" +
	"\n" +
	"dimensions\x18\x02 \x03(\tR\n" +
	"dimensions\"\x9a\x01\n" +
	"\x12AssignTasksRequest\x12!\n" +
	"\fscheduler_id\x18\x01 \x01(\tR\vschedulerId\x121\n" +
	"\tidle_bots\x18\x02 \x03(\v2\x14.swarming.v1.IdleBotR\bidleBots\x12.\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\"T\n" +
	"\x13AssignTasksResponse\x12=\n" +
	"\vassignments\x18\x01 \x03(\v2\x1b.swarming.v1.TaskAssignmentR\vassignments\"c\n" +
	"\x0eTaskAssignment\x12\x15\n" +
	"\x06bot_id\x18\x01 \x01(\tR\x05botId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12!\n" +
	"\fslice_number\x18\x03 \x01(\x05R\vsliceNumber\"<\n" +
	"\x17GetCancellationsRequest\x12!\n" +
	"\fscheduler_id\x18\x01 \x01(\tR\vschedulerId\"\xd8\x02\n" +
	"\x18GetCancellationsResponse\x12X\n" +
	"\rcancellations\x18\x01 \x03(\v22.swarming.v1.GetCancellationsResponse.CancellationR\rcancellations\x1a\xe1\x01\n" +
	"\fCancellation\x12\x15\n" +
	"\x06bot_id\x18\x01 \x01(\tR\x05botId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\tR\x06taskId\x12Q\n" +
	"\x06reason\x18\x03 \x01(\x0e29.swarming.v1.GetCancellationsResponse.Cancellation.ReasonR\x06reason\x12\x1d\n" +
	"\n" +
	"extra_info\x18\x04 \x01(\tR\textraInfo\"/\n" +
	"\x06Reason\x12\v\n" +
	"\aINVALID\x10\x00\x12\r\n" +
	"\tPREEMPTED\x10\x01\x12\t\n" +
	"\x05ERROR\x10\x02\"l\n" +
	"\x0fNotifyTasksItem\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12)\n" +
	"\x04task\x18\x02 \x01(\v2\x15.swarming.v1.TaskSpecR\x04task\"\x9c\x01\n" +
	"\x12NotifyTasksRequest\x12!\n" +
	"\fscheduler_id\x18\x01 \x01(\tR\vschedulerId\x12B\n" +
	"\rnotifications\x18\x02 \x03(\v2\x1c.swarming.v1.NotifyTasksItemR\rnotifications\x12\x1f\n" +
	"\vis_callback\x18\x03 \x01(\bR\n" +
	"isCallback\"\x15\n" +
	"\x13NotifyTasksResponse\"8\n" +
	"\x13GetCallbacksRequest\x12!\n" +
	"\fscheduler_id\x18\x01 \x01(\tR\vschedulerId\"1\n" +
	"\x14GetCallbacksResponse\x12\x19\n" +
	"\btask_ids\x18\x01 \x03(\tR\ataskIds2\xed\x02\n" +
	"\x11ExternalScheduler\x12P\n" +
	"\vAssignTasks\x12\x1f.swarming.v1.AssignTasksRequest\x1a .swarming.v1.AssignTasksResponse\x12_\n" +
	"\x10GetCancellations\x12$.swarming.v1.GetCancellationsRequest\x1a%.swarming.v1.GetCancellationsResponse\x12P\n" +
	"\vNotifyTasks\x12\x1f.swarming.v1.NotifyTasksRequest\x1a .swarming.v1.NotifyTasksResponse\x12S\n" +
	"\fGetCallbacks\x12 .swarming.v1.GetCallbacksRequest\x1a!.swarming.v1.GetCallbacksResponseB5Z3go.chromium.org/luci/swarming/proto/plugin;pluginpbb\x06proto3"

var (
	file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescData []byte
)

func file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDescData
}

var file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_goTypes = []any{
	(TaskSpec_StateCategory)(0),                       // 0: swarming.v1.TaskSpec.StateCategory
	(TaskSpec_State)(0),                               // 1: swarming.v1.TaskSpec.State
	(GetCancellationsResponse_Cancellation_Reason)(0), // 2: swarming.v1.GetCancellationsResponse.Cancellation.Reason
	(*TaskSpec)(nil),                                  // 3: swarming.v1.TaskSpec
	(*SliceSpec)(nil),                                 // 4: swarming.v1.SliceSpec
	(*IdleBot)(nil),                                   // 5: swarming.v1.IdleBot
	(*AssignTasksRequest)(nil),                        // 6: swarming.v1.AssignTasksRequest
	(*AssignTasksResponse)(nil),                       // 7: swarming.v1.AssignTasksResponse
	(*TaskAssignment)(nil),                            // 8: swarming.v1.TaskAssignment
	(*GetCancellationsRequest)(nil),                   // 9: swarming.v1.GetCancellationsRequest
	(*GetCancellationsResponse)(nil),                  // 10: swarming.v1.GetCancellationsResponse
	(*NotifyTasksItem)(nil),                           // 11: swarming.v1.NotifyTasksItem
	(*NotifyTasksRequest)(nil),                        // 12: swarming.v1.NotifyTasksRequest
	(*NotifyTasksResponse)(nil),                       // 13: swarming.v1.NotifyTasksResponse
	(*GetCallbacksRequest)(nil),                       // 14: swarming.v1.GetCallbacksRequest
	(*GetCallbacksResponse)(nil),                      // 15: swarming.v1.GetCallbacksResponse
	(*GetCancellationsResponse_Cancellation)(nil),     // 16: swarming.v1.GetCancellationsResponse.Cancellation
	(*timestamppb.Timestamp)(nil),                     // 17: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_depIdxs = []int32{
	4,  // 0: swarming.v1.TaskSpec.slices:type_name -> swarming.v1.SliceSpec
	1,  // 1: swarming.v1.TaskSpec.state:type_name -> swarming.v1.TaskSpec.State
	17, // 2: swarming.v1.TaskSpec.enqueued_time:type_name -> google.protobuf.Timestamp
	5,  // 3: swarming.v1.AssignTasksRequest.idle_bots:type_name -> swarming.v1.IdleBot
	17, // 4: swarming.v1.AssignTasksRequest.time:type_name -> google.protobuf.Timestamp
	8,  // 5: swarming.v1.AssignTasksResponse.assignments:type_name -> swarming.v1.TaskAssignment
	16, // 6: swarming.v1.GetCancellationsResponse.cancellations:type_name -> swarming.v1.GetCancellationsResponse.Cancellation
	17, // 7: swarming.v1.NotifyTasksItem.time:type_name -> google.protobuf.Timestamp
	3,  // 8: swarming.v1.NotifyTasksItem.task:type_name -> swarming.v1.TaskSpec
	11, // 9: swarming.v1.NotifyTasksRequest.notifications:type_name -> swarming.v1.NotifyTasksItem
	2,  // 10: swarming.v1.GetCancellationsResponse.Cancellation.reason:type_name -> swarming.v1.GetCancellationsResponse.Cancellation.Reason
	6,  // 11: swarming.v1.ExternalScheduler.AssignTasks:input_type -> swarming.v1.AssignTasksRequest
	9,  // 12: swarming.v1.ExternalScheduler.GetCancellations:input_type -> swarming.v1.GetCancellationsRequest
	12, // 13: swarming.v1.ExternalScheduler.NotifyTasks:input_type -> swarming.v1.NotifyTasksRequest
	14, // 14: swarming.v1.ExternalScheduler.GetCallbacks:input_type -> swarming.v1.GetCallbacksRequest
	7,  // 15: swarming.v1.ExternalScheduler.AssignTasks:output_type -> swarming.v1.AssignTasksResponse
	10, // 16: swarming.v1.ExternalScheduler.GetCancellations:output_type -> swarming.v1.GetCancellationsResponse
	13, // 17: swarming.v1.ExternalScheduler.NotifyTasks:output_type -> swarming.v1.NotifyTasksResponse
	15, // 18: swarming.v1.ExternalScheduler.GetCallbacks:output_type -> swarming.v1.GetCallbacksResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_init() }
func file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_init() {
	if File_go_chromium_org_luci_swarming_proto_plugin_plugin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDesc), len(file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_swarming_proto_plugin_plugin_proto = out.File
	file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_goTypes = nil
	file_go_chromium_org_luci_swarming_proto_plugin_plugin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExternalSchedulerClient is the client API for ExternalScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExternalSchedulerClient interface {
	// AssignTasks determines which tasks should be run on which of the supplied
	// idle bots.
	AssignTasks(ctx context.Context, in *AssignTasksRequest, opts ...grpc.CallOption) (*AssignTasksResponse, error)
	// GetCancellations determines which tasks should be cancelled on which bots.
	GetCancellations(ctx context.Context, in *GetCancellationsRequest, opts ...grpc.CallOption) (*GetCancellationsResponse, error)
	// NotifyTasks informs the scheduler about the state of tasks (either new
	// tasks, or states of existing tasks).
	NotifyTasks(ctx context.Context, in *NotifyTasksRequest, opts ...grpc.CallOption) (*NotifyTasksResponse, error)
	// GetCallbacks asks the scheduler for a set of request ids that the
	// external scheduler wants to receive callback NotifyTasks calls about.
	GetCallbacks(ctx context.Context, in *GetCallbacksRequest, opts ...grpc.CallOption) (*GetCallbacksResponse, error)
}
type externalSchedulerPRPCClient struct {
	client *prpc.Client
}

func NewExternalSchedulerPRPCClient(client *prpc.Client) ExternalSchedulerClient {
	return &externalSchedulerPRPCClient{client}
}

func (c *externalSchedulerPRPCClient) AssignTasks(ctx context.Context, in *AssignTasksRequest, opts ...grpc.CallOption) (*AssignTasksResponse, error) {
	out := new(AssignTasksResponse)
	err := c.client.Call(ctx, "swarming.v1.ExternalScheduler", "AssignTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerPRPCClient) GetCancellations(ctx context.Context, in *GetCancellationsRequest, opts ...grpc.CallOption) (*GetCancellationsResponse, error) {
	out := new(GetCancellationsResponse)
	err := c.client.Call(ctx, "swarming.v1.ExternalScheduler", "GetCancellations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerPRPCClient) NotifyTasks(ctx context.Context, in *NotifyTasksRequest, opts ...grpc.CallOption) (*NotifyTasksResponse, error) {
	out := new(NotifyTasksResponse)
	err := c.client.Call(ctx, "swarming.v1.ExternalScheduler", "NotifyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerPRPCClient) GetCallbacks(ctx context.Context, in *GetCallbacksRequest, opts ...grpc.CallOption) (*GetCallbacksResponse, error) {
	out := new(GetCallbacksResponse)
	err := c.client.Call(ctx, "swarming.v1.ExternalScheduler", "GetCallbacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type externalSchedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalSchedulerClient(cc grpc.ClientConnInterface) ExternalSchedulerClient {
	return &externalSchedulerClient{cc}
}

func (c *externalSchedulerClient) AssignTasks(ctx context.Context, in *AssignTasksRequest, opts ...grpc.CallOption) (*AssignTasksResponse, error) {
	out := new(AssignTasksResponse)
	err := c.cc.Invoke(ctx, "/swarming.v1.ExternalScheduler/AssignTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerClient) GetCancellations(ctx context.Context, in *GetCancellationsRequest, opts ...grpc.CallOption) (*GetCancellationsResponse, error) {
	out := new(GetCancellationsResponse)
	err := c.cc.Invoke(ctx, "/swarming.v1.ExternalScheduler/GetCancellations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerClient) NotifyTasks(ctx context.Context, in *NotifyTasksRequest, opts ...grpc.CallOption) (*NotifyTasksResponse, error) {
	out := new(NotifyTasksResponse)
	err := c.cc.Invoke(ctx, "/swarming.v1.ExternalScheduler/NotifyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalSchedulerClient) GetCallbacks(ctx context.Context, in *GetCallbacksRequest, opts ...grpc.CallOption) (*GetCallbacksResponse, error) {
	out := new(GetCallbacksResponse)
	err := c.cc.Invoke(ctx, "/swarming.v1.ExternalScheduler/GetCallbacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalSchedulerServer is the server API for ExternalScheduler service.
type ExternalSchedulerServer interface {
	// AssignTasks determines which tasks should be run on which of the supplied
	// idle bots.
	AssignTasks(context.Context, *AssignTasksRequest) (*AssignTasksResponse, error)
	// GetCancellations determines which tasks should be cancelled on which bots.
	GetCancellations(context.Context, *GetCancellationsRequest) (*GetCancellationsResponse, error)
	// NotifyTasks informs the scheduler about the state of tasks (either new
	// tasks, or states of existing tasks).
	NotifyTasks(context.Context, *NotifyTasksRequest) (*NotifyTasksResponse, error)
	// GetCallbacks asks the scheduler for a set of request ids that the
	// external scheduler wants to receive callback NotifyTasks calls about.
	GetCallbacks(context.Context, *GetCallbacksRequest) (*GetCallbacksResponse, error)
}

// UnimplementedExternalSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedExternalSchedulerServer struct {
}

func (*UnimplementedExternalSchedulerServer) AssignTasks(context.Context, *AssignTasksRequest) (*AssignTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTasks not implemented")
}
func (*UnimplementedExternalSchedulerServer) GetCancellations(context.Context, *GetCancellationsRequest) (*GetCancellationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCancellations not implemented")
}
func (*UnimplementedExternalSchedulerServer) NotifyTasks(context.Context, *NotifyTasksRequest) (*NotifyTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTasks not implemented")
}
func (*UnimplementedExternalSchedulerServer) GetCallbacks(context.Context, *GetCallbacksRequest) (*GetCallbacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCallbacks not implemented")
}

func RegisterExternalSchedulerServer(s prpc.Registrar, srv ExternalSchedulerServer) {
	s.RegisterService(&_ExternalScheduler_serviceDesc, srv)
}

func _ExternalScheduler_AssignTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSchedulerServer).AssignTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarming.v1.ExternalScheduler/AssignTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSchedulerServer).AssignTasks(ctx, req.(*AssignTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalScheduler_GetCancellations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCancellationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSchedulerServer).GetCancellations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarming.v1.ExternalScheduler/GetCancellations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSchedulerServer).GetCancellations(ctx, req.(*GetCancellationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalScheduler_NotifyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSchedulerServer).NotifyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarming.v1.ExternalScheduler/NotifyTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSchedulerServer).NotifyTasks(ctx, req.(*NotifyTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalScheduler_GetCallbacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCallbacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalSchedulerServer).GetCallbacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarming.v1.ExternalScheduler/GetCallbacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalSchedulerServer).GetCallbacks(ctx, req.(*GetCallbacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExternalScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swarming.v1.ExternalScheduler",
	HandlerType: (*ExternalSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignTasks",
			Handler:    _ExternalScheduler_AssignTasks_Handler,
		},
		{
			MethodName: "GetCancellations",
			Handler:    _ExternalScheduler_GetCancellations_Handler,
		},
		{
			MethodName: "NotifyTasks",
			Handler:    _ExternalScheduler_NotifyTasks_Handler,
		},
		{
			MethodName: "GetCallbacks",
			Handler:    _ExternalScheduler_GetCallbacks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/swarming/proto/plugin/plugin.proto",
}
