// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/swarming/internal/remoteworkers/reservations.proto

package remoteworkers

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of the reservation.
type ReservationState int32

const (
	// Default value; do not use.
	ReservationState_RESERVATION_STATE_UNSPECIFIED ReservationState = 0
	// The reservation has not yet been assigned.
	ReservationState_RESERVATION_PENDING ReservationState = 1
	// The reservation has been assigned to a worker but is not yet active.
	ReservationState_RESERVATION_ASSIGNED ReservationState = 2
	// The reservation is currently active.
	ReservationState_RESERVATION_ACTIVE ReservationState = 3
	// The reservation has completed.
	ReservationState_RESERVATION_COMPLETED ReservationState = 4
	// The reservation is cancelled.
	ReservationState_RESERVATION_CANCELLED ReservationState = 5
)

// Enum value maps for ReservationState.
var (
	ReservationState_name = map[int32]string{
		0: "RESERVATION_STATE_UNSPECIFIED",
		1: "RESERVATION_PENDING",
		2: "RESERVATION_ASSIGNED",
		3: "RESERVATION_ACTIVE",
		4: "RESERVATION_COMPLETED",
		5: "RESERVATION_CANCELLED",
	}
	ReservationState_value = map[string]int32{
		"RESERVATION_STATE_UNSPECIFIED": 0,
		"RESERVATION_PENDING":           1,
		"RESERVATION_ASSIGNED":          2,
		"RESERVATION_ACTIVE":            3,
		"RESERVATION_COMPLETED":         4,
		"RESERVATION_CANCELLED":         5,
	}
)

func (x ReservationState) Enum() *ReservationState {
	p := new(ReservationState)
	*p = x
	return p
}

func (x ReservationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReservationState) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes[0].Descriptor()
}

func (ReservationState) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes[0]
}

func (x ReservationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReservationState.Descriptor instead.
func (ReservationState) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{0}
}

// The intent of the cancellation request.
type CancelReservationIntent int32

const (
	// Default intent.
	CancelReservationIntent_CANCEL_RESERVATION_INTENT_UNSPECIFIED CancelReservationIntent = 0
	// The reservation should only be cancelled if it is in pending state.
	CancelReservationIntent_ONLY_IF_PENDING CancelReservationIntent = 1
	// The reservation should be cancelled no matter its state.
	CancelReservationIntent_ANY CancelReservationIntent = 2
)

// Enum value maps for CancelReservationIntent.
var (
	CancelReservationIntent_name = map[int32]string{
		0: "CANCEL_RESERVATION_INTENT_UNSPECIFIED",
		1: "ONLY_IF_PENDING",
		2: "ANY",
	}
	CancelReservationIntent_value = map[string]int32{
		"CANCEL_RESERVATION_INTENT_UNSPECIFIED": 0,
		"ONLY_IF_PENDING":                       1,
		"ANY":                                   2,
	}
)

func (x CancelReservationIntent) Enum() *CancelReservationIntent {
	p := new(CancelReservationIntent)
	*p = x
	return p
}

func (x CancelReservationIntent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelReservationIntent) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes[1].Descriptor()
}

func (CancelReservationIntent) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes[1]
}

func (x CancelReservationIntent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelReservationIntent.Descriptor instead.
func (CancelReservationIntent) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{1}
}

// The result of canceling the reservation.
type CancelResult int32

const (
	CancelResult_CANCEL_STATE_UNSPECIFIED CancelResult = 0
	// The Reservation was canceled successfully.
	CancelResult_CANCELED CancelResult = 1
	// The Reservation was not canceled because the task is assigned.
	CancelResult_TASK_ALREADY_ASSIGNED CancelResult = 2
	// The Reservation was not canceled because the task is finished.
	CancelResult_TASK_ALREADY_FINISHED CancelResult = 3
	// The Reservation is cancelling.
	CancelResult_CANCELLING CancelResult = 4
)

// Enum value maps for CancelResult.
var (
	CancelResult_name = map[int32]string{
		0: "CANCEL_STATE_UNSPECIFIED",
		1: "CANCELED",
		2: "TASK_ALREADY_ASSIGNED",
		3: "TASK_ALREADY_FINISHED",
		4: "CANCELLING",
	}
	CancelResult_value = map[string]int32{
		"CANCEL_STATE_UNSPECIFIED": 0,
		"CANCELED":                 1,
		"TASK_ALREADY_ASSIGNED":    2,
		"TASK_ALREADY_FINISHED":    3,
		"CANCELLING":               4,
	}
)

func (x CancelResult) Enum() *CancelResult {
	p := new(CancelResult)
	*p = x
	return p
}

func (x CancelResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelResult) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes[2].Descriptor()
}

func (CancelResult) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes[2]
}

func (x CancelResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelResult.Descriptor instead.
func (CancelResult) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{2}
}

// A low-level request for a lease of a worker.
type Reservation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full reservation resource in the form of
	// "{parent}/reservations/{reservation}". The {reservation} component must be
	// a globally unique random identifier, e.g.  UUID. This component must be set
	// in the CreateReservation request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A message describing what the worker should do.
	Payload *anypb.Any `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Any result provided by the worker. Output only.
	Result *anypb.Any `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	// The state of the reservation - see ReservationState for more information.
	// Output only.
	State ReservationState `protobuf:"varint,4,opt,name=state,proto3,enum=google.devtools.remoteworkers.v1test2.ReservationState" json:"state,omitempty"`
	// If `state` is COMPLETED, this is the final status of the reservation.
	// Typically, this will be OK if a worker was successfully assigned - if the
	// worker failed to do work, that failure will be reported in the `result`
	// field, not here.
	// Output only.
	Status *status.Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// The constraints that a worker must satisfy to be eligible to execute this
	// reservation.
	Constraints []*Constraint `protobuf:"bytes,13,rep,name=constraints,proto3" json:"constraints,omitempty"`
	// The time after which the client no longer cares about this reservation. The
	// lease must be *completed* by this time, not started. expire_time is
	// enforced independently of other timeouts like queuing_timeout and
	// execution_timeout.
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Limits how long the reservation can be queued before being killed. Has no
	// effect once the reservation begins execution. queuing_timeout is enforced
	// independently of other timeouts like expire_time and execution_timeout.
	QueuingTimeout *durationpb.Duration `protobuf:"bytes,14,opt,name=queuing_timeout,json=queuingTimeout,proto3" json:"queuing_timeout,omitempty"`
	// Limits how long a reservation is allowed to run. Does not include any time
	// the reservation was queued. execution_timeout is enforced independently of
	// other timeouts like expire_time and queuing_timeout.
	ExecutionTimeout *durationpb.Duration `protobuf:"bytes,15,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	// Limits how long the reservation can be queued without matching bots online
	// before being killed. Has no effect once there are matching bots online
	// (even if those bots are busy working on other tasks).
	//
	// If unspecified, the reservation may fail immediately if no matching bots
	// are online (though occasionally it may take up to a few minutes before such
	// reservations fail).
	MatchTimeout *durationpb.Duration `protobuf:"bytes,16,opt,name=match_timeout,json=matchTimeout,proto3" json:"match_timeout,omitempty"`
	// The priority (relative importance) of this reservation. Generally, a lower
	// value means that the reservation should be run sooner than reservations
	// having a greater priority value, but the interpretation of a given value is
	// server-dependent. A priority of 0 means the *default* priority. Priorities
	// may be positive or negative, and such reservations should run later or
	// sooner than reservations having the default priority, respectively. The
	// particular semantics of this field is up to the server. In particular,
	// every server will have their own supported range of priorities, and will
	// decide how these map into scheduling policy.
	Priority int32 `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	// The pubsub_metadata field is a PubSubMetadata message containing topic_id
	// and publisher_id. If this message is provided, then the pubsub service will
	// be used to publish a Reservation message to the topic_id using the
	// publisher_id. The published Reservation message will contain the
	// reservation ID along with basic status info about the result. The
	// subscriber will then need to call GetReservation RPC to get more details.
	PubsubMetadata *PubSubMetadata `protobuf:"bytes,9,opt,name=pubsub_metadata,json=pubsubMetadata,proto3" json:"pubsub_metadata,omitempty"`
	// The assigned_bot_id field is a string message of the name of the machine
	// tasked with executing a Reservation. This is a necessary debugging field
	// for Reservation users that control their own workers.
	AssignedBotId string `protobuf:"bytes,10,opt,name=assigned_bot_id,json=assignedBotId,proto3" json:"assigned_bot_id,omitempty"`
	// The name of the machine that should execute the Reservation.
	RequestedBotId string `protobuf:"bytes,12,opt,name=requested_bot_id,json=requestedBotId,proto3" json:"requested_bot_id,omitempty"`
	// Identifies the group that this reservation belongs to. For example, if this
	// reservation represents one of several actions to be performed as part of a
	// particular job, the group ID may be the ID of that job.
	GroupId       string `protobuf:"bytes,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reservation) Reset() {
	*x = Reservation{}
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reservation) ProtoMessage() {}

func (x *Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reservation.ProtoReflect.Descriptor instead.
func (*Reservation) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{0}
}

func (x *Reservation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reservation) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Reservation) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Reservation) GetState() ReservationState {
	if x != nil {
		return x.State
	}
	return ReservationState_RESERVATION_STATE_UNSPECIFIED
}

func (x *Reservation) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Reservation) GetConstraints() []*Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *Reservation) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *Reservation) GetQueuingTimeout() *durationpb.Duration {
	if x != nil {
		return x.QueuingTimeout
	}
	return nil
}

func (x *Reservation) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

func (x *Reservation) GetMatchTimeout() *durationpb.Duration {
	if x != nil {
		return x.MatchTimeout
	}
	return nil
}

func (x *Reservation) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Reservation) GetPubsubMetadata() *PubSubMetadata {
	if x != nil {
		return x.PubsubMetadata
	}
	return nil
}

func (x *Reservation) GetAssignedBotId() string {
	if x != nil {
		return x.AssignedBotId
	}
	return ""
}

func (x *Reservation) GetRequestedBotId() string {
	if x != nil {
		return x.RequestedBotId
	}
	return ""
}

func (x *Reservation) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

// A constraint that a worker must satisfy to be eligible to execute a
// reservation.
type Constraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the property to which this constraint applies.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The set of values, at least one of which must be reported by the worker to
	// be eligible to execute the reservation.
	AllowedValues []string `protobuf:"bytes,2,rep,name=allowed_values,json=allowedValues,proto3" json:"allowed_values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{1}
}

func (x *Constraint) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Constraint) GetAllowedValues() []string {
	if x != nil {
		return x.AllowedValues
	}
	return nil
}

// Request message for CreateReservation.
type CreateReservationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parent        string                 `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Reservation   *Reservation           `protobuf:"bytes,2,opt,name=reservation,proto3" json:"reservation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReservationRequest) Reset() {
	*x = CreateReservationRequest{}
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReservationRequest) ProtoMessage() {}

func (x *CreateReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReservationRequest.ProtoReflect.Descriptor instead.
func (*CreateReservationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{2}
}

func (x *CreateReservationRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateReservationRequest) GetReservation() *Reservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

type GetReservationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If non-zero, GetReservation will attempt to wait for the reservation's
	// state to become COMPLETED for up to this amount of time, though this is not
	// guaranteed.
	WaitSeconds   int64 `protobuf:"varint,2,opt,name=wait_seconds,json=waitSeconds,proto3" json:"wait_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReservationRequest) Reset() {
	*x = GetReservationRequest{}
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservationRequest) ProtoMessage() {}

func (x *GetReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservationRequest.ProtoReflect.Descriptor instead.
func (*GetReservationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{3}
}

func (x *GetReservationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetReservationRequest) GetWaitSeconds() int64 {
	if x != nil {
		return x.WaitSeconds
	}
	return 0
}

type CancelReservationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The intent indicates if a task can be cancelled based on its state. If set
	// to ANY then assigned tasks may be cancelled. Otherwise, the task must be
	// pending.
	Intent        CancelReservationIntent `protobuf:"varint,2,opt,name=intent,proto3,enum=google.devtools.remoteworkers.v1test2.CancelReservationIntent" json:"intent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelReservationRequest) Reset() {
	*x = CancelReservationRequest{}
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelReservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationRequest) ProtoMessage() {}

func (x *CancelReservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationRequest.ProtoReflect.Descriptor instead.
func (*CancelReservationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{4}
}

func (x *CancelReservationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CancelReservationRequest) GetIntent() CancelReservationIntent {
	if x != nil {
		return x.Intent
	}
	return CancelReservationIntent_CANCEL_RESERVATION_INTENT_UNSPECIFIED
}

type CancelReservationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        CancelResult           `protobuf:"varint,1,opt,name=result,proto3,enum=google.devtools.remoteworkers.v1test2.CancelResult" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelReservationResponse) Reset() {
	*x = CancelReservationResponse{}
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelReservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReservationResponse) ProtoMessage() {}

func (x *CancelReservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReservationResponse.ProtoReflect.Descriptor instead.
func (*CancelReservationResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{5}
}

func (x *CancelReservationResponse) GetResult() CancelResult {
	if x != nil {
		return x.Result
	}
	return CancelResult_CANCEL_STATE_UNSPECIFIED
}

type PubSubMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The topic_id is the name of the topic that the pubsub service will publish.
	// The subscriber should be subscribing to the topic_id.
	TopicId string `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	// The publisher_id is the id that the pubsub service will use when publishing
	// the topic identified by the topic_id.
	PublisherId   string `protobuf:"bytes,2,opt,name=publisher_id,json=publisherId,proto3" json:"publisher_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PubSubMetadata) Reset() {
	*x = PubSubMetadata{}
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSubMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSubMetadata) ProtoMessage() {}

func (x *PubSubMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSubMetadata.ProtoReflect.Descriptor instead.
func (*PubSubMetadata) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP(), []int{6}
}

func (x *PubSubMetadata) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *PubSubMetadata) GetPublisherId() string {
	if x != nil {
		return x.PublisherId
	}
	return ""
}

var File_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDesc = string([]byte{
	0x0a, 0x47, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbc, 0x07, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x71, 0x75,
	0x65, 0x75, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x11,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x53,
	0x75, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x42, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x3a, 0x55, 0xea, 0x41, 0x52, 0x0a, 0x28, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x2a, 0x2a, 0x7d, 0x2f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0x4f,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74,
	0x32, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77,
	0x61, 0x69, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65,
	0x73, 0x74, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4e, 0x0a,
	0x0e, 0x50, 0x75, 0x62, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x2a, 0xb6, 0x01,
	0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x62, 0x0a, 0x17, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x49, 0x46, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x0c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x32, 0xcf, 0x04,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc0,
	0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x3a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21,
	0x2f, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x2a, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0xad, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x2a,
	0x2a, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x2a, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0xab, 0x01, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x74, 0x65, 0x73, 0x74, 0x32, 0x42, 0x19, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0xa2, 0x02, 0x02, 0x52, 0x57, 0xaa, 0x02, 0x25, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x31, 0x54, 0x65, 0x73, 0x74, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescData []byte
)

func file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDesc), len(file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDescData
}

var file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_goTypes = []any{
	(ReservationState)(0),             // 0: google.devtools.remoteworkers.v1test2.ReservationState
	(CancelReservationIntent)(0),      // 1: google.devtools.remoteworkers.v1test2.CancelReservationIntent
	(CancelResult)(0),                 // 2: google.devtools.remoteworkers.v1test2.CancelResult
	(*Reservation)(nil),               // 3: google.devtools.remoteworkers.v1test2.Reservation
	(*Constraint)(nil),                // 4: google.devtools.remoteworkers.v1test2.Constraint
	(*CreateReservationRequest)(nil),  // 5: google.devtools.remoteworkers.v1test2.CreateReservationRequest
	(*GetReservationRequest)(nil),     // 6: google.devtools.remoteworkers.v1test2.GetReservationRequest
	(*CancelReservationRequest)(nil),  // 7: google.devtools.remoteworkers.v1test2.CancelReservationRequest
	(*CancelReservationResponse)(nil), // 8: google.devtools.remoteworkers.v1test2.CancelReservationResponse
	(*PubSubMetadata)(nil),            // 9: google.devtools.remoteworkers.v1test2.PubSubMetadata
	(*anypb.Any)(nil),                 // 10: google.protobuf.Any
	(*status.Status)(nil),             // 11: google.rpc.Status
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 13: google.protobuf.Duration
}
var file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_depIdxs = []int32{
	10, // 0: google.devtools.remoteworkers.v1test2.Reservation.payload:type_name -> google.protobuf.Any
	10, // 1: google.devtools.remoteworkers.v1test2.Reservation.result:type_name -> google.protobuf.Any
	0,  // 2: google.devtools.remoteworkers.v1test2.Reservation.state:type_name -> google.devtools.remoteworkers.v1test2.ReservationState
	11, // 3: google.devtools.remoteworkers.v1test2.Reservation.status:type_name -> google.rpc.Status
	4,  // 4: google.devtools.remoteworkers.v1test2.Reservation.constraints:type_name -> google.devtools.remoteworkers.v1test2.Constraint
	12, // 5: google.devtools.remoteworkers.v1test2.Reservation.expire_time:type_name -> google.protobuf.Timestamp
	13, // 6: google.devtools.remoteworkers.v1test2.Reservation.queuing_timeout:type_name -> google.protobuf.Duration
	13, // 7: google.devtools.remoteworkers.v1test2.Reservation.execution_timeout:type_name -> google.protobuf.Duration
	13, // 8: google.devtools.remoteworkers.v1test2.Reservation.match_timeout:type_name -> google.protobuf.Duration
	9,  // 9: google.devtools.remoteworkers.v1test2.Reservation.pubsub_metadata:type_name -> google.devtools.remoteworkers.v1test2.PubSubMetadata
	3,  // 10: google.devtools.remoteworkers.v1test2.CreateReservationRequest.reservation:type_name -> google.devtools.remoteworkers.v1test2.Reservation
	1,  // 11: google.devtools.remoteworkers.v1test2.CancelReservationRequest.intent:type_name -> google.devtools.remoteworkers.v1test2.CancelReservationIntent
	2,  // 12: google.devtools.remoteworkers.v1test2.CancelReservationResponse.result:type_name -> google.devtools.remoteworkers.v1test2.CancelResult
	5,  // 13: google.devtools.remoteworkers.v1test2.Reservations.CreateReservation:input_type -> google.devtools.remoteworkers.v1test2.CreateReservationRequest
	6,  // 14: google.devtools.remoteworkers.v1test2.Reservations.GetReservation:input_type -> google.devtools.remoteworkers.v1test2.GetReservationRequest
	7,  // 15: google.devtools.remoteworkers.v1test2.Reservations.CancelReservation:input_type -> google.devtools.remoteworkers.v1test2.CancelReservationRequest
	3,  // 16: google.devtools.remoteworkers.v1test2.Reservations.CreateReservation:output_type -> google.devtools.remoteworkers.v1test2.Reservation
	3,  // 17: google.devtools.remoteworkers.v1test2.Reservations.GetReservation:output_type -> google.devtools.remoteworkers.v1test2.Reservation
	8,  // 18: google.devtools.remoteworkers.v1test2.Reservations.CancelReservation:output_type -> google.devtools.remoteworkers.v1test2.CancelReservationResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_init() }
func file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_init() {
	if File_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDesc), len(file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto = out.File
	file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_goTypes = nil
	file_go_chromium_org_luci_swarming_internal_remoteworkers_reservations_proto_depIdxs = nil
}
