// Copyright 2017 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gsutil

import (
	"bytes"
	"context"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"go.chromium.org/luci/common/system/environ"
	"go.chromium.org/luci/common/testing/ftt"
	"go.chromium.org/luci/common/testing/truth/assert"
	"go.chromium.org/luci/common/testing/truth/should"
)

func TestBoto(t *testing.T) {
	t.Parallel()

	ftt.Run("Works", t, func(c *ftt.Test) {

		ctx := environ.New(nil).SetInCtx(context.Background())

		tmpDir, err := os.MkdirTemp("", "luci_boto_test")
		assert.Loosely(c, err, should.BeNil)
		c.Cleanup(func() { _ = os.RemoveAll(tmpDir) })

		write := func(ctx context.Context, b *Boto) {
			b.StateDir = tmpDir
			_, err := PrepareStateDir(ctx, b)
			assert.Loosely(c, err, should.BeNil)
		}

		read := func() string {
			buf, err := os.ReadFile(filepath.Join(tmpDir, ".boto"))
			assert.Loosely(c, err, should.BeNil)
			return string(buf)
		}

		c.Run("Minimal", func(c *ftt.Test) {
			write(ctx, &Boto{})
			assert.Loosely(c, read(), should.Equal(fmt.Sprintf(`# Autogenerated by LUCI. Do not edit.

[GSUtil]
software_update_check_period = 0
state_dir = %s
`, tmpDir)))
		})

		c.Run("Full", func(c *ftt.Test) {
			write(ctx, &Boto{
				RefreshToken:      "zzz",
				GCEServiceAccount: "default",
				ProviderLabel:     "Some label",
				ProviderAuthURI:   "http://127.0.0.1/auth_uri",
				ProviderTokenURI:  "http://127.0.0.1/token_uri",
			})
			assert.Loosely(c, read(), should.Equal(fmt.Sprintf(`# Autogenerated by LUCI. Do not edit.

[GSUtil]
software_update_check_period = 0
state_dir = %s

[Credentials]
gs_oauth2_refresh_token = zzz

[GoogleCompute]
service_account = default

[OAuth2]
provider_label = Some label
provider_authorization_uri = http://127.0.0.1/auth_uri
provider_token_uri = http://127.0.0.1/token_uri
`, tmpDir)))
		})

		c.Run("WithExistingProxyConfig", func(c *ftt.Test) {
			existing, err := os.CreateTemp(tmpDir, "with.boto.block.")
			assert.Loosely(c, err, should.BeNil)
			existingBlock := bytes.Buffer{}
			existingBlock.WriteString("[Credentials]")
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("gs_oauth2_refresh_token = zzz")
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("[Boto]")
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("# some comment")
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("proxy = 1.2.3.4")
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("proxy_port = 8080")
			existingBlock.WriteRune('\n')
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("ca_certificates_file = /path/cert.crt")
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("[OAuth2]")
			existingBlock.WriteRune('\n')
			existingBlock.WriteString("provider_label = Some label")
			_, err = existing.Write(existingBlock.Bytes())
			assert.Loosely(c, err, should.BeNil)

			env := environ.FromCtx(ctx)
			env.Set("BOTO_CONFIG", existing.Name())

			write(env.SetInCtx(ctx), &Boto{})
			assert.Loosely(c, read(), should.Equal(fmt.Sprintf(`# Autogenerated by LUCI. Do not edit.

[GSUtil]
software_update_check_period = 0
state_dir = %s

[Boto]
proxy = 1.2.3.4
proxy_port = 8080

ca_certificates_file = /path/cert.crt
`, tmpDir)))

		})

	})

}

func TestFindUserBotoConfig(t *testing.T) {

	ftt.Run("Works", t, func(t *ftt.Test) {
		tmpDir := t.TempDir()

		ctx := environ.New(nil).SetInCtx(context.Background())

		// Use vars in environ.Env instead of calling os.UserHomeDir which uses
		// os.Getenv().
		ctx = withMockHomeDir(ctx, tmpDir)

		createTemp := func() string {
			f, err := os.CreateTemp(tmpDir, "with.boto.block.")
			assert.Loosely(t, err, should.BeNil)
			_ = f.Close()
			return f.Name()
		}

		tmp1 := createTemp()
		tmp2 := createTemp()
		tmp3 := createTemp()

		// Need an exact filename for home dir location.
		homeDirBoto, err := os.Create(filepath.Join(tmpDir, ".boto"))
		assert.Loosely(t, err, should.BeNil)
		_ = homeDirBoto.Close()

		commonEnv := environ.FromCtx(ctx)

		botoConfig := func(env environ.Env) {
			env.Set("BOTO_CONFIG", tmp1)
		}

		botoPath := func(env environ.Env) {
			env.Set("BOTO_PATH", strings.Join([]string{
				tmp3, tmp2}, string(os.PathListSeparator)))
		}

		t.Run("BOTO_PATH env var", func(t *ftt.Test) {
			env := commonEnv.Clone()
			botoPath(env)
			path, err := findUserBotoConfig(env.SetInCtx(ctx))
			assert.Loosely(t, err, should.BeNil)
			assert.Loosely(t, path, should.Equal(tmp2))
		})

		t.Run("Home Directory", func(t *ftt.Test) {
			path, err := findUserBotoConfig(commonEnv.SetInCtx(ctx))
			assert.Loosely(t, err, should.BeNil)
			assert.Loosely(t, path, should.Equal(homeDirBoto.Name()))
		})

		t.Run("BOTO_CONFIG env var", func(t *ftt.Test) {
			env := commonEnv.Clone()
			botoConfig(env)
			botoPath(env)
			path, err := findUserBotoConfig(env.SetInCtx(ctx))
			assert.Loosely(t, err, should.BeNil)
			assert.Loosely(t, path, should.Equal(tmp1))
		})

		t.Run("not found", func(t *ftt.Test) {
			err := os.Remove(homeDirBoto.Name())
			assert.Loosely(t, err, should.BeNil)
			path, err := findUserBotoConfig(commonEnv.SetInCtx(ctx))
			assert.Loosely(t, err, should.BeNil)
			assert.Loosely(t, path, should.BeEmpty)
		})
	})
}
