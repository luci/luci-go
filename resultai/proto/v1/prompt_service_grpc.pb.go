// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.9
// source: go.chromium.org/luci/resultai/proto/v1/prompt_service.proto

package resultai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Prompt_ExecutePrompt_FullMethodName = "/resultai.Prompt/ExecutePrompt"
)

// PromptClient is the client API for Prompt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Prompt service definition
type PromptClient interface {
	ExecutePrompt(ctx context.Context, in *ExecutePromptRequest, opts ...grpc.CallOption) (*ExecutePromptResponse, error)
}

type promptClient struct {
	cc grpc.ClientConnInterface
}

func NewPromptClient(cc grpc.ClientConnInterface) PromptClient {
	return &promptClient{cc}
}

func (c *promptClient) ExecutePrompt(ctx context.Context, in *ExecutePromptRequest, opts ...grpc.CallOption) (*ExecutePromptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutePromptResponse)
	err := c.cc.Invoke(ctx, Prompt_ExecutePrompt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromptServer is the server API for Prompt service.
// All implementations must embed UnimplementedPromptServer
// for forward compatibility.
//
// Prompt service definition
type PromptServer interface {
	ExecutePrompt(context.Context, *ExecutePromptRequest) (*ExecutePromptResponse, error)
	mustEmbedUnimplementedPromptServer()
}

// UnimplementedPromptServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPromptServer struct{}

func (UnimplementedPromptServer) ExecutePrompt(context.Context, *ExecutePromptRequest) (*ExecutePromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePrompt not implemented")
}
func (UnimplementedPromptServer) mustEmbedUnimplementedPromptServer() {}
func (UnimplementedPromptServer) testEmbeddedByValue()                {}

// UnsafePromptServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromptServer will
// result in compilation errors.
type UnsafePromptServer interface {
	mustEmbedUnimplementedPromptServer()
}

func RegisterPromptServer(s grpc.ServiceRegistrar, srv PromptServer) {
	// If the following call pancis, it indicates UnimplementedPromptServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Prompt_ServiceDesc, srv)
}

func _Prompt_ExecutePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromptServer).ExecutePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prompt_ExecutePrompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromptServer).ExecutePrompt(ctx, req.(*ExecutePromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prompt_ServiceDesc is the grpc.ServiceDesc for Prompt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prompt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resultai.Prompt",
	HandlerType: (*PromptServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePrompt",
			Handler:    _Prompt_ExecutePrompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/resultai/proto/v1/prompt_service.proto",
}
