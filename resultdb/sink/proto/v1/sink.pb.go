// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/resultdb/sink/proto/v1/sink.proto

package sinkpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReportTestResultsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test results to report.
	TestResults   []*TestResult `protobuf:"bytes,1,rep,name=test_results,json=testResults,proto3" json:"test_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTestResultsRequest) Reset() {
	*x = ReportTestResultsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTestResultsRequest) ProtoMessage() {}

func (x *ReportTestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTestResultsRequest.ProtoReflect.Descriptor instead.
func (*ReportTestResultsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescGZIP(), []int{0}
}

func (x *ReportTestResultsRequest) GetTestResults() []*TestResult {
	if x != nil {
		return x.TestResults
	}
	return nil
}

type ReportTestResultsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of unique identifiers that can be used to link to these results
	// or requested via luci.resultdb.v1.ResultDB service.
	TestResultNames []string `protobuf:"bytes,1,rep,name=test_result_names,json=testResultNames,proto3" json:"test_result_names,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReportTestResultsResponse) Reset() {
	*x = ReportTestResultsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTestResultsResponse) ProtoMessage() {}

func (x *ReportTestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTestResultsResponse.ProtoReflect.Descriptor instead.
func (*ReportTestResultsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescGZIP(), []int{1}
}

func (x *ReportTestResultsResponse) GetTestResultNames() []string {
	if x != nil {
		return x.TestResultNames
	}
	return nil
}

type ReportInvocationLevelArtifactsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Invocation-level artifacts to report.
	// The map key is an artifact id.
	Artifacts     map[string]*Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportInvocationLevelArtifactsRequest) Reset() {
	*x = ReportInvocationLevelArtifactsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportInvocationLevelArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportInvocationLevelArtifactsRequest) ProtoMessage() {}

func (x *ReportInvocationLevelArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportInvocationLevelArtifactsRequest.ProtoReflect.Descriptor instead.
func (*ReportInvocationLevelArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescGZIP(), []int{2}
}

func (x *ReportInvocationLevelArtifactsRequest) GetArtifacts() map[string]*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

type UpdateInvocationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Invocation to update.
	Invocation *Invocation `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The list of fields to be updated. See https://google.aip.dev/161.
	//
	// The following paths can be used for extended_properties:
	// * "extended_properties" to target the whole extended_properties,
	// * "extended_properties.some_key" to target one key of extended_properties.
	// See sink/sink_server.go for implementation.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateInvocationRequest) Reset() {
	*x = UpdateInvocationRequest{}
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvocationRequest) ProtoMessage() {}

func (x *UpdateInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateInvocationRequest) GetInvocation() *Invocation {
	if x != nil {
		return x.Invocation
	}
	return nil
}

func (x *UpdateInvocationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// A local equivalent of the luci.resultdb.v1.Invocation message.
// The 'name' field is omitted as result sink keeps track of which invocation
// is being uploaded to.
type Invocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// See 'extended_properties' field of the luci.resultdb.v1.Invocation message
	// for details.
	ExtendedProperties map[string]*structpb.Struct `protobuf:"bytes,1,rep,name=extended_properties,json=extendedProperties,proto3" json:"extended_properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Invocation) Reset() {
	*x = Invocation{}
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Invocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invocation) ProtoMessage() {}

func (x *Invocation) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invocation.ProtoReflect.Descriptor instead.
func (*Invocation) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescGZIP(), []int{4}
}

func (x *Invocation) GetExtendedProperties() map[string]*structpb.Struct {
	if x != nil {
		return x.ExtendedProperties
	}
	return nil
}

var File_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDesc = string([]byte{
	0x0a, 0x36, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69,
	0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0xeb, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x1a, 0x5a, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x96,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xd5, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x5e, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xd4, 0x02, 0x0a, 0x04, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x72, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x1e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x39,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x69, 0x6e, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescData []byte
)

func file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_goTypes = []any{
	(*ReportTestResultsRequest)(nil),              // 0: luci.resultsink.v1.ReportTestResultsRequest
	(*ReportTestResultsResponse)(nil),             // 1: luci.resultsink.v1.ReportTestResultsResponse
	(*ReportInvocationLevelArtifactsRequest)(nil), // 2: luci.resultsink.v1.ReportInvocationLevelArtifactsRequest
	(*UpdateInvocationRequest)(nil),               // 3: luci.resultsink.v1.UpdateInvocationRequest
	(*Invocation)(nil),                            // 4: luci.resultsink.v1.Invocation
	nil,                                           // 5: luci.resultsink.v1.ReportInvocationLevelArtifactsRequest.ArtifactsEntry
	nil,                                           // 6: luci.resultsink.v1.Invocation.ExtendedPropertiesEntry
	(*TestResult)(nil),                            // 7: luci.resultsink.v1.TestResult
	(*fieldmaskpb.FieldMask)(nil),                 // 8: google.protobuf.FieldMask
	(*Artifact)(nil),                              // 9: luci.resultsink.v1.Artifact
	(*structpb.Struct)(nil),                       // 10: google.protobuf.Struct
	(*emptypb.Empty)(nil),                         // 11: google.protobuf.Empty
}
var file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_depIdxs = []int32{
	7,  // 0: luci.resultsink.v1.ReportTestResultsRequest.test_results:type_name -> luci.resultsink.v1.TestResult
	5,  // 1: luci.resultsink.v1.ReportInvocationLevelArtifactsRequest.artifacts:type_name -> luci.resultsink.v1.ReportInvocationLevelArtifactsRequest.ArtifactsEntry
	4,  // 2: luci.resultsink.v1.UpdateInvocationRequest.invocation:type_name -> luci.resultsink.v1.Invocation
	8,  // 3: luci.resultsink.v1.UpdateInvocationRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 4: luci.resultsink.v1.Invocation.extended_properties:type_name -> luci.resultsink.v1.Invocation.ExtendedPropertiesEntry
	9,  // 5: luci.resultsink.v1.ReportInvocationLevelArtifactsRequest.ArtifactsEntry.value:type_name -> luci.resultsink.v1.Artifact
	10, // 6: luci.resultsink.v1.Invocation.ExtendedPropertiesEntry.value:type_name -> google.protobuf.Struct
	0,  // 7: luci.resultsink.v1.Sink.ReportTestResults:input_type -> luci.resultsink.v1.ReportTestResultsRequest
	2,  // 8: luci.resultsink.v1.Sink.ReportInvocationLevelArtifacts:input_type -> luci.resultsink.v1.ReportInvocationLevelArtifactsRequest
	3,  // 9: luci.resultsink.v1.Sink.UpdateInvocation:input_type -> luci.resultsink.v1.UpdateInvocationRequest
	1,  // 10: luci.resultsink.v1.Sink.ReportTestResults:output_type -> luci.resultsink.v1.ReportTestResultsResponse
	11, // 11: luci.resultsink.v1.Sink.ReportInvocationLevelArtifacts:output_type -> google.protobuf.Empty
	4,  // 12: luci.resultsink.v1.Sink.UpdateInvocation:output_type -> luci.resultsink.v1.Invocation
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_init() }
func file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_init() {
	if File_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_sink_proto_v1_test_result_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto = out.File
	file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_sink_proto_v1_sink_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SinkClient is the client API for Sink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SinkClient interface {
	// Reports test results.
	ReportTestResults(ctx context.Context, in *ReportTestResultsRequest, opts ...grpc.CallOption) (*ReportTestResultsResponse, error)
	// Reports invocation-level artifacts.
	// To upload result-level artifact, use ReportTestResults instead.
	ReportInvocationLevelArtifacts(ctx context.Context, in *ReportInvocationLevelArtifactsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update an invocation
	UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
}
type sinkPRPCClient struct {
	client *prpc.Client
}

func NewSinkPRPCClient(client *prpc.Client) SinkClient {
	return &sinkPRPCClient{client}
}

func (c *sinkPRPCClient) ReportTestResults(ctx context.Context, in *ReportTestResultsRequest, opts ...grpc.CallOption) (*ReportTestResultsResponse, error) {
	out := new(ReportTestResultsResponse)
	err := c.client.Call(ctx, "luci.resultsink.v1.Sink", "ReportTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkPRPCClient) ReportInvocationLevelArtifacts(ctx context.Context, in *ReportInvocationLevelArtifactsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "luci.resultsink.v1.Sink", "ReportInvocationLevelArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkPRPCClient) UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultsink.v1.Sink", "UpdateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type sinkClient struct {
	cc grpc.ClientConnInterface
}

func NewSinkClient(cc grpc.ClientConnInterface) SinkClient {
	return &sinkClient{cc}
}

func (c *sinkClient) ReportTestResults(ctx context.Context, in *ReportTestResultsRequest, opts ...grpc.CallOption) (*ReportTestResultsResponse, error) {
	out := new(ReportTestResultsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultsink.v1.Sink/ReportTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkClient) ReportInvocationLevelArtifacts(ctx context.Context, in *ReportInvocationLevelArtifactsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/luci.resultsink.v1.Sink/ReportInvocationLevelArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinkClient) UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultsink.v1.Sink/UpdateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SinkServer is the server API for Sink service.
type SinkServer interface {
	// Reports test results.
	ReportTestResults(context.Context, *ReportTestResultsRequest) (*ReportTestResultsResponse, error)
	// Reports invocation-level artifacts.
	// To upload result-level artifact, use ReportTestResults instead.
	ReportInvocationLevelArtifacts(context.Context, *ReportInvocationLevelArtifactsRequest) (*emptypb.Empty, error)
	// Update an invocation
	UpdateInvocation(context.Context, *UpdateInvocationRequest) (*Invocation, error)
}

// UnimplementedSinkServer can be embedded to have forward compatible implementations.
type UnimplementedSinkServer struct {
}

func (*UnimplementedSinkServer) ReportTestResults(context.Context, *ReportTestResultsRequest) (*ReportTestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTestResults not implemented")
}
func (*UnimplementedSinkServer) ReportInvocationLevelArtifacts(context.Context, *ReportInvocationLevelArtifactsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportInvocationLevelArtifacts not implemented")
}
func (*UnimplementedSinkServer) UpdateInvocation(context.Context, *UpdateInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvocation not implemented")
}

func RegisterSinkServer(s prpc.Registrar, srv SinkServer) {
	s.RegisterService(&_Sink_serviceDesc, srv)
}

func _Sink_ReportTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServer).ReportTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultsink.v1.Sink/ReportTestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServer).ReportTestResults(ctx, req.(*ReportTestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sink_ReportInvocationLevelArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportInvocationLevelArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServer).ReportInvocationLevelArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultsink.v1.Sink/ReportInvocationLevelArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServer).ReportInvocationLevelArtifacts(ctx, req.(*ReportInvocationLevelArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sink_UpdateInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinkServer).UpdateInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultsink.v1.Sink/UpdateInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinkServer).UpdateInvocation(ctx, req.(*UpdateInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.resultsink.v1.Sink",
	HandlerType: (*SinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportTestResults",
			Handler:    _Sink_ReportTestResults_Handler,
		},
		{
			MethodName: "ReportInvocationLevelArtifacts",
			Handler:    _Sink_ReportInvocationLevelArtifacts_Handler,
		},
		{
			MethodName: "UpdateInvocation",
			Handler:    _Sink_UpdateInvocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/resultdb/sink/proto/v1/sink.proto",
}
