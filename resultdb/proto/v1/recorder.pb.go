// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.32.0
// source: go.chromium.org/luci/resultdb/proto/v1/recorder.proto

package resultpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes what to do with the root work unit when finalizing the root
// invocation.
type FinalizeRootInvocationRequest_FinalizationScope int32

const (
	// The scope is not specified. Do not use.
	FinalizeRootInvocationRequest_FINALIZATION_SCOPE_UNSPECIFIED FinalizeRootInvocationRequest_FinalizationScope = 0
	// Do not finalize the root work unit.
	// FinalizeWorkUnit must be called on on the root work unit separately.
	FinalizeRootInvocationRequest_EXCLUDE_ROOT_WORK_UNIT FinalizeRootInvocationRequest_FinalizationScope = 1
	// Finalize the root work unit in addition to the root invocation.
	// If the root work unit is already finalized (or finalizing),
	// no further action is taken on it.
	FinalizeRootInvocationRequest_INCLUDE_ROOT_WORK_UNIT FinalizeRootInvocationRequest_FinalizationScope = 2
)

// Enum value maps for FinalizeRootInvocationRequest_FinalizationScope.
var (
	FinalizeRootInvocationRequest_FinalizationScope_name = map[int32]string{
		0: "FINALIZATION_SCOPE_UNSPECIFIED",
		1: "EXCLUDE_ROOT_WORK_UNIT",
		2: "INCLUDE_ROOT_WORK_UNIT",
	}
	FinalizeRootInvocationRequest_FinalizationScope_value = map[string]int32{
		"FINALIZATION_SCOPE_UNSPECIFIED": 0,
		"EXCLUDE_ROOT_WORK_UNIT":         1,
		"INCLUDE_ROOT_WORK_UNIT":         2,
	}
)

func (x FinalizeRootInvocationRequest_FinalizationScope) Enum() *FinalizeRootInvocationRequest_FinalizationScope {
	p := new(FinalizeRootInvocationRequest_FinalizationScope)
	*p = x
	return p
}

func (x FinalizeRootInvocationRequest_FinalizationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinalizeRootInvocationRequest_FinalizationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_enumTypes[0].Descriptor()
}

func (FinalizeRootInvocationRequest_FinalizationScope) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_enumTypes[0]
}

func (x FinalizeRootInvocationRequest_FinalizationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinalizeRootInvocationRequest_FinalizationScope.Descriptor instead.
func (FinalizeRootInvocationRequest_FinalizationScope) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{3, 0}
}

// Describes the scope to finalize.
type FinalizeWorkUnitDescendantsRequest_FinalizationScope int32

const (
	// The scope is not specified. Do not use.
	FinalizeWorkUnitDescendantsRequest_FINALIZATION_SCOPE_UNSPECIFIED FinalizeWorkUnitDescendantsRequest_FinalizationScope = 0
	// Finalizes all prefixed descendents of a base work unit ID.
	// See CreateWorkUnitRequest.work_unit_id for details about
	// prefixed work unit IDs and base work unit IDs. The `name`
	// field must refer to the base work unit.
	//
	// This is for use by a task scheduling system to speculatively
	// clean up descendant work units for a task that has exited.
	// Typically, the task scheduler will attempt to set state = FAILED
	// or state = CANCELLED on these descendant work units to flag that
	// the task failed to report a state for them.
	FinalizeWorkUnitDescendantsRequest_PREFIXED_DESCENDANTS_ONLY FinalizeWorkUnitDescendantsRequest_FinalizationScope = 1
)

// Enum value maps for FinalizeWorkUnitDescendantsRequest_FinalizationScope.
var (
	FinalizeWorkUnitDescendantsRequest_FinalizationScope_name = map[int32]string{
		0: "FINALIZATION_SCOPE_UNSPECIFIED",
		1: "PREFIXED_DESCENDANTS_ONLY",
	}
	FinalizeWorkUnitDescendantsRequest_FinalizationScope_value = map[string]int32{
		"FINALIZATION_SCOPE_UNSPECIFIED": 0,
		"PREFIXED_DESCENDANTS_ONLY":      1,
	}
)

func (x FinalizeWorkUnitDescendantsRequest_FinalizationScope) Enum() *FinalizeWorkUnitDescendantsRequest_FinalizationScope {
	p := new(FinalizeWorkUnitDescendantsRequest_FinalizationScope)
	*p = x
	return p
}

func (x FinalizeWorkUnitDescendantsRequest_FinalizationScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinalizeWorkUnitDescendantsRequest_FinalizationScope) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_enumTypes[1].Descriptor()
}

func (FinalizeWorkUnitDescendantsRequest_FinalizationScope) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_enumTypes[1]
}

func (x FinalizeWorkUnitDescendantsRequest_FinalizationScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinalizeWorkUnitDescendantsRequest_FinalizationScope.Descriptor instead.
func (FinalizeWorkUnitDescendantsRequest_FinalizationScope) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{11, 0}
}

// A request message for the CreateRootInvocation RPC.
//
// To use this RPC, the caller will need resultdb.rootInvocations.create and
// resultdb.workUnits.create permission in the realm `root_invocation.realm`.
//
// The following permissions may also be required depending on the request:
//   - if an ID not starting with "u-" is specified,
//     resultdb.rootInvocations.createWithReservedID permission is required
//   - if the producer resource is set,
//     resultdb.rootInvocations.setProducerResource permission is required
//   - if a baseline is set,
//     resultdb.baselines.put permission is required in the ":@project" realm
//     of the LUCI project the root invocation is being created in.
type CreateRootInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RootInvocation identifier, becomes a part of the root_invocation.name.
	// Only trusted systems with an agreed format negotiated with ResultDB
	// may create nicely formatted IDs (e.g. "build-1234567890"), other
	// clients must use IDs of the form "u-{GUID}".
	//
	// Regex: ^[a-z][a-z0-9_\-]*$.
	RootInvocationId string `protobuf:"bytes,1,opt,name=root_invocation_id,json=rootInvocationId,proto3" json:"root_invocation_id,omitempty"`
	// The root invocation to create.
	RootInvocation *RootInvocation `protobuf:"bytes,2,opt,name=root_invocation,json=rootInvocation,proto3" json:"root_invocation,omitempty"`
	// The root work unit to create inside the above root invocation.
	//
	// The name of this work unit will always be
	// "rootInvocations/{root_invocation_id}/workUnits/root".
	//
	// Do not set the realm or producer_resource fields, these will be inherited
	// from the root invocation.
	//
	// Required.
	RootWorkUnit *WorkUnit `protobuf:"bytes,3,opt,name=root_work_unit,json=rootWorkUnit,proto3" json:"root_work_unit,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// Required.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateRootInvocationRequest) Reset() {
	*x = CreateRootInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRootInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRootInvocationRequest) ProtoMessage() {}

func (x *CreateRootInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRootInvocationRequest.ProtoReflect.Descriptor instead.
func (*CreateRootInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRootInvocationRequest) GetRootInvocationId() string {
	if x != nil {
		return x.RootInvocationId
	}
	return ""
}

func (x *CreateRootInvocationRequest) GetRootInvocation() *RootInvocation {
	if x != nil {
		return x.RootInvocation
	}
	return nil
}

func (x *CreateRootInvocationRequest) GetRootWorkUnit() *WorkUnit {
	if x != nil {
		return x.RootWorkUnit
	}
	return nil
}

func (x *CreateRootInvocationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A response message for the CreateRootInvocation RPC.
type CreateRootInvocationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root invocation that was created.
	RootInvocation *RootInvocation `protobuf:"bytes,1,opt,name=root_invocation,json=rootInvocation,proto3" json:"root_invocation,omitempty"`
	// The root work unit that was created inside the above root invocation.
	// Test results, artifacts, exonerations and further work units can be
	// created inside this resource.
	RootWorkUnit *WorkUnit `protobuf:"bytes,2,opt,name=root_work_unit,json=rootWorkUnit,proto3" json:"root_work_unit,omitempty"`
}

func (x *CreateRootInvocationResponse) Reset() {
	*x = CreateRootInvocationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRootInvocationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRootInvocationResponse) ProtoMessage() {}

func (x *CreateRootInvocationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRootInvocationResponse.ProtoReflect.Descriptor instead.
func (*CreateRootInvocationResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRootInvocationResponse) GetRootInvocation() *RootInvocation {
	if x != nil {
		return x.RootInvocation
	}
	return nil
}

func (x *CreateRootInvocationResponse) GetRootWorkUnit() *WorkUnit {
	if x != nil {
		return x.RootWorkUnit
	}
	return nil
}

// A request message for the UpdateRootInvocation RPC.
type UpdateRootInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root invocation to update.
	// If updating tags, the existing tags will be replaced with the new ones.
	RootInvocation *RootInvocation `protobuf:"bytes,1,opt,name=root_invocation,json=rootInvocation,proto3" json:"root_invocation,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// Required.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateRootInvocationRequest) Reset() {
	*x = UpdateRootInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRootInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRootInvocationRequest) ProtoMessage() {}

func (x *UpdateRootInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRootInvocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateRootInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateRootInvocationRequest) GetRootInvocation() *RootInvocation {
	if x != nil {
		return x.RootInvocation
	}
	return nil
}

func (x *UpdateRootInvocationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateRootInvocationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A request message for the FinalizeRootInvocation RPC.
//
// This RPC is idempotent: attempting to finalize an already finalized
// (or finalizing) root invocation will have no effect.
type FinalizeRootInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the root invocation to finalize.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies whether to finalize the root work unit along with the root
	// invocation. Required.
	FinalizationScope FinalizeRootInvocationRequest_FinalizationScope `protobuf:"varint,2,opt,name=finalization_scope,json=finalizationScope,proto3,enum=luci.resultdb.v1.FinalizeRootInvocationRequest_FinalizationScope" json:"finalization_scope,omitempty"`
}

func (x *FinalizeRootInvocationRequest) Reset() {
	*x = FinalizeRootInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeRootInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeRootInvocationRequest) ProtoMessage() {}

func (x *FinalizeRootInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeRootInvocationRequest.ProtoReflect.Descriptor instead.
func (*FinalizeRootInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{3}
}

func (x *FinalizeRootInvocationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinalizeRootInvocationRequest) GetFinalizationScope() FinalizeRootInvocationRequest_FinalizationScope {
	if x != nil {
		return x.FinalizationScope
	}
	return FinalizeRootInvocationRequest_FINALIZATION_SCOPE_UNSPECIFIED
}

// A request message for the CreateWorkUnit RPC.
//
// To use this RPC, you must have:
//  1. the update token from the parent work unit in the "update-token"
//     request header, or alternatively, an inclusion token from
//     DelegateWorkUnitInclusion in an "inclusion-token" request header.
//     This authorises the modification of the parent work unit.
//  2. If the realm of the work unit to be created differs from the parent
//     work unit:
//     - the resultdb.workunits.create permission on the realm the work unit
//     is being created in, to verify the caller is trusted to maintain
//     integrity of data in the realm to which it is writing.
//     - resultdb.workunits.include permission for the realm the work unit is
//     being created in. This ensures the caller is authorised to make the
//     results of the child work unit visible within the parent work unit,
//     and by extension the root invocation. This is because including the child
//     work unit implicitly declassifies the results in the the realm of the
//     root invocation. This is not necessary if an inclusion token was provided
//     at point (1.) as this permission was checked when the token was minted.
//  3. if the producer resource is set,
//     the resultdb.workUnits.setProducerResource permission
//  4. if a new base work unit ID not starting with "u-" is specified,
//     the resultdb.workUnits.createWithReservedID permission (see work_unit_id
//     below).
//
// This RPC returns an update token in a response header named "update-token".
// This token is required to make future updates. Treat this token as you might
// an OAuth token, do not log it.
type CreateWorkUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent work unit in which this work unit should be created.
	// Format: rootInvocations/{ROOT_INVOCATION_ID}/workUnits/{PARENT_WORK_UNIT_ID}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// WorkUnit identifier, becomes a part of the work_unit.name.
	//
	// # Base work unit IDs
	//
	// A base work unit ID looks like "build-1234567890" or "task-123456980a".
	// It is any work ID that is not a prefixed work unit ID (see below).
	//
	// Each unique base work unit ID has its own update token which allows
	// results to uploaded it only.
	//
	// Base work unit IDs are typically created by task scheduling systems,
	// such as Swarming, ATE or ATP. Such systems are characterised by
	// having a resilient backend that can guarantee FinalizeWorkUnit and
	// FinalizeWorkUnitDescendants(...) are eventually called on the work unit.
	//
	// Only trusted systems with an agreed format negotiated with ResultDB
	// (having resultdb.workUnits.createWithReservedID permission)
	// may create base work unit IDs that are nicely formatted (e.g.
	// "build-1234567890"). Other clients must use IDs of the form "u-{GUID}"
	// or prefixed work unit IDs (see below).
	//
	// # Prefixed Work Unit IDs (:)
	//
	// A prefixed work unit ID is a work unit ID of the form
	// `<base_id>:<child_id>`. A prefixed work unit 'derives' from
	// a given base work unit ID and shares its update token.
	//
	// Prefixed work units IDs are useful for:
	//   - Creating and uploading to multiple work units from the same bot
	//     (e.g. for multi-module or multi-attempt uploads).
	//     As all prefixed work units share the same update token as the
	//     base work unit ID, authentication is simpler and uploads to
	//     multiple work units can be combined in the same Batch...()
	//     RPC for efficiency.
	//   - Ensuring timely finalization for bot-created work units. Task
	//     scheduling systems can clean up any forgotten work units following
	//     non-graceful exit of the bot using the FinalizeWorkUnitDescendants RPC
	//     on the base work unit ID, without accidentally finalizing other
	//     work unit descendents owned by other task scheduling systems.
	//
	// Prefixed work units may only be created within their corresponding
	// base work unit or a prefixed child thereof, i.e.
	//
	// Parent                 -> Child
	// `<base_id>`            -> `<base_id>:child_1` is allowed
	// `<base_id>:some_child` -> `<base_id>:child_2` is allowed
	// `<other_id>`           -> `<base_id>:child_1` is not allowed
	//
	// Only single prefixing is possible; the ID construction
	// `<base_id>:<child_1>:<grandchild_1>` is not allowed. You may
	// however create `<base_id>:<grandchild_1>` under `<base_id>:<child_1>`
	// to achieve the same effect.
	//
	// Prefixed work units do not offer the same isolation and integrity
	// guarantees as non-prefixed work units because of the shared update
	// token. Therefore, they should not be used outside the scope of a
	// single bot and its scheduling backend.
	//
	// Regex: ^[a-z][a-z0-9_\-]*(:[a-z][a-z0-9_\-])?$. Limited to
	// 100 characters in length.
	WorkUnitId string `protobuf:"bytes,2,opt,name=work_unit_id,json=workUnitId,proto3" json:"work_unit_id,omitempty"`
	// WorkUnit data to insert.
	WorkUnit *WorkUnit `protobuf:"bytes,3,opt,name=work_unit,json=workUnit,proto3" json:"work_unit,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// Required (unless this request is nested in a BatchCreateWorkUnitsRequest).
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateWorkUnitRequest) Reset() {
	*x = CreateWorkUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkUnitRequest) ProtoMessage() {}

func (x *CreateWorkUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkUnitRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWorkUnitRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateWorkUnitRequest) GetWorkUnitId() string {
	if x != nil {
		return x.WorkUnitId
	}
	return ""
}

func (x *CreateWorkUnitRequest) GetWorkUnit() *WorkUnit {
	if x != nil {
		return x.WorkUnit
	}
	return nil
}

func (x *CreateWorkUnitRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A request message for BatchCreateWorkUnits RPC.
//
// The request will be handled atomically (i.e. all work units are
// created or none are).
//
// See CreateWorkUnitRequest for details about required permissions.
type BatchCreateWorkUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The work units to create.
	//
	// Nested structures of work units may be created in the same batch, by
	// having later request entries refer to work units created by earlier
	// request entries. For example, requests[1] may assume requests[0] has
	// already been created and refer to it as its parent.
	//
	// There is one important caveat: only one "update-token" request metadata
	// key (needed to modify the parent work unit) or "inclusion-token" metadata
	// key may be provided per batch request. This means that all work units being
	// created must be children of the same work unit parent OR children of work
	// units sharing the same update token (see CreateWorkUnitRequest.work_unit_id
	// for details about prefixed work unit IDs that share an update token).
	//
	// # Allowed usages
	//
	// Create multiple children in one request, sharing the same work unit parent
	// "wu0":
	//
	// Root invocation
	// ...
	//
	//	wu0 <-- Pre-existing
	//	  |- wu1
	//	  |- wu2
	//
	// Create multiple nested structures, all descending from work units sharing
	// update token from "wu0":
	//
	// Root invocation
	// ...
	//
	//	wu0:shard1  <-- Pre-existing
	//	  |- wu0:shard1-attempt1
	//	  |   |- wu0:shard1-attempt1-module1
	//	  |
	//	  |- wu0:shard1-attempt2
	//	      |- wu0:shard1-attempt1-module2
	//
	//	wu0:shard2  <-- Pre-existing
	//	  |- wu0:shard2-attempt1
	//
	// # Disallowed usages
	//
	// Create a nested structure, descending from work units with
	// different update tokens:
	//
	// Root invocation
	// ...
	//
	//	wu0 <-- Pre-existing
	//	  |- wu1 <--- Requires update token for "wu0".
	//	  |- wu2
	//	     |- wu21  <--- Requires update token for "wu2".
	//
	// Create multiple nested structures, descending from work units with
	// different update tokens:
	//
	// Root invocation
	// ...
	//
	//	wu0  <-- Pre-existing
	//	 |- wu1
	//	 |- wu2
	//
	//	wu20  <-- Pre-existing
	//	 |- wu21
	//
	// This will not succeed because the server needs the update token of both
	// "wu0" and "wu20" to succeed, and only one update token can be supplied
	// per request.
	//
	// Up to 500 requests. Total size of all requests (as measured by proto.Size())
	// MUST be <= 10 MiB.
	Requests []*CreateWorkUnitRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// The request_id field in CreateWorkUnitRequest messages must either
	// be empty or match this field.
	//
	// Required.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BatchCreateWorkUnitsRequest) Reset() {
	*x = BatchCreateWorkUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateWorkUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateWorkUnitsRequest) ProtoMessage() {}

func (x *BatchCreateWorkUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateWorkUnitsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateWorkUnitsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{5}
}

func (x *BatchCreateWorkUnitsRequest) GetRequests() []*CreateWorkUnitRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchCreateWorkUnitsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A response message for BatchCreateWorkUnits RPC.
type BatchCreateWorkUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created work units.
	WorkUnits []*WorkUnit `protobuf:"bytes,1,rep,name=work_units,json=workUnits,proto3" json:"work_units,omitempty"`
	// One token per each created work unit.
	// These are passed in the response instead of as metadata, because large
	// batches increase the size of the response headers beyond allowed limits.
	// update_tokens[i] corresponds to work_units[i].
	// *Do not log these values (they are secrets that should be treated
	// similar to OAuth tokens)*.
	UpdateTokens []string `protobuf:"bytes,2,rep,name=update_tokens,json=updateTokens,proto3" json:"update_tokens,omitempty"`
}

func (x *BatchCreateWorkUnitsResponse) Reset() {
	*x = BatchCreateWorkUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateWorkUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateWorkUnitsResponse) ProtoMessage() {}

func (x *BatchCreateWorkUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateWorkUnitsResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateWorkUnitsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{6}
}

func (x *BatchCreateWorkUnitsResponse) GetWorkUnits() []*WorkUnit {
	if x != nil {
		return x.WorkUnits
	}
	return nil
}

func (x *BatchCreateWorkUnitsResponse) GetUpdateTokens() []string {
	if x != nil {
		return x.UpdateTokens
	}
	return nil
}

// A request message for UpdateWorkUnit RPC.
//
// The request will be handled atomically (i.e. all work units are
// updated or none are).
type UpdateWorkUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The work unit to update.
	//
	// If updating tags, the existing tags will be replaced with the new ones.
	WorkUnit *WorkUnit `protobuf:"bytes,1,opt,name=work_unit,json=workUnit,proto3" json:"work_unit,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// Required (unless this request is nested in a BatchUpdateWorkUnitsRequest).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateWorkUnitRequest) Reset() {
	*x = UpdateWorkUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWorkUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkUnitRequest) ProtoMessage() {}

func (x *UpdateWorkUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkUnitRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWorkUnitRequest) GetWorkUnit() *WorkUnit {
	if x != nil {
		return x.WorkUnit
	}
	return nil
}

func (x *UpdateWorkUnitRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateWorkUnitRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A request message for BatchUpdateWorkUnits RPC.
//
// Note: As each request may only have one update token, batching is only
// possible for work units sharing the same prefix (and thus update token).
// See CreateWorkUnitRequest.work_unit_id.
type BatchUpdateWorkUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request messages specifying the work unit updates.
	//
	// Up to 500 requests. Total size of all requests (as measured by proto.Size())
	// MUST be <= 10 MiB.
	Requests []*UpdateWorkUnitRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// The request_id field in UpdateWorkUnitRequest messages must either
	// be empty or match this field.
	//
	// Required.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BatchUpdateWorkUnitsRequest) Reset() {
	*x = BatchUpdateWorkUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateWorkUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateWorkUnitsRequest) ProtoMessage() {}

func (x *BatchUpdateWorkUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateWorkUnitsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateWorkUnitsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{8}
}

func (x *BatchUpdateWorkUnitsRequest) GetRequests() []*UpdateWorkUnitRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchUpdateWorkUnitsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A response message for BatchUpdateWorkUnits RPC.
type BatchUpdateWorkUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated work units.
	// To limit response size, the `extended_properties` field is elided
	// from work units.
	WorkUnits []*WorkUnit `protobuf:"bytes,1,rep,name=work_units,json=workUnits,proto3" json:"work_units,omitempty"`
}

func (x *BatchUpdateWorkUnitsResponse) Reset() {
	*x = BatchUpdateWorkUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateWorkUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateWorkUnitsResponse) ProtoMessage() {}

func (x *BatchUpdateWorkUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateWorkUnitsResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateWorkUnitsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{9}
}

func (x *BatchUpdateWorkUnitsResponse) GetWorkUnits() []*WorkUnit {
	if x != nil {
		return x.WorkUnits
	}
	return nil
}

// A request message for FinalizeWorkUnit RPC.
//
// This RPC is idempotent: attempting to set a final state on a work unit
// which already has a final state will have no effect.
//
// To limit response size, the `extended_properties` field is elided
// from the work unit returned by the RPC.
type FinalizeWorkUnitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the work unit to finalize.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state to transition the work unit to. This must be
	// a final state.
	State WorkUnit_State `protobuf:"varint,2,opt,name=state,proto3,enum=luci.resultdb.v1.WorkUnit_State" json:"state,omitempty"`
	// A summary of the final state of the work unit, to be displayed on the UI.
	//
	// The size of the summary must be equal to or smaller than 4096 bytes in
	// UTF-8.
	SummaryMarkdown string `protobuf:"bytes,3,opt,name=summary_markdown,json=summaryMarkdown,proto3" json:"summary_markdown,omitempty"`
}

func (x *FinalizeWorkUnitRequest) Reset() {
	*x = FinalizeWorkUnitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeWorkUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeWorkUnitRequest) ProtoMessage() {}

func (x *FinalizeWorkUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeWorkUnitRequest.ProtoReflect.Descriptor instead.
func (*FinalizeWorkUnitRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{10}
}

func (x *FinalizeWorkUnitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinalizeWorkUnitRequest) GetState() WorkUnit_State {
	if x != nil {
		return x.State
	}
	return WorkUnit_STATE_UNSPECIFIED
}

func (x *FinalizeWorkUnitRequest) GetSummaryMarkdown() string {
	if x != nil {
		return x.SummaryMarkdown
	}
	return ""
}

// A request message for FinalizeWorkUnitDescendants RPC.
//
// This RPC is idempotent: attempting to set a final state on work unit(s)
// which already have a final state will have no effect.
//
// Due to the large number of descendent work units that might exist, this
// RPC is not guaranteed to be atomic.
//
// Next ID: 5.
type FinalizeWorkUnitDescendantsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name of the work unit to finalize.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The final state to transition descendant work units to.
	State WorkUnit_State `protobuf:"varint,2,opt,name=state,proto3,enum=luci.resultdb.v1.WorkUnit_State" json:"state,omitempty"`
	// A summary of the final state of the work unit, to be displayed on the UI.
	//
	// The size of the summary must be equal to or smaller than 4096 bytes in
	// UTF-8.
	SummaryMarkdown string `protobuf:"bytes,4,opt,name=summary_markdown,json=summaryMarkdown,proto3" json:"summary_markdown,omitempty"`
	// Specifies the scope of finalization.
	FinalizationScope FinalizeWorkUnitDescendantsRequest_FinalizationScope `protobuf:"varint,3,opt,name=finalization_scope,json=finalizationScope,proto3,enum=luci.resultdb.v1.FinalizeWorkUnitDescendantsRequest_FinalizationScope" json:"finalization_scope,omitempty"`
}

func (x *FinalizeWorkUnitDescendantsRequest) Reset() {
	*x = FinalizeWorkUnitDescendantsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeWorkUnitDescendantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeWorkUnitDescendantsRequest) ProtoMessage() {}

func (x *FinalizeWorkUnitDescendantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeWorkUnitDescendantsRequest.ProtoReflect.Descriptor instead.
func (*FinalizeWorkUnitDescendantsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{11}
}

func (x *FinalizeWorkUnitDescendantsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FinalizeWorkUnitDescendantsRequest) GetState() WorkUnit_State {
	if x != nil {
		return x.State
	}
	return WorkUnit_STATE_UNSPECIFIED
}

func (x *FinalizeWorkUnitDescendantsRequest) GetSummaryMarkdown() string {
	if x != nil {
		return x.SummaryMarkdown
	}
	return ""
}

func (x *FinalizeWorkUnitDescendantsRequest) GetFinalizationScope() FinalizeWorkUnitDescendantsRequest_FinalizationScope {
	if x != nil {
		return x.FinalizationScope
	}
	return FinalizeWorkUnitDescendantsRequest_FINALIZATION_SCOPE_UNSPECIFIED
}

// A request message for BatchFinalizeWorkUnits RPC.
//
// The Batch will be handled atomically (i.e. all requests will
// be processed or none will). In practice, the only case where
// requests will not be processed is if a request is invalid or permission
// is lacking; it is not an error if one of the work units is already
// finalizing as the semantics of each request is defined idempotently.
//
// Note: As each request may only have one update token, batching is only
// possible for work units sharing the same prefix (and thus update token).
// See CreateWorkUnitRequest.work_unit_id.
type BatchFinalizeWorkUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request messages specifying the work units to finalize.
	//
	// A maximum of 500 work units can be finalized in one request.
	Requests []*FinalizeWorkUnitRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchFinalizeWorkUnitsRequest) Reset() {
	*x = BatchFinalizeWorkUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchFinalizeWorkUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFinalizeWorkUnitsRequest) ProtoMessage() {}

func (x *BatchFinalizeWorkUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFinalizeWorkUnitsRequest.ProtoReflect.Descriptor instead.
func (*BatchFinalizeWorkUnitsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{12}
}

func (x *BatchFinalizeWorkUnitsRequest) GetRequests() []*FinalizeWorkUnitRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// A response message for BatchFinalizeWorkUnits RPC.
type BatchFinalizeWorkUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The finalized work units.
	// To limit response size, the `extended_properties` field is elided
	// from work units.
	WorkUnits []*WorkUnit `protobuf:"bytes,1,rep,name=work_units,json=workUnits,proto3" json:"work_units,omitempty"`
}

func (x *BatchFinalizeWorkUnitsResponse) Reset() {
	*x = BatchFinalizeWorkUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchFinalizeWorkUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFinalizeWorkUnitsResponse) ProtoMessage() {}

func (x *BatchFinalizeWorkUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFinalizeWorkUnitsResponse.ProtoReflect.Descriptor instead.
func (*BatchFinalizeWorkUnitsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{13}
}

func (x *BatchFinalizeWorkUnitsResponse) GetWorkUnits() []*WorkUnit {
	if x != nil {
		return x.WorkUnits
	}
	return nil
}

// Request message to mint a work unit 'inclusion token' that grants the bearer:
//  1. authority to include child work units in the nominated work unit;
//  2. authority to declassify test results/artifacts from the nominated realm into
//     the realm of the root invocation.
//
// This method is designed for situations where uploads are delegated between systems.
// We will use the terms "delegator system" and "delagatee system".
//
// Compared to passing the update token of the current work unit to the delagatee
// system, passing an inclusion token:
//   - prevents the delagatee from modifying the original work unit (beyond
//     including new child work units)
//   - places responsibility on the delegator to authorize the declassification of results
//     from the planned child work unit realm to the realm of the root invocation,
//     rather than the delagatee. For the delagatee, this means their infrastructure
//     is less likely to be accidentally abused (e.g. to upload results from
//     restricted boards into public builders). This is predicated on public builders
//     not having resultdb.workunits.include access to the restricted realms.
//
// The token returned by this RPC is in a response header metadata key
// named "inclusion-token" and is a replacement to the update token that
// is otherwise required by CreateWorkUnit.
//
// Security: Inclusion tokens should be treated with the same level of security
// as update tokens, as they effectively grant permission to modify the parent work unit.
// Treat them as secrets and do not log them.
//
// Extended explanation:
//
// This RPC allows the permissions required by CreateWorkUnit to be
// split over two callers/systems:
//
//  1. The delegator, which owns the parent work unit and wishes to include
//     a child work unit from a (possibly) different realm, but may not
//     have one of the permissions required by CreateWorkUnit, e.g.:
//     - permission to create work units in that realm
//     (resultdb.workunits.create).
//     - permission to create work units with reserved names
//     (resultdb.workunits.createWithReservedID).
//     - permission to set the producer resource field
//     (resultdb.workunits.setProducerResource).
//  2. The delegatee, which is happy to create work unit in a given realm
//     and has permission to do so, but wants the delegator to prove it has
//     resultdb.workunits.include access to the created work unit before it includes
//     a work unit in the delegators's work unit (which implicitly declassifies
//     the results into the root invocation).
//
// Use of this RPC is usually not necessary and is designed for systems
// where multiple systems need to cooperate to create work units in a
// secure manner. If the delegator has all required permissions, it is
// common to call CreateWorkUnit directly with the update token to create a new
// work unit. The ID of the created work unit and its update token can then be
// passed to the delegatee to populate.
type DelegateWorkUnitInclusionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the parent work unit in which further work units
	// shall be included (created).
	//
	// The update token of this work unit must be passed in the
	// "update-token" request metadata key, or a PERMISSION_DENIED error will
	// be returned.
	//
	// The minted inclusion token will be scoped to this work unit; the token
	// will not allow inclusion into any other work unit.
	WorkUnit string `protobuf:"bytes,1,opt,name=work_unit,json=workUnit,proto3" json:"work_unit,omitempty"`
	// The realm of the prospective child work unit(s).
	// The caller must have resultdb.workunits.include permission on this realm.
	Realm string `protobuf:"bytes,2,opt,name=realm,proto3" json:"realm,omitempty"`
}

func (x *DelegateWorkUnitInclusionRequest) Reset() {
	*x = DelegateWorkUnitInclusionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateWorkUnitInclusionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateWorkUnitInclusionRequest) ProtoMessage() {}

func (x *DelegateWorkUnitInclusionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateWorkUnitInclusionRequest.ProtoReflect.Descriptor instead.
func (*DelegateWorkUnitInclusionRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{14}
}

func (x *DelegateWorkUnitInclusionRequest) GetWorkUnit() string {
	if x != nil {
		return x.WorkUnit
	}
	return ""
}

func (x *DelegateWorkUnitInclusionRequest) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

// A response message for DelegateWorkUnitInclusion RPC.
type DelegateWorkUnitInclusionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelegateWorkUnitInclusionResponse) Reset() {
	*x = DelegateWorkUnitInclusionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegateWorkUnitInclusionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegateWorkUnitInclusionResponse) ProtoMessage() {}

func (x *DelegateWorkUnitInclusionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegateWorkUnitInclusionResponse.ProtoReflect.Descriptor instead.
func (*DelegateWorkUnitInclusionResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{15}
}

// A request message for CreateInvocation RPC.
type CreateInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Invocation identifier, becomes a part of the invocation.name.
	// LUCI systems MAY create invocations with nicely formatted IDs, such as
	// "build-1234567890". All other clients MUST use GUIDs.
	//
	// Regex: ^[a-z][a-z0-9_\-]*$.
	InvocationId string `protobuf:"bytes,1,opt,name=invocation_id,json=invocationId,proto3" json:"invocation_id,omitempty"`
	// Invocation data to insert.
	Invocation *Invocation `protobuf:"bytes,2,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	// This request is only idempotent if a `request_id` is provided.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateInvocationRequest) Reset() {
	*x = CreateInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInvocationRequest) ProtoMessage() {}

func (x *CreateInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInvocationRequest.ProtoReflect.Descriptor instead.
func (*CreateInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{16}
}

func (x *CreateInvocationRequest) GetInvocationId() string {
	if x != nil {
		return x.InvocationId
	}
	return ""
}

func (x *CreateInvocationRequest) GetInvocation() *Invocation {
	if x != nil {
		return x.Invocation
	}
	return nil
}

func (x *CreateInvocationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A request message for BatchCreateInvocations RPC.
type BatchCreateInvocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// requests[i].request_id MUST be either empty or equal to request_id in
	// this message.
	//
	// Up to 500 requests.
	Requests []*CreateInvocationRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	// This request is only idempotent if a `request_id` is provided, so it is
	// strongly recommended to populate this field.
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BatchCreateInvocationsRequest) Reset() {
	*x = BatchCreateInvocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateInvocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateInvocationsRequest) ProtoMessage() {}

func (x *BatchCreateInvocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateInvocationsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateInvocationsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{17}
}

func (x *BatchCreateInvocationsRequest) GetRequests() []*CreateInvocationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchCreateInvocationsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A response message for BatchCreateInvocations RPC.
type BatchCreateInvocationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Invocations created.
	Invocations []*Invocation `protobuf:"bytes,1,rep,name=invocations,proto3" json:"invocations,omitempty"`
	// One token per each created invocation.
	// These are passed in the response instead of as metadata, because large
	// batches increase the size of the response headers beyond allowed limits and
	// cause failures like crbug.com/1064496
	// update_tokens[i] corresponds to invocations[i].
	// *Do not log these values*.
	UpdateTokens []string `protobuf:"bytes,2,rep,name=update_tokens,json=updateTokens,proto3" json:"update_tokens,omitempty"`
}

func (x *BatchCreateInvocationsResponse) Reset() {
	*x = BatchCreateInvocationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateInvocationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateInvocationsResponse) ProtoMessage() {}

func (x *BatchCreateInvocationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateInvocationsResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateInvocationsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{18}
}

func (x *BatchCreateInvocationsResponse) GetInvocations() []*Invocation {
	if x != nil {
		return x.Invocations
	}
	return nil
}

func (x *BatchCreateInvocationsResponse) GetUpdateTokens() []string {
	if x != nil {
		return x.UpdateTokens
	}
	return nil
}

// A request message for UpdateInvocation RPC.
type UpdateInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Invocation to update.
	// If updating tags, the existing tags will be replaced with the new ones.
	//
	// If the state of the invocation is set to FINALIZING (with correct update_mask),
	// this will trigger the finalization process of the invocation.
	//
	// This is useful for the cases when we want the update and the finalization
	// to happen in the same transaction to prevent update-update race. This will
	// guarantee eventual consistency.
	Invocation *Invocation `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The list of fields to be updated.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateInvocationRequest) Reset() {
	*x = UpdateInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInvocationRequest) ProtoMessage() {}

func (x *UpdateInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInvocationRequest.ProtoReflect.Descriptor instead.
func (*UpdateInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateInvocationRequest) GetInvocation() *Invocation {
	if x != nil {
		return x.Invocation
	}
	return nil
}

func (x *UpdateInvocationRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// A request message for FinalizeInvocation RPC.
type FinalizeInvocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the invocation to finalize.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FinalizeInvocationRequest) Reset() {
	*x = FinalizeInvocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalizeInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeInvocationRequest) ProtoMessage() {}

func (x *FinalizeInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeInvocationRequest.ProtoReflect.Descriptor instead.
func (*FinalizeInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{20}
}

func (x *FinalizeInvocationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request message for UpdateIncludedInvocations RPC.
type UpdateIncludedInvocationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the invocation to add/remove inclusions to/from,
	// see Invocation.name.
	// For example, name of the buildbucket build invocation that should include
	// a swarming task invocation.
	IncludingInvocation string `protobuf:"bytes,1,opt,name=including_invocation,json=includingInvocation,proto3" json:"including_invocation,omitempty"`
	// Names of the invocations to include, see Invocation.name.
	// If any of these invocations are already included, they will be silently
	// ignored for idempotency.
	AddInvocations []string `protobuf:"bytes,2,rep,name=add_invocations,json=addInvocations,proto3" json:"add_invocations,omitempty"`
	// Deprecated: Removing invocations is no longer supported. Do not use.
	RemoveInvocations []string `protobuf:"bytes,3,rep,name=remove_invocations,json=removeInvocations,proto3" json:"remove_invocations,omitempty"`
}

func (x *UpdateIncludedInvocationsRequest) Reset() {
	*x = UpdateIncludedInvocationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIncludedInvocationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIncludedInvocationsRequest) ProtoMessage() {}

func (x *UpdateIncludedInvocationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIncludedInvocationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateIncludedInvocationsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateIncludedInvocationsRequest) GetIncludingInvocation() string {
	if x != nil {
		return x.IncludingInvocation
	}
	return ""
}

func (x *UpdateIncludedInvocationsRequest) GetAddInvocations() []string {
	if x != nil {
		return x.AddInvocations
	}
	return nil
}

func (x *UpdateIncludedInvocationsRequest) GetRemoveInvocations() []string {
	if x != nil {
		return x.RemoveInvocations
	}
	return nil
}

// A request message for MarkInvocationSubmitted RPC.
// To use this RPC, callers need:
//   - resultdb.invocations.setSubmitted in the realm the <project>:@project, where
//     project is the project of the nominated invocation.
type MarkInvocationSubmittedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the root invocation, e.g. "rootInvocations/{id}".
	RootInvocation string `protobuf:"bytes,2,opt,name=root_invocation,json=rootInvocation,proto3" json:"root_invocation,omitempty"`
	// DEPRECATED: use `root_invocation` instead.
	// Name of the invocation, e.g. "invocations/{id}".
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
}

func (x *MarkInvocationSubmittedRequest) Reset() {
	*x = MarkInvocationSubmittedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkInvocationSubmittedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkInvocationSubmittedRequest) ProtoMessage() {}

func (x *MarkInvocationSubmittedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkInvocationSubmittedRequest.ProtoReflect.Descriptor instead.
func (*MarkInvocationSubmittedRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{22}
}

func (x *MarkInvocationSubmittedRequest) GetRootInvocation() string {
	if x != nil {
		return x.RootInvocation
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
func (x *MarkInvocationSubmittedRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

// A request message for CreateTestResult RPC.
type CreateTestResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parent work unit. See WorkUnit.name.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// DEPRECATED: Use `parent` instead.
	// Name of the parent invocation, see Invocation.name.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The test result to create.
	// Test id and result id are used to dedupe requests, i.e.
	// if a test result with the same test id and result id already exists in
	// the invocation, then the requests succeeds as opposed to returns with
	// ALREADY_EXISTS error.
	TestResult *TestResult `protobuf:"bytes,2,opt,name=test_result,json=testResult,proto3" json:"test_result,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// Required (unless this request is nested in a BatchCreateTestResultsRequest).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTestResultRequest) Reset() {
	*x = CreateTestResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestResultRequest) ProtoMessage() {}

func (x *CreateTestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestResultRequest.ProtoReflect.Descriptor instead.
func (*CreateTestResultRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{23}
}

func (x *CreateTestResultRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
func (x *CreateTestResultRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *CreateTestResultRequest) GetTestResult() *TestResult {
	if x != nil {
		return x.TestResult
	}
	return nil
}

func (x *CreateTestResultRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A request message for BatchCreateTestResults RPC.
//
// The request will be handled atomically (i.e. all test results are
// created or none are).
//
// Use of batching for test result uploads is strongly encouraged for
// performance and efficiency reasons. Clients implementing buffering for the
// purposes of batching will typically cut a batch once any of the following
// criteria are met:
// - 500 test results are in the batch,
// - the size of the batch would exceed 10 MiB,
// - a given dwell time has elapsed (e.g. 1 minute), or
// - all test results have completed and the last batch needs to be flushed.
//
// Batched test results can cover more than one work unit, provided all
// work units share the same update token (i.e. in case of Prefixed work units;
// see CreateWorkUnitRequest.work_unit_id for details). In such situations,
// the batching for test results may be integrated with the batching of work
// units (e.g. creating test results in a batch will be preceded by batch-
// creating any pending work units to avoid NotFound errors).
type BatchCreateTestResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parent work unit (if all test results to be created belong to the
	// same work unit). See WorkUnit.name.
	//
	// If this set, then parent field in CreateTestResultRequest messages
	// must either be empty or match this field.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// DEPRECATED: Use `parent` instead.
	// Name of the parent invocation, see Invocation.name.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// Request messages specifying the test results to be created.
	//
	// Up to 500 requests. Total size of all requests (as measured by proto.Size())
	// MUST be <= 10 MiB.
	Requests []*CreateTestResultRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// The request_id field in CreateTestResultRequest messages must either
	// be empty or match this field.
	//
	// Required.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BatchCreateTestResultsRequest) Reset() {
	*x = BatchCreateTestResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateTestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateTestResultsRequest) ProtoMessage() {}

func (x *BatchCreateTestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateTestResultsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateTestResultsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{24}
}

func (x *BatchCreateTestResultsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
func (x *BatchCreateTestResultsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *BatchCreateTestResultsRequest) GetRequests() []*CreateTestResultRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchCreateTestResultsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A response message for BatchCreateTestResults RPC.
type BatchCreateTestResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Test results created.
	TestResults []*TestResult `protobuf:"bytes,1,rep,name=test_results,json=testResults,proto3" json:"test_results,omitempty"`
}

func (x *BatchCreateTestResultsResponse) Reset() {
	*x = BatchCreateTestResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateTestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateTestResultsResponse) ProtoMessage() {}

func (x *BatchCreateTestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateTestResultsResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateTestResultsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{25}
}

func (x *BatchCreateTestResultsResponse) GetTestResults() []*TestResult {
	if x != nil {
		return x.TestResults
	}
	return nil
}

// A request message for CreateTestExoneration RPC.
type CreateTestExonerationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parent work unit. See WorkUnit.name.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// DEPRECATED: Use `parent` instead.
	// Name of the parent invocation, see Invocation.name.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The TestExoneration to create.
	TestExoneration *TestExoneration `protobuf:"bytes,2,opt,name=test_exoneration,json=testExoneration,proto3" json:"test_exoneration,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// Required (unless this request is nested in a BatchCreateTestExonerationsRequest).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateTestExonerationRequest) Reset() {
	*x = CreateTestExonerationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestExonerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestExonerationRequest) ProtoMessage() {}

func (x *CreateTestExonerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestExonerationRequest.ProtoReflect.Descriptor instead.
func (*CreateTestExonerationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{26}
}

func (x *CreateTestExonerationRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
func (x *CreateTestExonerationRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *CreateTestExonerationRequest) GetTestExoneration() *TestExoneration {
	if x != nil {
		return x.TestExoneration
	}
	return nil
}

func (x *CreateTestExonerationRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A request message for BatchCreateTestExonerations RPC.
//
// The request will be handled atomically (i.e. all test exonerations are
// created or none are).
//
// Use of batching for exoneration uploads is strongly encouraged for
// performance and efficiency reasons.
//
// Batched test exonerations can cover more than one work unit, provided all
// work units share the same update token (i.e. in case of Prefixed work units;
// see CreateWorkUnitRequest.work_unit_id for details). This is primarily
// for consistency with the other Batch RPCs; in practice there is not
// a lot of benefit to report exonerations through one work unit over another,
// as they are a root invocation-level concept and are only reported through
// work units for traceability reasons.
type BatchCreateTestExonerationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parent work unit (if all test exonerations to be created belong to the
	// same work unit). See WorkUnit.name.
	//
	// If this set, then parent field in CreateTestExonerationRequest messages
	// must either be empty or match this field.
	Parent string `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	// DEPRECATED: Use `parent` instead.
	// Name of the parent invocation, see Invocation.name.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// Requests to create TestExonerations.
	//
	// Up to 500 requests. Total size of all requests (as measured by proto.Size())
	// MUST be <= 10 MiB.
	Requests []*CreateTestExonerationRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// The request_id field in CreateTestResultRequest messages must either
	// be empty or match this field.
	//
	// Required.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BatchCreateTestExonerationsRequest) Reset() {
	*x = BatchCreateTestExonerationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateTestExonerationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateTestExonerationsRequest) ProtoMessage() {}

func (x *BatchCreateTestExonerationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateTestExonerationsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateTestExonerationsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{27}
}

func (x *BatchCreateTestExonerationsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/recorder.proto.
func (x *BatchCreateTestExonerationsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *BatchCreateTestExonerationsRequest) GetRequests() []*CreateTestExonerationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchCreateTestExonerationsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A response message for BatchCreateTestExonerations RPC.
type BatchCreateTestExonerationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Test exonerations created.
	TestExonerations []*TestExoneration `protobuf:"bytes,1,rep,name=test_exonerations,json=testExonerations,proto3" json:"test_exonerations,omitempty"`
}

func (x *BatchCreateTestExonerationsResponse) Reset() {
	*x = BatchCreateTestExonerationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateTestExonerationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateTestExonerationsResponse) ProtoMessage() {}

func (x *BatchCreateTestExonerationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateTestExonerationsResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateTestExonerationsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{28}
}

func (x *BatchCreateTestExonerationsResponse) GetTestExonerations() []*TestExoneration {
	if x != nil {
		return x.TestExonerations
	}
	return nil
}

// A request message for CreateArtifactRequest.
type CreateArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parent work unit. See WorkUnit.name.
	//
	// To create test result-level artifacts, set test_id_structured and result_id on
	// the Artifact. Otherwise, to create work unit-level artifacts, leave
	// test_id_structured and result_id blank.
	//
	// Legacy uploaders can also use the name formats:
	// - invocations/{INVOCATION_ID} for create artifacts in an invocation.
	// - invocations/{INVOCATION_ID}/tests/{URL_ENCODED_TEST_ID}/results/{RESULT_ID}
	// to create test result-level artifacts (in this case, test_id_structured and
	// result_id MUST be left blank on the Artifact).
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Artifact to upload.
	// The length of the artifact contents MUST be <= 512KiB.
	// artifact.artifact_id MUST be set.
	// artifact.name will be ignored.
	Artifact *Artifact `protobuf:"bytes,2,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// Required (unless this request is nested in a BatchCreateArtifactsRequest).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateArtifactRequest) Reset() {
	*x = CreateArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtifactRequest) ProtoMessage() {}

func (x *CreateArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtifactRequest.ProtoReflect.Descriptor instead.
func (*CreateArtifactRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{29}
}

func (x *CreateArtifactRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateArtifactRequest) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *CreateArtifactRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// A request message for BatchCreateArtifactsRequest.
//
// The request will be handled atomically (i.e. all artifacts are
// created or none are).
//
// Use of batching for artifacts uploads is strongly encouraged for
// performance and efficiency reasons. Batches would typically but cut for
// one of the following reasons:
//   - 500 test artifacts are in the batch,
//   - the size of the batch would exceed 10 MiB (this refers to the size of
//     the field `requests` not the artifact contents), or
//   - a given dwell time has elapsed (e.g. 1 minute)
//
// Batched artifacts can cover more than one work unit, provided all
// work units share the same update token (i.e. in case of Prefixed work units;
// see CreateWorkUnitRequest.work_unit_id for details). In such situations,
// the batching for artifacts may be integrated with the batching of work
// units (e.g. creating artifacts in a batch will be preceded by batch-
// creating any pending work units to avoid NotFound errors).
//
// To simplify batching, there is no requirement to create test results before
// the corresponding test result artifacts are uploaded; the only ordering
// requirement is for the work unit to be created before any artifacts are
// uploaded to it.
//
// While this means it is technically possible to create orphaned test result
// artifacts (by uploading the artifacts and never uploading the corresponding
// test results), clients should not rely on being able to read such orphaned
// artifacts later.
type BatchCreateArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the parent work unit (if all artifacts to be created belong to the
	// same work unit). See WorkUnit.name.
	//
	// If this set, then parent field in CreateArtifactRequest messages
	// must either be empty or match this field.
	//
	// Legacy clients may also use an invocation name, see Invocation.name.
	Parent string `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	// Requests to create Artifacts.
	//
	// Up to 500 requests. Total size of all requests (as measured by proto.Size())
	// MUST be <= 10 MiB.
	Requests []*CreateArtifactRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	// A unique identifier for this request. Restricted to 36 ASCII characters.
	// A random UUID is recommended.
	//
	// If the same request is replayed (see "Retry policy" at the top of this doc),
	// this request_id guarantees idempotence.
	//
	// The request_id field in CreateArtifactRequest messages must either
	// be empty or match this field.
	//
	// Required.
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *BatchCreateArtifactsRequest) Reset() {
	*x = BatchCreateArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateArtifactsRequest) ProtoMessage() {}

func (x *BatchCreateArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateArtifactsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{30}
}

func (x *BatchCreateArtifactsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchCreateArtifactsRequest) GetRequests() []*CreateArtifactRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchCreateArtifactsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type BatchCreateArtifactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Artifacts created.
	Artifacts []*Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
}

func (x *BatchCreateArtifactsResponse) Reset() {
	*x = BatchCreateArtifactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateArtifactsResponse) ProtoMessage() {}

func (x *BatchCreateArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateArtifactsResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP(), []int{31}
}

func (x *BatchCreateArtifactsResponse) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

var File_go_chromium_org_luci_resultdb_proto_v1_recorder_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0xa0, 0x02, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x75, 0x0a, 0x12,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x43, 0x4c,
	0x55, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x10, 0x02, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x1c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x59, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a,
	0x17, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xef, 0x02, 0x0a, 0x22, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x75, 0x0a, 0x12,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44,
	0x41, 0x4e, 0x54, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x22, 0x66, 0x0a, 0x1d, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x22, 0x55, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x85, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x34, 0x0a, 0x19, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xb2, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x72, 0x0a, 0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x1d, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xd1, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x6f, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xcb, 0x01, 0x0a, 0x22, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x23, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x99, 0x01,
	0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x1c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x32, 0xc3, 0x15, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x77, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x14, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x22,
	0x00, 0x12, 0x77, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x24, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57,
	0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x16,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1b, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x30,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x29,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x16, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x50, 0x0a, 0x1b, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x3b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescData = file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDesc
)

func file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescData)
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_goTypes = []interface{}{
	(FinalizeRootInvocationRequest_FinalizationScope)(0),      // 0: luci.resultdb.v1.FinalizeRootInvocationRequest.FinalizationScope
	(FinalizeWorkUnitDescendantsRequest_FinalizationScope)(0), // 1: luci.resultdb.v1.FinalizeWorkUnitDescendantsRequest.FinalizationScope
	(*CreateRootInvocationRequest)(nil),                       // 2: luci.resultdb.v1.CreateRootInvocationRequest
	(*CreateRootInvocationResponse)(nil),                      // 3: luci.resultdb.v1.CreateRootInvocationResponse
	(*UpdateRootInvocationRequest)(nil),                       // 4: luci.resultdb.v1.UpdateRootInvocationRequest
	(*FinalizeRootInvocationRequest)(nil),                     // 5: luci.resultdb.v1.FinalizeRootInvocationRequest
	(*CreateWorkUnitRequest)(nil),                             // 6: luci.resultdb.v1.CreateWorkUnitRequest
	(*BatchCreateWorkUnitsRequest)(nil),                       // 7: luci.resultdb.v1.BatchCreateWorkUnitsRequest
	(*BatchCreateWorkUnitsResponse)(nil),                      // 8: luci.resultdb.v1.BatchCreateWorkUnitsResponse
	(*UpdateWorkUnitRequest)(nil),                             // 9: luci.resultdb.v1.UpdateWorkUnitRequest
	(*BatchUpdateWorkUnitsRequest)(nil),                       // 10: luci.resultdb.v1.BatchUpdateWorkUnitsRequest
	(*BatchUpdateWorkUnitsResponse)(nil),                      // 11: luci.resultdb.v1.BatchUpdateWorkUnitsResponse
	(*FinalizeWorkUnitRequest)(nil),                           // 12: luci.resultdb.v1.FinalizeWorkUnitRequest
	(*FinalizeWorkUnitDescendantsRequest)(nil),                // 13: luci.resultdb.v1.FinalizeWorkUnitDescendantsRequest
	(*BatchFinalizeWorkUnitsRequest)(nil),                     // 14: luci.resultdb.v1.BatchFinalizeWorkUnitsRequest
	(*BatchFinalizeWorkUnitsResponse)(nil),                    // 15: luci.resultdb.v1.BatchFinalizeWorkUnitsResponse
	(*DelegateWorkUnitInclusionRequest)(nil),                  // 16: luci.resultdb.v1.DelegateWorkUnitInclusionRequest
	(*DelegateWorkUnitInclusionResponse)(nil),                 // 17: luci.resultdb.v1.DelegateWorkUnitInclusionResponse
	(*CreateInvocationRequest)(nil),                           // 18: luci.resultdb.v1.CreateInvocationRequest
	(*BatchCreateInvocationsRequest)(nil),                     // 19: luci.resultdb.v1.BatchCreateInvocationsRequest
	(*BatchCreateInvocationsResponse)(nil),                    // 20: luci.resultdb.v1.BatchCreateInvocationsResponse
	(*UpdateInvocationRequest)(nil),                           // 21: luci.resultdb.v1.UpdateInvocationRequest
	(*FinalizeInvocationRequest)(nil),                         // 22: luci.resultdb.v1.FinalizeInvocationRequest
	(*UpdateIncludedInvocationsRequest)(nil),                  // 23: luci.resultdb.v1.UpdateIncludedInvocationsRequest
	(*MarkInvocationSubmittedRequest)(nil),                    // 24: luci.resultdb.v1.MarkInvocationSubmittedRequest
	(*CreateTestResultRequest)(nil),                           // 25: luci.resultdb.v1.CreateTestResultRequest
	(*BatchCreateTestResultsRequest)(nil),                     // 26: luci.resultdb.v1.BatchCreateTestResultsRequest
	(*BatchCreateTestResultsResponse)(nil),                    // 27: luci.resultdb.v1.BatchCreateTestResultsResponse
	(*CreateTestExonerationRequest)(nil),                      // 28: luci.resultdb.v1.CreateTestExonerationRequest
	(*BatchCreateTestExonerationsRequest)(nil),                // 29: luci.resultdb.v1.BatchCreateTestExonerationsRequest
	(*BatchCreateTestExonerationsResponse)(nil),               // 30: luci.resultdb.v1.BatchCreateTestExonerationsResponse
	(*CreateArtifactRequest)(nil),                             // 31: luci.resultdb.v1.CreateArtifactRequest
	(*BatchCreateArtifactsRequest)(nil),                       // 32: luci.resultdb.v1.BatchCreateArtifactsRequest
	(*BatchCreateArtifactsResponse)(nil),                      // 33: luci.resultdb.v1.BatchCreateArtifactsResponse
	(*RootInvocation)(nil),                                    // 34: luci.resultdb.v1.RootInvocation
	(*WorkUnit)(nil),                                          // 35: luci.resultdb.v1.WorkUnit
	(*fieldmaskpb.FieldMask)(nil),                             // 36: google.protobuf.FieldMask
	(WorkUnit_State)(0),                                       // 37: luci.resultdb.v1.WorkUnit.State
	(*Invocation)(nil),                                        // 38: luci.resultdb.v1.Invocation
	(*TestResult)(nil),                                        // 39: luci.resultdb.v1.TestResult
	(*TestExoneration)(nil),                                   // 40: luci.resultdb.v1.TestExoneration
	(*Artifact)(nil),                                          // 41: luci.resultdb.v1.Artifact
	(*GetRootInvocationRequest)(nil),                          // 42: luci.resultdb.v1.GetRootInvocationRequest
	(*GetWorkUnitRequest)(nil),                                // 43: luci.resultdb.v1.GetWorkUnitRequest
	(*BatchGetWorkUnitsRequest)(nil),                          // 44: luci.resultdb.v1.BatchGetWorkUnitsRequest
	(*BatchGetWorkUnitsResponse)(nil),                         // 45: luci.resultdb.v1.BatchGetWorkUnitsResponse
	(*emptypb.Empty)(nil),                                     // 46: google.protobuf.Empty
}
var file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_depIdxs = []int32{
	34, // 0: luci.resultdb.v1.CreateRootInvocationRequest.root_invocation:type_name -> luci.resultdb.v1.RootInvocation
	35, // 1: luci.resultdb.v1.CreateRootInvocationRequest.root_work_unit:type_name -> luci.resultdb.v1.WorkUnit
	34, // 2: luci.resultdb.v1.CreateRootInvocationResponse.root_invocation:type_name -> luci.resultdb.v1.RootInvocation
	35, // 3: luci.resultdb.v1.CreateRootInvocationResponse.root_work_unit:type_name -> luci.resultdb.v1.WorkUnit
	34, // 4: luci.resultdb.v1.UpdateRootInvocationRequest.root_invocation:type_name -> luci.resultdb.v1.RootInvocation
	36, // 5: luci.resultdb.v1.UpdateRootInvocationRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 6: luci.resultdb.v1.FinalizeRootInvocationRequest.finalization_scope:type_name -> luci.resultdb.v1.FinalizeRootInvocationRequest.FinalizationScope
	35, // 7: luci.resultdb.v1.CreateWorkUnitRequest.work_unit:type_name -> luci.resultdb.v1.WorkUnit
	6,  // 8: luci.resultdb.v1.BatchCreateWorkUnitsRequest.requests:type_name -> luci.resultdb.v1.CreateWorkUnitRequest
	35, // 9: luci.resultdb.v1.BatchCreateWorkUnitsResponse.work_units:type_name -> luci.resultdb.v1.WorkUnit
	35, // 10: luci.resultdb.v1.UpdateWorkUnitRequest.work_unit:type_name -> luci.resultdb.v1.WorkUnit
	36, // 11: luci.resultdb.v1.UpdateWorkUnitRequest.update_mask:type_name -> google.protobuf.FieldMask
	9,  // 12: luci.resultdb.v1.BatchUpdateWorkUnitsRequest.requests:type_name -> luci.resultdb.v1.UpdateWorkUnitRequest
	35, // 13: luci.resultdb.v1.BatchUpdateWorkUnitsResponse.work_units:type_name -> luci.resultdb.v1.WorkUnit
	37, // 14: luci.resultdb.v1.FinalizeWorkUnitRequest.state:type_name -> luci.resultdb.v1.WorkUnit.State
	37, // 15: luci.resultdb.v1.FinalizeWorkUnitDescendantsRequest.state:type_name -> luci.resultdb.v1.WorkUnit.State
	1,  // 16: luci.resultdb.v1.FinalizeWorkUnitDescendantsRequest.finalization_scope:type_name -> luci.resultdb.v1.FinalizeWorkUnitDescendantsRequest.FinalizationScope
	12, // 17: luci.resultdb.v1.BatchFinalizeWorkUnitsRequest.requests:type_name -> luci.resultdb.v1.FinalizeWorkUnitRequest
	35, // 18: luci.resultdb.v1.BatchFinalizeWorkUnitsResponse.work_units:type_name -> luci.resultdb.v1.WorkUnit
	38, // 19: luci.resultdb.v1.CreateInvocationRequest.invocation:type_name -> luci.resultdb.v1.Invocation
	18, // 20: luci.resultdb.v1.BatchCreateInvocationsRequest.requests:type_name -> luci.resultdb.v1.CreateInvocationRequest
	38, // 21: luci.resultdb.v1.BatchCreateInvocationsResponse.invocations:type_name -> luci.resultdb.v1.Invocation
	38, // 22: luci.resultdb.v1.UpdateInvocationRequest.invocation:type_name -> luci.resultdb.v1.Invocation
	36, // 23: luci.resultdb.v1.UpdateInvocationRequest.update_mask:type_name -> google.protobuf.FieldMask
	39, // 24: luci.resultdb.v1.CreateTestResultRequest.test_result:type_name -> luci.resultdb.v1.TestResult
	25, // 25: luci.resultdb.v1.BatchCreateTestResultsRequest.requests:type_name -> luci.resultdb.v1.CreateTestResultRequest
	39, // 26: luci.resultdb.v1.BatchCreateTestResultsResponse.test_results:type_name -> luci.resultdb.v1.TestResult
	40, // 27: luci.resultdb.v1.CreateTestExonerationRequest.test_exoneration:type_name -> luci.resultdb.v1.TestExoneration
	28, // 28: luci.resultdb.v1.BatchCreateTestExonerationsRequest.requests:type_name -> luci.resultdb.v1.CreateTestExonerationRequest
	40, // 29: luci.resultdb.v1.BatchCreateTestExonerationsResponse.test_exonerations:type_name -> luci.resultdb.v1.TestExoneration
	41, // 30: luci.resultdb.v1.CreateArtifactRequest.artifact:type_name -> luci.resultdb.v1.Artifact
	31, // 31: luci.resultdb.v1.BatchCreateArtifactsRequest.requests:type_name -> luci.resultdb.v1.CreateArtifactRequest
	41, // 32: luci.resultdb.v1.BatchCreateArtifactsResponse.artifacts:type_name -> luci.resultdb.v1.Artifact
	2,  // 33: luci.resultdb.v1.Recorder.CreateRootInvocation:input_type -> luci.resultdb.v1.CreateRootInvocationRequest
	4,  // 34: luci.resultdb.v1.Recorder.UpdateRootInvocation:input_type -> luci.resultdb.v1.UpdateRootInvocationRequest
	42, // 35: luci.resultdb.v1.Recorder.GetRootInvocation:input_type -> luci.resultdb.v1.GetRootInvocationRequest
	5,  // 36: luci.resultdb.v1.Recorder.FinalizeRootInvocation:input_type -> luci.resultdb.v1.FinalizeRootInvocationRequest
	6,  // 37: luci.resultdb.v1.Recorder.CreateWorkUnit:input_type -> luci.resultdb.v1.CreateWorkUnitRequest
	7,  // 38: luci.resultdb.v1.Recorder.BatchCreateWorkUnits:input_type -> luci.resultdb.v1.BatchCreateWorkUnitsRequest
	9,  // 39: luci.resultdb.v1.Recorder.UpdateWorkUnit:input_type -> luci.resultdb.v1.UpdateWorkUnitRequest
	10, // 40: luci.resultdb.v1.Recorder.BatchUpdateWorkUnits:input_type -> luci.resultdb.v1.BatchUpdateWorkUnitsRequest
	43, // 41: luci.resultdb.v1.Recorder.GetWorkUnit:input_type -> luci.resultdb.v1.GetWorkUnitRequest
	44, // 42: luci.resultdb.v1.Recorder.BatchGetWorkUnits:input_type -> luci.resultdb.v1.BatchGetWorkUnitsRequest
	12, // 43: luci.resultdb.v1.Recorder.FinalizeWorkUnit:input_type -> luci.resultdb.v1.FinalizeWorkUnitRequest
	14, // 44: luci.resultdb.v1.Recorder.BatchFinalizeWorkUnits:input_type -> luci.resultdb.v1.BatchFinalizeWorkUnitsRequest
	13, // 45: luci.resultdb.v1.Recorder.FinalizeWorkUnitDescendants:input_type -> luci.resultdb.v1.FinalizeWorkUnitDescendantsRequest
	16, // 46: luci.resultdb.v1.Recorder.DelegateWorkUnitInclusion:input_type -> luci.resultdb.v1.DelegateWorkUnitInclusionRequest
	24, // 47: luci.resultdb.v1.Recorder.MarkInvocationSubmitted:input_type -> luci.resultdb.v1.MarkInvocationSubmittedRequest
	25, // 48: luci.resultdb.v1.Recorder.CreateTestResult:input_type -> luci.resultdb.v1.CreateTestResultRequest
	26, // 49: luci.resultdb.v1.Recorder.BatchCreateTestResults:input_type -> luci.resultdb.v1.BatchCreateTestResultsRequest
	28, // 50: luci.resultdb.v1.Recorder.CreateTestExoneration:input_type -> luci.resultdb.v1.CreateTestExonerationRequest
	29, // 51: luci.resultdb.v1.Recorder.BatchCreateTestExonerations:input_type -> luci.resultdb.v1.BatchCreateTestExonerationsRequest
	32, // 52: luci.resultdb.v1.Recorder.BatchCreateArtifacts:input_type -> luci.resultdb.v1.BatchCreateArtifactsRequest
	18, // 53: luci.resultdb.v1.Recorder.CreateInvocation:input_type -> luci.resultdb.v1.CreateInvocationRequest
	19, // 54: luci.resultdb.v1.Recorder.BatchCreateInvocations:input_type -> luci.resultdb.v1.BatchCreateInvocationsRequest
	21, // 55: luci.resultdb.v1.Recorder.UpdateInvocation:input_type -> luci.resultdb.v1.UpdateInvocationRequest
	22, // 56: luci.resultdb.v1.Recorder.FinalizeInvocation:input_type -> luci.resultdb.v1.FinalizeInvocationRequest
	23, // 57: luci.resultdb.v1.Recorder.UpdateIncludedInvocations:input_type -> luci.resultdb.v1.UpdateIncludedInvocationsRequest
	3,  // 58: luci.resultdb.v1.Recorder.CreateRootInvocation:output_type -> luci.resultdb.v1.CreateRootInvocationResponse
	34, // 59: luci.resultdb.v1.Recorder.UpdateRootInvocation:output_type -> luci.resultdb.v1.RootInvocation
	34, // 60: luci.resultdb.v1.Recorder.GetRootInvocation:output_type -> luci.resultdb.v1.RootInvocation
	34, // 61: luci.resultdb.v1.Recorder.FinalizeRootInvocation:output_type -> luci.resultdb.v1.RootInvocation
	35, // 62: luci.resultdb.v1.Recorder.CreateWorkUnit:output_type -> luci.resultdb.v1.WorkUnit
	8,  // 63: luci.resultdb.v1.Recorder.BatchCreateWorkUnits:output_type -> luci.resultdb.v1.BatchCreateWorkUnitsResponse
	35, // 64: luci.resultdb.v1.Recorder.UpdateWorkUnit:output_type -> luci.resultdb.v1.WorkUnit
	11, // 65: luci.resultdb.v1.Recorder.BatchUpdateWorkUnits:output_type -> luci.resultdb.v1.BatchUpdateWorkUnitsResponse
	35, // 66: luci.resultdb.v1.Recorder.GetWorkUnit:output_type -> luci.resultdb.v1.WorkUnit
	45, // 67: luci.resultdb.v1.Recorder.BatchGetWorkUnits:output_type -> luci.resultdb.v1.BatchGetWorkUnitsResponse
	35, // 68: luci.resultdb.v1.Recorder.FinalizeWorkUnit:output_type -> luci.resultdb.v1.WorkUnit
	15, // 69: luci.resultdb.v1.Recorder.BatchFinalizeWorkUnits:output_type -> luci.resultdb.v1.BatchFinalizeWorkUnitsResponse
	46, // 70: luci.resultdb.v1.Recorder.FinalizeWorkUnitDescendants:output_type -> google.protobuf.Empty
	17, // 71: luci.resultdb.v1.Recorder.DelegateWorkUnitInclusion:output_type -> luci.resultdb.v1.DelegateWorkUnitInclusionResponse
	46, // 72: luci.resultdb.v1.Recorder.MarkInvocationSubmitted:output_type -> google.protobuf.Empty
	39, // 73: luci.resultdb.v1.Recorder.CreateTestResult:output_type -> luci.resultdb.v1.TestResult
	27, // 74: luci.resultdb.v1.Recorder.BatchCreateTestResults:output_type -> luci.resultdb.v1.BatchCreateTestResultsResponse
	40, // 75: luci.resultdb.v1.Recorder.CreateTestExoneration:output_type -> luci.resultdb.v1.TestExoneration
	30, // 76: luci.resultdb.v1.Recorder.BatchCreateTestExonerations:output_type -> luci.resultdb.v1.BatchCreateTestExonerationsResponse
	33, // 77: luci.resultdb.v1.Recorder.BatchCreateArtifacts:output_type -> luci.resultdb.v1.BatchCreateArtifactsResponse
	38, // 78: luci.resultdb.v1.Recorder.CreateInvocation:output_type -> luci.resultdb.v1.Invocation
	20, // 79: luci.resultdb.v1.Recorder.BatchCreateInvocations:output_type -> luci.resultdb.v1.BatchCreateInvocationsResponse
	38, // 80: luci.resultdb.v1.Recorder.UpdateInvocation:output_type -> luci.resultdb.v1.Invocation
	38, // 81: luci.resultdb.v1.Recorder.FinalizeInvocation:output_type -> luci.resultdb.v1.Invocation
	46, // 82: luci.resultdb.v1.Recorder.UpdateIncludedInvocations:output_type -> google.protobuf.Empty
	58, // [58:83] is the sub-list for method output_type
	33, // [33:58] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_recorder_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_proto_v1_artifact_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_root_invocation_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_work_unit_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRootInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRootInvocationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRootInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeRootInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateWorkUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateWorkUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWorkUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateWorkUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchUpdateWorkUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeWorkUnitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeWorkUnitDescendantsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchFinalizeWorkUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchFinalizeWorkUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateWorkUnitInclusionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegateWorkUnitInclusionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateInvocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateInvocationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalizeInvocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIncludedInvocationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkInvocationSubmittedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateTestResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateTestResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestExonerationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateTestExonerationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateTestExonerationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCreateArtifactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_recorder_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_rawDesc = nil
	file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_recorder_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecorderClient is the client API for Recorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecorderClient interface {
	// Creates a new root invocation and its root work unit.
	//
	// The response header metadata contains "update-token" required for future
	// updates to the root invocation and the root work unit, including finalization.
	// The same update token is used for both resources.
	//
	// If RootInvocation with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	//
	// N.B. this method is an AIP-136 custom method as it creates two resources
	// at once. As such, it does not follow the pattern of AIP-133.
	CreateRootInvocation(ctx context.Context, in *CreateRootInvocationRequest, opts ...grpc.CallOption) (*CreateRootInvocationResponse, error)
	// Updates an existing non-final RootInvocation.
	UpdateRootInvocation(ctx context.Context, in *UpdateRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error)
	// Retrieves a root invocation.
	//
	// Unlike the GetRootInvocation RPC on the ResultDB service, this RPC
	// uses update tokens to authorise reads and is designed for use with
	// UpdateRootInvocation to make atomic updates (using aip.dev/154 etags for
	// optimistic locking). It should be used (and only used by) recorders.
	GetRootInvocation(ctx context.Context, in *GetRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error)
	// Deprecated: Use FinalizeWorkUnit on the root work unit instead.
	// Will be removed soon.
	FinalizeRootInvocation(ctx context.Context, in *FinalizeRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error)
	// Creates a new work unit inside a root invocation.
	//
	// The response header metadata contains "update-token" required for future
	// updates, including finalization.
	//
	// If a work unit with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	//
	// See CreateWorkUnitRequest for more details.
	CreateWorkUnit(ctx context.Context, in *CreateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error)
	// Creates multiple new work units inside a root invocation.
	//
	// Unlike CreateWorkUnit, update tokens are included directly in the response
	// message to avoid limits on HTTP response headers. Do not log these values.
	//
	// If a work unit with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	BatchCreateWorkUnits(ctx context.Context, in *BatchCreateWorkUnitsRequest, opts ...grpc.CallOption) (*BatchCreateWorkUnitsResponse, error)
	// Updates an existing non-final work unit.
	UpdateWorkUnit(ctx context.Context, in *UpdateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error)
	// Updates multiple existing non-final work units.
	BatchUpdateWorkUnits(ctx context.Context, in *BatchUpdateWorkUnitsRequest, opts ...grpc.CallOption) (*BatchUpdateWorkUnitsResponse, error)
	// Retrieves a work unit.
	//
	// Unlike the GetWorkUnit RPC on the ResultDB service, this RPC
	// uses update tokens to authorise reads. It is designed for use with
	// UpdateWorkUnit to make atomic updates (using aip.dev/154 etags for
	// optimistic locking). It should be used (and only used by) recorders.
	GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error)
	// Retrieves a list of work units.
	//
	// Unlike the BatchGetWorkUnits RPC on the ResultDB service, this RPC
	// uses update tokens to authorise reads. It is designed for use with
	// BatchUpdateWorkUnits to make atomic updates (using aip.dev/154 etags for
	// optimistic locking). It should be used (and only used by) recorders.
	BatchGetWorkUnits(ctx context.Context, in *BatchGetWorkUnitsRequest, opts ...grpc.CallOption) (*BatchGetWorkUnitsResponse, error)
	// Ensures the given work unit is final, assigning it the given
	// final state if it does not yet have one. This begins the process of
	// transitioning the work unit to the finalization state FINALIZED.
	//
	// Suitable for reporting status of a work unit when exiting and
	// for use by task schedulers to speculatively clean up after an
	// upload task finishes.
	FinalizeWorkUnit(ctx context.Context, in *FinalizeWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error)
	// Ensures the given work units are final, assigning them the given
	// final state(s) if they do not yet have one. This begins the process of
	// transitioning them to the finalization state FINALIZED.
	BatchFinalizeWorkUnits(ctx context.Context, in *BatchFinalizeWorkUnitsRequest, opts ...grpc.CallOption) (*BatchFinalizeWorkUnitsResponse, error)
	// Ensures descendants of the given work unit are final, assigning them
	// a given final state if they do not yet have one. Both this RPC and
	// FinalizeWorkUnit should be called by task schedulers to speculatively
	// clean up after upload tasks after they exit.
	FinalizeWorkUnitDescendants(ctx context.Context, in *FinalizeWorkUnitDescendantsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Mints an 'inclusion token' which can be used by another system to
	// include new child invocations (of a nominated realm) in a work unit.
	// The caller of this RPC authorises the declassification of test results
	// from the nominated realm to the realm of the root invocation.
	//
	// See DelegateWorkUnitInclusionRequest for details.
	DelegateWorkUnitInclusion(ctx context.Context, in *DelegateWorkUnitInclusionRequest, opts ...grpc.CallOption) (*DelegateWorkUnitInclusionResponse, error)
	// Recursively marks all test variants associated with the invocation as
	// submitted, merging them into the invocation's associated baseline.
	MarkInvocationSubmitted(ctx context.Context, in *MarkInvocationSubmittedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Appends a test result to a non-finalized work unit.
	CreateTestResult(ctx context.Context, in *CreateTestResultRequest, opts ...grpc.CallOption) (*TestResult, error)
	// Atomically appends multiple test results to one or more
	// non-finalized work units.
	BatchCreateTestResults(ctx context.Context, in *BatchCreateTestResultsRequest, opts ...grpc.CallOption) (*BatchCreateTestResultsResponse, error)
	// Appends a test exoneration to a non-finalized work unit.
	CreateTestExoneration(ctx context.Context, in *CreateTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error)
	// Atomically appends multiple test exonerations to one or more
	// non-finalized work units.
	BatchCreateTestExonerations(ctx context.Context, in *BatchCreateTestExonerationsRequest, opts ...grpc.CallOption) (*BatchCreateTestExonerationsResponse, error)
	// Atomically creates multiple artifacts in one or more non-finalized
	// work units.
	//
	// An artifact can be either work unit-level or test-result-level.
	// See Artifact.name for more info.
	BatchCreateArtifacts(ctx context.Context, in *BatchCreateArtifactsRequest, opts ...grpc.CallOption) (*BatchCreateArtifactsResponse, error)
	// Deprecated. Creates a new invocation.
	// The request specifies the invocation id and its contents.
	//
	// The response header metadata contains "update-token" required for future
	// updates, including finalization.
	//
	// If invocation with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	CreateInvocation(ctx context.Context, in *CreateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
	// Deprecated. Creates multiple invocations in a single rpc.
	//
	// Unlike CreateInvocation, update tokens are included in the response message
	// to avoid limits on HTTP response headers. Do not log these values.
	BatchCreateInvocations(ctx context.Context, in *BatchCreateInvocationsRequest, opts ...grpc.CallOption) (*BatchCreateInvocationsResponse, error)
	// Deprecated. Updates an existing non-finalized invocation.
	UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
	// Deprecated. Transitions the given invocation to the state FINALIZED.
	FinalizeInvocation(ctx context.Context, in *FinalizeInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
	// Deprecated. Updates inclusions for a non-finalized invocation.
	UpdateIncludedInvocations(ctx context.Context, in *UpdateIncludedInvocationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}
type recorderPRPCClient struct {
	client *prpc.Client
}

func NewRecorderPRPCClient(client *prpc.Client) RecorderClient {
	return &recorderPRPCClient{client}
}

func (c *recorderPRPCClient) CreateRootInvocation(ctx context.Context, in *CreateRootInvocationRequest, opts ...grpc.CallOption) (*CreateRootInvocationResponse, error) {
	out := new(CreateRootInvocationResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "CreateRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) UpdateRootInvocation(ctx context.Context, in *UpdateRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "UpdateRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) GetRootInvocation(ctx context.Context, in *GetRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "GetRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) FinalizeRootInvocation(ctx context.Context, in *FinalizeRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "FinalizeRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) CreateWorkUnit(ctx context.Context, in *CreateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "CreateWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchCreateWorkUnits(ctx context.Context, in *BatchCreateWorkUnitsRequest, opts ...grpc.CallOption) (*BatchCreateWorkUnitsResponse, error) {
	out := new(BatchCreateWorkUnitsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchCreateWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) UpdateWorkUnit(ctx context.Context, in *UpdateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "UpdateWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchUpdateWorkUnits(ctx context.Context, in *BatchUpdateWorkUnitsRequest, opts ...grpc.CallOption) (*BatchUpdateWorkUnitsResponse, error) {
	out := new(BatchUpdateWorkUnitsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchUpdateWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "GetWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchGetWorkUnits(ctx context.Context, in *BatchGetWorkUnitsRequest, opts ...grpc.CallOption) (*BatchGetWorkUnitsResponse, error) {
	out := new(BatchGetWorkUnitsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchGetWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) FinalizeWorkUnit(ctx context.Context, in *FinalizeWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "FinalizeWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchFinalizeWorkUnits(ctx context.Context, in *BatchFinalizeWorkUnitsRequest, opts ...grpc.CallOption) (*BatchFinalizeWorkUnitsResponse, error) {
	out := new(BatchFinalizeWorkUnitsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchFinalizeWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) FinalizeWorkUnitDescendants(ctx context.Context, in *FinalizeWorkUnitDescendantsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "FinalizeWorkUnitDescendants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) DelegateWorkUnitInclusion(ctx context.Context, in *DelegateWorkUnitInclusionRequest, opts ...grpc.CallOption) (*DelegateWorkUnitInclusionResponse, error) {
	out := new(DelegateWorkUnitInclusionResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "DelegateWorkUnitInclusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) MarkInvocationSubmitted(ctx context.Context, in *MarkInvocationSubmittedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "MarkInvocationSubmitted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) CreateTestResult(ctx context.Context, in *CreateTestResultRequest, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "CreateTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchCreateTestResults(ctx context.Context, in *BatchCreateTestResultsRequest, opts ...grpc.CallOption) (*BatchCreateTestResultsResponse, error) {
	out := new(BatchCreateTestResultsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchCreateTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) CreateTestExoneration(ctx context.Context, in *CreateTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error) {
	out := new(TestExoneration)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "CreateTestExoneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchCreateTestExonerations(ctx context.Context, in *BatchCreateTestExonerationsRequest, opts ...grpc.CallOption) (*BatchCreateTestExonerationsResponse, error) {
	out := new(BatchCreateTestExonerationsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchCreateTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchCreateArtifacts(ctx context.Context, in *BatchCreateArtifactsRequest, opts ...grpc.CallOption) (*BatchCreateArtifactsResponse, error) {
	out := new(BatchCreateArtifactsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchCreateArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) CreateInvocation(ctx context.Context, in *CreateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "CreateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) BatchCreateInvocations(ctx context.Context, in *BatchCreateInvocationsRequest, opts ...grpc.CallOption) (*BatchCreateInvocationsResponse, error) {
	out := new(BatchCreateInvocationsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "BatchCreateInvocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "UpdateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) FinalizeInvocation(ctx context.Context, in *FinalizeInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "FinalizeInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderPRPCClient) UpdateIncludedInvocations(ctx context.Context, in *UpdateIncludedInvocationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "luci.resultdb.v1.Recorder", "UpdateIncludedInvocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type recorderClient struct {
	cc grpc.ClientConnInterface
}

func NewRecorderClient(cc grpc.ClientConnInterface) RecorderClient {
	return &recorderClient{cc}
}

func (c *recorderClient) CreateRootInvocation(ctx context.Context, in *CreateRootInvocationRequest, opts ...grpc.CallOption) (*CreateRootInvocationResponse, error) {
	out := new(CreateRootInvocationResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/CreateRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) UpdateRootInvocation(ctx context.Context, in *UpdateRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/UpdateRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) GetRootInvocation(ctx context.Context, in *GetRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/GetRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) FinalizeRootInvocation(ctx context.Context, in *FinalizeRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/FinalizeRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) CreateWorkUnit(ctx context.Context, in *CreateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/CreateWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchCreateWorkUnits(ctx context.Context, in *BatchCreateWorkUnitsRequest, opts ...grpc.CallOption) (*BatchCreateWorkUnitsResponse, error) {
	out := new(BatchCreateWorkUnitsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchCreateWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) UpdateWorkUnit(ctx context.Context, in *UpdateWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/UpdateWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchUpdateWorkUnits(ctx context.Context, in *BatchUpdateWorkUnitsRequest, opts ...grpc.CallOption) (*BatchUpdateWorkUnitsResponse, error) {
	out := new(BatchUpdateWorkUnitsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchUpdateWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/GetWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchGetWorkUnits(ctx context.Context, in *BatchGetWorkUnitsRequest, opts ...grpc.CallOption) (*BatchGetWorkUnitsResponse, error) {
	out := new(BatchGetWorkUnitsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchGetWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) FinalizeWorkUnit(ctx context.Context, in *FinalizeWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/FinalizeWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchFinalizeWorkUnits(ctx context.Context, in *BatchFinalizeWorkUnitsRequest, opts ...grpc.CallOption) (*BatchFinalizeWorkUnitsResponse, error) {
	out := new(BatchFinalizeWorkUnitsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchFinalizeWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) FinalizeWorkUnitDescendants(ctx context.Context, in *FinalizeWorkUnitDescendantsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/FinalizeWorkUnitDescendants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) DelegateWorkUnitInclusion(ctx context.Context, in *DelegateWorkUnitInclusionRequest, opts ...grpc.CallOption) (*DelegateWorkUnitInclusionResponse, error) {
	out := new(DelegateWorkUnitInclusionResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/DelegateWorkUnitInclusion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) MarkInvocationSubmitted(ctx context.Context, in *MarkInvocationSubmittedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/MarkInvocationSubmitted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) CreateTestResult(ctx context.Context, in *CreateTestResultRequest, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/CreateTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchCreateTestResults(ctx context.Context, in *BatchCreateTestResultsRequest, opts ...grpc.CallOption) (*BatchCreateTestResultsResponse, error) {
	out := new(BatchCreateTestResultsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchCreateTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) CreateTestExoneration(ctx context.Context, in *CreateTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error) {
	out := new(TestExoneration)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/CreateTestExoneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchCreateTestExonerations(ctx context.Context, in *BatchCreateTestExonerationsRequest, opts ...grpc.CallOption) (*BatchCreateTestExonerationsResponse, error) {
	out := new(BatchCreateTestExonerationsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchCreateTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchCreateArtifacts(ctx context.Context, in *BatchCreateArtifactsRequest, opts ...grpc.CallOption) (*BatchCreateArtifactsResponse, error) {
	out := new(BatchCreateArtifactsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchCreateArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) CreateInvocation(ctx context.Context, in *CreateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/CreateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) BatchCreateInvocations(ctx context.Context, in *BatchCreateInvocationsRequest, opts ...grpc.CallOption) (*BatchCreateInvocationsResponse, error) {
	out := new(BatchCreateInvocationsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/BatchCreateInvocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) UpdateInvocation(ctx context.Context, in *UpdateInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/UpdateInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) FinalizeInvocation(ctx context.Context, in *FinalizeInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/FinalizeInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recorderClient) UpdateIncludedInvocations(ctx context.Context, in *UpdateIncludedInvocationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Recorder/UpdateIncludedInvocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecorderServer is the server API for Recorder service.
type RecorderServer interface {
	// Creates a new root invocation and its root work unit.
	//
	// The response header metadata contains "update-token" required for future
	// updates to the root invocation and the root work unit, including finalization.
	// The same update token is used for both resources.
	//
	// If RootInvocation with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	//
	// N.B. this method is an AIP-136 custom method as it creates two resources
	// at once. As such, it does not follow the pattern of AIP-133.
	CreateRootInvocation(context.Context, *CreateRootInvocationRequest) (*CreateRootInvocationResponse, error)
	// Updates an existing non-final RootInvocation.
	UpdateRootInvocation(context.Context, *UpdateRootInvocationRequest) (*RootInvocation, error)
	// Retrieves a root invocation.
	//
	// Unlike the GetRootInvocation RPC on the ResultDB service, this RPC
	// uses update tokens to authorise reads and is designed for use with
	// UpdateRootInvocation to make atomic updates (using aip.dev/154 etags for
	// optimistic locking). It should be used (and only used by) recorders.
	GetRootInvocation(context.Context, *GetRootInvocationRequest) (*RootInvocation, error)
	// Deprecated: Use FinalizeWorkUnit on the root work unit instead.
	// Will be removed soon.
	FinalizeRootInvocation(context.Context, *FinalizeRootInvocationRequest) (*RootInvocation, error)
	// Creates a new work unit inside a root invocation.
	//
	// The response header metadata contains "update-token" required for future
	// updates, including finalization.
	//
	// If a work unit with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	//
	// See CreateWorkUnitRequest for more details.
	CreateWorkUnit(context.Context, *CreateWorkUnitRequest) (*WorkUnit, error)
	// Creates multiple new work units inside a root invocation.
	//
	// Unlike CreateWorkUnit, update tokens are included directly in the response
	// message to avoid limits on HTTP response headers. Do not log these values.
	//
	// If a work unit with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	BatchCreateWorkUnits(context.Context, *BatchCreateWorkUnitsRequest) (*BatchCreateWorkUnitsResponse, error)
	// Updates an existing non-final work unit.
	UpdateWorkUnit(context.Context, *UpdateWorkUnitRequest) (*WorkUnit, error)
	// Updates multiple existing non-final work units.
	BatchUpdateWorkUnits(context.Context, *BatchUpdateWorkUnitsRequest) (*BatchUpdateWorkUnitsResponse, error)
	// Retrieves a work unit.
	//
	// Unlike the GetWorkUnit RPC on the ResultDB service, this RPC
	// uses update tokens to authorise reads. It is designed for use with
	// UpdateWorkUnit to make atomic updates (using aip.dev/154 etags for
	// optimistic locking). It should be used (and only used by) recorders.
	GetWorkUnit(context.Context, *GetWorkUnitRequest) (*WorkUnit, error)
	// Retrieves a list of work units.
	//
	// Unlike the BatchGetWorkUnits RPC on the ResultDB service, this RPC
	// uses update tokens to authorise reads. It is designed for use with
	// BatchUpdateWorkUnits to make atomic updates (using aip.dev/154 etags for
	// optimistic locking). It should be used (and only used by) recorders.
	BatchGetWorkUnits(context.Context, *BatchGetWorkUnitsRequest) (*BatchGetWorkUnitsResponse, error)
	// Ensures the given work unit is final, assigning it the given
	// final state if it does not yet have one. This begins the process of
	// transitioning the work unit to the finalization state FINALIZED.
	//
	// Suitable for reporting status of a work unit when exiting and
	// for use by task schedulers to speculatively clean up after an
	// upload task finishes.
	FinalizeWorkUnit(context.Context, *FinalizeWorkUnitRequest) (*WorkUnit, error)
	// Ensures the given work units are final, assigning them the given
	// final state(s) if they do not yet have one. This begins the process of
	// transitioning them to the finalization state FINALIZED.
	BatchFinalizeWorkUnits(context.Context, *BatchFinalizeWorkUnitsRequest) (*BatchFinalizeWorkUnitsResponse, error)
	// Ensures descendants of the given work unit are final, assigning them
	// a given final state if they do not yet have one. Both this RPC and
	// FinalizeWorkUnit should be called by task schedulers to speculatively
	// clean up after upload tasks after they exit.
	FinalizeWorkUnitDescendants(context.Context, *FinalizeWorkUnitDescendantsRequest) (*emptypb.Empty, error)
	// Mints an 'inclusion token' which can be used by another system to
	// include new child invocations (of a nominated realm) in a work unit.
	// The caller of this RPC authorises the declassification of test results
	// from the nominated realm to the realm of the root invocation.
	//
	// See DelegateWorkUnitInclusionRequest for details.
	DelegateWorkUnitInclusion(context.Context, *DelegateWorkUnitInclusionRequest) (*DelegateWorkUnitInclusionResponse, error)
	// Recursively marks all test variants associated with the invocation as
	// submitted, merging them into the invocation's associated baseline.
	MarkInvocationSubmitted(context.Context, *MarkInvocationSubmittedRequest) (*emptypb.Empty, error)
	// Appends a test result to a non-finalized work unit.
	CreateTestResult(context.Context, *CreateTestResultRequest) (*TestResult, error)
	// Atomically appends multiple test results to one or more
	// non-finalized work units.
	BatchCreateTestResults(context.Context, *BatchCreateTestResultsRequest) (*BatchCreateTestResultsResponse, error)
	// Appends a test exoneration to a non-finalized work unit.
	CreateTestExoneration(context.Context, *CreateTestExonerationRequest) (*TestExoneration, error)
	// Atomically appends multiple test exonerations to one or more
	// non-finalized work units.
	BatchCreateTestExonerations(context.Context, *BatchCreateTestExonerationsRequest) (*BatchCreateTestExonerationsResponse, error)
	// Atomically creates multiple artifacts in one or more non-finalized
	// work units.
	//
	// An artifact can be either work unit-level or test-result-level.
	// See Artifact.name for more info.
	BatchCreateArtifacts(context.Context, *BatchCreateArtifactsRequest) (*BatchCreateArtifactsResponse, error)
	// Deprecated. Creates a new invocation.
	// The request specifies the invocation id and its contents.
	//
	// The response header metadata contains "update-token" required for future
	// updates, including finalization.
	//
	// If invocation with the given ID already exists, returns ALREADY_EXISTS
	// error code.
	CreateInvocation(context.Context, *CreateInvocationRequest) (*Invocation, error)
	// Deprecated. Creates multiple invocations in a single rpc.
	//
	// Unlike CreateInvocation, update tokens are included in the response message
	// to avoid limits on HTTP response headers. Do not log these values.
	BatchCreateInvocations(context.Context, *BatchCreateInvocationsRequest) (*BatchCreateInvocationsResponse, error)
	// Deprecated. Updates an existing non-finalized invocation.
	UpdateInvocation(context.Context, *UpdateInvocationRequest) (*Invocation, error)
	// Deprecated. Transitions the given invocation to the state FINALIZED.
	FinalizeInvocation(context.Context, *FinalizeInvocationRequest) (*Invocation, error)
	// Deprecated. Updates inclusions for a non-finalized invocation.
	UpdateIncludedInvocations(context.Context, *UpdateIncludedInvocationsRequest) (*emptypb.Empty, error)
}

// UnimplementedRecorderServer can be embedded to have forward compatible implementations.
type UnimplementedRecorderServer struct {
}

func (*UnimplementedRecorderServer) CreateRootInvocation(context.Context, *CreateRootInvocationRequest) (*CreateRootInvocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRootInvocation not implemented")
}
func (*UnimplementedRecorderServer) UpdateRootInvocation(context.Context, *UpdateRootInvocationRequest) (*RootInvocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRootInvocation not implemented")
}
func (*UnimplementedRecorderServer) GetRootInvocation(context.Context, *GetRootInvocationRequest) (*RootInvocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootInvocation not implemented")
}
func (*UnimplementedRecorderServer) FinalizeRootInvocation(context.Context, *FinalizeRootInvocationRequest) (*RootInvocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeRootInvocation not implemented")
}
func (*UnimplementedRecorderServer) CreateWorkUnit(context.Context, *CreateWorkUnitRequest) (*WorkUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkUnit not implemented")
}
func (*UnimplementedRecorderServer) BatchCreateWorkUnits(context.Context, *BatchCreateWorkUnitsRequest) (*BatchCreateWorkUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateWorkUnits not implemented")
}
func (*UnimplementedRecorderServer) UpdateWorkUnit(context.Context, *UpdateWorkUnitRequest) (*WorkUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkUnit not implemented")
}
func (*UnimplementedRecorderServer) BatchUpdateWorkUnits(context.Context, *BatchUpdateWorkUnitsRequest) (*BatchUpdateWorkUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateWorkUnits not implemented")
}
func (*UnimplementedRecorderServer) GetWorkUnit(context.Context, *GetWorkUnitRequest) (*WorkUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkUnit not implemented")
}
func (*UnimplementedRecorderServer) BatchGetWorkUnits(context.Context, *BatchGetWorkUnitsRequest) (*BatchGetWorkUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetWorkUnits not implemented")
}
func (*UnimplementedRecorderServer) FinalizeWorkUnit(context.Context, *FinalizeWorkUnitRequest) (*WorkUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeWorkUnit not implemented")
}
func (*UnimplementedRecorderServer) BatchFinalizeWorkUnits(context.Context, *BatchFinalizeWorkUnitsRequest) (*BatchFinalizeWorkUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchFinalizeWorkUnits not implemented")
}
func (*UnimplementedRecorderServer) FinalizeWorkUnitDescendants(context.Context, *FinalizeWorkUnitDescendantsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeWorkUnitDescendants not implemented")
}
func (*UnimplementedRecorderServer) DelegateWorkUnitInclusion(context.Context, *DelegateWorkUnitInclusionRequest) (*DelegateWorkUnitInclusionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateWorkUnitInclusion not implemented")
}
func (*UnimplementedRecorderServer) MarkInvocationSubmitted(context.Context, *MarkInvocationSubmittedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkInvocationSubmitted not implemented")
}
func (*UnimplementedRecorderServer) CreateTestResult(context.Context, *CreateTestResultRequest) (*TestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestResult not implemented")
}
func (*UnimplementedRecorderServer) BatchCreateTestResults(context.Context, *BatchCreateTestResultsRequest) (*BatchCreateTestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateTestResults not implemented")
}
func (*UnimplementedRecorderServer) CreateTestExoneration(context.Context, *CreateTestExonerationRequest) (*TestExoneration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestExoneration not implemented")
}
func (*UnimplementedRecorderServer) BatchCreateTestExonerations(context.Context, *BatchCreateTestExonerationsRequest) (*BatchCreateTestExonerationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateTestExonerations not implemented")
}
func (*UnimplementedRecorderServer) BatchCreateArtifacts(context.Context, *BatchCreateArtifactsRequest) (*BatchCreateArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateArtifacts not implemented")
}
func (*UnimplementedRecorderServer) CreateInvocation(context.Context, *CreateInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvocation not implemented")
}
func (*UnimplementedRecorderServer) BatchCreateInvocations(context.Context, *BatchCreateInvocationsRequest) (*BatchCreateInvocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateInvocations not implemented")
}
func (*UnimplementedRecorderServer) UpdateInvocation(context.Context, *UpdateInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvocation not implemented")
}
func (*UnimplementedRecorderServer) FinalizeInvocation(context.Context, *FinalizeInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeInvocation not implemented")
}
func (*UnimplementedRecorderServer) UpdateIncludedInvocations(context.Context, *UpdateIncludedInvocationsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncludedInvocations not implemented")
}

func RegisterRecorderServer(s prpc.Registrar, srv RecorderServer) {
	s.RegisterService(&_Recorder_serviceDesc, srv)
}

func _Recorder_CreateRootInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRootInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateRootInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/CreateRootInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateRootInvocation(ctx, req.(*CreateRootInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_UpdateRootInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRootInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).UpdateRootInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/UpdateRootInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).UpdateRootInvocation(ctx, req.(*UpdateRootInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_GetRootInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).GetRootInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/GetRootInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).GetRootInvocation(ctx, req.(*GetRootInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_FinalizeRootInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRootInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).FinalizeRootInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/FinalizeRootInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).FinalizeRootInvocation(ctx, req.(*FinalizeRootInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_CreateWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/CreateWorkUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateWorkUnit(ctx, req.(*CreateWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchCreateWorkUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateWorkUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchCreateWorkUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchCreateWorkUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchCreateWorkUnits(ctx, req.(*BatchCreateWorkUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_UpdateWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).UpdateWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/UpdateWorkUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).UpdateWorkUnit(ctx, req.(*UpdateWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchUpdateWorkUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateWorkUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchUpdateWorkUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchUpdateWorkUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchUpdateWorkUnits(ctx, req.(*BatchUpdateWorkUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_GetWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).GetWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/GetWorkUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).GetWorkUnit(ctx, req.(*GetWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchGetWorkUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetWorkUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchGetWorkUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchGetWorkUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchGetWorkUnits(ctx, req.(*BatchGetWorkUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_FinalizeWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).FinalizeWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/FinalizeWorkUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).FinalizeWorkUnit(ctx, req.(*FinalizeWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchFinalizeWorkUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchFinalizeWorkUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchFinalizeWorkUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchFinalizeWorkUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchFinalizeWorkUnits(ctx, req.(*BatchFinalizeWorkUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_FinalizeWorkUnitDescendants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeWorkUnitDescendantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).FinalizeWorkUnitDescendants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/FinalizeWorkUnitDescendants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).FinalizeWorkUnitDescendants(ctx, req.(*FinalizeWorkUnitDescendantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_DelegateWorkUnitInclusion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateWorkUnitInclusionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).DelegateWorkUnitInclusion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/DelegateWorkUnitInclusion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).DelegateWorkUnitInclusion(ctx, req.(*DelegateWorkUnitInclusionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_MarkInvocationSubmitted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInvocationSubmittedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).MarkInvocationSubmitted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/MarkInvocationSubmitted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).MarkInvocationSubmitted(ctx, req.(*MarkInvocationSubmittedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_CreateTestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateTestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/CreateTestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateTestResult(ctx, req.(*CreateTestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchCreateTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchCreateTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchCreateTestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchCreateTestResults(ctx, req.(*BatchCreateTestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_CreateTestExoneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestExonerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateTestExoneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/CreateTestExoneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateTestExoneration(ctx, req.(*CreateTestExonerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchCreateTestExonerations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateTestExonerationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchCreateTestExonerations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchCreateTestExonerations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchCreateTestExonerations(ctx, req.(*BatchCreateTestExonerationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchCreateArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchCreateArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchCreateArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchCreateArtifacts(ctx, req.(*BatchCreateArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_CreateInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).CreateInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/CreateInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).CreateInvocation(ctx, req.(*CreateInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_BatchCreateInvocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateInvocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).BatchCreateInvocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/BatchCreateInvocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).BatchCreateInvocations(ctx, req.(*BatchCreateInvocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_UpdateInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).UpdateInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/UpdateInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).UpdateInvocation(ctx, req.(*UpdateInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_FinalizeInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).FinalizeInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/FinalizeInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).FinalizeInvocation(ctx, req.(*FinalizeInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recorder_UpdateIncludedInvocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncludedInvocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecorderServer).UpdateIncludedInvocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Recorder/UpdateIncludedInvocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecorderServer).UpdateIncludedInvocations(ctx, req.(*UpdateIncludedInvocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recorder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.resultdb.v1.Recorder",
	HandlerType: (*RecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRootInvocation",
			Handler:    _Recorder_CreateRootInvocation_Handler,
		},
		{
			MethodName: "UpdateRootInvocation",
			Handler:    _Recorder_UpdateRootInvocation_Handler,
		},
		{
			MethodName: "GetRootInvocation",
			Handler:    _Recorder_GetRootInvocation_Handler,
		},
		{
			MethodName: "FinalizeRootInvocation",
			Handler:    _Recorder_FinalizeRootInvocation_Handler,
		},
		{
			MethodName: "CreateWorkUnit",
			Handler:    _Recorder_CreateWorkUnit_Handler,
		},
		{
			MethodName: "BatchCreateWorkUnits",
			Handler:    _Recorder_BatchCreateWorkUnits_Handler,
		},
		{
			MethodName: "UpdateWorkUnit",
			Handler:    _Recorder_UpdateWorkUnit_Handler,
		},
		{
			MethodName: "BatchUpdateWorkUnits",
			Handler:    _Recorder_BatchUpdateWorkUnits_Handler,
		},
		{
			MethodName: "GetWorkUnit",
			Handler:    _Recorder_GetWorkUnit_Handler,
		},
		{
			MethodName: "BatchGetWorkUnits",
			Handler:    _Recorder_BatchGetWorkUnits_Handler,
		},
		{
			MethodName: "FinalizeWorkUnit",
			Handler:    _Recorder_FinalizeWorkUnit_Handler,
		},
		{
			MethodName: "BatchFinalizeWorkUnits",
			Handler:    _Recorder_BatchFinalizeWorkUnits_Handler,
		},
		{
			MethodName: "FinalizeWorkUnitDescendants",
			Handler:    _Recorder_FinalizeWorkUnitDescendants_Handler,
		},
		{
			MethodName: "DelegateWorkUnitInclusion",
			Handler:    _Recorder_DelegateWorkUnitInclusion_Handler,
		},
		{
			MethodName: "MarkInvocationSubmitted",
			Handler:    _Recorder_MarkInvocationSubmitted_Handler,
		},
		{
			MethodName: "CreateTestResult",
			Handler:    _Recorder_CreateTestResult_Handler,
		},
		{
			MethodName: "BatchCreateTestResults",
			Handler:    _Recorder_BatchCreateTestResults_Handler,
		},
		{
			MethodName: "CreateTestExoneration",
			Handler:    _Recorder_CreateTestExoneration_Handler,
		},
		{
			MethodName: "BatchCreateTestExonerations",
			Handler:    _Recorder_BatchCreateTestExonerations_Handler,
		},
		{
			MethodName: "BatchCreateArtifacts",
			Handler:    _Recorder_BatchCreateArtifacts_Handler,
		},
		{
			MethodName: "CreateInvocation",
			Handler:    _Recorder_CreateInvocation_Handler,
		},
		{
			MethodName: "BatchCreateInvocations",
			Handler:    _Recorder_BatchCreateInvocations_Handler,
		},
		{
			MethodName: "UpdateInvocation",
			Handler:    _Recorder_UpdateInvocation_Handler,
		},
		{
			MethodName: "FinalizeInvocation",
			Handler:    _Recorder_FinalizeInvocation_Handler,
		},
		{
			MethodName: "UpdateIncludedInvocations",
			Handler:    _Recorder_UpdateIncludedInvocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/resultdb/proto/v1/recorder.proto",
}
