// Code generated by MockGen. DO NOT EDIT.
// Source: resultdb.pb.go

package resultpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockisArtifactContentMatcher_Matcher is a mock of isArtifactContentMatcher_Matcher interface.
type MockisArtifactContentMatcher_Matcher struct {
	ctrl     *gomock.Controller
	recorder *MockisArtifactContentMatcher_MatcherMockRecorder
}

// MockisArtifactContentMatcher_MatcherMockRecorder is the mock recorder for MockisArtifactContentMatcher_Matcher.
type MockisArtifactContentMatcher_MatcherMockRecorder struct {
	mock *MockisArtifactContentMatcher_Matcher
}

// NewMockisArtifactContentMatcher_Matcher creates a new mock instance.
func NewMockisArtifactContentMatcher_Matcher(ctrl *gomock.Controller) *MockisArtifactContentMatcher_Matcher {
	mock := &MockisArtifactContentMatcher_Matcher{ctrl: ctrl}
	mock.recorder = &MockisArtifactContentMatcher_MatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisArtifactContentMatcher_Matcher) EXPECT() *MockisArtifactContentMatcher_MatcherMockRecorder {
	return m.recorder
}

// isArtifactContentMatcher_Matcher mocks base method.
func (m *MockisArtifactContentMatcher_Matcher) isArtifactContentMatcher_Matcher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isArtifactContentMatcher_Matcher")
}

// isArtifactContentMatcher_Matcher indicates an expected call of isArtifactContentMatcher_Matcher.
func (mr *MockisArtifactContentMatcher_MatcherMockRecorder) isArtifactContentMatcher_Matcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isArtifactContentMatcher_Matcher", reflect.TypeOf((*MockisArtifactContentMatcher_Matcher)(nil).isArtifactContentMatcher_Matcher))
}

// MockisIDMatcher_Matcher is a mock of isIDMatcher_Matcher interface.
type MockisIDMatcher_Matcher struct {
	ctrl     *gomock.Controller
	recorder *MockisIDMatcher_MatcherMockRecorder
}

// MockisIDMatcher_MatcherMockRecorder is the mock recorder for MockisIDMatcher_Matcher.
type MockisIDMatcher_MatcherMockRecorder struct {
	mock *MockisIDMatcher_Matcher
}

// NewMockisIDMatcher_Matcher creates a new mock instance.
func NewMockisIDMatcher_Matcher(ctrl *gomock.Controller) *MockisIDMatcher_Matcher {
	mock := &MockisIDMatcher_Matcher{ctrl: ctrl}
	mock.recorder = &MockisIDMatcher_MatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisIDMatcher_Matcher) EXPECT() *MockisIDMatcher_MatcherMockRecorder {
	return m.recorder
}

// isIDMatcher_Matcher mocks base method.
func (m *MockisIDMatcher_Matcher) isIDMatcher_Matcher() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isIDMatcher_Matcher")
}

// isIDMatcher_Matcher indicates an expected call of isIDMatcher_Matcher.
func (mr *MockisIDMatcher_MatcherMockRecorder) isIDMatcher_Matcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isIDMatcher_Matcher", reflect.TypeOf((*MockisIDMatcher_Matcher)(nil).isIDMatcher_Matcher))
}

// MockResultDBClient is a mock of ResultDBClient interface.
type MockResultDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockResultDBClientMockRecorder
}

// MockResultDBClientMockRecorder is the mock recorder for MockResultDBClient.
type MockResultDBClientMockRecorder struct {
	mock *MockResultDBClient
}

// NewMockResultDBClient creates a new mock instance.
func NewMockResultDBClient(ctrl *gomock.Controller) *MockResultDBClient {
	mock := &MockResultDBClient{ctrl: ctrl}
	mock.recorder = &MockResultDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultDBClient) EXPECT() *MockResultDBClientMockRecorder {
	return m.recorder
}

// BatchGetTestVariants mocks base method.
func (m *MockResultDBClient) BatchGetTestVariants(ctx context.Context, in *BatchGetTestVariantsRequest, opts ...grpc.CallOption) (*BatchGetTestVariantsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetTestVariants", varargs...)
	ret0, _ := ret[0].(*BatchGetTestVariantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTestVariants indicates an expected call of BatchGetTestVariants.
func (mr *MockResultDBClientMockRecorder) BatchGetTestVariants(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTestVariants", reflect.TypeOf((*MockResultDBClient)(nil).BatchGetTestVariants), varargs...)
}

// BatchGetWorkUnits mocks base method.
func (m *MockResultDBClient) BatchGetWorkUnits(ctx context.Context, in *BatchGetWorkUnitsRequest, opts ...grpc.CallOption) (*BatchGetWorkUnitsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetWorkUnits", varargs...)
	ret0, _ := ret[0].(*BatchGetWorkUnitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetWorkUnits indicates an expected call of BatchGetWorkUnits.
func (mr *MockResultDBClientMockRecorder) BatchGetWorkUnits(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetWorkUnits", reflect.TypeOf((*MockResultDBClient)(nil).BatchGetWorkUnits), varargs...)
}

// GetArtifact mocks base method.
func (m *MockResultDBClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetArtifact", varargs...)
	ret0, _ := ret[0].(*Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockResultDBClientMockRecorder) GetArtifact(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockResultDBClient)(nil).GetArtifact), varargs...)
}

// GetInstruction mocks base method.
func (m *MockResultDBClient) GetInstruction(ctx context.Context, in *GetInstructionRequest, opts ...grpc.CallOption) (*Instruction, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInstruction", varargs...)
	ret0, _ := ret[0].(*Instruction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstruction indicates an expected call of GetInstruction.
func (mr *MockResultDBClientMockRecorder) GetInstruction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstruction", reflect.TypeOf((*MockResultDBClient)(nil).GetInstruction), varargs...)
}

// GetInvocation mocks base method.
func (m *MockResultDBClient) GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInvocation", varargs...)
	ret0, _ := ret[0].(*Invocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvocation indicates an expected call of GetInvocation.
func (mr *MockResultDBClientMockRecorder) GetInvocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvocation", reflect.TypeOf((*MockResultDBClient)(nil).GetInvocation), varargs...)
}

// GetRootInvocation mocks base method.
func (m *MockResultDBClient) GetRootInvocation(ctx context.Context, in *GetRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRootInvocation", varargs...)
	ret0, _ := ret[0].(*RootInvocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootInvocation indicates an expected call of GetRootInvocation.
func (mr *MockResultDBClientMockRecorder) GetRootInvocation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootInvocation", reflect.TypeOf((*MockResultDBClient)(nil).GetRootInvocation), varargs...)
}

// GetTestExoneration mocks base method.
func (m *MockResultDBClient) GetTestExoneration(ctx context.Context, in *GetTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTestExoneration", varargs...)
	ret0, _ := ret[0].(*TestExoneration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestExoneration indicates an expected call of GetTestExoneration.
func (mr *MockResultDBClientMockRecorder) GetTestExoneration(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestExoneration", reflect.TypeOf((*MockResultDBClient)(nil).GetTestExoneration), varargs...)
}

// GetTestResult mocks base method.
func (m *MockResultDBClient) GetTestResult(ctx context.Context, in *GetTestResultRequest, opts ...grpc.CallOption) (*TestResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTestResult", varargs...)
	ret0, _ := ret[0].(*TestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestResult indicates an expected call of GetTestResult.
func (mr *MockResultDBClientMockRecorder) GetTestResult(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestResult", reflect.TypeOf((*MockResultDBClient)(nil).GetTestResult), varargs...)
}

// GetWorkUnit mocks base method.
func (m *MockResultDBClient) GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkUnit", varargs...)
	ret0, _ := ret[0].(*WorkUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkUnit indicates an expected call of GetWorkUnit.
func (mr *MockResultDBClientMockRecorder) GetWorkUnit(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnit", reflect.TypeOf((*MockResultDBClient)(nil).GetWorkUnit), varargs...)
}

// ListArtifactLines mocks base method.
func (m *MockResultDBClient) ListArtifactLines(ctx context.Context, in *ListArtifactLinesRequest, opts ...grpc.CallOption) (*ListArtifactLinesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArtifactLines", varargs...)
	ret0, _ := ret[0].(*ListArtifactLinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifactLines indicates an expected call of ListArtifactLines.
func (mr *MockResultDBClientMockRecorder) ListArtifactLines(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifactLines", reflect.TypeOf((*MockResultDBClient)(nil).ListArtifactLines), varargs...)
}

// ListArtifacts mocks base method.
func (m *MockResultDBClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListArtifacts", varargs...)
	ret0, _ := ret[0].(*ListArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockResultDBClientMockRecorder) ListArtifacts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockResultDBClient)(nil).ListArtifacts), varargs...)
}

// ListTestExonerations mocks base method.
func (m *MockResultDBClient) ListTestExonerations(ctx context.Context, in *ListTestExonerationsRequest, opts ...grpc.CallOption) (*ListTestExonerationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTestExonerations", varargs...)
	ret0, _ := ret[0].(*ListTestExonerationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestExonerations indicates an expected call of ListTestExonerations.
func (mr *MockResultDBClientMockRecorder) ListTestExonerations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestExonerations", reflect.TypeOf((*MockResultDBClient)(nil).ListTestExonerations), varargs...)
}

// ListTestResults mocks base method.
func (m *MockResultDBClient) ListTestResults(ctx context.Context, in *ListTestResultsRequest, opts ...grpc.CallOption) (*ListTestResultsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTestResults", varargs...)
	ret0, _ := ret[0].(*ListTestResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestResults indicates an expected call of ListTestResults.
func (mr *MockResultDBClientMockRecorder) ListTestResults(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestResults", reflect.TypeOf((*MockResultDBClient)(nil).ListTestResults), varargs...)
}

// QueryArtifactFailureOnlyLines mocks base method.
func (m *MockResultDBClient) QueryArtifactFailureOnlyLines(ctx context.Context, in *QueryArtifactFailureOnlyLinesRequest, opts ...grpc.CallOption) (*QueryArtifactFailureOnlyLinesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryArtifactFailureOnlyLines", varargs...)
	ret0, _ := ret[0].(*QueryArtifactFailureOnlyLinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryArtifactFailureOnlyLines indicates an expected call of QueryArtifactFailureOnlyLines.
func (mr *MockResultDBClientMockRecorder) QueryArtifactFailureOnlyLines(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArtifactFailureOnlyLines", reflect.TypeOf((*MockResultDBClient)(nil).QueryArtifactFailureOnlyLines), varargs...)
}

// QueryArtifacts mocks base method.
func (m *MockResultDBClient) QueryArtifacts(ctx context.Context, in *QueryArtifactsRequest, opts ...grpc.CallOption) (*QueryArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryArtifacts", varargs...)
	ret0, _ := ret[0].(*QueryArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryArtifacts indicates an expected call of QueryArtifacts.
func (mr *MockResultDBClientMockRecorder) QueryArtifacts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArtifacts", reflect.TypeOf((*MockResultDBClient)(nil).QueryArtifacts), varargs...)
}

// QueryInstruction mocks base method.
func (m *MockResultDBClient) QueryInstruction(ctx context.Context, in *QueryInstructionRequest, opts ...grpc.CallOption) (*QueryInstructionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryInstruction", varargs...)
	ret0, _ := ret[0].(*QueryInstructionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInstruction indicates an expected call of QueryInstruction.
func (mr *MockResultDBClientMockRecorder) QueryInstruction(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstruction", reflect.TypeOf((*MockResultDBClient)(nil).QueryInstruction), varargs...)
}

// QueryInvocationVariantArtifactGroups mocks base method.
func (m *MockResultDBClient) QueryInvocationVariantArtifactGroups(ctx context.Context, in *QueryInvocationVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryInvocationVariantArtifactGroups", varargs...)
	ret0, _ := ret[0].(*QueryInvocationVariantArtifactGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInvocationVariantArtifactGroups indicates an expected call of QueryInvocationVariantArtifactGroups.
func (mr *MockResultDBClientMockRecorder) QueryInvocationVariantArtifactGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInvocationVariantArtifactGroups", reflect.TypeOf((*MockResultDBClient)(nil).QueryInvocationVariantArtifactGroups), varargs...)
}

// QueryInvocationVariantArtifacts mocks base method.
func (m *MockResultDBClient) QueryInvocationVariantArtifacts(ctx context.Context, in *QueryInvocationVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryInvocationVariantArtifacts", varargs...)
	ret0, _ := ret[0].(*QueryInvocationVariantArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInvocationVariantArtifacts indicates an expected call of QueryInvocationVariantArtifacts.
func (mr *MockResultDBClientMockRecorder) QueryInvocationVariantArtifacts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInvocationVariantArtifacts", reflect.TypeOf((*MockResultDBClient)(nil).QueryInvocationVariantArtifacts), varargs...)
}

// QueryNewTestVariants mocks base method.
func (m *MockResultDBClient) QueryNewTestVariants(ctx context.Context, in *QueryNewTestVariantsRequest, opts ...grpc.CallOption) (*QueryNewTestVariantsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryNewTestVariants", varargs...)
	ret0, _ := ret[0].(*QueryNewTestVariantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNewTestVariants indicates an expected call of QueryNewTestVariants.
func (mr *MockResultDBClientMockRecorder) QueryNewTestVariants(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNewTestVariants", reflect.TypeOf((*MockResultDBClient)(nil).QueryNewTestVariants), varargs...)
}

// QueryRootInvocationNames mocks base method.
func (m *MockResultDBClient) QueryRootInvocationNames(ctx context.Context, in *QueryRootInvocationNamesRequest, opts ...grpc.CallOption) (*QueryRootInvocationNamesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRootInvocationNames", varargs...)
	ret0, _ := ret[0].(*QueryRootInvocationNamesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRootInvocationNames indicates an expected call of QueryRootInvocationNames.
func (mr *MockResultDBClientMockRecorder) QueryRootInvocationNames(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRootInvocationNames", reflect.TypeOf((*MockResultDBClient)(nil).QueryRootInvocationNames), varargs...)
}

// QueryRunTestVerdicts mocks base method.
func (m *MockResultDBClient) QueryRunTestVerdicts(ctx context.Context, in *QueryRunTestVerdictsRequest, opts ...grpc.CallOption) (*QueryRunTestVerdictsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRunTestVerdicts", varargs...)
	ret0, _ := ret[0].(*QueryRunTestVerdictsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRunTestVerdicts indicates an expected call of QueryRunTestVerdicts.
func (mr *MockResultDBClientMockRecorder) QueryRunTestVerdicts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRunTestVerdicts", reflect.TypeOf((*MockResultDBClient)(nil).QueryRunTestVerdicts), varargs...)
}

// QueryTestAggregations mocks base method.
func (m *MockResultDBClient) QueryTestAggregations(ctx context.Context, in *QueryTestAggregationsRequest, opts ...grpc.CallOption) (*QueryTestAggregationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestAggregations", varargs...)
	ret0, _ := ret[0].(*QueryTestAggregationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestAggregations indicates an expected call of QueryTestAggregations.
func (mr *MockResultDBClientMockRecorder) QueryTestAggregations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestAggregations", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestAggregations), varargs...)
}

// QueryTestExonerations mocks base method.
func (m *MockResultDBClient) QueryTestExonerations(ctx context.Context, in *QueryTestExonerationsRequest, opts ...grpc.CallOption) (*QueryTestExonerationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestExonerations", varargs...)
	ret0, _ := ret[0].(*QueryTestExonerationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestExonerations indicates an expected call of QueryTestExonerations.
func (mr *MockResultDBClientMockRecorder) QueryTestExonerations(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestExonerations", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestExonerations), varargs...)
}

// QueryTestMetadata mocks base method.
func (m *MockResultDBClient) QueryTestMetadata(ctx context.Context, in *QueryTestMetadataRequest, opts ...grpc.CallOption) (*QueryTestMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestMetadata", varargs...)
	ret0, _ := ret[0].(*QueryTestMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestMetadata indicates an expected call of QueryTestMetadata.
func (mr *MockResultDBClientMockRecorder) QueryTestMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestMetadata", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestMetadata), varargs...)
}

// QueryTestResultStatistics mocks base method.
func (m *MockResultDBClient) QueryTestResultStatistics(ctx context.Context, in *QueryTestResultStatisticsRequest, opts ...grpc.CallOption) (*QueryTestResultStatisticsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestResultStatistics", varargs...)
	ret0, _ := ret[0].(*QueryTestResultStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestResultStatistics indicates an expected call of QueryTestResultStatistics.
func (mr *MockResultDBClientMockRecorder) QueryTestResultStatistics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestResultStatistics", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestResultStatistics), varargs...)
}

// QueryTestResults mocks base method.
func (m *MockResultDBClient) QueryTestResults(ctx context.Context, in *QueryTestResultsRequest, opts ...grpc.CallOption) (*QueryTestResultsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestResults", varargs...)
	ret0, _ := ret[0].(*QueryTestResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestResults indicates an expected call of QueryTestResults.
func (mr *MockResultDBClientMockRecorder) QueryTestResults(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestResults", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestResults), varargs...)
}

// QueryTestVariantArtifactGroups mocks base method.
func (m *MockResultDBClient) QueryTestVariantArtifactGroups(ctx context.Context, in *QueryTestVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestVariantArtifactGroups", varargs...)
	ret0, _ := ret[0].(*QueryTestVariantArtifactGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVariantArtifactGroups indicates an expected call of QueryTestVariantArtifactGroups.
func (mr *MockResultDBClientMockRecorder) QueryTestVariantArtifactGroups(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVariantArtifactGroups", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestVariantArtifactGroups), varargs...)
}

// QueryTestVariantArtifacts mocks base method.
func (m *MockResultDBClient) QueryTestVariantArtifacts(ctx context.Context, in *QueryTestVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestVariantArtifacts", varargs...)
	ret0, _ := ret[0].(*QueryTestVariantArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVariantArtifacts indicates an expected call of QueryTestVariantArtifacts.
func (mr *MockResultDBClientMockRecorder) QueryTestVariantArtifacts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVariantArtifacts", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestVariantArtifacts), varargs...)
}

// QueryTestVariants mocks base method.
func (m *MockResultDBClient) QueryTestVariants(ctx context.Context, in *QueryTestVariantsRequest, opts ...grpc.CallOption) (*QueryTestVariantsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestVariants", varargs...)
	ret0, _ := ret[0].(*QueryTestVariantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVariants indicates an expected call of QueryTestVariants.
func (mr *MockResultDBClientMockRecorder) QueryTestVariants(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVariants", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestVariants), varargs...)
}

// QueryTestVerdicts mocks base method.
func (m *MockResultDBClient) QueryTestVerdicts(ctx context.Context, in *QueryTestVerdictsRequest, opts ...grpc.CallOption) (*QueryTestVerdictsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTestVerdicts", varargs...)
	ret0, _ := ret[0].(*QueryTestVerdictsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVerdicts indicates an expected call of QueryTestVerdicts.
func (mr *MockResultDBClientMockRecorder) QueryTestVerdicts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVerdicts", reflect.TypeOf((*MockResultDBClient)(nil).QueryTestVerdicts), varargs...)
}

// MockResultDBServer is a mock of ResultDBServer interface.
type MockResultDBServer struct {
	ctrl     *gomock.Controller
	recorder *MockResultDBServerMockRecorder
}

// MockResultDBServerMockRecorder is the mock recorder for MockResultDBServer.
type MockResultDBServerMockRecorder struct {
	mock *MockResultDBServer
}

// NewMockResultDBServer creates a new mock instance.
func NewMockResultDBServer(ctrl *gomock.Controller) *MockResultDBServer {
	mock := &MockResultDBServer{ctrl: ctrl}
	mock.recorder = &MockResultDBServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultDBServer) EXPECT() *MockResultDBServerMockRecorder {
	return m.recorder
}

// BatchGetTestVariants mocks base method.
func (m *MockResultDBServer) BatchGetTestVariants(arg0 context.Context, arg1 *BatchGetTestVariantsRequest) (*BatchGetTestVariantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTestVariants", arg0, arg1)
	ret0, _ := ret[0].(*BatchGetTestVariantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTestVariants indicates an expected call of BatchGetTestVariants.
func (mr *MockResultDBServerMockRecorder) BatchGetTestVariants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTestVariants", reflect.TypeOf((*MockResultDBServer)(nil).BatchGetTestVariants), arg0, arg1)
}

// BatchGetWorkUnits mocks base method.
func (m *MockResultDBServer) BatchGetWorkUnits(arg0 context.Context, arg1 *BatchGetWorkUnitsRequest) (*BatchGetWorkUnitsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetWorkUnits", arg0, arg1)
	ret0, _ := ret[0].(*BatchGetWorkUnitsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetWorkUnits indicates an expected call of BatchGetWorkUnits.
func (mr *MockResultDBServerMockRecorder) BatchGetWorkUnits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetWorkUnits", reflect.TypeOf((*MockResultDBServer)(nil).BatchGetWorkUnits), arg0, arg1)
}

// GetArtifact mocks base method.
func (m *MockResultDBServer) GetArtifact(arg0 context.Context, arg1 *GetArtifactRequest) (*Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", arg0, arg1)
	ret0, _ := ret[0].(*Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockResultDBServerMockRecorder) GetArtifact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockResultDBServer)(nil).GetArtifact), arg0, arg1)
}

// GetInstruction mocks base method.
func (m *MockResultDBServer) GetInstruction(arg0 context.Context, arg1 *GetInstructionRequest) (*Instruction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstruction", arg0, arg1)
	ret0, _ := ret[0].(*Instruction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstruction indicates an expected call of GetInstruction.
func (mr *MockResultDBServerMockRecorder) GetInstruction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstruction", reflect.TypeOf((*MockResultDBServer)(nil).GetInstruction), arg0, arg1)
}

// GetInvocation mocks base method.
func (m *MockResultDBServer) GetInvocation(arg0 context.Context, arg1 *GetInvocationRequest) (*Invocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvocation", arg0, arg1)
	ret0, _ := ret[0].(*Invocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvocation indicates an expected call of GetInvocation.
func (mr *MockResultDBServerMockRecorder) GetInvocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvocation", reflect.TypeOf((*MockResultDBServer)(nil).GetInvocation), arg0, arg1)
}

// GetRootInvocation mocks base method.
func (m *MockResultDBServer) GetRootInvocation(arg0 context.Context, arg1 *GetRootInvocationRequest) (*RootInvocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootInvocation", arg0, arg1)
	ret0, _ := ret[0].(*RootInvocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootInvocation indicates an expected call of GetRootInvocation.
func (mr *MockResultDBServerMockRecorder) GetRootInvocation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootInvocation", reflect.TypeOf((*MockResultDBServer)(nil).GetRootInvocation), arg0, arg1)
}

// GetTestExoneration mocks base method.
func (m *MockResultDBServer) GetTestExoneration(arg0 context.Context, arg1 *GetTestExonerationRequest) (*TestExoneration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestExoneration", arg0, arg1)
	ret0, _ := ret[0].(*TestExoneration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestExoneration indicates an expected call of GetTestExoneration.
func (mr *MockResultDBServerMockRecorder) GetTestExoneration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestExoneration", reflect.TypeOf((*MockResultDBServer)(nil).GetTestExoneration), arg0, arg1)
}

// GetTestResult mocks base method.
func (m *MockResultDBServer) GetTestResult(arg0 context.Context, arg1 *GetTestResultRequest) (*TestResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestResult", arg0, arg1)
	ret0, _ := ret[0].(*TestResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestResult indicates an expected call of GetTestResult.
func (mr *MockResultDBServerMockRecorder) GetTestResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestResult", reflect.TypeOf((*MockResultDBServer)(nil).GetTestResult), arg0, arg1)
}

// GetWorkUnit mocks base method.
func (m *MockResultDBServer) GetWorkUnit(arg0 context.Context, arg1 *GetWorkUnitRequest) (*WorkUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkUnit", arg0, arg1)
	ret0, _ := ret[0].(*WorkUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkUnit indicates an expected call of GetWorkUnit.
func (mr *MockResultDBServerMockRecorder) GetWorkUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkUnit", reflect.TypeOf((*MockResultDBServer)(nil).GetWorkUnit), arg0, arg1)
}

// ListArtifactLines mocks base method.
func (m *MockResultDBServer) ListArtifactLines(arg0 context.Context, arg1 *ListArtifactLinesRequest) (*ListArtifactLinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifactLines", arg0, arg1)
	ret0, _ := ret[0].(*ListArtifactLinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifactLines indicates an expected call of ListArtifactLines.
func (mr *MockResultDBServerMockRecorder) ListArtifactLines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifactLines", reflect.TypeOf((*MockResultDBServer)(nil).ListArtifactLines), arg0, arg1)
}

// ListArtifacts mocks base method.
func (m *MockResultDBServer) ListArtifacts(arg0 context.Context, arg1 *ListArtifactsRequest) (*ListArtifactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArtifacts", arg0, arg1)
	ret0, _ := ret[0].(*ListArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArtifacts indicates an expected call of ListArtifacts.
func (mr *MockResultDBServerMockRecorder) ListArtifacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArtifacts", reflect.TypeOf((*MockResultDBServer)(nil).ListArtifacts), arg0, arg1)
}

// ListTestExonerations mocks base method.
func (m *MockResultDBServer) ListTestExonerations(arg0 context.Context, arg1 *ListTestExonerationsRequest) (*ListTestExonerationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestExonerations", arg0, arg1)
	ret0, _ := ret[0].(*ListTestExonerationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestExonerations indicates an expected call of ListTestExonerations.
func (mr *MockResultDBServerMockRecorder) ListTestExonerations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestExonerations", reflect.TypeOf((*MockResultDBServer)(nil).ListTestExonerations), arg0, arg1)
}

// ListTestResults mocks base method.
func (m *MockResultDBServer) ListTestResults(arg0 context.Context, arg1 *ListTestResultsRequest) (*ListTestResultsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTestResults", arg0, arg1)
	ret0, _ := ret[0].(*ListTestResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTestResults indicates an expected call of ListTestResults.
func (mr *MockResultDBServerMockRecorder) ListTestResults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTestResults", reflect.TypeOf((*MockResultDBServer)(nil).ListTestResults), arg0, arg1)
}

// QueryArtifactFailureOnlyLines mocks base method.
func (m *MockResultDBServer) QueryArtifactFailureOnlyLines(arg0 context.Context, arg1 *QueryArtifactFailureOnlyLinesRequest) (*QueryArtifactFailureOnlyLinesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryArtifactFailureOnlyLines", arg0, arg1)
	ret0, _ := ret[0].(*QueryArtifactFailureOnlyLinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryArtifactFailureOnlyLines indicates an expected call of QueryArtifactFailureOnlyLines.
func (mr *MockResultDBServerMockRecorder) QueryArtifactFailureOnlyLines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArtifactFailureOnlyLines", reflect.TypeOf((*MockResultDBServer)(nil).QueryArtifactFailureOnlyLines), arg0, arg1)
}

// QueryArtifacts mocks base method.
func (m *MockResultDBServer) QueryArtifacts(arg0 context.Context, arg1 *QueryArtifactsRequest) (*QueryArtifactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryArtifacts", arg0, arg1)
	ret0, _ := ret[0].(*QueryArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryArtifacts indicates an expected call of QueryArtifacts.
func (mr *MockResultDBServerMockRecorder) QueryArtifacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArtifacts", reflect.TypeOf((*MockResultDBServer)(nil).QueryArtifacts), arg0, arg1)
}

// QueryInstruction mocks base method.
func (m *MockResultDBServer) QueryInstruction(arg0 context.Context, arg1 *QueryInstructionRequest) (*QueryInstructionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstruction", arg0, arg1)
	ret0, _ := ret[0].(*QueryInstructionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInstruction indicates an expected call of QueryInstruction.
func (mr *MockResultDBServerMockRecorder) QueryInstruction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstruction", reflect.TypeOf((*MockResultDBServer)(nil).QueryInstruction), arg0, arg1)
}

// QueryInvocationVariantArtifactGroups mocks base method.
func (m *MockResultDBServer) QueryInvocationVariantArtifactGroups(arg0 context.Context, arg1 *QueryInvocationVariantArtifactGroupsRequest) (*QueryInvocationVariantArtifactGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInvocationVariantArtifactGroups", arg0, arg1)
	ret0, _ := ret[0].(*QueryInvocationVariantArtifactGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInvocationVariantArtifactGroups indicates an expected call of QueryInvocationVariantArtifactGroups.
func (mr *MockResultDBServerMockRecorder) QueryInvocationVariantArtifactGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInvocationVariantArtifactGroups", reflect.TypeOf((*MockResultDBServer)(nil).QueryInvocationVariantArtifactGroups), arg0, arg1)
}

// QueryInvocationVariantArtifacts mocks base method.
func (m *MockResultDBServer) QueryInvocationVariantArtifacts(arg0 context.Context, arg1 *QueryInvocationVariantArtifactsRequest) (*QueryInvocationVariantArtifactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInvocationVariantArtifacts", arg0, arg1)
	ret0, _ := ret[0].(*QueryInvocationVariantArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryInvocationVariantArtifacts indicates an expected call of QueryInvocationVariantArtifacts.
func (mr *MockResultDBServerMockRecorder) QueryInvocationVariantArtifacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInvocationVariantArtifacts", reflect.TypeOf((*MockResultDBServer)(nil).QueryInvocationVariantArtifacts), arg0, arg1)
}

// QueryNewTestVariants mocks base method.
func (m *MockResultDBServer) QueryNewTestVariants(arg0 context.Context, arg1 *QueryNewTestVariantsRequest) (*QueryNewTestVariantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryNewTestVariants", arg0, arg1)
	ret0, _ := ret[0].(*QueryNewTestVariantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryNewTestVariants indicates an expected call of QueryNewTestVariants.
func (mr *MockResultDBServerMockRecorder) QueryNewTestVariants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryNewTestVariants", reflect.TypeOf((*MockResultDBServer)(nil).QueryNewTestVariants), arg0, arg1)
}

// QueryRootInvocationNames mocks base method.
func (m *MockResultDBServer) QueryRootInvocationNames(arg0 context.Context, arg1 *QueryRootInvocationNamesRequest) (*QueryRootInvocationNamesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRootInvocationNames", arg0, arg1)
	ret0, _ := ret[0].(*QueryRootInvocationNamesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRootInvocationNames indicates an expected call of QueryRootInvocationNames.
func (mr *MockResultDBServerMockRecorder) QueryRootInvocationNames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRootInvocationNames", reflect.TypeOf((*MockResultDBServer)(nil).QueryRootInvocationNames), arg0, arg1)
}

// QueryRunTestVerdicts mocks base method.
func (m *MockResultDBServer) QueryRunTestVerdicts(arg0 context.Context, arg1 *QueryRunTestVerdictsRequest) (*QueryRunTestVerdictsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRunTestVerdicts", arg0, arg1)
	ret0, _ := ret[0].(*QueryRunTestVerdictsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRunTestVerdicts indicates an expected call of QueryRunTestVerdicts.
func (mr *MockResultDBServerMockRecorder) QueryRunTestVerdicts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRunTestVerdicts", reflect.TypeOf((*MockResultDBServer)(nil).QueryRunTestVerdicts), arg0, arg1)
}

// QueryTestAggregations mocks base method.
func (m *MockResultDBServer) QueryTestAggregations(arg0 context.Context, arg1 *QueryTestAggregationsRequest) (*QueryTestAggregationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestAggregations", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestAggregationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestAggregations indicates an expected call of QueryTestAggregations.
func (mr *MockResultDBServerMockRecorder) QueryTestAggregations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestAggregations", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestAggregations), arg0, arg1)
}

// QueryTestExonerations mocks base method.
func (m *MockResultDBServer) QueryTestExonerations(arg0 context.Context, arg1 *QueryTestExonerationsRequest) (*QueryTestExonerationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestExonerations", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestExonerationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestExonerations indicates an expected call of QueryTestExonerations.
func (mr *MockResultDBServerMockRecorder) QueryTestExonerations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestExonerations", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestExonerations), arg0, arg1)
}

// QueryTestMetadata mocks base method.
func (m *MockResultDBServer) QueryTestMetadata(arg0 context.Context, arg1 *QueryTestMetadataRequest) (*QueryTestMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestMetadata", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestMetadata indicates an expected call of QueryTestMetadata.
func (mr *MockResultDBServerMockRecorder) QueryTestMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestMetadata", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestMetadata), arg0, arg1)
}

// QueryTestResultStatistics mocks base method.
func (m *MockResultDBServer) QueryTestResultStatistics(arg0 context.Context, arg1 *QueryTestResultStatisticsRequest) (*QueryTestResultStatisticsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestResultStatistics", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestResultStatisticsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestResultStatistics indicates an expected call of QueryTestResultStatistics.
func (mr *MockResultDBServerMockRecorder) QueryTestResultStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestResultStatistics", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestResultStatistics), arg0, arg1)
}

// QueryTestResults mocks base method.
func (m *MockResultDBServer) QueryTestResults(arg0 context.Context, arg1 *QueryTestResultsRequest) (*QueryTestResultsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestResults", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestResultsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestResults indicates an expected call of QueryTestResults.
func (mr *MockResultDBServerMockRecorder) QueryTestResults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestResults", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestResults), arg0, arg1)
}

// QueryTestVariantArtifactGroups mocks base method.
func (m *MockResultDBServer) QueryTestVariantArtifactGroups(arg0 context.Context, arg1 *QueryTestVariantArtifactGroupsRequest) (*QueryTestVariantArtifactGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestVariantArtifactGroups", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestVariantArtifactGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVariantArtifactGroups indicates an expected call of QueryTestVariantArtifactGroups.
func (mr *MockResultDBServerMockRecorder) QueryTestVariantArtifactGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVariantArtifactGroups", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestVariantArtifactGroups), arg0, arg1)
}

// QueryTestVariantArtifacts mocks base method.
func (m *MockResultDBServer) QueryTestVariantArtifacts(arg0 context.Context, arg1 *QueryTestVariantArtifactsRequest) (*QueryTestVariantArtifactsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestVariantArtifacts", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestVariantArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVariantArtifacts indicates an expected call of QueryTestVariantArtifacts.
func (mr *MockResultDBServerMockRecorder) QueryTestVariantArtifacts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVariantArtifacts", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestVariantArtifacts), arg0, arg1)
}

// QueryTestVariants mocks base method.
func (m *MockResultDBServer) QueryTestVariants(arg0 context.Context, arg1 *QueryTestVariantsRequest) (*QueryTestVariantsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestVariants", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestVariantsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVariants indicates an expected call of QueryTestVariants.
func (mr *MockResultDBServerMockRecorder) QueryTestVariants(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVariants", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestVariants), arg0, arg1)
}

// QueryTestVerdicts mocks base method.
func (m *MockResultDBServer) QueryTestVerdicts(arg0 context.Context, arg1 *QueryTestVerdictsRequest) (*QueryTestVerdictsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTestVerdicts", arg0, arg1)
	ret0, _ := ret[0].(*QueryTestVerdictsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTestVerdicts indicates an expected call of QueryTestVerdicts.
func (mr *MockResultDBServerMockRecorder) QueryTestVerdicts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTestVerdicts", reflect.TypeOf((*MockResultDBServer)(nil).QueryTestVerdicts), arg0, arg1)
}
