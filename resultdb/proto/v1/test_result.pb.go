// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.32.0
// source: go.chromium.org/luci/resultdb/proto/v1/test_result.proto

package resultpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DEPRECATED: Use TestResult.Status instead.
// Machine-readable status of a test result.
//
// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
type TestStatus int32

const (
	// Status was not specified.
	// Not to be used in actual test results; serves as a default value for an
	// unset field.
	TestStatus_STATUS_UNSPECIFIED TestStatus = 0
	// The test case has passed.
	TestStatus_PASS TestStatus = 1
	// The test case has failed.
	// Suggests that the code under test is incorrect, but it is also possible
	// that the test is incorrect or it is a flake.
	TestStatus_FAIL TestStatus = 2
	// The test case has crashed during execution.
	// The outcome is inconclusive: the code under test might or might not be
	// correct, but the test+code is incorrect.
	TestStatus_CRASH TestStatus = 3
	// The test case has started, but was aborted before finishing.
	// A common reason: timeout.
	TestStatus_ABORT TestStatus = 4
	// The test case did not execute.
	// Examples:
	//   - The execution of the collection of test cases, such as a test
	//     binary, was aborted prematurely and execution of some test cases was
	//     skipped.
	//   - The test harness configuration specified that the test case MUST be
	//     skipped.
	TestStatus_SKIP TestStatus = 5
)

// Enum value maps for TestStatus.
var (
	TestStatus_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PASS",
		2: "FAIL",
		3: "CRASH",
		4: "ABORT",
		5: "SKIP",
	}
	TestStatus_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PASS":               1,
		"FAIL":               2,
		"CRASH":              3,
		"ABORT":              4,
		"SKIP":               5,
	}
)

func (x TestStatus) Enum() *TestStatus {
	p := new(TestStatus)
	*p = x
	return p
}

func (x TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[0].Descriptor()
}

func (TestStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[0]
}

func (x TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus.Descriptor instead.
func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{0}
}

// DEPRECATED: Use SkippedReason.Kind instead.
// Machine-readable reason that a test execution was skipped.
// Only reasons actually used are listed here, if you need a new reason
// please add it here and send a CL to the OWNERS.
//
// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
type SkipReason int32

const (
	// Skip reason was not specified.
	// This represents an unset field which should be used for non-skip test
	// result statuses.  It can also be used if none of the other statuses
	// apply.
	SkipReason_SKIP_REASON_UNSPECIFIED SkipReason = 0
	// Disabled automatically in response to a test skipping policy that skips
	// flaky tests.
	// Used for ChromeOS CQ test filtering.
	SkipReason_AUTOMATICALLY_DISABLED_FOR_FLAKINESS SkipReason = 1
)

// Enum value maps for SkipReason.
var (
	SkipReason_name = map[int32]string{
		0: "SKIP_REASON_UNSPECIFIED",
		1: "AUTOMATICALLY_DISABLED_FOR_FLAKINESS",
	}
	SkipReason_value = map[string]int32{
		"SKIP_REASON_UNSPECIFIED":              0,
		"AUTOMATICALLY_DISABLED_FOR_FLAKINESS": 1,
	}
)

func (x SkipReason) Enum() *SkipReason {
	p := new(SkipReason)
	*p = x
	return p
}

func (x SkipReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkipReason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[1].Descriptor()
}

func (SkipReason) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[1]
}

func (x SkipReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkipReason.Descriptor instead.
func (SkipReason) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{1}
}

// Reason why a test variant was exonerated.
type ExonerationReason int32

const (
	// Reason was not specified.
	// Not to be used in actual test exonerations; serves as a default value for
	// an unset field.
	ExonerationReason_EXONERATION_REASON_UNSPECIFIED ExonerationReason = 0
	// Similar unexpected results were observed on a mainline branch
	// (i.e. against a build without unsubmitted changes applied).
	// (For avoidance of doubt, this includes both flakily and
	// deterministically occurring unexpected results.)
	// Applies to unexpected results in presubmit/CQ runs only.
	ExonerationReason_OCCURS_ON_MAINLINE ExonerationReason = 1
	// Similar unexpected results were observed in presubmit run(s) for other,
	// unrelated CL(s). (This is suggestive of the issue being present
	// on mainline but is not confirmed as there are possible confounding
	// factors, like how tests are run on CLs vs how tests are run on
	// mainline branches.)
	// Applies to unexpected results in presubmit/CQ runs only.
	ExonerationReason_OCCURS_ON_OTHER_CLS ExonerationReason = 2
	// The tests are not critical to the test subject (e.g. CL) passing.
	// This could be because more data is being collected to determine if
	// the tests are stable enough to be made critical (as is often the
	// case for experimental test suites).
	// If information exists indicating the tests are producing unexpected
	// results, and the tests are not critical for that reason,
	// prefer more specific reasons OCCURS_ON_MAINLINE or OCCURS_ON_OTHER_CLS.
	ExonerationReason_NOT_CRITICAL ExonerationReason = 3
	// The test result was an unexpected pass. (Note that such an exoneration is
	// not automatically created for unexpected passes, unless the option is
	// specified to ResultSink or the project manually creates one).
	ExonerationReason_UNEXPECTED_PASS ExonerationReason = 4
)

// Enum value maps for ExonerationReason.
var (
	ExonerationReason_name = map[int32]string{
		0: "EXONERATION_REASON_UNSPECIFIED",
		1: "OCCURS_ON_MAINLINE",
		2: "OCCURS_ON_OTHER_CLS",
		3: "NOT_CRITICAL",
		4: "UNEXPECTED_PASS",
	}
	ExonerationReason_value = map[string]int32{
		"EXONERATION_REASON_UNSPECIFIED": 0,
		"OCCURS_ON_MAINLINE":             1,
		"OCCURS_ON_OTHER_CLS":            2,
		"NOT_CRITICAL":                   3,
		"UNEXPECTED_PASS":                4,
	}
)

func (x ExonerationReason) Enum() *ExonerationReason {
	p := new(ExonerationReason)
	*p = x
	return p
}

func (x ExonerationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExonerationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[2].Descriptor()
}

func (ExonerationReason) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[2]
}

func (x ExonerationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExonerationReason.Descriptor instead.
func (ExonerationReason) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{2}
}

// The machine-readable test result statuses (v2).
//
// These high-level categories are further refined:
// - for failing tests, by the failure_reason.kind.
// - for skipped tests, by the skipped_reason.kind.
//
// Web test users: Refer to framework_extensions.web_tests for the original
// test status reported by the web test harness. The status in this
// field is the logical test status, not the original status. E.g. for
// an expected failure, we record PASSED, not FAILED.
type TestResult_Status int32

const (
	// Status was not specified. Do not use.
	TestResult_STATUS_UNSPECIFIED TestResult_Status = 0
	// The test case has passed.
	TestResult_PASSED TestResult_Status = 1
	// The test case has failed.
	// Suggests that the code under test is incorrect, but it is also possible
	// that the test is incorrect or it is a flake.
	//
	// If a test failed to complete due to an error that is not the fault of
	// this test's content, use the status EXECUTION_ERRORED (for errors specific
	// to this test) or PRECLUDED (for errors at a higher-level) instead.
	//
	// If you specify this status, you must also populate the failure_reason.kind field.
	TestResult_FAILED TestResult_Status = 2
	// The test case did not, *and should not*, run to completion in this
	// configuration.
	//
	// For example:
	//   - The test is disabled in code
	//   - The test assumptions are not met (e.g. JUnit assumption failure
	//     or Tast test hardware dependency unmet)
	//   - The test was not stable enough to in presubmit right now.
	//
	// If a test was not run or not run to completion due to an error, use the
	// status EXECUTION_ERRORED (for test-level errors) or PRECLUDED
	// (for higher-level errors) instead.
	//
	// If you specify this status, you must also populate the skipped_reason field.
	TestResult_SKIPPED TestResult_Status = 3
	// The test did not run to completion, because an infrastructure error
	// precluded it from doing so.
	//
	// Infrastructure here is broadly defined, to mean "not the content
	// of this test".
	//
	// For example:
	// - The test ran, but the result file could not be parsed.
	// - A file this test depends on could not be downloaded.
	//
	// Sometimes it is ambiguous whether test content is at fault or not.
	// For example, loss of SSH connection during the test could be because
	// the test caused a kernel panic or because of a flaky ethernet adapter.
	// Judgement is required. If unsure, use EXECUTION_ERRORED status instead
	// of FAIL to avoid falsely inflating the flakiness rate of a test.
	//
	// Results with this status should be ignored when calculating the flake
	// and failure rates of the test.
	//
	// Currently, there is no dedicated 'reason' field for this status;
	// please just include a suitable description in the result `summary_html`.
	TestResult_EXECUTION_ERRORED TestResult_Status = 4
	// The test did not run to completion, because its execution is precluded
	// by an error at a higher-level. For example, a work unit-level timeout.
	//
	// If you report this status, you must report an error on the containing
	// work unit. If this restriction is changed in future to allow preclusion
	// by other sources (e.g. a class fixture failed to setup so the tests in
	// using it could not run), a preclusion reason field will be added to
	// capture this.
	//
	// Results with this status should be ignored when calculating the flake
	// and failure rates of the test.
	//
	// Currently, there is no dedicated 'reason' field for this status; please
	// include a suitable description in the result `summary_html`.
	TestResult_PRECLUDED TestResult_Status = 5
)

// Enum value maps for TestResult_Status.
var (
	TestResult_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PASSED",
		2: "FAILED",
		3: "SKIPPED",
		4: "EXECUTION_ERRORED",
		5: "PRECLUDED",
	}
	TestResult_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PASSED":             1,
		"FAILED":             2,
		"SKIPPED":            3,
		"EXECUTION_ERRORED":  4,
		"PRECLUDED":          5,
	}
)

func (x TestResult_Status) Enum() *TestResult_Status {
	p := new(TestResult_Status)
	*p = x
	return p
}

func (x TestResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[3].Descriptor()
}

func (TestResult_Status) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[3]
}

func (x TestResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResult_Status.Descriptor instead.
func (TestResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{0, 0}
}

// Provides structured explanation for why a test was skipped.
// It must be populated when the status is SKIP.
// Open to extension.
type SkippedReason_Kind int32

const (
	// Skipped reason was not specified. Do not use this value.
	SkippedReason_KIND_UNSPECIFIED SkippedReason_Kind = 0
	// Skipped by an annotation at the test declaration site.
	//
	// This includes:
	//   - JUnit4 @Ignore,
	//   - JUnit5 @Disabled, @DisabledIf/For/On... @EnabledIf/For/On...
	//     annotations.
	//   - GoogleTest DISABLED_ text prefix.
	//   - Tast test skips from the declared software or hardware
	//     dependencies being unsatisfied at runtime.
	//
	// and similar statically defined annotations at the test
	// declaration site.
	SkippedReason_DISABLED_AT_DECLARATION SkippedReason_Kind = 1
	// Test body began to run but determined the test should
	// not finish. For example, the test did not detect a valid
	// environment meeting the test assumptions.
	//
	// This covers:
	//   - a JUnit4 or JUnit5 assumption failure in the body of a test,
	//     from Assume.assumeThat(...) and similar methods.
	//   - Use of the GTEST_SKIP() macro within the body of a test.
	//   - Golang's t.Skip(...) in the body of a test.
	SkippedReason_SKIPPED_BY_TEST_BODY SkippedReason_Kind = 2
	// Used to indicate the test was skipped due to presubmit demotion
	// (e.g. because the test was too flaky).
	//
	// You must specify a human-readable detail message if you use this status.
	// Please explain the criteria that was met and how the user should get the
	// test undemoted or reference a link that explains more.
	SkippedReason_DEMOTED SkippedReason_Kind = 3
	// The test was skipped by some other reason.
	//
	// This includes:
	// - Blink web tests disabled in an expectation file.
	//
	// You must specify a human-readable detail message if you use this status.
	SkippedReason_OTHER SkippedReason_Kind = 4
)

// Enum value maps for SkippedReason_Kind.
var (
	SkippedReason_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "DISABLED_AT_DECLARATION",
		2: "SKIPPED_BY_TEST_BODY",
		3: "DEMOTED",
		4: "OTHER",
	}
	SkippedReason_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED":        0,
		"DISABLED_AT_DECLARATION": 1,
		"SKIPPED_BY_TEST_BODY":    2,
		"DEMOTED":                 3,
		"OTHER":                   4,
	}
)

func (x SkippedReason_Kind) Enum() *SkippedReason_Kind {
	p := new(SkippedReason_Kind)
	*p = x
	return p
}

func (x SkippedReason_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SkippedReason_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[4].Descriptor()
}

func (SkippedReason_Kind) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[4]
}

func (x SkippedReason_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SkippedReason_Kind.Descriptor instead.
func (SkippedReason_Kind) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{1, 0}
}

// An enumeration of web test status values.
type WebTest_Status int32

const (
	// Status was not specified.
	// Not to be used in actual test results; serves as a default value for an
	// unset field.
	WebTest_STATUS_UNSPECIFIED WebTest_Status = 0
	// The test case has passed.
	WebTest_PASS WebTest_Status = 1
	// The test case has failed.
	WebTest_FAIL WebTest_Status = 2
	// The test case has crashed during execution.
	WebTest_CRASH WebTest_Status = 3
	// The test timed out.
	WebTest_TIMEOUT WebTest_Status = 4
	// The test case did not execute.
	WebTest_SKIP WebTest_Status = 5
)

// Enum value maps for WebTest_Status.
var (
	WebTest_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PASS",
		2: "FAIL",
		3: "CRASH",
		4: "TIMEOUT",
		5: "SKIP",
	}
	WebTest_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PASS":               1,
		"FAIL":               2,
		"CRASH":              3,
		"TIMEOUT":            4,
		"SKIP":               5,
	}
)

func (x WebTest_Status) Enum() *WebTest_Status {
	p := new(WebTest_Status)
	*p = x
	return p
}

func (x WebTest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WebTest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[5].Descriptor()
}

func (WebTest_Status) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes[5]
}

func (x WebTest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WebTest_Status.Descriptor instead.
func (WebTest_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{3, 0}
}

// A result of a functional test case, representing a single execution attempt.
// Often a single test case is executed multiple times (attempts or runs) and
// has multiple results. Test results are associated with a RootInvocation and
// a WorkUnit that represents the execution context (like a swarming task
// or build step).
//
// This message includes details about the test identity, its execution status/result,
// timing, and potentially failure details.
// This message does not specify the test id.
// It should be available in the message that embeds this message.
//
// Next id: 23.
type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the resource name of the test result. You can use it to refer
	// to this test result in RPCs like ResultDB.GetTestResult.
	// The format is:
	// "rootinvocations/{ROOT_INVOCATION_ID}/workunits/{WORK_UNIT_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}".
	// Note that URL_ESCAPED_TEST_ID uses the flat test ID format.
	//
	// This field is output only, meaning it's assigned by the server.
	// Note: while ResultDB is being updated, a legacy name format that is different to the above may be returned.  This
	// legacy format will also be accepted anywhere the updated format is accepted so they are functionally equivalent.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The structured test identifier.
	//
	// Uniquely identifies the test that was run, including the specific way of running that
	// test, e.g. build configuration, CPU architecture, OS.
	//
	// When uploading results, this should be specified in preference
	// to test_id and variant. (Uploading test_id and variant is supported only for
	// legacy uploaders).
	TestIdStructured *TestIdentifier `protobuf:"bytes,19,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// A unique identifier of the test in a LUCI project, excluding variant.
	// Regex: ^[[::print::]]{1,512}$
	//
	// This is the flat-form encoding of the structured test variant ID above,
	// excluding information about the specific way of running test (e.g. build configuration,
	// CPU architecture). Such information is captured separately in the `variant` field below.
	//
	// See TestIdentifier for details how a structured test identifier is converted
	// to flat test ID.
	//
	// Output only. (Except for legacy uploaders.)
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// This identifies the specific test result within a given invocation and test ID.
	// It's needed because a single test might run multiple times (e.g., retries).
	// This ID should be unique for a given test within the invocation.
	// Test runners or result uploaders typically generate this ID.
	// This forms part of the name (or primary key) of the test result:
	// (root_invocation_id, test_id, result_id)
	// The format follows the regex: ^[a-z0-9\-_.]{1,32}$
	ResultId string `protobuf:"bytes,3,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. build configuration, CPU architecture, OS.
	//
	// Output only. (Except for legacy uploaders.)
	Variant *Variant `protobuf:"bytes,4,opt,name=variant,proto3" json:"variant,omitempty"`
	// DEPRECATED: Replaced by `status_v2` enum.
	//
	// Whether the result of test case execution is expected.
	// In a typical Chromium CL, 99%+ of test results are expected.
	// Users are typically interested only in the unexpected results.
	//
	// An unexpected result != test case failure. There are test cases that are
	// expected to fail/skip/crash. The test harness compares the actual status
	// with the expected one(s) and this field is the result of the comparison.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
	Expected bool `protobuf:"varint,5,opt,name=expected,proto3" json:"expected,omitempty"`
	// DEPRECATED: Replaced by `status_v2` enum.
	//
	// Machine-readable status of the test case.
	// MUST NOT be STATUS_UNSPECIFIED.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
	Status TestStatus `protobuf:"varint,6,opt,name=status,proto3,enum=luci.resultdb.v1.TestStatus" json:"status,omitempty"`
	// Machine-readable status of the test case (v2).
	// MUST NOT be STATUS_UNSPECIFIED.
	StatusV2 TestResult_Status `protobuf:"varint,20,opt,name=status_v2,json=statusV2,proto3,enum=luci.resultdb.v1.TestResult_Status" json:"status_v2,omitempty"`
	// Human-readable explanation of the result, in HTML.
	// MUST be sanitized before rendering in the browser.
	//
	// The size of the summary must be equal to or smaller than 4096 bytes in
	// UTF-8.
	//
	// Supports artifact embedding using custom tags:
	//   - <text-artifact> renders contents of an artifact as text.
	//     Usage:
	//   - To embed result level artifact: <text-artifact
	//     artifact-id="<artifact_id>">
	//   - To embed invocation level artifact: <text-artifact
	//     artifact-id="<artifact_id>" inv-level>
	SummaryHtml string `protobuf:"bytes,7,opt,name=summary_html,json=summaryHtml,proto3" json:"summary_html,omitempty"`
	// The point in time when the test case started to execute.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the test case execution.
	// MUST be equal to or greater than 0.
	Duration *durationpb.Duration `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	// Metadata for this test result.
	// It might describe this particular execution or the test case.
	// A key can be repeated.
	Tags []*StringPair `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	// This is a SHA256 hash of the `test_id_structured.module_variant` key-value pairs,
	// encoded as hex.
	//
	// It provides a consistent way to identify unique variants for grouping and
	// analysis.
	//
	// hex(sha256(sorted(”.join('%s:%s\n' for k, v in variant.items()))))
	//
	// For legacy test results which do not upload the test_id_structured field, the
	// module_variant field is equivalent to the legacy `variant` field, and thus
	// this field is effectively a hash of the `variant` field.
	//
	// This field is output only.
	VariantHash string `protobuf:"bytes,12,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// This holds metadata about the test code itself, like its source code location,
	// captured at the time the test was executed.
	TestMetadata *TestMetadata `protobuf:"bytes,13,opt,name=test_metadata,json=testMetadata,proto3" json:"test_metadata,omitempty"`
	// This provides structured information about why a test failed.
	// MUST be set (and only set) when status_v2 is FAILED.
	FailureReason *FailureReason `protobuf:"bytes,14,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// Arbitrary JSON object that contains structured, domain-specific properties
	// of the test result.
	//
	// As well as allowing more structure than tags, it will be exported to BigQuery
	// as a JSON field allowing faster querying than tags.
	//
	// The serialized size must be <= 8 KB.
	Properties *structpb.Struct `protobuf:"bytes,15,opt,name=properties,proto3" json:"properties,omitempty"`
	// Whether the test result has been masked so that it includes only metadata.
	// The metadata fields for a TestResult are:
	// * name
	// * test_id_structured
	// * test_id
	// * variant
	// * result_id
	// * status_v2
	// * start_time
	// * duration
	// * variant_hash
	// * failure_reason.kind
	// * summary_html
	// * failure_reason.primary_error_message (truncated to 140 characters)
	// * skipped_reason
	// * skip_reason (deprecated)
	// * expected (deprecated)
	// * status (deprecated)
	//
	// This field is output only.
	IsMasked bool `protobuf:"varint,16,opt,name=is_masked,json=isMasked,proto3" json:"is_masked,omitempty"`
	// Deprecated: Replaced by skipped_reason message.
	// Reasoning behind a test skip, in machine-readable form.
	// Used to assist downstream analyses, such as automatic bug-filing.
	// MUST not be set unless status is SKIP.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
	SkipReason SkipReason `protobuf:"varint,18,opt,name=skip_reason,json=skipReason,proto3,enum=luci.resultdb.v1.SkipReason" json:"skip_reason,omitempty"`
	// Reason why a test was skipped.
	// The contents of this message should help the user answer:
	// Why was my test skipped? What can I do to stop it being skipped?
	//
	// MUST be set (and only set) when status_v2 is SKIPPED.
	SkippedReason *SkippedReason `protobuf:"bytes,21,opt,name=skipped_reason,json=skippedReason,proto3" json:"skipped_reason,omitempty"`
	// Test result framework-specific data model elements.
	FrameworkExtensions *FrameworkExtensions `protobuf:"bytes,22,opt,name=framework_extensions,json=frameworkExtensions,proto3" json:"framework_extensions,omitempty"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{0}
}

func (x *TestResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResult) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *TestResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestResult) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *TestResult) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
func (x *TestResult) GetExpected() bool {
	if x != nil {
		return x.Expected
	}
	return false
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
func (x *TestResult) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_STATUS_UNSPECIFIED
}

func (x *TestResult) GetStatusV2() TestResult_Status {
	if x != nil {
		return x.StatusV2
	}
	return TestResult_STATUS_UNSPECIFIED
}

func (x *TestResult) GetSummaryHtml() string {
	if x != nil {
		return x.SummaryHtml
	}
	return ""
}

func (x *TestResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestResult) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TestResult) GetTags() []*StringPair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TestResult) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestResult) GetTestMetadata() *TestMetadata {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

func (x *TestResult) GetFailureReason() *FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

func (x *TestResult) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *TestResult) GetIsMasked() bool {
	if x != nil {
		return x.IsMasked
	}
	return false
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/test_result.proto.
func (x *TestResult) GetSkipReason() SkipReason {
	if x != nil {
		return x.SkipReason
	}
	return SkipReason_SKIP_REASON_UNSPECIFIED
}

func (x *TestResult) GetSkippedReason() *SkippedReason {
	if x != nil {
		return x.SkippedReason
	}
	return nil
}

func (x *TestResult) GetFrameworkExtensions() *FrameworkExtensions {
	if x != nil {
		return x.FrameworkExtensions
	}
	return nil
}

// SkippedReason helps a developer answer the questions:
// - Why was this test skipped?
// - How do I stop it being skipped?
type SkippedReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind SkippedReason_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=luci.resultdb.v1.SkippedReason_Kind" json:"kind,omitempty"`
	// A human-readable message providing more context or details about why the
	// test was skipped. Limited to 1024 bytes of printable UTF-8.
	//
	// Required for skip kinds DEMOTED and OTHER, optional otherwise.
	//
	// For DISABLED_AT_DECLARATION, useful information would be:
	//   - For Tast, the Tast-provided skip reason (detailing the declared
	//     hardware/software dependencies that were unmet).
	//
	// For SKIPPED_BY_TEST_BODY, useful information would be:
	//   - For JUnit, the JUnit assumption failure that led to the skip.
	//   - For GoogleTest, the file and line where the GTEST_SKIP() macro was
	//     invoked and the message passed to it.
	//
	// For DEMOTED and OTHER, the criteria that led to the skip
	// and how the user might get the test running again.
	ReasonMessage string `protobuf:"bytes,2,opt,name=reason_message,json=reasonMessage,proto3" json:"reason_message,omitempty"`
}

func (x *SkippedReason) Reset() {
	*x = SkippedReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkippedReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkippedReason) ProtoMessage() {}

func (x *SkippedReason) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkippedReason.ProtoReflect.Descriptor instead.
func (*SkippedReason) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{1}
}

func (x *SkippedReason) GetKind() SkippedReason_Kind {
	if x != nil {
		return x.Kind
	}
	return SkippedReason_KIND_UNSPECIFIED
}

func (x *SkippedReason) GetReasonMessage() string {
	if x != nil {
		return x.ReasonMessage
	}
	return ""
}

// Additional information about the test result in source test
// framework-specific format. Data fields may be added here
// before there is sufficient examples to create a standardised
// representation, or to support bespoke harness-specific features.
type FrameworkExtensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The test status produced by the blink web test harness.
	// This field supports web test rebaselining.
	WebTest *WebTest `protobuf:"bytes,1,opt,name=web_test,json=webTest,proto3" json:"web_test,omitempty"`
}

func (x *FrameworkExtensions) Reset() {
	*x = FrameworkExtensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkExtensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkExtensions) ProtoMessage() {}

func (x *FrameworkExtensions) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkExtensions.ProtoReflect.Descriptor instead.
func (*FrameworkExtensions) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{2}
}

func (x *FrameworkExtensions) GetWebTest() *WebTest {
	if x != nil {
		return x.WebTest
	}
	return nil
}

// Web Platform Test specific result data.
type WebTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the test produced the expected result. Failed results may be
	// expected and passed results unexpected, depending on if we expected
	// the implementation (e.g. Blink) to conform with the web platform feature
	// at this time.
	// See https://chromium.googlesource.com/chromium/src/+/HEAD/docs/testing/web_test_expectations.md.
	// See https://web-platform-tests.org/tools/wptrunner/docs/expectation.html.
	IsExpected bool `protobuf:"varint,1,opt,name=is_expected,json=isExpected,proto3" json:"is_expected,omitempty"`
	// The status of the test result.
	Status WebTest_Status `protobuf:"varint,2,opt,name=status,proto3,enum=luci.resultdb.v1.WebTest_Status" json:"status,omitempty"`
}

func (x *WebTest) Reset() {
	*x = WebTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebTest) ProtoMessage() {}

func (x *WebTest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebTest.ProtoReflect.Descriptor instead.
func (*WebTest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{3}
}

func (x *WebTest) GetIsExpected() bool {
	if x != nil {
		return x.IsExpected
	}
	return false
}

func (x *WebTest) GetStatus() WebTest_Status {
	if x != nil {
		return x.Status
	}
	return WebTest_STATUS_UNSPECIFIED
}

// Indicates that the test subject (e.g., a ChangeList in Gerrit) should not
// be considered "at fault" for an failed result of a particular test variant.
// This is often used in presubmit checks (like CQ) to prevent blaming a CL
// for pre-existing or unrelated issues.
// Next ID: 10.
type TestExoneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be used to refer to this test exoneration, e.g. in
	// ResultDB.GetTestExoneration RPC.
	// Format:
	// invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/exonerations/{EXONERATION_ID}.
	// URL_ESCAPED_TEST_ID uses the flat test ID format.
	//
	// Output only.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The structured identifier of the test that is being exonerated.
	TestIdStructured *TestIdentifier `protobuf:"bytes,9,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// The flat test id of the test that is being exonerated.
	// Output only. (Except for legacy uploaders.)
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The variant of the test that is being exonerated.
	// Output only. (Except for legacy uploaders.)
	Variant *Variant `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// Identifies an exoneration in a given invocation and test id.
	// It is server-generated.
	ExonerationId string `protobuf:"bytes,4,opt,name=exoneration_id,json=exonerationId,proto3" json:"exoneration_id,omitempty"`
	// Humnan readable reasoning behind the exoneration, in HTML.
	// MUST be sanitized before rendering in the browser.
	ExplanationHtml string `protobuf:"bytes,5,opt,name=explanation_html,json=explanationHtml,proto3" json:"explanation_html,omitempty"`
	// SHA256 hash of the module variant key-value pairs, hex-encoded.
	// See variant_hash on TestResult for more details.
	// Output only.
	VariantHash string `protobuf:"bytes,6,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Reasoning behind the exoneration, in machine-readable form.
	// Used to assist downstream analyses, such as automatic bug-filing.
	// This allow detection of e.g. critical tests failing in presubmit,
	// even if they are being exonerated because they fail on other CLs.
	Reason ExonerationReason `protobuf:"varint,7,opt,name=reason,proto3,enum=luci.resultdb.v1.ExonerationReason" json:"reason,omitempty"`
	// Whether the test exoneration has been masked so that it includes only
	// metadata. The metadata fields for a TestExoneration are:
	// * name
	// * test_id_structured
	// * exoneration_id
	// * variant_hash
	// * explanation_html
	// * reason
	// * test_id (deprecated)
	// * variant (deprecated)
	//
	// This field is output only.
	IsMasked bool `protobuf:"varint,8,opt,name=is_masked,json=isMasked,proto3" json:"is_masked,omitempty"`
}

func (x *TestExoneration) Reset() {
	*x = TestExoneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestExoneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExoneration) ProtoMessage() {}

func (x *TestExoneration) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExoneration.ProtoReflect.Descriptor instead.
func (*TestExoneration) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP(), []int{4}
}

func (x *TestExoneration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestExoneration) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *TestExoneration) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestExoneration) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestExoneration) GetExonerationId() string {
	if x != nil {
		return x.ExonerationId
	}
	return ""
}

func (x *TestExoneration) GetExplanationHtml() string {
	if x != nil {
		return x.ExplanationHtml
	}
	return ""
}

func (x *TestExoneration) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestExoneration) GetReason() ExonerationReason {
	if x != nil {
		return x.Reason
	}
	return ExonerationReason_EXONERATION_REASON_UNSPECIFIED
}

func (x *TestExoneration) GetIsMasked() bool {
	if x != nil {
		return x.IsMasked
	}
	return false
}

var File_go_chromium_org_luci_resultdb_proto_v1_test_result_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x09, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03,
	0xe0, 0x41, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xe0, 0x41, 0x05, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xe0, 0x41,
	0x03, 0xe0, 0x41, 0x05, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x05, 0xe0, 0x41, 0x05, 0x18, 0x01, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x05,
	0xe0, 0x41, 0x05, 0x18, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x32, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x05, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x14, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x05, 0x4a,
	0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0x4b, 0x0a, 0x13, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x08,
	0x77, 0x65, 0x62, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x65, 0x62, 0x54, 0x65, 0x73, 0x74, 0x52, 0x07, 0x77, 0x65, 0x62, 0x54, 0x65,
	0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x65, 0x62, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x52, 0x41, 0x53, 0x48, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10,
	0x05, 0x22, 0xcb, 0x03, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x53, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x05, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41,
	0x03, 0xe0, 0x41, 0x05, 0x52, 0x0d, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x74, 0x6d, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0b,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x2a,
	0x5c, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x52, 0x41,
	0x53, 0x48, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x05, 0x1a, 0x02, 0x18, 0x01, 0x2a, 0x57, 0x0a,
	0x0a, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x4b, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x55, 0x54, 0x4f,
	0x4d, 0x41, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x4b, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x1a, 0x02, 0x18, 0x01, 0x2a, 0x8f, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x6f, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e,
	0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x43, 0x43, 0x55,
	0x52, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x53, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x04, 0x42, 0x50, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x3b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescData = file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDesc
)

func file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescData)
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_goTypes = []interface{}{
	(TestStatus)(0),               // 0: luci.resultdb.v1.TestStatus
	(SkipReason)(0),               // 1: luci.resultdb.v1.SkipReason
	(ExonerationReason)(0),        // 2: luci.resultdb.v1.ExonerationReason
	(TestResult_Status)(0),        // 3: luci.resultdb.v1.TestResult.Status
	(SkippedReason_Kind)(0),       // 4: luci.resultdb.v1.SkippedReason.Kind
	(WebTest_Status)(0),           // 5: luci.resultdb.v1.WebTest.Status
	(*TestResult)(nil),            // 6: luci.resultdb.v1.TestResult
	(*SkippedReason)(nil),         // 7: luci.resultdb.v1.SkippedReason
	(*FrameworkExtensions)(nil),   // 8: luci.resultdb.v1.FrameworkExtensions
	(*WebTest)(nil),               // 9: luci.resultdb.v1.WebTest
	(*TestExoneration)(nil),       // 10: luci.resultdb.v1.TestExoneration
	(*TestIdentifier)(nil),        // 11: luci.resultdb.v1.TestIdentifier
	(*Variant)(nil),               // 12: luci.resultdb.v1.Variant
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 14: google.protobuf.Duration
	(*StringPair)(nil),            // 15: luci.resultdb.v1.StringPair
	(*TestMetadata)(nil),          // 16: luci.resultdb.v1.TestMetadata
	(*FailureReason)(nil),         // 17: luci.resultdb.v1.FailureReason
	(*structpb.Struct)(nil),       // 18: google.protobuf.Struct
}
var file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_depIdxs = []int32{
	11, // 0: luci.resultdb.v1.TestResult.test_id_structured:type_name -> luci.resultdb.v1.TestIdentifier
	12, // 1: luci.resultdb.v1.TestResult.variant:type_name -> luci.resultdb.v1.Variant
	0,  // 2: luci.resultdb.v1.TestResult.status:type_name -> luci.resultdb.v1.TestStatus
	3,  // 3: luci.resultdb.v1.TestResult.status_v2:type_name -> luci.resultdb.v1.TestResult.Status
	13, // 4: luci.resultdb.v1.TestResult.start_time:type_name -> google.protobuf.Timestamp
	14, // 5: luci.resultdb.v1.TestResult.duration:type_name -> google.protobuf.Duration
	15, // 6: luci.resultdb.v1.TestResult.tags:type_name -> luci.resultdb.v1.StringPair
	16, // 7: luci.resultdb.v1.TestResult.test_metadata:type_name -> luci.resultdb.v1.TestMetadata
	17, // 8: luci.resultdb.v1.TestResult.failure_reason:type_name -> luci.resultdb.v1.FailureReason
	18, // 9: luci.resultdb.v1.TestResult.properties:type_name -> google.protobuf.Struct
	1,  // 10: luci.resultdb.v1.TestResult.skip_reason:type_name -> luci.resultdb.v1.SkipReason
	7,  // 11: luci.resultdb.v1.TestResult.skipped_reason:type_name -> luci.resultdb.v1.SkippedReason
	8,  // 12: luci.resultdb.v1.TestResult.framework_extensions:type_name -> luci.resultdb.v1.FrameworkExtensions
	4,  // 13: luci.resultdb.v1.SkippedReason.kind:type_name -> luci.resultdb.v1.SkippedReason.Kind
	9,  // 14: luci.resultdb.v1.FrameworkExtensions.web_test:type_name -> luci.resultdb.v1.WebTest
	5,  // 15: luci.resultdb.v1.WebTest.status:type_name -> luci.resultdb.v1.WebTest.Status
	11, // 16: luci.resultdb.v1.TestExoneration.test_id_structured:type_name -> luci.resultdb.v1.TestIdentifier
	12, // 17: luci.resultdb.v1.TestExoneration.variant:type_name -> luci.resultdb.v1.Variant
	2,  // 18: luci.resultdb.v1.TestExoneration.reason:type_name -> luci.resultdb.v1.ExonerationReason
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_test_result_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_metadata_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkippedReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkExtensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestExoneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_test_result_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_rawDesc = nil
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_depIdxs = nil
}
