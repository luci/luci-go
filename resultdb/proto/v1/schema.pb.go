// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/resultdb/proto/v1/schema.proto

package resultpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSchemaRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the schema to retrieve.
	// Currently there is only a single schema resource and its name is "schemas/global".
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSchemaRequest) Reset() {
	*x = GetSchemaRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchemaRequest) ProtoMessage() {}

func (x *GetSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *GetSchemaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Schema contains information about the schema used for test results.
type Schema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the schema.
	// Format: "schemas/global".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schemes available for use in test identifiers.
	Schemes       []*Scheme `protobuf:"bytes,2,rep,name=schemes,proto3" json:"schemes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Schema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema) GetSchemes() []*Scheme {
	if x != nil {
		return x.Schemes
	}
	return nil
}

// A scheme represents a kind of test type. For example, a JUnit tests
// or Google Tests. Schemes control how tests with that type are
// presented on the UI.
//
// Tests are associated with a type at the module level, via the module
// type field.
//
// Schemes are ResultDB deployment-level configuration.
//
// Next id: 6.
type Scheme struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier for the scheme, e.g. 'junit'.
	//
	// Limited to ^[a-z][a-z0-9]{0,19}$.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human readable name for the scheme, describing the test type.
	// For example, "JUnit" or "Web Tests".
	//
	// Please pay attention to capitalisation (should be similar to examples above)
	// and avoid any punctuation.
	HumanReadableName string `protobuf:"bytes,3,opt,name=human_readable_name,json=humanReadableName,proto3" json:"human_readable_name,omitempty"`
	// The coarse level in the test hierarchy. Optional.
	//
	// If it is set, this level is enabled and a value for this hierarchy level must be set
	// for all test results using this scheme.
	// If it is not set, a value for this hierarchy level must NOT be set for test results
	// using this scheme.
	//
	// Enabling or disabling a hierarchy level after it has been created is not permitted unless
	// no data has been uploaded for the scheme.
	//
	// If only one of coarse and fine hierarchy should be enabled, enable the fine hierarchy
	// only.
	Coarse *Scheme_Level `protobuf:"bytes,4,opt,name=coarse,proto3" json:"coarse,omitempty"`
	// The fine level in the test hierarchy. Optional.
	//
	// If it is set, this level is enabled and a value for this hierarchy level must be set
	// for all test results using this scheme.
	// If it is not set, a value for this hierarchy level must NOT be set for test results
	// using this scheme.
	//
	// Enabling or disabling a hierarchy level on a scheme after it is already being used
	// will result in existing uploads breaking and break presentation of already uploaded
	// data. Please use extreme caution if doing this; generally, it is better to define
	// a new scheme instead.
	Fine *Scheme_Level `protobuf:"bytes,5,opt,name=fine,proto3" json:"fine,omitempty"`
	// The case level in the test hierarchy. This is the finest level. Required.
	Case          *Scheme_Level `protobuf:"bytes,6,opt,name=case,proto3" json:"case,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scheme) Reset() {
	*x = Scheme{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme) ProtoMessage() {}

func (x *Scheme) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme.ProtoReflect.Descriptor instead.
func (*Scheme) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Scheme) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Scheme) GetHumanReadableName() string {
	if x != nil {
		return x.HumanReadableName
	}
	return ""
}

func (x *Scheme) GetCoarse() *Scheme_Level {
	if x != nil {
		return x.Coarse
	}
	return nil
}

func (x *Scheme) GetFine() *Scheme_Level {
	if x != nil {
		return x.Fine
	}
	return nil
}

func (x *Scheme) GetCase() *Scheme_Level {
	if x != nil {
		return x.Case
	}
	return nil
}

// Configuration for a level of test hierarchy.
type Scheme_Level struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The human readable name for the hierarchy level, as it should appear on the UI.
	// For example, "Package", "Class" or "Method".
	//
	// Please pay attention to capitalisation (should be similar to examples above)
	// and avoid any punctuation.
	//
	// Required.
	HumanReadableName string `protobuf:"bytes,1,opt,name=human_readable_name,json=humanReadableName,proto3" json:"human_readable_name,omitempty"`
	// The regexp that defines valid values for this field. The value here will be
	// wrapped in ^...$. Validation will apply to all newly uploaded test results.
	// Use RE2 syntax.
	//
	// If blank, all values are taken to be valid.
	//
	// Please take care changing this value, as uploads may start to fail.
	ValidationRegexp string `protobuf:"bytes,2,opt,name=validation_regexp,json=validationRegexp,proto3" json:"validation_regexp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Scheme_Level) Reset() {
	*x = Scheme_Level{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scheme_Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme_Level) ProtoMessage() {}

func (x *Scheme_Level) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme_Level.ProtoReflect.Descriptor instead.
func (*Scheme_Level) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Scheme_Level) GetHumanReadableName() string {
	if x != nil {
		return x.HumanReadableName
	}
	return ""
}

func (x *Scheme_Level) GetValidationRegexp() string {
	if x != nil {
		return x.ValidationRegexp
	}
	return ""
}

var File_go_chromium_org_luci_resultdb_proto_v1_schema_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDesc = string([]byte{
	0x0a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x22, 0x26, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x50, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x73, 0x22, 0xce, 0x02, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x63, 0x6f,
	0x61, 0x72, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x2e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x04, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x73, 0x65, 0x1a, 0x64, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x32, 0x50, 0x0a, 0x07, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x45, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x22, 0x00, 0x42, 0x50, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescData []byte
)

func file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_goTypes = []any{
	(*GetSchemaRequest)(nil), // 0: luci.resultdb.v1.GetSchemaRequest
	(*Schema)(nil),           // 1: luci.resultdb.v1.Schema
	(*Scheme)(nil),           // 2: luci.resultdb.v1.Scheme
	(*Scheme_Level)(nil),     // 3: luci.resultdb.v1.Scheme.Level
}
var file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_depIdxs = []int32{
	2, // 0: luci.resultdb.v1.Schema.schemes:type_name -> luci.resultdb.v1.Scheme
	3, // 1: luci.resultdb.v1.Scheme.coarse:type_name -> luci.resultdb.v1.Scheme.Level
	3, // 2: luci.resultdb.v1.Scheme.fine:type_name -> luci.resultdb.v1.Scheme.Level
	3, // 3: luci.resultdb.v1.Scheme.case:type_name -> luci.resultdb.v1.Scheme.Level
	0, // 4: luci.resultdb.v1.Schemas.Get:input_type -> luci.resultdb.v1.GetSchemaRequest
	1, // 5: luci.resultdb.v1.Schemas.Get:output_type -> luci.resultdb.v1.Schema
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_schema_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_schema_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_schema_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchemasClient is the client API for Schemas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchemasClient interface {
	// Reads information about the test result schema used on this ResultDB deployment.
	Get(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error)
}
type schemasPRPCClient struct {
	client *prpc.Client
}

func NewSchemasPRPCClient(client *prpc.Client) SchemasClient {
	return &schemasPRPCClient{client}
}

func (c *schemasPRPCClient) Get(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.client.Call(ctx, "luci.resultdb.v1.Schemas", "Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type schemasClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemasClient(cc grpc.ClientConnInterface) SchemasClient {
	return &schemasClient{cc}
}

func (c *schemasClient) Get(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Schemas/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemasServer is the server API for Schemas service.
type SchemasServer interface {
	// Reads information about the test result schema used on this ResultDB deployment.
	Get(context.Context, *GetSchemaRequest) (*Schema, error)
}

// UnimplementedSchemasServer can be embedded to have forward compatible implementations.
type UnimplementedSchemasServer struct {
}

func (*UnimplementedSchemasServer) Get(context.Context, *GetSchemaRequest) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterSchemasServer(s prpc.Registrar, srv SchemasServer) {
	s.RegisterService(&_Schemas_serviceDesc, srv)
}

func _Schemas_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Schemas/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasServer).Get(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schemas_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.resultdb.v1.Schemas",
	HandlerType: (*SchemasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Schemas_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/resultdb/proto/v1/schema.proto",
}
