// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/resultdb/proto/v1/test_verdict.proto

package resultpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of a test verdict.
// References to test statuses (pass, fail, skip, infra_fail) in
// the enum descriptions refer to TestResultStatusV2 values.
type TestVerdict_Status int32

const (
	// A test verdict must not have this status.
	// This is only used when filtering verdicts.
	TestVerdict_STATUS_UNSPECIFIED TestVerdict_Status = 0
	// The test variant has only failing result(s), after excluding
	// skips and infra fails. It has at least one such failing result.
	TestVerdict_FAILED TestVerdict_Status = 10
	// The test variant has only infra failed results.
	// This means there was a problem obtaining a result for the test.
	TestVerdict_INFRA_FAILED TestVerdict_Status = 20
	// The test variant has both passing and failing results.
	TestVerdict_FLAKY TestVerdict_Status = 30
	// The test variant has only passing result(s), after excluding
	// skips and infra fails. It has at least one such passing result.
	TestVerdict_PASSED TestVerdict_Status = 40
	// The test variant has at least one skipped result. It has
	// no passing or failing results.
	TestVerdict_SKIPPED TestVerdict_Status = 50
)

// Enum value maps for TestVerdict_Status.
var (
	TestVerdict_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		10: "FAILED",
		20: "INFRA_FAILED",
		30: "FLAKY",
		40: "PASSED",
		50: "SKIPPED",
	}
	TestVerdict_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"FAILED":             10,
		"INFRA_FAILED":       20,
		"FLAKY":              30,
		"PASSED":             40,
		"SKIPPED":            50,
	}
)

func (x TestVerdict_Status) Enum() *TestVerdict_Status {
	p := new(TestVerdict_Status)
	*p = x
	return p
}

func (x TestVerdict_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestVerdict_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_enumTypes[0].Descriptor()
}

func (TestVerdict_Status) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_enumTypes[0]
}

func (x TestVerdict_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestVerdict_Status.Descriptor instead.
func (TestVerdict_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescGZIP(), []int{0, 0}
}

// Overrides applying to the test verdict.
type TestVerdict_StatusOverride int32

const (
	TestVerdict_STATUS_OVERRIDE_UNSPECIFIED TestVerdict_StatusOverride = 0
	// The test verdict is not overridden.
	//
	// To confirm a test is not exonerated prefer to check it is not EXONERATED
	// rather than that the override is NONE, as this is safe in case of
	// enum extension.
	TestVerdict_NONE TestVerdict_StatusOverride = 1
	// The test variant has one or more exonerations, and the
	// test verdict status was FAILED or INFRA_FAILED.
	TestVerdict_EXONERATED TestVerdict_StatusOverride = 2
)

// Enum value maps for TestVerdict_StatusOverride.
var (
	TestVerdict_StatusOverride_name = map[int32]string{
		0: "STATUS_OVERRIDE_UNSPECIFIED",
		1: "NONE",
		2: "EXONERATED",
	}
	TestVerdict_StatusOverride_value = map[string]int32{
		"STATUS_OVERRIDE_UNSPECIFIED": 0,
		"NONE":                        1,
		"EXONERATED":                  2,
	}
)

func (x TestVerdict_StatusOverride) Enum() *TestVerdict_StatusOverride {
	p := new(TestVerdict_StatusOverride)
	*p = x
	return p
}

func (x TestVerdict_StatusOverride) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestVerdict_StatusOverride) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_enumTypes[1].Descriptor()
}

func (TestVerdict_StatusOverride) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_enumTypes[1]
}

func (x TestVerdict_StatusOverride) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestVerdict_StatusOverride.Descriptor instead.
func (TestVerdict_StatusOverride) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescGZIP(), []int{0, 1}
}

// A test verdict. The outcome of a test variant in an invocation.
// As each test variant may be attempted multiple times within an invocation,
// a test verdict can encapsulate multiple test results.
type TestVerdict struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The structured test variant identifier.
	TestIdStructured *TestIdentifier `protobuf:"bytes,1,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// The flat test id, a unique identifier of the test in a LUCI project.
	// Regex: ^[[::print::]]{1,512}$
	//
	// This is the flat-form encoding of the test component of the structured test variant ID above.
	// See TestVariantIdentifier for details how a structured test identifier is converted
	// to flat test ID.
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The status of the test verdict, e.g. failed, flaky, skipped.
	Status TestVerdict_Status `protobuf:"varint,5,opt,name=status,proto3,enum=luci.resultdb.v1.TestVerdict_Status" json:"status,omitempty"`
	// The status override, e.g. exonerated.
	StatusOverride TestVerdict_StatusOverride `protobuf:"varint,6,opt,name=status_override,json=statusOverride,proto3,enum=luci.resultdb.v1.TestVerdict_StatusOverride" json:"status_override,omitempty"`
	// The test results for the test verdict.
	Results []*TestResult `protobuf:"bytes,7,rep,name=results,proto3" json:"results,omitempty"`
	// Test exonerations.
	Exonerations []*TestExoneration `protobuf:"bytes,8,rep,name=exonerations,proto3" json:"exonerations,omitempty"`
	// Information about the test at the time of its execution.
	//
	// All test results of the same test variant should report the same test
	// metadata. This RPC relies on this rule and returns test metadata from
	// *arbitrary* result of the test variant.
	TestMetadata  *TestMetadata `protobuf:"bytes,9,opt,name=test_metadata,json=testMetadata,proto3" json:"test_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdict) Reset() {
	*x = TestVerdict{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdict) ProtoMessage() {}

func (x *TestVerdict) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdict.ProtoReflect.Descriptor instead.
func (*TestVerdict) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescGZIP(), []int{0}
}

func (x *TestVerdict) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *TestVerdict) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVerdict) GetStatus() TestVerdict_Status {
	if x != nil {
		return x.Status
	}
	return TestVerdict_STATUS_UNSPECIFIED
}

func (x *TestVerdict) GetStatusOverride() TestVerdict_StatusOverride {
	if x != nil {
		return x.StatusOverride
	}
	return TestVerdict_STATUS_OVERRIDE_UNSPECIFIED
}

func (x *TestVerdict) GetResults() []*TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TestVerdict) GetExonerations() []*TestExoneration {
	if x != nil {
		return x.Exonerations
	}
	return nil
}

func (x *TestVerdict) GetTestMetadata() *TestMetadata {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

var File_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDesc = string([]byte{
	0x0a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x05, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x55, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x45, 0x0a, 0x0c, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x46,
	0x52, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4c, 0x41, 0x4b, 0x59, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44,
	0x10, 0x28, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x32, 0x22,
	0x4b, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x52, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x42, 0x50, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x3b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescData []byte
)

func file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_goTypes = []any{
	(TestVerdict_Status)(0),         // 0: luci.resultdb.v1.TestVerdict.Status
	(TestVerdict_StatusOverride)(0), // 1: luci.resultdb.v1.TestVerdict.StatusOverride
	(*TestVerdict)(nil),             // 2: luci.resultdb.v1.TestVerdict
	(*TestIdentifier)(nil),          // 3: luci.resultdb.v1.TestIdentifier
	(*TestResult)(nil),              // 4: luci.resultdb.v1.TestResult
	(*TestExoneration)(nil),         // 5: luci.resultdb.v1.TestExoneration
	(*TestMetadata)(nil),            // 6: luci.resultdb.v1.TestMetadata
}
var file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_depIdxs = []int32{
	3, // 0: luci.resultdb.v1.TestVerdict.test_id_structured:type_name -> luci.resultdb.v1.TestIdentifier
	0, // 1: luci.resultdb.v1.TestVerdict.status:type_name -> luci.resultdb.v1.TestVerdict.Status
	1, // 2: luci.resultdb.v1.TestVerdict.status_override:type_name -> luci.resultdb.v1.TestVerdict.StatusOverride
	4, // 3: luci.resultdb.v1.TestVerdict.results:type_name -> luci.resultdb.v1.TestResult
	5, // 4: luci.resultdb.v1.TestVerdict.exonerations:type_name -> luci.resultdb.v1.TestExoneration
	6, // 5: luci.resultdb.v1.TestVerdict.test_metadata:type_name -> luci.resultdb.v1.TestMetadata
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_metadata_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_depIdxs = nil
}
