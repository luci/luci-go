// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.32.0
// source: go.chromium.org/luci/resultdb/proto/v1/invocation.proto

package resultpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Invocation_State int32

const (
	// The default value. This value is used if the state is omitted.
	Invocation_STATE_UNSPECIFIED Invocation_State = 0
	// The invocation was created and accepts new results.
	Invocation_ACTIVE Invocation_State = 1
	// The invocation is in the process of transitioning into FINALIZED state.
	// This will happen automatically soon after all of its directly or
	// indirectly included invocations become inactive.
	Invocation_FINALIZING Invocation_State = 2
	// The invocation is immutable and no longer accepts new results nor
	// inclusions directly or indirectly.
	Invocation_FINALIZED Invocation_State = 3
)

// Enum value maps for Invocation_State.
var (
	Invocation_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "FINALIZING",
		3: "FINALIZED",
	}
	Invocation_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"FINALIZING":        2,
		"FINALIZED":         3,
	}
)

func (x Invocation_State) Enum() *Invocation_State {
	p := new(Invocation_State)
	*p = x
	return p
}

func (x Invocation_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Invocation_State) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_enumTypes[0].Descriptor()
}

func (Invocation_State) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_enumTypes[0]
}

func (x Invocation_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Invocation_State.Descriptor instead.
func (Invocation_State) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP(), []int{0, 0}
}

// A conceptual container of results. Immutable once finalized.
// It represents all results of some computation; examples: swarming task,
// buildbucket build, CQ attempt.
// Composable: can include other invocations, see inclusion.proto.
//
// Next id: 26.
type Invocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be used to refer to this invocation, e.g. in ResultDB.GetInvocation
	// RPC.
	// Format: invocations/{INVOCATION_ID}
	// See also https://aip.dev/122.
	//
	// Output only.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Current state of the invocation.
	//
	// At creation time this can be set to FINALIZING e.g. if this invocation is
	// a simple wrapper of another and will itself not be modified.
	//
	// When updating invocation, this can be set to FINALIZING. If set, this will trigger
	// the finalization process of the invocation. This is useful for the cases when
	// we want the update and the finalization to happen in the same transaction to
	// prevent update-update race. This will guarantee eventual consistency.
	//
	// In other cases this is an output only field.
	State Invocation_State `protobuf:"varint,2,opt,name=state,proto3,enum=luci.resultdb.v1.Invocation_State" json:"state,omitempty"`
	// When the invocation was created.
	// Output only.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Invocation-level string key-value pairs.
	// A key can be repeated.
	Tags []*StringPair `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// When the invocation started to finalize, i.e. transitioned to FINALIZING
	// state. This means the invocation is immutable but directly or indirectly
	// included invocations may not be.
	//
	// Output only.
	FinalizeStartTime *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=finalize_start_time,json=finalizeStartTime,proto3" json:"finalize_start_time,omitempty"`
	// When the invocation was finalized, i.e. transitioned to FINALIZED state.
	// If this field is set, implies that the invocation is finalized. This
	// means the invocation and directly or indirectly included invocations
	// are immutable.
	//
	// Output only.
	FinalizeTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=finalize_time,json=finalizeTime,proto3" json:"finalize_time,omitempty"`
	// Timestamp when the invocation will be forcefully finalized.
	// Can be extended with UpdateInvocation until finalized.
	Deadline *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// Names of invocations included into this one. Overall results of this
	// invocation is a UNION of results directly included into this invocation
	// and results from the included invocations, recursively.
	// For example, a Buildbucket build invocation may include invocations of its
	// child swarming tasks and represent overall result of the build,
	// encapsulating the internal structure of the build.
	//
	// The graph is directed.
	// There can be at most one edge between a given pair of invocations.
	// The shape of the graph does not matter. What matters is only the set of
	// reachable invocations. Thus cycles are allowed and are noop.
	//
	// QueryTestResults returns test results from the transitive closure of
	// invocations.
	//
	// This field can be set under Recorder.CreateInvocationsRequest to include
	// existing invocations at the moment of invocation creation.
	// New invocations created in the same batch (via
	// Recorder.BatchCreateInvocationsRequest) are also allowed.
	// Otherwise, this field is to be treated as Output only.
	//
	// To modify included invocations, use Recorder.UpdateIncludedInvocations in
	// all other cases.
	IncludedInvocations []string `protobuf:"bytes,8,rep,name=included_invocations,json=includedInvocations,proto3" json:"included_invocations,omitempty"`
	// Whether this invocation is a root of the invocation graph for export purposes.
	//
	// To help downstream systems (like LUCI Analysis) make sense of test results,
	// and gather overall context for a result, ResultDB data export is centered
	// around export roots.
	// The export roots typically represent a top-level buildbucket build, like a
	// postsubmit build or presubmit tryjob. Test results are only exported if
	// they are included from a root. They may be exported multiple times of they
	// are included by multiple roots (e.g. in case of re-used test results).
	// Re-used test results can be identified because the parent invocation of the
	// test result will be the same even though the export root will be different.
	//
	// N.B. Export roots do not affect legacy BigQuery exports configured by the
	// BigQueryExports field.
	IsExportRoot bool `protobuf:"varint,21,opt,name=is_export_root,json=isExportRoot,proto3" json:"is_export_root,omitempty"`
	// The module this invocation is reporting results for.
	//
	// If set, test results and artifacts uploaded to this invocation will need to
	// match this module.
	//
	// Once this field is set to a non-empty value, it becomes invariant and may
	// not be changed.
	ModuleId *ModuleIdentifier `protobuf:"bytes,25,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// bigquery_exports indicates what BigQuery table(s) that results in this
	// invocation should export to.
	//
	// Legacy feature: Prefer to use LUCI Analysis exports instead.
	BigqueryExports []*BigQueryExport `protobuf:"bytes,9,rep,name=bigquery_exports,json=bigqueryExports,proto3" json:"bigquery_exports,omitempty"`
	// LUCI identity (e.g. "user:<email>") who created the invocation.
	// Typically, a LUCI service account (e.g.
	// "user:cr-buildbucket@appspot.gserviceaccount.com"), but can also be a user
	// (e.g. "user:johndoe@example.com").
	//
	// Output only.
	CreatedBy string `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Full name of the resource that produced results in this invocation.
	// See also https://aip.dev/122#full-resource-names
	// Typical examples:
	// - Swarming task: "//chromium-swarm.appspot.com/tasks/deadbeef"
	// - Buildbucket build: "//cr-buildbucket.appspot.com/builds/1234567890".
	ProducerResource string `protobuf:"bytes,11,opt,name=producer_resource,json=producerResource,proto3" json:"producer_resource,omitempty"`
	// Realm that the invocation exists under.
	// See https://chromium.googlesource.com/infra/luci/luci-py/+/refs/heads/master/appengine/auth_service/proto/realms_config.proto
	Realm string `protobuf:"bytes,12,opt,name=realm,proto3" json:"realm,omitempty"`
	// Deprecated. Values specified here are ignored.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/invocation.proto.
	HistoryOptions *HistoryOptions `protobuf:"bytes,13,opt,name=history_options,json=historyOptions,proto3" json:"history_options,omitempty"`
	// Arbitrary JSON object that contains structured, domain-specific properties
	// of the invocation.
	//
	// The serialized size must be <= 16 KB.
	Properties *structpb.Struct `protobuf:"bytes,14,opt,name=properties,proto3" json:"properties,omitempty"`
	// The code sources which were tested by this invocation.
	// This is used to index test results for test history, and for
	// related analyses (e.g. culprit analysis / changepoint analyses).
	//
	// The sources specified here applies only to:
	//   - the test results directly contained in this invocation, and
	//   - any directly included invocations which set their source_spec.inherit to
	//     true.
	//
	// Clients should be careful to ensure the uploaded source spec is consistent
	// between included invocations that upload the same test variants.
	// Verdicts are associated with the sources of *any* of their constituent
	// test results, so if there is inconsistency between included invocations,
	// the position of the verdict becomes not well defined.
	//
	// Note that the sources specified here are shared with included invocations
	// regardless of the realm of those included invocations.
	//
	// Attempting to update this field to a value other than its current value
	// after is_source_spec_final is set will generate an error.
	SourceSpec *SourceSpec `protobuf:"bytes,15,opt,name=source_spec,json=sourceSpec,proto3" json:"source_spec,omitempty"`
	// Whether the code sources specified by source_spec are final (immutable).
	//
	// To facilitate rapid export of invocations inheriting sources from this
	// invocation, this property should be set to true as soon as possible
	// after the invocation's sources are fixed. In most cases, clients
	// will want to set this property to true at the same time as they set
	// source_spec.
	//
	// This field is client owned. Consistent with https://google.aip.dev/129,
	// it will not be forced to true when the invocation starts to finalize, even
	// if its effective value will always be true at that point.
	IsSourceSpecFinal bool `protobuf:"varint,20,opt,name=is_source_spec_final,json=isSourceSpecFinal,proto3" json:"is_source_spec_final,omitempty"`
	// A user-specified baseline identifier that maps to a set of test variants.
	// Often, this will be the source that generated the test result, such as the
	// builder name for Chromium. For example, the baseline identifier may be
	// try:linux-rel. The supported syntax for a baseline identifier is
	// ^[a-z0-9\-_.]{1,100}:[a-zA-Z0-9\-_.\(\) ]{1,128}`$. This syntax was selected
	// to allow <buildbucket bucket name>:<buildbucket builder name> as a valid
	// baseline ID.
	// See go/src/go.chromium.org/luci/buildbucket/proto/builder_common.proto for
	// character lengths for buildbucket bucket name and builder name.
	//
	// Baselines are used to identify new tests; a subtraction between the set of
	// test variants for a baseline in the Baselines table and test variants from
	// a given invocation determines whether a test is new.
	//
	// The caller must have `resultdb.baselines.put` to be able to
	// modify this field.
	BaselineId string `protobuf:"bytes,16,opt,name=baseline_id,json=baselineId,proto3" json:"baseline_id,omitempty"`
	// Instructions for the steps and test results in this invocation.
	// It may also contain instructions for test results in included invocations.
	Instructions *Instructions `protobuf:"bytes,23,opt,name=instructions,proto3" json:"instructions,omitempty"`
	// Union of all variants of test results directly included by the invocation.
	// This field will be populated by ResultDB during test result creation time.
	TestResultVariantUnion *Variant `protobuf:"bytes,24,opt,name=TestResultVariantUnion,proto3" json:"TestResultVariantUnion,omitempty"`
	// Additional JSON object(s) that contain additional structured data about the
	// invocation. Unlike `properties` this field is not included (denormalized)
	// in the test results export, it is only available in the finalized
	// invocations BigQuery export.
	//
	// All google.protobuf.Struct values must contain a field '@type' which is
	// a URL/resource name that uniquely identifies the type of the source
	// protocol buffer message. This string must contain at least
	// one "/" character. The last segment of the URL's path must represent the
	// fully qualified name of the type (e.g. foo.com/x/some.package.MyMessage)
	//
	// ResultDB will not validate the contents with respect to this schema, but
	// downstream systems may depend on the '@type' field to inform how the
	// contents are interpreted.
	//
	// Each key is limited to 63 characters matching
	// ^[a-z]([a-z0-9_]{0,61}[a-z0-9])?$.
	// The size of each value is limited to <= 512 KB.
	// The total size of the map (as measured by proto.Size())
	// is limited to <= 2 MB.
	//
	// The following paths can be used for field masks:
	// * "extended_properties" to target the whole extended_properties,
	// * "extended_properties.some_key" to target one key of extended_properties.
	ExtendedProperties map[string]*structpb.Struct `protobuf:"bytes,22,rep,name=extended_properties,json=extendedProperties,proto3" json:"extended_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Invocation) Reset() {
	*x = Invocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Invocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Invocation) ProtoMessage() {}

func (x *Invocation) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Invocation.ProtoReflect.Descriptor instead.
func (*Invocation) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP(), []int{0}
}

func (x *Invocation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Invocation) GetState() Invocation_State {
	if x != nil {
		return x.State
	}
	return Invocation_STATE_UNSPECIFIED
}

func (x *Invocation) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Invocation) GetTags() []*StringPair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Invocation) GetFinalizeStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalizeStartTime
	}
	return nil
}

func (x *Invocation) GetFinalizeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalizeTime
	}
	return nil
}

func (x *Invocation) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

func (x *Invocation) GetIncludedInvocations() []string {
	if x != nil {
		return x.IncludedInvocations
	}
	return nil
}

func (x *Invocation) GetIsExportRoot() bool {
	if x != nil {
		return x.IsExportRoot
	}
	return false
}

func (x *Invocation) GetModuleId() *ModuleIdentifier {
	if x != nil {
		return x.ModuleId
	}
	return nil
}

func (x *Invocation) GetBigqueryExports() []*BigQueryExport {
	if x != nil {
		return x.BigqueryExports
	}
	return nil
}

func (x *Invocation) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Invocation) GetProducerResource() string {
	if x != nil {
		return x.ProducerResource
	}
	return ""
}

func (x *Invocation) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/invocation.proto.
func (x *Invocation) GetHistoryOptions() *HistoryOptions {
	if x != nil {
		return x.HistoryOptions
	}
	return nil
}

func (x *Invocation) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Invocation) GetSourceSpec() *SourceSpec {
	if x != nil {
		return x.SourceSpec
	}
	return nil
}

func (x *Invocation) GetIsSourceSpecFinal() bool {
	if x != nil {
		return x.IsSourceSpecFinal
	}
	return false
}

func (x *Invocation) GetBaselineId() string {
	if x != nil {
		return x.BaselineId
	}
	return ""
}

func (x *Invocation) GetInstructions() *Instructions {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *Invocation) GetTestResultVariantUnion() *Variant {
	if x != nil {
		return x.TestResultVariantUnion
	}
	return nil
}

func (x *Invocation) GetExtendedProperties() map[string]*structpb.Struct {
	if x != nil {
		return x.ExtendedProperties
	}
	return nil
}

// BigQueryExport indicates that results in this invocation should be exported
// to BigQuery after finalization.
type BigQueryExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the BigQuery project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Name of the BigQuery Dataset.
	Dataset string `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Name of the BigQuery Table.
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// Types that are assignable to ResultType:
	//
	//	*BigQueryExport_TestResults_
	//	*BigQueryExport_TextArtifacts_
	ResultType isBigQueryExport_ResultType `protobuf_oneof:"result_type"`
}

func (x *BigQueryExport) Reset() {
	*x = BigQueryExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigQueryExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryExport) ProtoMessage() {}

func (x *BigQueryExport) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryExport.ProtoReflect.Descriptor instead.
func (*BigQueryExport) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP(), []int{1}
}

func (x *BigQueryExport) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BigQueryExport) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *BigQueryExport) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (m *BigQueryExport) GetResultType() isBigQueryExport_ResultType {
	if m != nil {
		return m.ResultType
	}
	return nil
}

func (x *BigQueryExport) GetTestResults() *BigQueryExport_TestResults {
	if x, ok := x.GetResultType().(*BigQueryExport_TestResults_); ok {
		return x.TestResults
	}
	return nil
}

func (x *BigQueryExport) GetTextArtifacts() *BigQueryExport_TextArtifacts {
	if x, ok := x.GetResultType().(*BigQueryExport_TextArtifacts_); ok {
		return x.TextArtifacts
	}
	return nil
}

type isBigQueryExport_ResultType interface {
	isBigQueryExport_ResultType()
}

type BigQueryExport_TestResults_ struct {
	TestResults *BigQueryExport_TestResults `protobuf:"bytes,4,opt,name=test_results,json=testResults,proto3,oneof"`
}

type BigQueryExport_TextArtifacts_ struct {
	TextArtifacts *BigQueryExport_TextArtifacts `protobuf:"bytes,6,opt,name=text_artifacts,json=textArtifacts,proto3,oneof"`
}

func (*BigQueryExport_TestResults_) isBigQueryExport_ResultType() {}

func (*BigQueryExport_TextArtifacts_) isBigQueryExport_ResultType() {}

// HistoryOptions indicates how the invocations should be indexed, so that their
// results can be queried over a range of time or of commits.
// Deprecated: do not use.
type HistoryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this to index the results by the containing invocation's create_time.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/invocation.proto.
	UseInvocationTimestamp bool `protobuf:"varint,1,opt,name=use_invocation_timestamp,json=useInvocationTimestamp,proto3" json:"use_invocation_timestamp,omitempty"`
	// Set this to index by commit position.
	// It's up to the creator of the invocation to set this consistently over
	// time across the same test variant.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/invocation.proto.
	Commit *CommitPosition `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *HistoryOptions) Reset() {
	*x = HistoryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryOptions) ProtoMessage() {}

func (x *HistoryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryOptions.ProtoReflect.Descriptor instead.
func (*HistoryOptions) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP(), []int{2}
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/invocation.proto.
func (x *HistoryOptions) GetUseInvocationTimestamp() bool {
	if x != nil {
		return x.UseInvocationTimestamp
	}
	return false
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/invocation.proto.
func (x *HistoryOptions) GetCommit() *CommitPosition {
	if x != nil {
		return x.Commit
	}
	return nil
}

// Specifies the source code that was tested in an invocation, either directly
// (via the sources field) or indirectly (via inherit_sources).
type SourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the source position that was tested.
	// Either this or inherit_sources may be set, but not both.
	Sources *Sources `protobuf:"bytes,1,opt,name=sources,proto3" json:"sources,omitempty"`
	// Specifies that the source position of the invocation is inherited
	// from the parent invocation it is included in.
	//
	// # Use case
	// This is useful in situations where the testing infrastructure deduplicates
	// execution of tests on identical binaries (e.g. using swarming's task
	// deduplication feature).
	//
	// Let A be the invocation for a swarming task that receives only a
	// test binary as input, with task deduplication enabled.
	// Let B be the invocation for a buildbucket build which built the
	// binary from sources (or at the very least knew the sources)
	// and triggered invocation A.
	// Invocation B includes invocation A.
	//
	// By setting A's source_spec to inherit, and specifying the sources
	// on invocation B, the test results in A will be associated with
	// the sources specified on invocation B, when queried via invocation B.
	//
	// This allows further invocations B2, B3 ... BN to be created which also
	// re-use the test results in A but associate them with possibly different
	// sources when queried via B2 ... BN (this is valid so long as the sources
	// produce a binary-identical testing input).
	//
	// # Multiple inclusion paths
	// It is possible for an invocation A to be included in the reachable
	// invocation graph for an invocation C in more than one way.
	//
	// For example, we may have:
	//
	//	A -> B1 -> C
	//	A -> B2 -> C
	//
	// as two paths of inclusion.
	//
	// If A sets inherit to true, the commit position assigned to its
	// test results will be selected via *one* of the paths of inclusion
	// into C (i.e. from B1 or B2).
	//
	// However, which path is selected is not guaranteed, so if clients
	// must include the same invocation multiple times, they should
	// make the source position via all paths the same.
	Inherit bool `protobuf:"varint,2,opt,name=inherit,proto3" json:"inherit,omitempty"`
}

func (x *SourceSpec) Reset() {
	*x = SourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceSpec) ProtoMessage() {}

func (x *SourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceSpec.ProtoReflect.Descriptor instead.
func (*SourceSpec) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP(), []int{3}
}

func (x *SourceSpec) GetSources() *Sources {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *SourceSpec) GetInherit() bool {
	if x != nil {
		return x.Inherit
	}
	return false
}

// TestResults indicates that test results should be exported.
type BigQueryExport_TestResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use predicate to query test results that should be exported to
	// BigQuery table.
	Predicate *TestResultPredicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *BigQueryExport_TestResults) Reset() {
	*x = BigQueryExport_TestResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigQueryExport_TestResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryExport_TestResults) ProtoMessage() {}

func (x *BigQueryExport_TestResults) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryExport_TestResults.ProtoReflect.Descriptor instead.
func (*BigQueryExport_TestResults) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BigQueryExport_TestResults) GetPredicate() *TestResultPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

// TextArtifacts indicates that text artifacts should be exported.
type BigQueryExport_TextArtifacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use predicate to query artifacts that should be exported to
	// BigQuery table.
	//
	// Sub-field predicate.content_type_regexp defaults to "text/.*".
	Predicate *ArtifactPredicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *BigQueryExport_TextArtifacts) Reset() {
	*x = BigQueryExport_TextArtifacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BigQueryExport_TextArtifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryExport_TextArtifacts) ProtoMessage() {}

func (x *BigQueryExport_TextArtifacts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryExport_TextArtifacts.ProtoReflect.Descriptor instead.
func (*BigQueryExport_TextArtifacts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP(), []int{1, 1}
}

func (x *BigQueryExport_TextArtifacts) GetPredicate() *ArtifactPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

var File_go_chromium_org_luci_resultdb_proto_v1_invocation_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDesc = []byte{
	0x0a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd4, 0x0b, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4f,
	0x0a, 0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x29, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0c, 0x69,
	0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x10,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x61, 0x6c, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d,
	0x12, 0x4d, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a,
	0x16, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x16, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x17,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08,
	0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x22, 0xcc, 0x03, 0x0a, 0x0e, 0x42, 0x69,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x1a, 0x52, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x43, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x52, 0x0a, 0x0d, 0x54, 0x65, 0x78, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x18, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x16, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x42, 0x50, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescData = file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDesc
)

func file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescData)
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_goTypes = []interface{}{
	(Invocation_State)(0),                // 0: luci.resultdb.v1.Invocation.State
	(*Invocation)(nil),                   // 1: luci.resultdb.v1.Invocation
	(*BigQueryExport)(nil),               // 2: luci.resultdb.v1.BigQueryExport
	(*HistoryOptions)(nil),               // 3: luci.resultdb.v1.HistoryOptions
	(*SourceSpec)(nil),                   // 4: luci.resultdb.v1.SourceSpec
	nil,                                  // 5: luci.resultdb.v1.Invocation.ExtendedPropertiesEntry
	(*BigQueryExport_TestResults)(nil),   // 6: luci.resultdb.v1.BigQueryExport.TestResults
	(*BigQueryExport_TextArtifacts)(nil), // 7: luci.resultdb.v1.BigQueryExport.TextArtifacts
	(*timestamppb.Timestamp)(nil),        // 8: google.protobuf.Timestamp
	(*StringPair)(nil),                   // 9: luci.resultdb.v1.StringPair
	(*ModuleIdentifier)(nil),             // 10: luci.resultdb.v1.ModuleIdentifier
	(*structpb.Struct)(nil),              // 11: google.protobuf.Struct
	(*Instructions)(nil),                 // 12: luci.resultdb.v1.Instructions
	(*Variant)(nil),                      // 13: luci.resultdb.v1.Variant
	(*CommitPosition)(nil),               // 14: luci.resultdb.v1.CommitPosition
	(*Sources)(nil),                      // 15: luci.resultdb.v1.Sources
	(*TestResultPredicate)(nil),          // 16: luci.resultdb.v1.TestResultPredicate
	(*ArtifactPredicate)(nil),            // 17: luci.resultdb.v1.ArtifactPredicate
}
var file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_depIdxs = []int32{
	0,  // 0: luci.resultdb.v1.Invocation.state:type_name -> luci.resultdb.v1.Invocation.State
	8,  // 1: luci.resultdb.v1.Invocation.create_time:type_name -> google.protobuf.Timestamp
	9,  // 2: luci.resultdb.v1.Invocation.tags:type_name -> luci.resultdb.v1.StringPair
	8,  // 3: luci.resultdb.v1.Invocation.finalize_start_time:type_name -> google.protobuf.Timestamp
	8,  // 4: luci.resultdb.v1.Invocation.finalize_time:type_name -> google.protobuf.Timestamp
	8,  // 5: luci.resultdb.v1.Invocation.deadline:type_name -> google.protobuf.Timestamp
	10, // 6: luci.resultdb.v1.Invocation.module_id:type_name -> luci.resultdb.v1.ModuleIdentifier
	2,  // 7: luci.resultdb.v1.Invocation.bigquery_exports:type_name -> luci.resultdb.v1.BigQueryExport
	3,  // 8: luci.resultdb.v1.Invocation.history_options:type_name -> luci.resultdb.v1.HistoryOptions
	11, // 9: luci.resultdb.v1.Invocation.properties:type_name -> google.protobuf.Struct
	4,  // 10: luci.resultdb.v1.Invocation.source_spec:type_name -> luci.resultdb.v1.SourceSpec
	12, // 11: luci.resultdb.v1.Invocation.instructions:type_name -> luci.resultdb.v1.Instructions
	13, // 12: luci.resultdb.v1.Invocation.TestResultVariantUnion:type_name -> luci.resultdb.v1.Variant
	5,  // 13: luci.resultdb.v1.Invocation.extended_properties:type_name -> luci.resultdb.v1.Invocation.ExtendedPropertiesEntry
	6,  // 14: luci.resultdb.v1.BigQueryExport.test_results:type_name -> luci.resultdb.v1.BigQueryExport.TestResults
	7,  // 15: luci.resultdb.v1.BigQueryExport.text_artifacts:type_name -> luci.resultdb.v1.BigQueryExport.TextArtifacts
	14, // 16: luci.resultdb.v1.HistoryOptions.commit:type_name -> luci.resultdb.v1.CommitPosition
	15, // 17: luci.resultdb.v1.SourceSpec.sources:type_name -> luci.resultdb.v1.Sources
	11, // 18: luci.resultdb.v1.Invocation.ExtendedPropertiesEntry.value:type_name -> google.protobuf.Struct
	16, // 19: luci.resultdb.v1.BigQueryExport.TestResults.predicate:type_name -> luci.resultdb.v1.TestResultPredicate
	17, // 20: luci.resultdb.v1.BigQueryExport.TextArtifacts.predicate:type_name -> luci.resultdb.v1.ArtifactPredicate
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_invocation_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_instruction_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_predicate_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Invocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigQueryExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigQueryExport_TestResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BigQueryExport_TextArtifacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BigQueryExport_TestResults_)(nil),
		(*BigQueryExport_TextArtifacts_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_invocation_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_rawDesc = nil
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_depIdxs = nil
}
