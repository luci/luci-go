// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.resultdb.v1;

import "google/protobuf/timestamp.proto";
import "google/api/field_behavior.proto";

option go_package = "go.chromium.org/luci/resultdb/proto/v1;resultpb";
option java_package = "com.google.luci.resultdb.v1";
option java_multiple_files = true;

// A key-value map describing one variant of a module.
//
// A module can be executed in different ways, for example on
// different OS, GPUs, with different compile options or runtime flags.
// A variant definition captures one such variant.
// A test case with a specific variant definition is called test variant.
//
// Guidelines for variant definition design:
// - This rule guides what keys MUST be present in the definition.
//   A single expected result of a given test variant is enough to consider it
//   passing (potentially flakily). If it is important to differentiate across
//   a certain dimension (e.g. whether web tests are executed with or without
//   site per process isolation), then there MUST be a key that captures the
//   dimension (e.g. a name from test_suites.pyl).
//   Otherwise, a pass in one variant will hide a failure of another one.
//
// - This rule guides what keys MUST NOT be present in the definition.
//   A change in the key-value set essentially resets the test result history.
//   For example, if GN args are among variant key-value pairs, then adding a
//   new GN arg changes the identity of the test variant and resets its history.
//
// In Chromium, variant keys are:
// - bucket: the LUCI bucket, e.g. "ci"
// - builder: the LUCI builder, e.g. "linux-rel"
// - test_suite: a name from
//   https://cs.chromium.org/chromium/src/testing/buildbot/test_suites.pyl
message Variant {
  // The definition of the variant.
  // Key and values must be valid StringPair keys and values, see their
  // constraints.
  //
  // These values must be the same for all tests in a given execution of
  // a module. Variants specific to a particular test case should be
  // encoded in the test method name (see TestIdentifier.method).
  map<string, string> def = 1;
}

// A string key-value pair. Typically used for tagging, see Invocation.tags
message StringPair {
  // Regex: ^[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*$
  // Max length: 64.
  string key = 1;

  // Max length: 256.
  string value = 2;
}

// TestVariantIdentifier represents the identity of a test variant in structured form.
//
// The structured test variant identifier represented in this proto corresponds to
// the flat test identifier with the following form:
// :{module_name}!{module_scheme}:{coarse_name}:{fine_name}#{case_name}
//
// and variant matching module_variant.
//
// Where {x} represents inserting the value of x with the characters
// ':', '!', '#', and '\' escaped using a '\'.
//
// Special treatment exists for legacy test identifiers, for which
// module_name = "legacy", module_scheme = "legacy", coarse_name = "",
// fine_name = "" and case_name = <legacy_id>. For these, the corresponding
// flat test ID is simply:
// {case_name}
//
// (no escaping applies to this form, although method starting with ':'
// is illegal for legacy test identifiers).
//
// See go/resultdb-test-hierarchy-design for more details.
//
// Limits: the encoded test ID (as per rules above) must be less than
// 512 bytes in UTF-8.
message TestVariantIdentifier {
  // The name of the module being tested. A module is a set of tests which run
  // with the same test harness, and typically corresponds with a unit of
  // build, such as a bazel test target.
  //
  // For example, "CtsSdkExtensionsTestCases" or "chrome/test:blink_webkit_tests".
  //
  // Note: Modules are identified by the combination of module_name and scheme, not
  // only module_name. See `scheme` field below for more.
  //
  // Limited to 300 bytes of printable UTF-8. See also limits on `TestIdentifier` as a whole.
  string module_name = 1;

  // The scheme of the module, for example, "junit" or "gtest".
  //
  // Must match one of the schemes in the ResultDB service configuration (see
  // go/resultdb-schemes). Additional values can be configured as needed.
  //
  // Note: modules are identified by the combination of module_name, module_variant and
  // module_scheme.
  // Nonetheless, when presenting data on a frontend, it is acceptable to not show the scheme
  // as it exists primarily to allow customisation of the labels shown next to the coarse_name,
  // fine_name and case_name fields.
  // When uploading data it is STRONGLY DISCOURAGED to use different schemes with the same
  // module name as it may lead to ambiguous UI for users.
  //
  // Limited to ^[a-z][a-z0-9]{0,19}$.
  string module_scheme = 2;

  // Description of one specific way of running the tests in a module,
  // e.g. specific ABI (x64/x86/...), build flags and/or operating system.
  //
  // Variants identify the unique ways the module was run compared to every other way
  // the module is run by the LUCI project. As such, some variant key-value pairs
  // may be repeated for all modules in an invocation.
  //
  // N.B. Presently this is always the same as test_result.variant but semantics could
  // diverge in future if variants are introduced at other levels.
  Variant module_variant = 3;

  // Hash of the module variant.
  // hex(sha256(sorted(''.join('%s:%s\n' for k, v in module_variant.items()))))[:8].
  string module_variant_hash = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Intermediate hierarchy - coarse name.
  //
  // For example "com.android.os.ext".
  //
  // A scheme dependent value used to organise the test into a coarse group of related tests,
  // such as a package or directory.
  // If the scheme does not define a coarse grouping, this must be blank.
  // If only one intermediate hierarchy level is used for a scheme, it is always the
  // fine hierarchy level.
  //
  // Constraints:
  // - Must match constraints set by the module's scheme.
  // - Limited to 300 bytes of printable UTF-8 (see also limits on `TestIdentifier` as a whole).
  // - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
  string coarse_name = 5;

  // Interemdiate hierarchy - fine name.
  //
  // For example "SdkExtensionsTest" or "WebDialogBrowserTest".
  //
  // A finer grouping within the above coarse grouping (if any), e.g. class or file.
  // If the scheme does not define a fine grouping, this must be blank.
  //
  // Constraints:
  // - Must match constraints set by the module's scheme.
  // - Limited to 300 bytes of printable UTF-8 (see also limits on `TestIdentifier` as a whole).
  // - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
  string fine_name = 6;

  // The identifier of test case within the above fine grouping.
  //
  // For example "testBadArgument" or "CloseParentWindow".
  //
  // This is the finest granularity component of the test identifier, and typically
  // refers to sub-file granularity unless no such granularity exists.
  //
  // The special value "*fixture" may be used for reporting the result of
  // setup and teardown common to tests in the same fine_name.
  //
  // Constraints:
  // - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C),
  //   unless it is to write the value "*fixture". Exception is made for tests in the
  //   module 'legacy' for which a slightly broader set of starting characters is allowed
  //   for backwards compatibility but use of this quirk is discouraged.
  string case_name = 7;
}

// GitilesCommit specifies the position of the gitiles commit an invocation
// ran against, in a repository's commit log. More specifically, a ref's commit
// log.
//
// It also specifies the host/project/ref combination that the commit
// exists in, to provide context.
message GitilesCommit {
  // The identity of the gitiles host, e.g. "chromium.googlesource.com".
  // Mandatory.
  string host = 1;

  // Repository name on the host, e.g. "chromium/src". Mandatory.
  string project = 2;

  // Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
  // Not the branch name, use "refs/heads/branch"
  // Mandatory.
  string ref = 3;

  // Commit HEX SHA1. All lowercase. Mandatory.
  string commit_hash = 4;

  // Defines a total order of commits on the ref.
  // A positive, monotonically increasing integer. The recommended
  // way of obtaining this is by using the goto.google.com/git-numberer
  // Gerrit plugin. Other solutions can be used as well, so long
  // as the same scheme is used consistently for a ref.
  // Mandatory.
  int64 position = 5;
}

// A Gerrit patchset.
message GerritChange {
  // Gerrit hostname, e.g. "chromium-review.googlesource.com".
  string host = 1;
  // Gerrit project, e.g. "chromium/src".
  string project = 2;
  // Change number, e.g. 12345.
  int64 change = 3;
  // Patch set number, e.g. 1.
  int64 patchset = 4;
}

// Deprecated: Use GitilesCommit instead.
message CommitPosition {
  // The following fields identify a git repository and a ref within which the
  // numerical position below identifies a single commit.
  string host = 1;
  string project = 2;
  string ref = 3;

  // The numerical position of the commit in the log for the host/project/ref
  // above.
  int64 position = 4;
}

// Deprecated: Do not use.
message CommitPositionRange {
  // The lowest commit position to include in the range.
  CommitPosition earliest = 1;

  // Include only commit positions that that are strictly lower than this.
  CommitPosition latest = 2;
}

// A range of timestamps.
//
// Currently unused.
message TimeRange {
  // The oldest timestamp to include in the range.
  google.protobuf.Timestamp earliest = 1;

  // Include only timestamps that are strictly older than this.
  google.protobuf.Timestamp latest = 2;
}


// Represents a reference in a source control system.
message SourceRef {
  // The source control system used.
  // Only gitiles is supported at this moment. If other systems need to be
  // supported in future (e.g. non-gitiles git, subversion, google storage
  // buckets), they can be added here
  oneof system {
    // A branch in gitiles repository.
    GitilesRef gitiles = 1;
  }
}

// Represents a branch in a gitiles repository.
message GitilesRef {
  // The gitiles host, e.g. "chromium.googlesource.com".
  string host = 1;

  // The project on the gitiles host, e.g. "chromium/src".
  string project = 2;

  // Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
  // Not the branch name, use "refs/heads/branch"
  string ref = 3;
}
