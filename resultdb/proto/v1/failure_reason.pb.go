// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.31.1
// source: go.chromium.org/luci/resultdb/proto/v1/failure_reason.proto

package resultpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kind defines the general category of the failure.
// Open to extension.
type FailureReason_Kind int32

const (
	FailureReason_KIND_UNSPECIFIED FailureReason_Kind = 0
	// The test failed in an ordinary way (not captured by another status).
	// Includes:
	//   - GoogleTest and JUnit assertion failures.
	//   - Golang *testing.T .Fail(), .Fatal(...) calls.
	//   - Web platform tests that did not produce the expected result,
	//     for example, an unexpected pass or fail.
	FailureReason_ORDINARY FailureReason_Kind = 1
	// The test process crashed.
	FailureReason_CRASH FailureReason_Kind = 2
	// The test timed out.
	FailureReason_TIMEOUT FailureReason_Kind = 3
)

// Enum value maps for FailureReason_Kind.
var (
	FailureReason_Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "ORDINARY",
		2: "CRASH",
		3: "TIMEOUT",
	}
	FailureReason_Kind_value = map[string]int32{
		"KIND_UNSPECIFIED": 0,
		"ORDINARY":         1,
		"CRASH":            2,
		"TIMEOUT":          3,
	}
)

func (x FailureReason_Kind) Enum() *FailureReason_Kind {
	p := new(FailureReason_Kind)
	*p = x
	return p
}

func (x FailureReason_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureReason_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_enumTypes[0].Descriptor()
}

func (FailureReason_Kind) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_enumTypes[0]
}

func (x FailureReason_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FailureReason_Kind.Descriptor instead.
func (FailureReason_Kind) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescGZIP(), []int{0, 0}
}

// Provides structured information about why a test failed. This information is helpful
// for developers debugging failures and is also used by systems like LUCI Analysis
// to cluster similar failures together.
// It typically contains one or more error messages and potentially stack traces.
// Note: The total combined size of all errors within this message (as measured
// by proto.Size()) must not exceed 16,384 bytes.
type FailureReason struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The general category of the failure. Required.
	Kind FailureReason_Kind `protobuf:"varint,4,opt,name=kind,proto3,enum=luci.resultdb.v1.FailureReason_Kind" json:"kind,omitempty"`
	// The error message that ultimately caused the test to fail.
	// Equal to errors[0].message, or blank if errors is unset.
	//
	// Output only. (For backwards compatibility, some clients are still
	// allowed to set this, but new clients should set the errors field
	// instead.)
	PrimaryErrorMessage string `protobuf:"bytes,1,opt,name=primary_error_message,json=primaryErrorMessage,proto3" json:"primary_error_message,omitempty"`
	// A list of all the errors that contributed to the test failure. There might
	// be multiple errors if, for example, a test harness continues after non-fatal
	// assertion failures.
	//
	// If there is more than one error (e.g. due to multiple expectation failures),
	// a stable sorting should be used. A recommended form of stable sorting is:
	//   - Fatal errors (errors that cause the test to terminate immediately first),
	//     then
	//   - Within fatal/non-fatal errors, sort by chronological order
	//     (earliest error first).
	//
	// The total combined size of all errors (as measured by proto.Size()) must
	// not exceed 16,384 bytes.
	Errors []*FailureReason_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// If the list of errors was too large to fit within the size limits for the
	// FailureReason message, this count indicates how many errors were truncated
	// from the end of the `errors` list.
	TruncatedErrorsCount int32 `protobuf:"varint,3,opt,name=truncated_errors_count,json=truncatedErrorsCount,proto3" json:"truncated_errors_count,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FailureReason) Reset() {
	*x = FailureReason{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailureReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureReason) ProtoMessage() {}

func (x *FailureReason) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureReason.ProtoReflect.Descriptor instead.
func (*FailureReason) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescGZIP(), []int{0}
}

func (x *FailureReason) GetKind() FailureReason_Kind {
	if x != nil {
		return x.Kind
	}
	return FailureReason_KIND_UNSPECIFIED
}

func (x *FailureReason) GetPrimaryErrorMessage() string {
	if x != nil {
		return x.PrimaryErrorMessage
	}
	return ""
}

func (x *FailureReason) GetErrors() []*FailureReason_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *FailureReason) GetTruncatedErrorsCount() int32 {
	if x != nil {
		return x.TruncatedErrorsCount
	}
	return 0
}

// Error represents a problem that caused a test to fail, such as a crash
// or expectation failure.
type FailureReason_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The specific error message associated with this particular error instance
	// (e.g., the text of a specific assertion failure). This should generally
	// exclude stack traces, which belong in the `trace` field.
	// This message is often used for clustering related failures.
	//
	// Example message:
	// camera_unittest.cc(123): Value of GetPrivacyIndicatorsView()->CameraIcon()->GetVisible() Actual: false Expected: true
	//
	// The size of this message must be equal to or smaller than 1024 bytes in UTF-8.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The stack trace associated with this error, if one is available.
	// For very long stack traces, it's recommended to store them as separate
	// artifacts linked to the TestResult and include a truncated version inline
	// here to avoid exceeding size limits.
	// A size limit of 4096 bytes (UTF-8) applies to this field.
	Trace         string `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FailureReason_Error) Reset() {
	*x = FailureReason_Error{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FailureReason_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailureReason_Error) ProtoMessage() {}

func (x *FailureReason_Error) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailureReason_Error.ProtoReflect.Descriptor instead.
func (*FailureReason_Error) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FailureReason_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FailureReason_Error) GetTrace() string {
	if x != nil {
		return x.Trace
	}
	return ""
}

var File_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDesc = string([]byte{
	0x0a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x22,
	0xef, 0x02, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x37, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x42, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x52, 0x44, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x52, 0x41,
	0x53, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x03, 0x42, 0x50, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescData []byte
)

func file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_goTypes = []any{
	(FailureReason_Kind)(0),     // 0: luci.resultdb.v1.FailureReason.Kind
	(*FailureReason)(nil),       // 1: luci.resultdb.v1.FailureReason
	(*FailureReason_Error)(nil), // 2: luci.resultdb.v1.FailureReason.Error
}
var file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_depIdxs = []int32{
	0, // 0: luci.resultdb.v1.FailureReason.kind:type_name -> luci.resultdb.v1.FailureReason.Kind
	2, // 1: luci.resultdb.v1.FailureReason.errors:type_name -> luci.resultdb.v1.FailureReason.Error
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_failure_reason_proto_depIdxs = nil
}
