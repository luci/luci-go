// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0
// source: go.chromium.org/luci/resultdb/proto/v1/test_variant.proto

package resultpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status of a test variant.
type TestVariantStatus int32

const (
	// a test variant must not have this status.
	// This is only used when filtering variants.
	TestVariantStatus_TEST_VARIANT_STATUS_UNSPECIFIED TestVariantStatus = 0
	// The test variant has no exonerations, and all results are unexpected.
	TestVariantStatus_UNEXPECTED TestVariantStatus = 10
	// The test variant has no exonerations, and all results are unexpectedly skipped.
	TestVariantStatus_UNEXPECTEDLY_SKIPPED TestVariantStatus = 20
	// The test variant has no exonerations, and has both expected and unexpected
	// results.
	TestVariantStatus_FLAKY TestVariantStatus = 30
	// The test variant has one or more test exonerations.
	TestVariantStatus_EXONERATED TestVariantStatus = 40
	// A special value that matches any test variant which doesn't have the status
	// EXPECTED. This includes all the above statuses. It will never be present on
	// returned results, it's only for use in predicates.
	TestVariantStatus_UNEXPECTED_MASK TestVariantStatus = 45
	// The test variant has no exonerations, and all results are expected.
	TestVariantStatus_EXPECTED TestVariantStatus = 50
)

// Enum value maps for TestVariantStatus.
var (
	TestVariantStatus_name = map[int32]string{
		0:  "TEST_VARIANT_STATUS_UNSPECIFIED",
		10: "UNEXPECTED",
		20: "UNEXPECTEDLY_SKIPPED",
		30: "FLAKY",
		40: "EXONERATED",
		45: "UNEXPECTED_MASK",
		50: "EXPECTED",
	}
	TestVariantStatus_value = map[string]int32{
		"TEST_VARIANT_STATUS_UNSPECIFIED": 0,
		"UNEXPECTED":                      10,
		"UNEXPECTEDLY_SKIPPED":            20,
		"FLAKY":                           30,
		"EXONERATED":                      40,
		"UNEXPECTED_MASK":                 45,
		"EXPECTED":                        50,
	}
)

func (x TestVariantStatus) Enum() *TestVariantStatus {
	p := new(TestVariantStatus)
	*p = x
	return p
}

func (x TestVariantStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestVariantStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_enumTypes[0].Descriptor()
}

func (TestVariantStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_enumTypes[0]
}

func (x TestVariantStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestVariantStatus.Descriptor instead.
func (TestVariantStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescGZIP(), []int{0}
}

// Represents a matching test variant with its outcomes.
// Also known as a test verdict.
type TestVariant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier of the test in a LUCI project.
	// Regex: ^[[::print::]]{1,512}$
	//
	// Refer to TestResult.test_id for details.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// Hash of the variant.
	// hex(sha256(sorted(‚Äù.join('%s:%s\n' for k, v in variant.items())))).
	VariantHash string `protobuf:"bytes,3,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Status of the test variant.
	Status TestVariantStatus `protobuf:"varint,4,opt,name=status,proto3,enum=luci.resultdb.v1.TestVariantStatus" json:"status,omitempty"`
	// Outcomes of the test variant.
	Results []*TestResultBundle `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
	// Test exonerations if any test variant is exonerated.
	Exonerations []*TestExoneration `protobuf:"bytes,6,rep,name=exonerations,proto3" json:"exonerations,omitempty"`
	// Information about the test at the time of its execution.
	//
	// All test results of the same test variant should report the same test
	// metadata. This RPC relies on this rule and returns test metadata from
	// *arbitrary* result of the test variant.
	TestMetadata *TestMetadata `protobuf:"bytes,7,opt,name=test_metadata,json=testMetadata,proto3" json:"test_metadata,omitempty"`
	// Whether the
	//   - test metadata; or
	//   - the variant definition; or
	//   - both the test metadata and variant definition
	//
	// have been masked from the test variant.
	//
	// Output only.
	IsMasked bool `protobuf:"varint,8,opt,name=is_masked,json=isMasked,proto3" json:"is_masked,omitempty"`
	// The identity of the code sources tested. This ID can be used
	// to lookup of the actual sources in QueryTestVariantsResponse.sources.
	//
	// All test results of the same test variant should be attached to the same
	// sources (via their respective invocation(s)). This RPC relies upon this
	// and returns sources from an *arbitrary* result of the test variant.
	//
	// If the code sources tested are not available, this field is blank.
	SourcesId string `protobuf:"bytes,9,opt,name=sources_id,json=sourcesId,proto3" json:"sources_id,omitempty"`
	// Contain the data for instruction for the test verdict.
	// To find out the instruction for a test verdict, we select an *arbitrary*
	// test result in the test verdict and get its instruction.
	// Note: If in this test verdict, if there are different instructions for
	// test result, the result may be undeterministic.
	Instruction   *VerdictInstruction `protobuf:"bytes,10,opt,name=instruction,proto3" json:"instruction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVariant) Reset() {
	*x = TestVariant{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariant) ProtoMessage() {}

func (x *TestVariant) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariant.ProtoReflect.Descriptor instead.
func (*TestVariant) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescGZIP(), []int{0}
}

func (x *TestVariant) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariant) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestVariant) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVariant) GetStatus() TestVariantStatus {
	if x != nil {
		return x.Status
	}
	return TestVariantStatus_TEST_VARIANT_STATUS_UNSPECIFIED
}

func (x *TestVariant) GetResults() []*TestResultBundle {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TestVariant) GetExonerations() []*TestExoneration {
	if x != nil {
		return x.Exonerations
	}
	return nil
}

func (x *TestVariant) GetTestMetadata() *TestMetadata {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

func (x *TestVariant) GetIsMasked() bool {
	if x != nil {
		return x.IsMasked
	}
	return false
}

func (x *TestVariant) GetSourcesId() string {
	if x != nil {
		return x.SourcesId
	}
	return ""
}

func (x *TestVariant) GetInstruction() *VerdictInstruction {
	if x != nil {
		return x.Instruction
	}
	return nil
}

type VerdictInstruction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the instruction.
	// Format: invocations/<invocation id>/instructions/<instruction id>
	Instruction   string `protobuf:"bytes,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerdictInstruction) Reset() {
	*x = VerdictInstruction{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerdictInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerdictInstruction) ProtoMessage() {}

func (x *VerdictInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerdictInstruction.ProtoReflect.Descriptor instead.
func (*VerdictInstruction) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescGZIP(), []int{1}
}

func (x *VerdictInstruction) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

// Outcomes of an execution of the test variant.
type TestResultBundle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Result of the test variant execution.
	Result        *TestResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResultBundle) Reset() {
	*x = TestResultBundle{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResultBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultBundle) ProtoMessage() {}

func (x *TestResultBundle) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultBundle.ProtoReflect.Descriptor instead.
func (*TestResultBundle) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescGZIP(), []int{2}
}

func (x *TestResultBundle) GetResult() *TestResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// Represents a function TestVariant -> bool.
// Empty message matches all test variants.
type TestVariantPredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A test variant must have this status.
	Status        TestVariantStatus `protobuf:"varint,1,opt,name=status,proto3,enum=luci.resultdb.v1.TestVariantStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVariantPredicate) Reset() {
	*x = TestVariantPredicate{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVariantPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantPredicate) ProtoMessage() {}

func (x *TestVariantPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantPredicate.ProtoReflect.Descriptor instead.
func (*TestVariantPredicate) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescGZIP(), []int{3}
}

func (x *TestVariantPredicate) GetStatus() TestVariantStatus {
	if x != nil {
		return x.Status
	}
	return TestVariantStatus_TEST_VARIANT_STATUS_UNSPECIFIED
}

// The outcome of a test variant in a test run (a single invocation,
// excluding any included invocations).
type RunTestVerdict struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier of the test in a LUCI project.
	// Regex: ^[[::print::]]{1,256}$
	//
	// Refer to TestResult.test_id for details.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// Hash of the variant.
	// hex(sha256(sorted(‚Äù.join('%s:%s\n' for k, v in variant.items())))).
	VariantHash string `protobuf:"bytes,3,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Outcomes of the test variant.
	Results []*TestResultBundle `protobuf:"bytes,4,rep,name=results,proto3" json:"results,omitempty"`
	// Information about the test at the time of its execution.
	//
	// All test results of the same test variant should report the same test
	// metadata. This RPC relies on this rule and returns test metadata from
	// *arbitrary* result of the test variant.
	TestMetadata  *TestMetadata `protobuf:"bytes,5,opt,name=test_metadata,json=testMetadata,proto3" json:"test_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTestVerdict) Reset() {
	*x = RunTestVerdict{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTestVerdict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTestVerdict) ProtoMessage() {}

func (x *RunTestVerdict) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTestVerdict.ProtoReflect.Descriptor instead.
func (*RunTestVerdict) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescGZIP(), []int{4}
}

func (x *RunTestVerdict) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *RunTestVerdict) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *RunTestVerdict) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *RunTestVerdict) GetResults() []*TestResultBundle {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *RunTestVerdict) GetTestMetadata() *TestMetadata {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

var File_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDesc = string([]byte{
	0x0a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x04, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0d,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x61, 0x73,
	0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x12, 0x56, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x53, 0x0a, 0x14,
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x84, 0x02, 0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0xa0, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x4c, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x14, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4c, 0x41, 0x4b, 0x59, 0x10, 0x1e, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x4f, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x45, 0x58,
	0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x2d, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x32, 0x42, 0x50, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescData []byte
)

func file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_goTypes = []any{
	(TestVariantStatus)(0),       // 0: luci.resultdb.v1.TestVariantStatus
	(*TestVariant)(nil),          // 1: luci.resultdb.v1.TestVariant
	(*VerdictInstruction)(nil),   // 2: luci.resultdb.v1.VerdictInstruction
	(*TestResultBundle)(nil),     // 3: luci.resultdb.v1.TestResultBundle
	(*TestVariantPredicate)(nil), // 4: luci.resultdb.v1.TestVariantPredicate
	(*RunTestVerdict)(nil),       // 5: luci.resultdb.v1.RunTestVerdict
	(*Variant)(nil),              // 6: luci.resultdb.v1.Variant
	(*TestExoneration)(nil),      // 7: luci.resultdb.v1.TestExoneration
	(*TestMetadata)(nil),         // 8: luci.resultdb.v1.TestMetadata
	(*TestResult)(nil),           // 9: luci.resultdb.v1.TestResult
}
var file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_depIdxs = []int32{
	6,  // 0: luci.resultdb.v1.TestVariant.variant:type_name -> luci.resultdb.v1.Variant
	0,  // 1: luci.resultdb.v1.TestVariant.status:type_name -> luci.resultdb.v1.TestVariantStatus
	3,  // 2: luci.resultdb.v1.TestVariant.results:type_name -> luci.resultdb.v1.TestResultBundle
	7,  // 3: luci.resultdb.v1.TestVariant.exonerations:type_name -> luci.resultdb.v1.TestExoneration
	8,  // 4: luci.resultdb.v1.TestVariant.test_metadata:type_name -> luci.resultdb.v1.TestMetadata
	2,  // 5: luci.resultdb.v1.TestVariant.instruction:type_name -> luci.resultdb.v1.VerdictInstruction
	9,  // 6: luci.resultdb.v1.TestResultBundle.result:type_name -> luci.resultdb.v1.TestResult
	0,  // 7: luci.resultdb.v1.TestVariantPredicate.status:type_name -> luci.resultdb.v1.TestVariantStatus
	6,  // 8: luci.resultdb.v1.RunTestVerdict.variant:type_name -> luci.resultdb.v1.Variant
	3,  // 9: luci.resultdb.v1.RunTestVerdict.results:type_name -> luci.resultdb.v1.TestResultBundle
	8,  // 10: luci.resultdb.v1.RunTestVerdict.test_metadata:type_name -> luci.resultdb.v1.TestMetadata
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_metadata_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_depIdxs = nil
}
