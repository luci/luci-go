// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.32.0
// source: go.chromium.org/luci/resultdb/proto/v1/common.proto

package resultpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AggregationLevel defines the levels that test verdicts can be
// aggregated to.
type AggregationLevel int32

const (
	// Aggregation level not specified. Do not use.
	AggregationLevel_AGGREGATION_LEVEL_UNSPECIFIED AggregationLevel = 0
	// Aggregate to the invocation level. This means all test results
	// in an invocation.
	AggregationLevel_INVOCATION AggregationLevel = 1
	// Aggregate to the module level. This means all test results
	// sharing the same module_name, module_variant and module_scheme.
	AggregationLevel_MODULE AggregationLevel = 2
	// Aggregate to the coarse name level.
	// This means all test results sharing the same module and coarse_name.
	AggregationLevel_COARSE AggregationLevel = 3
	// Aggregate to the fine name level.
	// This means all test results sharing the same module, coarse_name,
	// and fine_name.
	AggregationLevel_FINE AggregationLevel = 4
	// Aggregate to the test case (test verdict) level.
	// This means all test results sharing the same test identifier.
	AggregationLevel_CASE AggregationLevel = 5
)

// Enum value maps for AggregationLevel.
var (
	AggregationLevel_name = map[int32]string{
		0: "AGGREGATION_LEVEL_UNSPECIFIED",
		1: "INVOCATION",
		2: "MODULE",
		3: "COARSE",
		4: "FINE",
		5: "CASE",
	}
	AggregationLevel_value = map[string]int32{
		"AGGREGATION_LEVEL_UNSPECIFIED": 0,
		"INVOCATION":                    1,
		"MODULE":                        2,
		"COARSE":                        3,
		"FINE":                          4,
		"CASE":                          5,
	}
)

func (x AggregationLevel) Enum() *AggregationLevel {
	p := new(AggregationLevel)
	*p = x
	return p
}

func (x AggregationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_enumTypes[0].Descriptor()
}

func (AggregationLevel) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_enumTypes[0]
}

func (x AggregationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationLevel.Descriptor instead.
func (AggregationLevel) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

// WorkUnitView represents the set of work unit fields to be retrieved.
// See https://google.aip.dev/157.
type WorkUnitView int32

const (
	// The default / unset value. The API will default to the basic view.
	WorkUnitView_WORK_UNIT_VIEW_UNSPECIFIED WorkUnitView = 0
	// Include basic information about the work unit. Excludes
	// extended_properties.
	WorkUnitView_WORK_UNIT_VIEW_BASIC WorkUnitView = 1
	// Include all fields, including extended_properties.
	WorkUnitView_WORK_UNIT_VIEW_FULL WorkUnitView = 2
)

// Enum value maps for WorkUnitView.
var (
	WorkUnitView_name = map[int32]string{
		0: "WORK_UNIT_VIEW_UNSPECIFIED",
		1: "WORK_UNIT_VIEW_BASIC",
		2: "WORK_UNIT_VIEW_FULL",
	}
	WorkUnitView_value = map[string]int32{
		"WORK_UNIT_VIEW_UNSPECIFIED": 0,
		"WORK_UNIT_VIEW_BASIC":       1,
		"WORK_UNIT_VIEW_FULL":        2,
	}
)

func (x WorkUnitView) Enum() *WorkUnitView {
	p := new(WorkUnitView)
	*p = x
	return p
}

func (x WorkUnitView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkUnitView) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_enumTypes[1].Descriptor()
}

func (WorkUnitView) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_enumTypes[1]
}

func (x WorkUnitView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkUnitView.Descriptor instead.
func (WorkUnitView) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

// A key-value map describing one variant of a module.
//
// A module can be executed in different ways, for example on
// different OS, GPUs, with different compile options or runtime flags.
// A variant definition captures one such variant.
// A test case with a specific variant definition is called test variant.
//
// Guidelines for variant definition design:
//   - This rule guides what keys MUST be present in the definition.
//     A single expected result of a given test variant is enough to consider it
//     passing (potentially flakily). If it is important to differentiate across
//     a certain dimension (e.g. whether web tests are executed with or without
//     site per process isolation), then there MUST be a key that captures the
//     dimension (e.g. a name from test_suites.pyl).
//     Otherwise, a pass in one variant will hide a failure of another one.
//
//   - This rule guides what keys MUST NOT be present in the definition.
//     A change in the key-value set essentially resets the test result history.
//     For example, if GN args are among variant key-value pairs, then adding a
//     new GN arg changes the identity of the test variant and resets its history.
//
// In Chromium, variant keys are:
//   - bucket: the LUCI bucket, e.g. "ci"
//   - builder: the LUCI builder, e.g. "linux-rel"
//   - test_suite: a name from
//     https://cs.chromium.org/chromium/src/testing/buildbot/test_suites.pyl
type Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The definition of the variant.
	// Key and values must be valid StringPair keys and values, see their
	// constraints.
	//
	// These values must be the same for all tests in a given execution of
	// a module. Variants specific to a particular test case should be
	// encoded in the test method name (see TestIdentifier.method).
	//
	// The total size (as measured by proto.Size) must be less than 1,024 bytes.
	Def map[string]string `protobuf:"bytes,1,rep,name=def,proto3" json:"def,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Variant) Reset() {
	*x = Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant) ProtoMessage() {}

func (x *Variant) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variant.ProtoReflect.Descriptor instead.
func (*Variant) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Variant) GetDef() map[string]string {
	if x != nil {
		return x.Def
	}
	return nil
}

// A string key-value pair. Typically used for tagging, see Invocation.tags
type StringPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regex: ^[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*$
	// Max length: 64 bytes.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Must be valid UTF-8, Unicode Normalization Form C, printable characters
	// only.
	// Max length: 256 bytes.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringPair) Reset() {
	*x = StringPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringPair) ProtoMessage() {}

func (x *StringPair) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringPair.ProtoReflect.Descriptor instead.
func (*StringPair) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *StringPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// TestIdentifier represents the identity of a test in structured form.
// It includes information about the configuration the test was run in (e.g.
// build configuration, CPU architecture, OS).
//
// The structured test identifier represented in this proto corresponds to
// the flat test identifier with the following form:
// :{module_name}!{module_scheme}:{coarse_name}:{fine_name}#{case_name}
//
// and variant matching module_variant. (Note that {case_name} may in turn
// include multiple components separated by colons, see 'Extended depth
// hierarchies' under case_name below.)
//
// The precise algorithm for encoding a structured test ID to a flat
// test ID is an implementation detail of ResultDB and must not be relied
// upon by clients. Use the provided encode and decode functions in the
// pbutil library if you need to encode or decode them. BigQuery exports
// should include the structured form Test ID to avoid clients needing
// to decode IDs.
//
// Special treatment exists for legacy test identifiers, for which
// module_name = "legacy", module_scheme = "legacy", coarse_name = "",
// fine_name = "" and case_name = <legacy_id>. For these, the corresponding
// flat test ID is simply:
// {case_name}
//
// (no escaping applies to this form, although method starting with ':'
// is illegal for legacy test identifiers).
//
// See go/resultdb-test-hierarchy-design for more details.
//
// Limits: the encoded flat test ID (as per rules above) must be less than
// 512 bytes in UTF-8.
type TestIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the module being tested. A module is a set of tests which run
	// with the same test harness, and typically corresponds with a unit of
	// build, such as a bazel test target.
	//
	// For example, "CtsSdkExtensionsTestCases" or "chrome/test:blink_webkit_tests".
	//
	// Note: Modules are identified by the combination of module_name and scheme, not
	// only module_name. See `scheme` field below for more.
	//
	// Constraints:
	//   - Limited to 300 bytes of valid, printable UTF-8. For the purposes of this
	//     definition, the unicode replacement character (U+FFFD) is not considered printable.
	//     See also length limits on `TestIdentifier` as a whole.
	//   - All unicode must be in Normalization Form C.
	//   - Use of spaces is allowed, but discouraged.
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// The scheme of the module, for example, "junit" or "gtest".
	//
	// Must match one of the schemes in the ResultDB service configuration (see
	// go/resultdb-schemes). Additional values can be configured as needed.
	//
	// Note: modules are identified by the combination of module_name, module_variant and
	// module_scheme.
	// Nonetheless, when presenting data on a frontend, it is acceptable to not show the scheme
	// as it exists primarily to allow customisation of the labels shown next to the coarse_name,
	// fine_name and case_name fields.
	// When uploading data it is STRONGLY DISCOURAGED to use different schemes with the same
	// module name as it may lead to ambiguous UI for users.
	//
	// Limited to ^[a-z][a-z0-9]{0,19}$.
	ModuleScheme string `protobuf:"bytes,2,opt,name=module_scheme,json=moduleScheme,proto3" json:"module_scheme,omitempty"`
	// Description of one specific way of running the tests in a module,
	// e.g. specific ABI (x64/x86/...), build flags and/or operating system.
	//
	// Variants identify the unique ways the module was run compared to every other way
	// the module is run by the LUCI project. As such, some variant key-value pairs
	// may be repeated for all modules in an invocation.
	//
	// N.B. Presently this is always the same as test_result.variant but semantics could
	// diverge in future if variants are introduced at other levels.
	ModuleVariant *Variant `protobuf:"bytes,3,opt,name=module_variant,json=moduleVariant,proto3" json:"module_variant,omitempty"`
	// Hash of the module variant.
	// hex(sha256(sorted(”.join('%s:%s\n' for k, v in module_variant.items()))))[:8].
	//
	// In the context of the TestResult record, this field is OUTPUT_ONLY and will be
	// automatically computed from the provided module_variant (do not set it yourself).
	// In the context of ResultDB Query RPCs accepting this type as a request filter,
	// this field may be specified as an alternative to module_variant.
	ModuleVariantHash string `protobuf:"bytes,4,opt,name=module_variant_hash,json=moduleVariantHash,proto3" json:"module_variant_hash,omitempty"`
	// Intermediate hierarchy - coarse name.
	//
	// For example "com.android.os.ext".
	//
	// A scheme dependent value used to organise the test into a coarse group of related tests,
	// such as a package or directory.
	// If the scheme does not define a coarse grouping, this must be blank.
	// If only one intermediate hierarchy level is used for a scheme, it is always the
	// fine hierarchy level.
	//
	// Constraints:
	//   - Must match constraints set by the module's scheme.
	//   - Limited to 300 bytes of printable UTF-8. For the purposes of this
	//     definition, the unicode replacement character (U+FFFD) is not considered printable.
	//     See also length limits on `TestIdentifier` as a whole.
	//   - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
	//   - All unicode must be in Normalization Form C.
	//   - Use of spaces is allowed, but discouraged.
	CoarseName string `protobuf:"bytes,5,opt,name=coarse_name,json=coarseName,proto3" json:"coarse_name,omitempty"`
	// Interemdiate hierarchy - fine name.
	//
	// For example "SdkExtensionsTest" or "WebDialogBrowserTest".
	//
	// A finer grouping within the above coarse grouping (if any), e.g. class or file.
	// If the scheme does not define a fine grouping, this must be blank.
	//
	// Constraints:
	//   - Must match constraints set by the module's scheme.
	//   - Limited to 300 bytes of printable UTF-8. For the purposes of this
	//     definition, the unicode replacement character (U+FFFD) is not considered printable.
	//     See also length limits on `TestIdentifier` as a whole.
	//   - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
	//   - All unicode must be in Normalization Form C.
	//   - Use of spaces is allowed, but discouraged.
	FineName string `protobuf:"bytes,6,opt,name=fine_name,json=fineName,proto3" json:"fine_name,omitempty"`
	// The identifier of test case within the above fine grouping.
	//
	// For example "testBadArgument" or "topLevelTest:with_context:does_something".
	//
	// This is the finest granularity component of the test identifier, and typically
	// refers to sub-file granularity unless no such granularity exists.
	//
	// Application guidance:
	// * Standard usage: E.g. GTest methods, JUnit methods, etc.
	//
	//	Put the test method name in this field, escaping any colons (':')
	//	and backlashes ('\') with a backslash '\'.
	//	If your tests have additional hierarchy in the test case name,
	//	consider the section on 'Extended depth hierarchies' below.
	//
	// * Class/package-level setup/teardown:
	//
	//	Use the special value "*fixture" when reporting the result of
	//	setup and teardown common to tests in the same fine_name.
	//
	// * Extended depth hierarchies:
	//
	//	When uploading a test case from an extended depth hierarchy, use the separator ':'
	//	to separate the components of the test case identifier (e.g. the describe blocks
	//	in a jest/mocha test). Text between the separators must have all occurrences
	//	of ':' and '\' escaped with a backslash ('\') to avoid other colons being interpreted
	//	as separators. Each component of such a hierarchical test case ID must not be empty.
	//	E.g. 'topLevelTest:' is not valid.
	//
	//	Rationale and Important Caveats
	//
	//	Most test hierarchy should be captured by the module, coarse and fine names.
	//	For example, the module typically captures the compilation unit, the coarse name
	//	the directory (e.g. package name) and the fine name the file (e.g. class name).
	//	This leaves the case name to capture sub-file granularity, which
	//	in many frameworks is simply the method name.
	//
	//	However, some frameworks have additional levels of test hierarchy within the
	//	"file" level. For example, Jest and Mocha allow tests to be nested within
	//	an arbitrary number of describe('subscope', func() { ... }) blocks. There may
	//	also be parameterisations of tests. For such cases, we offer a standardised
	//	way to express the additional hierarchy using colons (':') to separate components.
	//	UI may give special treatment to components so expressed in future.
	//
	//	Only consider uploading separate results for each test in such an additional
	//	depth hierarchy if all of the following hold:
	//	- Passes are reported for each test, not just failures.
	//	- Tests are independent (e.g. a assertion failure does not cause multiple
	//	  failing results, e.g. failure of the child test does not also cause the
	//	  parent to fail or vice-versa as is typical in many 'subtest' arrangements).
	//	- In case of retries, you are happy for each test passing individually at least
	//	  once to allow CL submission. I.E. they do not all have to pass in the same run.
	//
	//	The above criteria are important to keep the test results view understandable in
	//	case of retries, and to protect the data model that downstream clients
	//	rely on (e.g. clients must report passes where they report failures).
	//
	//	If they cannot be met, do not upload separate tests results and prefer to upload one
	//	test result per top-level method. Currently Mocha and Jest tests, and parameterised
	//	GTest methods are the only cases where it is known these requirements can be met. Python
	//	unittests and go subtests do not meet the requirements due to falling foul of the
	//	independence requirement (and in case of python unittests, also the inability to
	//	report passes for subtests).
	//
	// Constraints:
	//   - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C),
	//     unless it is to write the value "*fixture".
	//   - The use of the ':' character is reserved for denoting variable depth/extended depth
	//     hierarchies. If you do not intend this semantic, you must escape it using a backslash.
	//     (You must also escape all backslashes that are not denoting an escape sequence with
	//     a backslash.)
	//   - When the case_name is broken up by ':', each such component must be non-empty.
	//   - Limited to 512 bytes of printable UTF-8. For the purposes of this
	//     definition, the unicode replacement character (U+FFFD) is not considered printable.
	//     See also length limits on `TestIdentifier` as a whole.
	//   - All unicode must be in Normalization Form C.
	//   - Use of spaces is allowed, but discouraged.
	//   - Legacy test identifiers (in module "legacy") are exempted from some of the
	//     above constraints to facilitate backwards compatibility but use of this quirk is
	//     discouraged.
	CaseName string `protobuf:"bytes,7,opt,name=case_name,json=caseName,proto3" json:"case_name,omitempty"`
}

func (x *TestIdentifier) Reset() {
	*x = TestIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIdentifier) ProtoMessage() {}

func (x *TestIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIdentifier.ProtoReflect.Descriptor instead.
func (*TestIdentifier) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *TestIdentifier) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *TestIdentifier) GetModuleScheme() string {
	if x != nil {
		return x.ModuleScheme
	}
	return ""
}

func (x *TestIdentifier) GetModuleVariant() *Variant {
	if x != nil {
		return x.ModuleVariant
	}
	return nil
}

func (x *TestIdentifier) GetModuleVariantHash() string {
	if x != nil {
		return x.ModuleVariantHash
	}
	return ""
}

func (x *TestIdentifier) GetCoarseName() string {
	if x != nil {
		return x.CoarseName
	}
	return ""
}

func (x *TestIdentifier) GetFineName() string {
	if x != nil {
		return x.FineName
	}
	return ""
}

func (x *TestIdentifier) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

// TestIdentifierPrefix represents a prefix of a structured test id.
//
// For the purposes of this message, all module_* fields are considered one
// logical field and must be set together.
//
// Compared to the TestIdentifier message, this message tracks which
// parts of the prefix is present. This is necessary, as:
//
// module_name: "//bazel_path:my_target"
// module_variant: [...]
// module_scheme: "myscheme"
// (module prefix)
//
// differs semantically from
//
// module_name: "//bazel_path:my_target"
// module_variant: [...]
// module_scheme: "myscheme"
// coarse_name: ""
// (coarse name prefix)
//
// As the former represents a module-level aggregate and the latter a coarse-name
// aggregate for coarse name "".
type TestIdentifierPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The aggregation level represented by the prefix.
	Level AggregationLevel `protobuf:"varint,1,opt,name=level,proto3,enum=luci.resultdb.v1.AggregationLevel" json:"level,omitempty"`
	// The test identifier. This may have only some fields set, based on the
	// selected aggregation level.
	// If an AggregationLevel of Invocation is set, identifier must be unset or all its fields must be empty.
	// If an AggregationLevel of Module is set, all module fields must be set.
	// If an AggregationLevel of Coarse is set, all module fields and the coarse_name field must be set.
	// If an AggregationLevel of Fine is set, all module fields, and the coarse_name and fine_name fields must be set.
	// If an AggregationLevel of Case is set, all fields must be set.
	//
	// In case of coarse_name and fine_name, as empty ("") is a valid value, the fields
	// are taken to be set according to the set AggregationLevel.
	Id *TestIdentifier `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TestIdentifierPrefix) Reset() {
	*x = TestIdentifierPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestIdentifierPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIdentifierPrefix) ProtoMessage() {}

func (x *TestIdentifierPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIdentifierPrefix.ProtoReflect.Descriptor instead.
func (*TestIdentifierPrefix) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *TestIdentifierPrefix) GetLevel() AggregationLevel {
	if x != nil {
		return x.Level
	}
	return AggregationLevel_AGGREGATION_LEVEL_UNSPECIFIED
}

func (x *TestIdentifierPrefix) GetId() *TestIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

// ModuleIdentifier represents the identity of a module.
type ModuleIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the module being tested. A module is a set of tests which run
	// with the same test harness, and typically corresponds with a unit of
	// build, such as a bazel test target.
	//
	// See TestIdentifier.module_name for more details.
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// The scheme of the module, for example, "junit" or "gtest".
	//
	// Must match one of the schemes in the ResultDB service configuration (see
	// go/resultdb-schemes). Additional values can be configured as needed.
	//
	// See TestIdentifier.module_scheme for more details.
	ModuleScheme string `protobuf:"bytes,2,opt,name=module_scheme,json=moduleScheme,proto3" json:"module_scheme,omitempty"`
	// Description of one specific way of running the tests in a module,
	// e.g. specific ABI (x64/x86/...), build flags and/or operating system.
	//
	// See TestIdentifier.module_variant for more details.
	ModuleVariant *Variant `protobuf:"bytes,3,opt,name=module_variant,json=moduleVariant,proto3" json:"module_variant,omitempty"`
	// Hash of the module variant.
	//
	// In the context of the WorkUnit record, this field is always OUTPUT_ONLY and will be
	// automatically computed from the provided module_variant (do not set it yourself).
	// In the context of ResultDB Query RPCs accepting this type as a request filter,
	// this field may be specified as an alternative to module_variant.
	//
	// See TestIdentifier.module_variant_hash for more details.
	ModuleVariantHash string `protobuf:"bytes,4,opt,name=module_variant_hash,json=moduleVariantHash,proto3" json:"module_variant_hash,omitempty"`
}

func (x *ModuleIdentifier) Reset() {
	*x = ModuleIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleIdentifier) ProtoMessage() {}

func (x *ModuleIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleIdentifier.ProtoReflect.Descriptor instead.
func (*ModuleIdentifier) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *ModuleIdentifier) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *ModuleIdentifier) GetModuleScheme() string {
	if x != nil {
		return x.ModuleScheme
	}
	return ""
}

func (x *ModuleIdentifier) GetModuleVariant() *Variant {
	if x != nil {
		return x.ModuleVariant
	}
	return nil
}

func (x *ModuleIdentifier) GetModuleVariantHash() string {
	if x != nil {
		return x.ModuleVariantHash
	}
	return ""
}

// GitilesCommit specifies the position of the gitiles commit an invocation
// ran against, in a repository's commit log. More specifically, a ref's commit
// log.
//
// It also specifies the host/project/ref combination that the commit
// exists in, to provide context.
type GitilesCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identity of the gitiles host, e.g. "chromium.googlesource.com".
	// Mandatory.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Repository name on the host, e.g. "chromium/src". Mandatory.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
	// Not the branch name, use "refs/heads/branch"
	// Mandatory.
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	// Commit HEX SHA1. All lowercase. Mandatory.
	CommitHash string `protobuf:"bytes,4,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// Defines a total order of commits on the ref.
	// A positive, monotonically increasing integer. The recommended
	// way of obtaining this is by using the goto.google.com/git-numberer
	// Gerrit plugin. Other solutions can be used as well, so long
	// as the same scheme is used consistently for a ref.
	// Mandatory.
	Position int64 `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GitilesCommit) Reset() {
	*x = GitilesCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitilesCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesCommit) ProtoMessage() {}

func (x *GitilesCommit) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesCommit.ProtoReflect.Descriptor instead.
func (*GitilesCommit) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *GitilesCommit) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitilesCommit) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GitilesCommit) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GitilesCommit) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *GitilesCommit) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// A Gerrit patchset.
type GerritChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gerrit hostname, e.g. "chromium-review.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project, e.g. "chromium/src".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Change number, e.g. 12345.
	Change int64 `protobuf:"varint,3,opt,name=change,proto3" json:"change,omitempty"`
	// Patch set number, e.g. 1.
	Patchset int64 `protobuf:"varint,4,opt,name=patchset,proto3" json:"patchset,omitempty"`
}

func (x *GerritChange) Reset() {
	*x = GerritChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GerritChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritChange) ProtoMessage() {}

func (x *GerritChange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritChange.ProtoReflect.Descriptor instead.
func (*GerritChange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *GerritChange) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GerritChange) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GerritChange) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *GerritChange) GetPatchset() int64 {
	if x != nil {
		return x.Patchset
	}
	return 0
}

// Specifies the build ID of a submitted Android build. A submitted build is a
// build that uses only changes that have been submitted to a branch.
type SubmittedAndroidBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Android Build API data realm.
	// This is usually `prod`.
	DataRealm string `protobuf:"bytes,1,opt,name=data_realm,json=dataRealm,proto3" json:"data_realm,omitempty"`
	// The Android Build branch.
	// E.g. `git_main`.
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// The build ID of the *submitted* build.
	//
	// This must be parsed to an integer, as this will be exported to BigQuery
	// and used for sorting results in source order.
	//
	// When comparing two build IDs on the same data realm and branch, we expect:
	// - A higher number means a newer version of sources were used in a build.
	// - An equal number means the same version of sources used in a build.
	// - A smaller number means an earlier version of sources were used in a build.
	BuildId int64 `protobuf:"varint,3,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (x *SubmittedAndroidBuild) Reset() {
	*x = SubmittedAndroidBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmittedAndroidBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmittedAndroidBuild) ProtoMessage() {}

func (x *SubmittedAndroidBuild) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmittedAndroidBuild.ProtoReflect.Descriptor instead.
func (*SubmittedAndroidBuild) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *SubmittedAndroidBuild) GetDataRealm() string {
	if x != nil {
		return x.DataRealm
	}
	return ""
}

func (x *SubmittedAndroidBuild) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SubmittedAndroidBuild) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

// Specifies the source code that was tested.
type Sources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The base version of code sources checked out. Mandatory.
	//
	// Types that are assignable to BaseSources:
	//
	//	*Sources_GitilesCommit
	//	*Sources_SubmittedAndroidBuild
	BaseSources isSources_BaseSources `protobuf_oneof:"base_sources"`
	// The changelist(s) which were applied upon the base version of sources
	// checked out. E.g. in presubmit tryjobs.
	//
	// At most 10 changelist(s) may be specified here. If there
	// are more, only include the first 10 and set is_dirty.
	Changelists []*GerritChange `protobuf:"bytes,2,rep,name=changelists,proto3" json:"changelists,omitempty"`
	// Whether there were any changes made to the sources, not described above.
	// For example, a version of a dependency was upgraded before testing (e.g.
	// in an autoroller recipe).
	//
	// Cherry-picking a changelist on top of the base checkout is not considered
	// making the sources dirty as it is reported separately in `changelists` above.
	IsDirty bool `protobuf:"varint,3,opt,name=is_dirty,json=isDirty,proto3" json:"is_dirty,omitempty"`
}

func (x *Sources) Reset() {
	*x = Sources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sources) ProtoMessage() {}

func (x *Sources) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sources.ProtoReflect.Descriptor instead.
func (*Sources) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{8}
}

func (m *Sources) GetBaseSources() isSources_BaseSources {
	if m != nil {
		return m.BaseSources
	}
	return nil
}

func (x *Sources) GetGitilesCommit() *GitilesCommit {
	if x, ok := x.GetBaseSources().(*Sources_GitilesCommit); ok {
		return x.GitilesCommit
	}
	return nil
}

func (x *Sources) GetSubmittedAndroidBuild() *SubmittedAndroidBuild {
	if x, ok := x.GetBaseSources().(*Sources_SubmittedAndroidBuild); ok {
		return x.SubmittedAndroidBuild
	}
	return nil
}

func (x *Sources) GetChangelists() []*GerritChange {
	if x != nil {
		return x.Changelists
	}
	return nil
}

func (x *Sources) GetIsDirty() bool {
	if x != nil {
		return x.IsDirty
	}
	return false
}

type isSources_BaseSources interface {
	isSources_BaseSources()
}

type Sources_GitilesCommit struct {
	// The base version of code sources checked out.
	GitilesCommit *GitilesCommit `protobuf:"bytes,1,opt,name=gitiles_commit,json=gitilesCommit,proto3,oneof"`
}

type Sources_SubmittedAndroidBuild struct {
	// The submitted Android Build ID that describes the base code sources tested.
	//
	// In presubmit, where the invocation is testing a pending build (a build ID
	// starting with "P"), lookup its reference build (which will be a submitted
	// build) and specify it here. Then specify the cherry-picked changes under
	// `changelists`.
	SubmittedAndroidBuild *SubmittedAndroidBuild `protobuf:"bytes,4,opt,name=submitted_android_build,json=submittedAndroidBuild,proto3,oneof"`
}

func (*Sources_GitilesCommit) isSources_BaseSources() {}

func (*Sources_SubmittedAndroidBuild) isSources_BaseSources() {}

// Deprecated: Use GitilesCommit instead.
type CommitPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The following fields identify a git repository and a ref within which the
	// numerical position below identifies a single commit.
	Host    string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Ref     string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	// The numerical position of the commit in the log for the host/project/ref
	// above.
	Position int64 `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *CommitPosition) Reset() {
	*x = CommitPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitPosition) ProtoMessage() {}

func (x *CommitPosition) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitPosition.ProtoReflect.Descriptor instead.
func (*CommitPosition) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{9}
}

func (x *CommitPosition) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CommitPosition) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CommitPosition) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *CommitPosition) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// Represents a reference in a source control system.
type SourceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source control system used.
	// Only gitiles is supported at this moment. If other systems need to be
	// supported in future (e.g. non-gitiles git, subversion, google storage
	// buckets), they can be added here
	//
	// Types that are assignable to System:
	//
	//	*SourceRef_Gitiles
	//	*SourceRef_AndroidBuild
	System isSourceRef_System `protobuf_oneof:"system"`
}

func (x *SourceRef) Reset() {
	*x = SourceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRef) ProtoMessage() {}

func (x *SourceRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRef.ProtoReflect.Descriptor instead.
func (*SourceRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{10}
}

func (m *SourceRef) GetSystem() isSourceRef_System {
	if m != nil {
		return m.System
	}
	return nil
}

func (x *SourceRef) GetGitiles() *GitilesRef {
	if x, ok := x.GetSystem().(*SourceRef_Gitiles); ok {
		return x.Gitiles
	}
	return nil
}

func (x *SourceRef) GetAndroidBuild() *AndroidBuildBranch {
	if x, ok := x.GetSystem().(*SourceRef_AndroidBuild); ok {
		return x.AndroidBuild
	}
	return nil
}

type isSourceRef_System interface {
	isSourceRef_System()
}

type SourceRef_Gitiles struct {
	// A branch in gitiles repository.
	Gitiles *GitilesRef `protobuf:"bytes,1,opt,name=gitiles,proto3,oneof"`
}

type SourceRef_AndroidBuild struct {
	// A branch in Android Build API.
	AndroidBuild *AndroidBuildBranch `protobuf:"bytes,2,opt,name=android_build,json=androidBuild,proto3,oneof"`
}

func (*SourceRef_Gitiles) isSourceRef_System() {}

func (*SourceRef_AndroidBuild) isSourceRef_System() {}

// Represents a branch in Android Build API.
type AndroidBuildBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Android Build API data realm.
	// This is usually `prod`.
	DataRealm string `protobuf:"bytes,1,opt,name=data_realm,json=dataRealm,proto3" json:"data_realm,omitempty"`
	// The Android Build branch.
	// E.g. `git_main`.
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *AndroidBuildBranch) Reset() {
	*x = AndroidBuildBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndroidBuildBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidBuildBranch) ProtoMessage() {}

func (x *AndroidBuildBranch) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidBuildBranch.ProtoReflect.Descriptor instead.
func (*AndroidBuildBranch) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{11}
}

func (x *AndroidBuildBranch) GetDataRealm() string {
	if x != nil {
		return x.DataRealm
	}
	return ""
}

func (x *AndroidBuildBranch) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

// Represents a branch in a gitiles repository.
type GitilesRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The gitiles host, e.g. "chromium.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The project on the gitiles host, e.g. "chromium/src".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
	// Not the branch name, use "refs/heads/branch"
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *GitilesRef) Reset() {
	*x = GitilesRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitilesRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesRef) ProtoMessage() {}

func (x *GitilesRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesRef.ProtoReflect.Descriptor instead.
func (*GitilesRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP(), []int{12}
}

func (x *GitilesRef) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitilesRef) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GitilesRef) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

var File_go_chromium_org_luci_resultdb_proto_v1_common_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x22, 0x77, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x66, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x03, 0x64, 0x65, 0x66, 0x1a, 0x36, 0x0a, 0x08, 0x44, 0x65, 0x66, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x34, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x14, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x30, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xca, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52,
	0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8c,
	0x01, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a,
	0x0c, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x22,
	0x69, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x07, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x61, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79,
	0x42, 0x0e, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x6c, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c,
	0x01, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x07,
	0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x07, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x4b, 0x0a,
	0x12, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61,
	0x6c, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x4c, 0x0a, 0x0a, 0x47, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x2a, 0x71, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4f, 0x41, 0x52, 0x53, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4e, 0x45, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x45, 0x10, 0x05, 0x2a, 0x61, 0x0a, 0x0c, 0x57,
	0x6f, 0x72, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x0a, 0x1a, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41,
	0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x42, 0x50,
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a,
	0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescData = file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDesc
)

func file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescData)
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_go_chromium_org_luci_resultdb_proto_v1_common_proto_goTypes = []interface{}{
	(AggregationLevel)(0),         // 0: luci.resultdb.v1.AggregationLevel
	(WorkUnitView)(0),             // 1: luci.resultdb.v1.WorkUnitView
	(*Variant)(nil),               // 2: luci.resultdb.v1.Variant
	(*StringPair)(nil),            // 3: luci.resultdb.v1.StringPair
	(*TestIdentifier)(nil),        // 4: luci.resultdb.v1.TestIdentifier
	(*TestIdentifierPrefix)(nil),  // 5: luci.resultdb.v1.TestIdentifierPrefix
	(*ModuleIdentifier)(nil),      // 6: luci.resultdb.v1.ModuleIdentifier
	(*GitilesCommit)(nil),         // 7: luci.resultdb.v1.GitilesCommit
	(*GerritChange)(nil),          // 8: luci.resultdb.v1.GerritChange
	(*SubmittedAndroidBuild)(nil), // 9: luci.resultdb.v1.SubmittedAndroidBuild
	(*Sources)(nil),               // 10: luci.resultdb.v1.Sources
	(*CommitPosition)(nil),        // 11: luci.resultdb.v1.CommitPosition
	(*SourceRef)(nil),             // 12: luci.resultdb.v1.SourceRef
	(*AndroidBuildBranch)(nil),    // 13: luci.resultdb.v1.AndroidBuildBranch
	(*GitilesRef)(nil),            // 14: luci.resultdb.v1.GitilesRef
	nil,                           // 15: luci.resultdb.v1.Variant.DefEntry
}
var file_go_chromium_org_luci_resultdb_proto_v1_common_proto_depIdxs = []int32{
	15, // 0: luci.resultdb.v1.Variant.def:type_name -> luci.resultdb.v1.Variant.DefEntry
	2,  // 1: luci.resultdb.v1.TestIdentifier.module_variant:type_name -> luci.resultdb.v1.Variant
	0,  // 2: luci.resultdb.v1.TestIdentifierPrefix.level:type_name -> luci.resultdb.v1.AggregationLevel
	4,  // 3: luci.resultdb.v1.TestIdentifierPrefix.id:type_name -> luci.resultdb.v1.TestIdentifier
	2,  // 4: luci.resultdb.v1.ModuleIdentifier.module_variant:type_name -> luci.resultdb.v1.Variant
	7,  // 5: luci.resultdb.v1.Sources.gitiles_commit:type_name -> luci.resultdb.v1.GitilesCommit
	9,  // 6: luci.resultdb.v1.Sources.submitted_android_build:type_name -> luci.resultdb.v1.SubmittedAndroidBuild
	8,  // 7: luci.resultdb.v1.Sources.changelists:type_name -> luci.resultdb.v1.GerritChange
	14, // 8: luci.resultdb.v1.SourceRef.gitiles:type_name -> luci.resultdb.v1.GitilesRef
	13, // 9: luci.resultdb.v1.SourceRef.android_build:type_name -> luci.resultdb.v1.AndroidBuildBranch
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestIdentifierPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitilesCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GerritChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmittedAndroidBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndroidBuildBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitilesRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Sources_GitilesCommit)(nil),
		(*Sources_SubmittedAndroidBuild)(nil),
	}
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SourceRef_Gitiles)(nil),
		(*SourceRef_AndroidBuild)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_common_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_common_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_common_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_common_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_common_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_rawDesc = nil
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_depIdxs = nil
}
