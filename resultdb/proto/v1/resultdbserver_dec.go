// Code generated by svcdec; DO NOT EDIT.

package resultpb

import (
	"context"

	proto "github.com/golang/protobuf/proto"
)

type DecoratedResultDB struct {
	// Service is the service to decorate.
	Service ResultDBServer
	// Prelude is called for each method before forwarding the call to Service.
	// If Prelude returns an error, then the call is skipped and the error is
	// processed via the Postlude (if one is defined), or it is returned directly.
	Prelude func(ctx context.Context, methodName string, req proto.Message) (context.Context, error)
	// Postlude is called for each method after Service has processed the call, or
	// after the Prelude has returned an error. This takes the Service's
	// response proto (which may be nil) and/or any error. The decorated
	// service will return the response (possibly mutated) and error that Postlude
	// returns.
	Postlude func(ctx context.Context, methodName string, rsp proto.Message, err error) error
}

func (s *DecoratedResultDB) GetInvocation(ctx context.Context, req *GetInvocationRequest) (rsp *Invocation, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "GetInvocation", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.GetInvocation(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "GetInvocation", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryRootInvocationNames(ctx context.Context, req *QueryRootInvocationNamesRequest) (rsp *QueryRootInvocationNamesResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryRootInvocationNames", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryRootInvocationNames(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryRootInvocationNames", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) GetTestResult(ctx context.Context, req *GetTestResultRequest) (rsp *TestResult, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "GetTestResult", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.GetTestResult(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "GetTestResult", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) ListTestResults(ctx context.Context, req *ListTestResultsRequest) (rsp *ListTestResultsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "ListTestResults", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ListTestResults(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "ListTestResults", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) GetTestExoneration(ctx context.Context, req *GetTestExonerationRequest) (rsp *TestExoneration, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "GetTestExoneration", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.GetTestExoneration(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "GetTestExoneration", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) ListTestExonerations(ctx context.Context, req *ListTestExonerationsRequest) (rsp *ListTestExonerationsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "ListTestExonerations", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ListTestExonerations(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "ListTestExonerations", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryTestResults(ctx context.Context, req *QueryTestResultsRequest) (rsp *QueryTestResultsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTestResults", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTestResults(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTestResults", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryTestExonerations(ctx context.Context, req *QueryTestExonerationsRequest) (rsp *QueryTestExonerationsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTestExonerations", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTestExonerations(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTestExonerations", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryTestResultStatistics(ctx context.Context, req *QueryTestResultStatisticsRequest) (rsp *QueryTestResultStatisticsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTestResultStatistics", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTestResultStatistics(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTestResultStatistics", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryNewTestVariants(ctx context.Context, req *QueryNewTestVariantsRequest) (rsp *QueryNewTestVariantsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryNewTestVariants", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryNewTestVariants(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryNewTestVariants", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryRunTestVerdicts(ctx context.Context, req *QueryRunTestVerdictsRequest) (rsp *QueryRunTestVerdictsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryRunTestVerdicts", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryRunTestVerdicts(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryRunTestVerdicts", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryTestVariants(ctx context.Context, req *QueryTestVariantsRequest) (rsp *QueryTestVariantsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTestVariants", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTestVariants(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTestVariants", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) BatchGetTestVariants(ctx context.Context, req *BatchGetTestVariantsRequest) (rsp *BatchGetTestVariantsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "BatchGetTestVariants", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.BatchGetTestVariants(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "BatchGetTestVariants", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryTestMetadata(ctx context.Context, req *QueryTestMetadataRequest) (rsp *QueryTestMetadataResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTestMetadata", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTestMetadata(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTestMetadata", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) GetInstruction(ctx context.Context, req *GetInstructionRequest) (rsp *Instruction, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "GetInstruction", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.GetInstruction(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "GetInstruction", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryInstruction(ctx context.Context, req *QueryInstructionRequest) (rsp *QueryInstructionResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryInstruction", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryInstruction(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryInstruction", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) GetArtifact(ctx context.Context, req *GetArtifactRequest) (rsp *Artifact, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "GetArtifact", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.GetArtifact(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "GetArtifact", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) ListArtifacts(ctx context.Context, req *ListArtifactsRequest) (rsp *ListArtifactsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "ListArtifacts", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ListArtifacts(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "ListArtifacts", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryArtifacts(ctx context.Context, req *QueryArtifactsRequest) (rsp *QueryArtifactsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryArtifacts", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryArtifacts(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryArtifacts", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) ListArtifactLines(ctx context.Context, req *ListArtifactLinesRequest) (rsp *ListArtifactLinesResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "ListArtifactLines", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.ListArtifactLines(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "ListArtifactLines", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryArtifactFailureOnlyLines(ctx context.Context, req *QueryArtifactFailureOnlyLinesRequest) (rsp *QueryArtifactFailureOnlyLinesResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryArtifactFailureOnlyLines", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryArtifactFailureOnlyLines(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryArtifactFailureOnlyLines", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryTestVariantArtifactGroups(ctx context.Context, req *QueryTestVariantArtifactGroupsRequest) (rsp *QueryTestVariantArtifactGroupsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTestVariantArtifactGroups", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTestVariantArtifactGroups(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTestVariantArtifactGroups", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryTestVariantArtifacts(ctx context.Context, req *QueryTestVariantArtifactsRequest) (rsp *QueryTestVariantArtifactsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTestVariantArtifacts", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTestVariantArtifacts(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTestVariantArtifacts", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryInvocationVariantArtifactGroups(ctx context.Context, req *QueryInvocationVariantArtifactGroupsRequest) (rsp *QueryInvocationVariantArtifactGroupsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryInvocationVariantArtifactGroups", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryInvocationVariantArtifactGroups(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryInvocationVariantArtifactGroups", rsp, err)
	}
	return
}

func (s *DecoratedResultDB) QueryInvocationVariantArtifacts(ctx context.Context, req *QueryInvocationVariantArtifactsRequest) (rsp *QueryInvocationVariantArtifactsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryInvocationVariantArtifacts", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryInvocationVariantArtifacts(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryInvocationVariantArtifacts", rsp, err)
	}
	return
}
