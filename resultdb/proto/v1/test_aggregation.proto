// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.resultdb.v1;

import "go.chromium.org/luci/resultdb/proto/v1/common.proto";

option go_package = "go.chromium.org/luci/resultdb/proto/v1;resultpb";
option java_package = "com.google.luci.resultdb.v1";
option java_multiple_files = true;

message TestAggregation {
  // The test identifier prefix represented by the test aggregate.
  TestIdentifierPrefix id = 1;

  // The next (finer) aggregation level to use if drilling into this aggregate,
  // based on the currently defined scheme information.
  // Some schemes do not use one or both intermediate hierarchy levels, this
  // makes it easy to skip them.
  // If unset, no finer aggregation is available and the next finer level
  // is test verdicts.
  AggregationLevel next_finer_level = 2;

  // The counts of test verdict statuses rolling up to this aggregation.
  VerdictStatusCounts verdict_counts = 3;

  // In future, we will add module status counts (e.g. failed, flaky) here.
}

message VerdictStatusCounts {
  // Counts of verdicts by base status.

  // Total number of failed verdicts.
  // Some of these may have been exonerated, see failed_exonerated for a breakout.
  int32 failed = 1;
  // Total number of flaky verdicts.
  int32 flaky = 2;
  // Total number of passed verdicts.
  int32 passed = 3;
  // Total number of skipped verdicts.
  int32 skipped = 4;
  // Total number of infra failed verdicts.
  // Some of these may have been exonerated, see infra_failed_exonerated for a breakout.
  int32 infra_failed = 5;

  // Breakdown of selected failed statuses by override status.

  // Total number of failed verdicts with exonerations.
  // To work out how many failures have not been exonerated use
  // (failed - failed_exonerated).
  int32 failed_exonerated = 6;
  // Total number of infra failed verdicts with exonerations.
  // To work out how many infra failures have not been exonerated use
  // (infra_failed - infra_failed_exonerated).
  int32 infra_failed_exonerated = 7;
}
