// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/resultdb/proto/v1/resultdb.proto

package resultpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message for GetInvocation RPC.
type GetInvocationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the invocation to request, see Invocation.name.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInvocationRequest) Reset() {
	*x = GetInvocationRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInvocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInvocationRequest) ProtoMessage() {}

func (x *GetInvocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInvocationRequest.ProtoReflect.Descriptor instead.
func (*GetInvocationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{0}
}

func (x *GetInvocationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request message for QueryRootInvocationNames RPC.
type QueryRootInvocationNamesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the invocation to request, see Invocation.name.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRootInvocationNamesRequest) Reset() {
	*x = QueryRootInvocationNamesRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRootInvocationNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRootInvocationNamesRequest) ProtoMessage() {}

func (x *QueryRootInvocationNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRootInvocationNamesRequest.ProtoReflect.Descriptor instead.
func (*QueryRootInvocationNamesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{1}
}

func (x *QueryRootInvocationNamesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A response message for QueryRootInvocationNames RPC.
type QueryRootInvocationNamesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of all root invocations to the invocation in the request.
	// A root either
	//   - has is_export_root = true, or
	//   - has no parent invocation.
	//
	// If the invocation to request is already a root,
	// the root_invocation_names will only contains the invocation in the request
	// (i.e. a invocation can be its own root).
	//
	// root_invocation_names can be empty when no root is found (in the presence of cycles).
	RootInvocationNames []string `protobuf:"bytes,1,rep,name=root_invocation_names,json=rootInvocationNames,proto3" json:"root_invocation_names,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryRootInvocationNamesResponse) Reset() {
	*x = QueryRootInvocationNamesResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRootInvocationNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRootInvocationNamesResponse) ProtoMessage() {}

func (x *QueryRootInvocationNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRootInvocationNamesResponse.ProtoReflect.Descriptor instead.
func (*QueryRootInvocationNamesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{2}
}

func (x *QueryRootInvocationNamesResponse) GetRootInvocationNames() []string {
	if x != nil {
		return x.RootInvocationNames
	}
	return nil
}

// A request message for GetTestResult RPC.
type GetTestResultRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the test result to request, see TestResult.name.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTestResultRequest) Reset() {
	*x = GetTestResultRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestResultRequest) ProtoMessage() {}

func (x *GetTestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestResultRequest.ProtoReflect.Descriptor instead.
func (*GetTestResultRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{3}
}

func (x *GetTestResultRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request message for ListTestResults RPC.
type ListTestResultsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the invocation, e.g. "invocations/{id}".
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The maximum number of test results to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 test results will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListTestResults` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListTestResults` MUST
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Fields to include in the response.
	// If not set, the default mask is used where summary_html and tags are
	// excluded.
	// Test result names will always be included even if "name" is not a part of
	// the mask.
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestResultsRequest) Reset() {
	*x = ListTestResultsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestResultsRequest) ProtoMessage() {}

func (x *ListTestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestResultsRequest.ProtoReflect.Descriptor instead.
func (*ListTestResultsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{4}
}

func (x *ListTestResultsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *ListTestResultsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestResultsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTestResultsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

// A response message for ListTestResults RPC.
type ListTestResultsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test results from the specified invocation.
	TestResults []*TestResult `protobuf:"bytes,1,rep,name=test_results,json=testResults,proto3" json:"test_results,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	// If the invocation is not finalized, more results may appear later.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestResultsResponse) Reset() {
	*x = ListTestResultsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestResultsResponse) ProtoMessage() {}

func (x *ListTestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestResultsResponse.ProtoReflect.Descriptor instead.
func (*ListTestResultsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{5}
}

func (x *ListTestResultsResponse) GetTestResults() []*TestResult {
	if x != nil {
		return x.TestResults
	}
	return nil
}

func (x *ListTestResultsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for GetTestExoneration RPC.
type GetTestExonerationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the test exoneration to request, see TestExoneration.name.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTestExonerationRequest) Reset() {
	*x = GetTestExonerationRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTestExonerationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestExonerationRequest) ProtoMessage() {}

func (x *GetTestExonerationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestExonerationRequest.ProtoReflect.Descriptor instead.
func (*GetTestExonerationRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{6}
}

func (x *GetTestExonerationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request message for ListTestExonerations RPC.
type ListTestExonerationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the invocation, e.g. "invocations/{id}".
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The maximum number of test exonerations to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 test exonerations will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListTestExonerations` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListTestExonerations`
	// MUST match the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestExonerationsRequest) Reset() {
	*x = ListTestExonerationsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestExonerationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestExonerationsRequest) ProtoMessage() {}

func (x *ListTestExonerationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestExonerationsRequest.ProtoReflect.Descriptor instead.
func (*ListTestExonerationsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{7}
}

func (x *ListTestExonerationsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *ListTestExonerationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestExonerationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for ListTestExonerations RPC.
type ListTestExonerationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test exonerations from the specified invocation.
	TestExonerations []*TestExoneration `protobuf:"bytes,1,rep,name=test_exonerations,json=testExonerations,proto3" json:"test_exonerations,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	// If the invocation is not finalized, more results may appear later.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTestExonerationsResponse) Reset() {
	*x = ListTestExonerationsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTestExonerationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestExonerationsResponse) ProtoMessage() {}

func (x *ListTestExonerationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestExonerationsResponse.ProtoReflect.Descriptor instead.
func (*ListTestExonerationsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{8}
}

func (x *ListTestExonerationsResponse) GetTestExonerations() []*TestExoneration {
	if x != nil {
		return x.TestExonerations
	}
	return nil
}

func (x *ListTestExonerationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for QueryTestResults RPC.
type QueryTestResultsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve test results included in these invocations, directly or indirectly
	// (via Invocation.included_invocations).
	//
	// Specifying multiple invocations is equivalent to querying one invocation
	// that includes these.
	Invocations []string `protobuf:"bytes,1,rep,name=invocations,proto3" json:"invocations,omitempty"`
	// A test result in the response must satisfy this predicate.
	Predicate *TestResultPredicate `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// The maximum number of test results to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 test results will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestResults` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestResults` MUST
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Fields to include in the response.
	// If not set, the default mask is used where summary_html, properties and tags are
	// excluded.
	// Test result names will always be included even if "name" is not a part of
	// the mask.
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,6,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestResultsRequest) Reset() {
	*x = QueryTestResultsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestResultsRequest) ProtoMessage() {}

func (x *QueryTestResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestResultsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestResultsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{9}
}

func (x *QueryTestResultsRequest) GetInvocations() []string {
	if x != nil {
		return x.Invocations
	}
	return nil
}

func (x *QueryTestResultsRequest) GetPredicate() *TestResultPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *QueryTestResultsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestResultsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryTestResultsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

// A response message for QueryTestResults RPC.
type QueryTestResultsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matched test results.
	// Ordered by parent invocation ID, test ID and result ID.
	TestResults []*TestResult `protobuf:"bytes,1,rep,name=test_results,json=testResults,proto3" json:"test_results,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestResultsResponse) Reset() {
	*x = QueryTestResultsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestResultsResponse) ProtoMessage() {}

func (x *QueryTestResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestResultsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestResultsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{10}
}

func (x *QueryTestResultsResponse) GetTestResults() []*TestResult {
	if x != nil {
		return x.TestResults
	}
	return nil
}

func (x *QueryTestResultsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for QueryTestExonerations RPC.
type QueryTestExonerationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve test exonerations included in these invocations, directly or
	// indirectly (via Invocation.included_invocations).
	//
	// As of February 2025, a maximum of one invocation may be specified.
	Invocations []string `protobuf:"bytes,1,rep,name=invocations,proto3" json:"invocations,omitempty"`
	// A test exoneration in the response must satisfy this predicate.
	Predicate *TestExonerationPredicate `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// The maximum number of test exonerations to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 test exonerations will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestExonerations` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestExonerations`
	// MUST match the call that provided the page token.
	PageToken     string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestExonerationsRequest) Reset() {
	*x = QueryTestExonerationsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestExonerationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestExonerationsRequest) ProtoMessage() {}

func (x *QueryTestExonerationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestExonerationsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestExonerationsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{11}
}

func (x *QueryTestExonerationsRequest) GetInvocations() []string {
	if x != nil {
		return x.Invocations
	}
	return nil
}

func (x *QueryTestExonerationsRequest) GetPredicate() *TestExonerationPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *QueryTestExonerationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestExonerationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for QueryTestExonerations RPC.
type QueryTestExonerationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test exonerations matching the predicate.
	// Ordered by parent invocation ID, test ID and exoneration ID.
	TestExonerations []*TestExoneration `protobuf:"bytes,1,rep,name=test_exonerations,json=testExonerations,proto3" json:"test_exonerations,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestExonerationsResponse) Reset() {
	*x = QueryTestExonerationsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestExonerationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestExonerationsResponse) ProtoMessage() {}

func (x *QueryTestExonerationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestExonerationsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestExonerationsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{12}
}

func (x *QueryTestExonerationsResponse) GetTestExonerations() []*TestExoneration {
	if x != nil {
		return x.TestExonerations
	}
	return nil
}

func (x *QueryTestExonerationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for QueryTestResultStatistics RPC.
type QueryTestResultStatisticsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve statistics of test result belong to these invocations,
	// directly or indirectly (via Invocation.included_invocations).
	//
	// Specifying multiple invocations is equivalent to requesting one invocation
	// that includes these.
	Invocations   []string `protobuf:"bytes,1,rep,name=invocations,proto3" json:"invocations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestResultStatisticsRequest) Reset() {
	*x = QueryTestResultStatisticsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestResultStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestResultStatisticsRequest) ProtoMessage() {}

func (x *QueryTestResultStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestResultStatisticsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestResultStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{13}
}

func (x *QueryTestResultStatisticsRequest) GetInvocations() []string {
	if x != nil {
		return x.Invocations
	}
	return nil
}

// A response message for QueryTestResultStatistics RPC.
type QueryTestResultStatisticsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of test results.
	TotalTestResults int64 `protobuf:"varint,1,opt,name=total_test_results,json=totalTestResults,proto3" json:"total_test_results,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryTestResultStatisticsResponse) Reset() {
	*x = QueryTestResultStatisticsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestResultStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestResultStatisticsResponse) ProtoMessage() {}

func (x *QueryTestResultStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestResultStatisticsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestResultStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{14}
}

func (x *QueryTestResultStatisticsResponse) GetTotalTestResults() int64 {
	if x != nil {
		return x.TotalTestResults
	}
	return 0
}

// A request message for GetArtifact RPC.
type GetArtifactRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the artifact to request, see Artifact.name.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArtifactRequest) Reset() {
	*x = GetArtifactRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactRequest) ProtoMessage() {}

func (x *GetArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactRequest.ProtoReflect.Descriptor instead.
func (*GetArtifactRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{15}
}

func (x *GetArtifactRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request message for ListArtifacts RPC.
type ListArtifactsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the parent, e.g. a work unit (see WorkUnit.name),
	// a test result (see TestResult.name), or a legacy invocation name
	// (see Invocation.name).
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of artifacts to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 artifacts will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListArtifacts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListArtifacts` MUST
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListArtifactsRequest) Reset() {
	*x = ListArtifactsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactsRequest) ProtoMessage() {}

func (x *ListArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactsRequest.ProtoReflect.Descriptor instead.
func (*ListArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{16}
}

func (x *ListArtifactsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListArtifactsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListArtifactsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for ListArtifacts RPC.
type ListArtifactsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The artifacts from the specified parent.
	Artifacts []*Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	// If the work unit is not finalized, more results may appear later.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListArtifactsResponse) Reset() {
	*x = ListArtifactsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactsResponse) ProtoMessage() {}

func (x *ListArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactsResponse.ProtoReflect.Descriptor instead.
func (*ListArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{17}
}

func (x *ListArtifactsResponse) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ListArtifactsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for QueryArtifacts RPC.
type QueryArtifactsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve artifacts included in these invocations, directly or indirectly
	// (via Invocation.included_invocations and via contained test results).
	//
	// Specifying multiple invocations is equivalent to querying one invocation
	// that includes these.
	Invocations []string `protobuf:"bytes,1,rep,name=invocations,proto3" json:"invocations,omitempty"`
	// An artifact in the response must satisfy this predicate.
	Predicate *ArtifactPredicate `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// The maximum number of artifacts to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 artifacts will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryArtifacts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryArtifacts` MUST
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Fields to include in the response.
	// If not set, the default mask is used where all fields are included.
	//
	// In particular, the fetch_url field can slow down the request or in some cases introduce
	// quota errors, so it is encouraged to not read the fetch_url field unless necessary.
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,6,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryArtifactsRequest) Reset() {
	*x = QueryArtifactsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryArtifactsRequest) ProtoMessage() {}

func (x *QueryArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryArtifactsRequest.ProtoReflect.Descriptor instead.
func (*QueryArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{18}
}

func (x *QueryArtifactsRequest) GetInvocations() []string {
	if x != nil {
		return x.Invocations
	}
	return nil
}

func (x *QueryArtifactsRequest) GetPredicate() *ArtifactPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *QueryArtifactsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryArtifactsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryArtifactsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

// A response message for QueryArtifacts RPC.
type QueryArtifactsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matched artifacts.
	// First invocation-level artifacts, then test-result-level artifacts
	// ordered by parent invocation ID, test ID and artifact ID.
	Artifacts []*Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryArtifactsResponse) Reset() {
	*x = QueryArtifactsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryArtifactsResponse) ProtoMessage() {}

func (x *QueryArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryArtifactsResponse.ProtoReflect.Descriptor instead.
func (*QueryArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{19}
}

func (x *QueryArtifactsResponse) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *QueryArtifactsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for ListArtifactLines RPC.
type ListArtifactLinesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve log lines for this artifact.
	// Format:
	//   - For invocation-level artifacts:
	//     "invocations/{INVOCATION_ID}/artifacts/{ARTIFACT_ID}".
	//   - For test-result-level artifacts:
	//     "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}/artifacts/{ARTIFACT_ID}".
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of log lines to return.
	//
	// The service may return fewer than this value.
	// The response size will be truncated to 10MB
	// if the size of matching lines is larger than 10MB.
	// If unspecified or is equal to 0, a max of 10MB of lines will be returned.
	// Negative page sizes are not allowed.
	PageSize      int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListArtifactLinesRequest) Reset() {
	*x = ListArtifactLinesRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtifactLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactLinesRequest) ProtoMessage() {}

func (x *ListArtifactLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactLinesRequest.ProtoReflect.Descriptor instead.
func (*ListArtifactLinesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{20}
}

func (x *ListArtifactLinesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListArtifactLinesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// A response for ListArtifactLines RPC
type ListArtifactLinesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The log lines in the artifact.
	Lines         []*ArtifactLine `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListArtifactLinesResponse) Reset() {
	*x = ListArtifactLinesResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListArtifactLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactLinesResponse) ProtoMessage() {}

func (x *ListArtifactLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactLinesResponse.ProtoReflect.Descriptor instead.
func (*ListArtifactLinesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{21}
}

func (x *ListArtifactLinesResponse) GetLines() []*ArtifactLine {
	if x != nil {
		return x.Lines
	}
	return nil
}

// A request for the QueryArtifactFailureOnlyLines RPC.
type QueryArtifactFailureOnlyLinesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve log lines for this artifact.
	// Invocation level artifacts are not yet supported.
	// Format:
	//   - For test-result-level artifacts:
	//     "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}/artifacts/{ARTIFACT_ID}".
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// If set to true, the content of the log lines will be returned in the
	// response.  If left missing or false, only the line range indexes will
	// be returned.
	IncludeContent bool `protobuf:"varint,2,opt,name=include_content,json=includeContent,proto3" json:"include_content,omitempty"`
	// The maximum number of line ranges to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 1000 line ranges will be returned.
	// The maximum value is 10,000; values above 10,000 will be coerced to 10,000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryArtifactFailureOnlyLines` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryArtifactFailureOnlyLines` MUST
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryArtifactFailureOnlyLinesRequest) Reset() {
	*x = QueryArtifactFailureOnlyLinesRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryArtifactFailureOnlyLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryArtifactFailureOnlyLinesRequest) ProtoMessage() {}

func (x *QueryArtifactFailureOnlyLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryArtifactFailureOnlyLinesRequest.ProtoReflect.Descriptor instead.
func (*QueryArtifactFailureOnlyLinesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{22}
}

func (x *QueryArtifactFailureOnlyLinesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *QueryArtifactFailureOnlyLinesRequest) GetIncludeContent() bool {
	if x != nil {
		return x.IncludeContent
	}
	return false
}

func (x *QueryArtifactFailureOnlyLinesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryArtifactFailureOnlyLinesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response for the QueryArtifactFailureOnlyLines RPC.
type QueryArtifactFailureOnlyLinesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Line ranges [start, end) in the requested artifact that do not typically
	// appear versions of the artifact from passing test results.
	// Line ranges are returned in sorted ascending order.
	FailureOnlyLineRanges []*QueryArtifactFailureOnlyLinesResponse_LineRange `protobuf:"bytes,1,rep,name=failure_only_line_ranges,json=failureOnlyLineRanges,proto3" json:"failure_only_line_ranges,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryArtifactFailureOnlyLinesResponse) Reset() {
	*x = QueryArtifactFailureOnlyLinesResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryArtifactFailureOnlyLinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryArtifactFailureOnlyLinesResponse) ProtoMessage() {}

func (x *QueryArtifactFailureOnlyLinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryArtifactFailureOnlyLinesResponse.ProtoReflect.Descriptor instead.
func (*QueryArtifactFailureOnlyLinesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{23}
}

func (x *QueryArtifactFailureOnlyLinesResponse) GetFailureOnlyLineRanges() []*QueryArtifactFailureOnlyLinesResponse_LineRange {
	if x != nil {
		return x.FailureOnlyLineRanges
	}
	return nil
}

func (x *QueryArtifactFailureOnlyLinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for QueryTestVariants RPC.
// Next id: 10.
type QueryTestVariantsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve test verdicts included in these invocations, directly or indirectly
	// (via Invocation.included_invocations).
	//
	// As of April 2024, a maximum of one invocation may be specified.
	Invocations []string `protobuf:"bytes,2,rep,name=invocations,proto3" json:"invocations,omitempty"`
	// A test variant must satisfy this predicate.
	Predicate *TestVariantPredicate `protobuf:"bytes,6,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// The maximum number of test results to be included in a test variant.
	//
	// If a test variant has more results than the limit, the remaining results
	// will not be returned.
	// If unspecified, at most 10 results will be included in a test variant.
	// The maximum value is 100; values above 100 will be coerced to 100.
	ResultLimit int32 `protobuf:"varint,8,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
	// The maximum number of test variants to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 test variants will be returned.
	// The maximum value is 10,000; values above 10,000 will be coerced to 10,000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestVariants` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestVariants` MUST
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Fields to include in the response.
	// If not set, the default mask is used where all fields are included.
	//
	// The following fields in results.*.result will NEVER be included even when
	// specified:
	// * test_id
	// * variant_hash
	// * variant
	// * test_metadata
	// Those values can be found in the parent test variant objects.
	//
	// The following fields will ALWAYS be included even when NOT specified:
	// * test_id
	// * variant_hash
	// * status
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,7,opt,name=read_mask,json=readMask,proto3" json:"read_mask,omitempty"`
	// The ordering of test verdicts in the response.
	//
	// See https://google.aip.dev/132 for syntax.
	//
	// For performance reasons, only two sort orders are supported:
	//   - verdict status v1 ascending (order is UNEXPECTED, UNEXPECTEDLY_SKIPPED,
	//     FLAKY, EXONERATED, EXPECTED).
	//     This is the default. It can be explicitly requested by "status" or "status asc".
	//   - effective verdict status v2 ascending (by verdict status v2 including any status overrides,
	//     order is FAILED, EXECUTION_ERRORED, PRECLUDED, FLAKY, EXONERATED, SKIPPED & PASSED).
	//     It can be requested by "status_v2_effective" or "status_v2_effective asc"
	//     where status_v2_effective is a virtual field representing the above sort order.
	OrderBy string `protobuf:"bytes,9,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// An AIP-160 style filter to select test variants to return.
	//
	// Filtering supports a subset of [AIP-160 filtering](https://google.aip.dev/160).
	//
	// All values are case-sensitive.
	//
	// A bare value is searched for in the column test_id. E.g. ninja.
	//
	// You can use AND, OR and NOT (case sensitive) logical operators, along
	// with grouping. '-' is equivalent to NOT. Multiple bare values are
	// considered to be AND separated.  E.g. These are equivalent:
	// hello world
	// and:
	// hello AND world
	//
	// More examples:
	// a OR b
	// a AND NOT(b or -c)
	//
	// You can filter particular columns with '=', '!=' and ':' (has) operators.
	// The right hand side of the operator must be a simple value. E.g:
	// test_id:telemetry
	// -variant.os:mac
	//
	// Supported columns to search on:
	// - test_id
	// - variant_hash
	// - variant
	Filter        string `protobuf:"bytes,10,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVariantsRequest) Reset() {
	*x = QueryTestVariantsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVariantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantsRequest) ProtoMessage() {}

func (x *QueryTestVariantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestVariantsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{24}
}

func (x *QueryTestVariantsRequest) GetInvocations() []string {
	if x != nil {
		return x.Invocations
	}
	return nil
}

func (x *QueryTestVariantsRequest) GetPredicate() *TestVariantPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *QueryTestVariantsRequest) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

func (x *QueryTestVariantsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestVariantsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryTestVariantsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *QueryTestVariantsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *QueryTestVariantsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// A response message for QueryTestVariants RPC.
type QueryTestVariantsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matched test variants.
	// Ordered by TestVariantStatus, test_id, then variant_hash
	TestVariants []*TestVariant `protobuf:"bytes,1,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The code sources tested by the returned test variants. The sources are keyed
	// by an ID which allows them to be cross-referenced from TestVariant.sources_id.
	//
	// The sources are returned via this map instead of directly on the TestVariant
	// to avoid excessive response size. Each source message could be up to a few
	// kilobytes and there are usually no more than a handful of different sources
	// tested in an invocation, so deduplicating them here reduces response size.
	Sources       map[string]*Sources `protobuf:"bytes,3,rep,name=sources,proto3" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVariantsResponse) Reset() {
	*x = QueryTestVariantsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVariantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantsResponse) ProtoMessage() {}

func (x *QueryTestVariantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestVariantsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{25}
}

func (x *QueryTestVariantsResponse) GetTestVariants() []*TestVariant {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

func (x *QueryTestVariantsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *QueryTestVariantsResponse) GetSources() map[string]*Sources {
	if x != nil {
		return x.Sources
	}
	return nil
}

// Request message for QueryRunTestVerdicts RPC.
type QueryRunTestVerdictsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieve test verdicts for the test run represented by this invocation.
	// Format: invocations/{INVOCATION_ID}.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The maximum number of test results to be included in a test variant.
	//
	// If a test variant has more results than the limit, the remaining results
	// will not be returned.
	// If unspecified, at most 10 results will be included in a test variant.
	// The maximum value is 100; values above 100 will be coerced to 100.
	ResultLimit int32 `protobuf:"varint,2,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
	// The maximum number of test variants to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 1000 test variants will be returned.
	// The maximum value is 10,000; values above 10,000 will be coerced to 10,000.
	// Page sizes smaller than the maximum may be returned at the server's
	// discretion, for example, due to keep the response size tractable for
	// the server.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryRunTestVerdicts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to
	// `QueryRunTestVerdicts` MUST match the call that provided the page
	// token.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRunTestVerdictsRequest) Reset() {
	*x = QueryRunTestVerdictsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRunTestVerdictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRunTestVerdictsRequest) ProtoMessage() {}

func (x *QueryRunTestVerdictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRunTestVerdictsRequest.ProtoReflect.Descriptor instead.
func (*QueryRunTestVerdictsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{26}
}

func (x *QueryRunTestVerdictsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *QueryRunTestVerdictsRequest) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

func (x *QueryRunTestVerdictsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryRunTestVerdictsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for QueryRunTestVerdicts RPC.
type QueryRunTestVerdictsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test verdicts for the run.
	//
	// Ordered by test_id, then variant_hash.
	RunTestVerdicts []*RunTestVerdict `protobuf:"bytes,1,rep,name=run_test_verdicts,json=runTestVerdicts,proto3" json:"run_test_verdicts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRunTestVerdictsResponse) Reset() {
	*x = QueryRunTestVerdictsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRunTestVerdictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRunTestVerdictsResponse) ProtoMessage() {}

func (x *QueryRunTestVerdictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRunTestVerdictsResponse.ProtoReflect.Descriptor instead.
func (*QueryRunTestVerdictsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{27}
}

func (x *QueryRunTestVerdictsResponse) GetRunTestVerdicts() []*RunTestVerdict {
	if x != nil {
		return x.RunTestVerdicts
	}
	return nil
}

func (x *QueryRunTestVerdictsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for BatchGetTestVariants RPC.
type BatchGetTestVariantsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the invocation that the test variants are in.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// A list of test variants to query. Size is limited to 500.
	// Any request for more than 500 variants will return an error.
	TestVariants []*BatchGetTestVariantsRequest_TestVariantIdentifier `protobuf:"bytes,2,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
	// The maximum number of test results to be included in a test variant.
	//
	// If a test variant has more results than the limit, the remaining results
	// will not be returned.
	// If unspecified, at most 10 results will be included in a test variant.
	// The maximum value is 100; values above 100 will be coerced to 100.
	ResultLimit   int32 `protobuf:"varint,3,opt,name=result_limit,json=resultLimit,proto3" json:"result_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetTestVariantsRequest) Reset() {
	*x = BatchGetTestVariantsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetTestVariantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestVariantsRequest) ProtoMessage() {}

func (x *BatchGetTestVariantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestVariantsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetTestVariantsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{28}
}

func (x *BatchGetTestVariantsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *BatchGetTestVariantsRequest) GetTestVariants() []*BatchGetTestVariantsRequest_TestVariantIdentifier {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

func (x *BatchGetTestVariantsRequest) GetResultLimit() int32 {
	if x != nil {
		return x.ResultLimit
	}
	return 0
}

// A response message for BatchGetTestVariants RPC.
type BatchGetTestVariantsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test variants matching the requests. Any variants that weren't found are
	// omitted from the response. Clients shouldn't rely on the ordering of this
	// field, as no particular order is guaranteed.
	TestVariants []*TestVariant `protobuf:"bytes,1,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
	// The code sources tested by the returned test variants. The sources are keyed
	// by an ID which allows them to be cross-referenced from TestVariant.sources_id.
	//
	// The sources are returned via this map instead of directly on the TestVariant
	// to avoid excessive response size. Each source message could be up to a few
	// kilobytes and there are usually no more than a handful of different sources
	// tested in an invocation, so deduplicating them here reduces response size.
	Sources       map[string]*Sources `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetTestVariantsResponse) Reset() {
	*x = BatchGetTestVariantsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetTestVariantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestVariantsResponse) ProtoMessage() {}

func (x *BatchGetTestVariantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestVariantsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetTestVariantsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{29}
}

func (x *BatchGetTestVariantsResponse) GetTestVariants() []*TestVariant {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

func (x *BatchGetTestVariantsResponse) GetSources() map[string]*Sources {
	if x != nil {
		return x.Sources
	}
	return nil
}

// A request message for QueryTestMetadata RPC.
type QueryTestMetadataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project to query.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Filters to apply to the returned test metadata.
	Predicate *TestMetadataPredicate `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// The maximum number of test metadata entries to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 1000 test metadata entries will be returned.
	// The maximum value is 100K; values above 100K will be coerced to 100K.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestMetadata` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestMetadata` MUST
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestMetadataRequest) Reset() {
	*x = QueryTestMetadataRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestMetadataRequest) ProtoMessage() {}

func (x *QueryTestMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestMetadataRequest.ProtoReflect.Descriptor instead.
func (*QueryTestMetadataRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{30}
}

func (x *QueryTestMetadataRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryTestMetadataRequest) GetPredicate() *TestMetadataPredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *QueryTestMetadataRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestMetadataRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for QueryTestMetadata RPC.
type QueryTestMetadataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The matched testMetadata.
	TestMetadata []*TestMetadataDetail `protobuf:"bytes,1,rep,name=testMetadata,proto3" json:"testMetadata,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there were no subsequent pages at the time of
	// request.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestMetadataResponse) Reset() {
	*x = QueryTestMetadataResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestMetadataResponse) ProtoMessage() {}

func (x *QueryTestMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestMetadataResponse.ProtoReflect.Descriptor instead.
func (*QueryTestMetadataResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{31}
}

func (x *QueryTestMetadataResponse) GetTestMetadata() []*TestMetadataDetail {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

func (x *QueryTestMetadataResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for QueryNewTestVariants RPC.
// To use this RPC, callers need:
//   - resultdb.baselines.get in the realm the <baseline_project>:@project, where
//     baseline_project is the LUCI project that contains the baseline.
//   - resultdb.testResults.list in the realm of the invocation which is being
//     queried.
type QueryNewTestVariantsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the invocation, e.g. "invocations/{id}".
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The baseline to compare test variants against, to determine if they are new.
	// e.g. “projects/{project}/baselines/{baseline_id}”.
	// For example, in the project "chromium", the baseline_id may be
	// "try:linux-rel".
	Baseline      string `protobuf:"bytes,2,opt,name=baseline,proto3" json:"baseline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewTestVariantsRequest) Reset() {
	*x = QueryNewTestVariantsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewTestVariantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewTestVariantsRequest) ProtoMessage() {}

func (x *QueryNewTestVariantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewTestVariantsRequest.ProtoReflect.Descriptor instead.
func (*QueryNewTestVariantsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{32}
}

func (x *QueryNewTestVariantsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *QueryNewTestVariantsRequest) GetBaseline() string {
	if x != nil {
		return x.Baseline
	}
	return ""
}

// A response message for QueryNewTestVariants RPC.
type QueryNewTestVariantsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates whether the baseline has been populated with at least 72 hours
	// of data and the results can be relied upon.
	IsBaselineReady bool `protobuf:"varint,1,opt,name=is_baseline_ready,json=isBaselineReady,proto3" json:"is_baseline_ready,omitempty"`
	// Test variants that are new, meaning that they have not been part of
	// a submitted run prior.
	NewTestVariants []*QueryNewTestVariantsResponse_NewTestVariant `protobuf:"bytes,2,rep,name=new_test_variants,json=newTestVariants,proto3" json:"new_test_variants,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryNewTestVariantsResponse) Reset() {
	*x = QueryNewTestVariantsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewTestVariantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewTestVariantsResponse) ProtoMessage() {}

func (x *QueryNewTestVariantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewTestVariantsResponse.ProtoReflect.Descriptor instead.
func (*QueryNewTestVariantsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{33}
}

func (x *QueryNewTestVariantsResponse) GetIsBaselineReady() bool {
	if x != nil {
		return x.IsBaselineReady
	}
	return false
}

func (x *QueryNewTestVariantsResponse) GetNewTestVariants() []*QueryNewTestVariantsResponse_NewTestVariant {
	if x != nil {
		return x.NewTestVariants
	}
	return nil
}

type GetInstructionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the instruction. The format is:
	// invocations/{invocation_id}/instructions/{instruction_id}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetInstructionRequest) Reset() {
	*x = GetInstructionRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetInstructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstructionRequest) ProtoMessage() {}

func (x *GetInstructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstructionRequest.ProtoReflect.Descriptor instead.
func (*GetInstructionRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{34}
}

func (x *GetInstructionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for QueryInstructionDependencies RPC.
type QueryInstructionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the instruction to query for. The format is:
	// invocations/{invocation_id}/instructions/{instruction_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The maximum depth to traverse the dependency chain. Default is 5.
	// The maximum value we support is 10, value bigger than 10 will be adjusted to 10.
	// Non-positive value will be adjusted to the default.
	DependencyMaxDepth int32 `protobuf:"varint,2,opt,name=dependency_max_depth,json=dependencyMaxDepth,proto3" json:"dependency_max_depth,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueryInstructionRequest) Reset() {
	*x = QueryInstructionRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInstructionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstructionRequest) ProtoMessage() {}

func (x *QueryInstructionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstructionRequest.ProtoReflect.Descriptor instead.
func (*QueryInstructionRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{35}
}

func (x *QueryInstructionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryInstructionRequest) GetDependencyMaxDepth() int32 {
	if x != nil {
		return x.DependencyMaxDepth
	}
	return 0
}

// Response for QueryInstructionDependencies RPC.
type QueryInstructionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The instruction.
	Instruction *Instruction `protobuf:"bytes,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	// Dependency chain, one for each target.
	DependencyChains []*InstructionDependencyChain `protobuf:"bytes,2,rep,name=dependency_chains,json=dependencyChains,proto3" json:"dependency_chains,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryInstructionResponse) Reset() {
	*x = QueryInstructionResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInstructionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstructionResponse) ProtoMessage() {}

func (x *QueryInstructionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstructionResponse.ProtoReflect.Descriptor instead.
func (*QueryInstructionResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{36}
}

func (x *QueryInstructionResponse) GetInstruction() *Instruction {
	if x != nil {
		return x.Instruction
	}
	return nil
}

func (x *QueryInstructionResponse) GetDependencyChains() []*InstructionDependencyChain {
	if x != nil {
		return x.DependencyChains
	}
	return nil
}

// The dependency chain for one target.
type InstructionDependencyChain struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target of the dependency chain.
	Target InstructionTarget `protobuf:"varint,1,opt,name=target,proto3,enum=luci.resultdb.v1.InstructionTarget" json:"target,omitempty"`
	// List of dependencies.
	// The list will be sorted by the position in the dependency chain.
	// The direct dependency will be at position 0.
	// If the dependency traversing encounters an error, the last node will contain the error.
	Nodes         []*InstructionDependencyChain_Node `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstructionDependencyChain) Reset() {
	*x = InstructionDependencyChain{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstructionDependencyChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionDependencyChain) ProtoMessage() {}

func (x *InstructionDependencyChain) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionDependencyChain.ProtoReflect.Descriptor instead.
func (*InstructionDependencyChain) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{37}
}

func (x *InstructionDependencyChain) GetTarget() InstructionTarget {
	if x != nil {
		return x.Target
	}
	return InstructionTarget_INSTRUCTION_TARGET_UNSPECIFIED
}

func (x *InstructionDependencyChain) GetNodes() []*InstructionDependencyChain_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type QueryTestVariantArtifactGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI project (required).
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The search string to search in text artifact content (required).
	// Support regex or exact match.
	SearchString *ArtifactContentMatcher `protobuf:"bytes,2,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty"`
	// The test id matcher to restrict the scope of the search (optional).
	TestIdMatcher *IDMatcher `protobuf:"bytes,3,opt,name=test_id_matcher,json=testIdMatcher,proto3" json:"test_id_matcher,omitempty"`
	// The artifact id matcher to restrict the scope of the search (optional).
	ArtifactIdMatcher *IDMatcher `protobuf:"bytes,4,opt,name=artifact_id_matcher,json=artifactIdMatcher,proto3" json:"artifact_id_matcher,omitempty"`
	// The lower bound of the time range to search in UTC time (exclusive) (required).
	// start_time must not be before 20 July 2024 UTC.
	// start_time must be less than the end time.
	// The duration between start_time and end_time must not be greater than 7 days.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The upper bound of the time range to search in UTC time (inclusive) (required).
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The maximum number of match groups to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestVariantArtifactGroups` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestVariantArtifactGroups` must
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,8,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVariantArtifactGroupsRequest) Reset() {
	*x = QueryTestVariantArtifactGroupsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVariantArtifactGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantArtifactGroupsRequest) ProtoMessage() {}

func (x *QueryTestVariantArtifactGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantArtifactGroupsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestVariantArtifactGroupsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{38}
}

func (x *QueryTestVariantArtifactGroupsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryTestVariantArtifactGroupsRequest) GetSearchString() *ArtifactContentMatcher {
	if x != nil {
		return x.SearchString
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsRequest) GetTestIdMatcher() *IDMatcher {
	if x != nil {
		return x.TestIdMatcher
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsRequest) GetArtifactIdMatcher() *IDMatcher {
	if x != nil {
		return x.ArtifactIdMatcher
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestVariantArtifactGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryTestVariantArtifactGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Test variant artifacts are grouped by test_id, variant_hash and artifact_id.
	// Groups are ordered by partition_time of the most recent artifact DESC in the group, test id, variant hash, artifact id.
	Groups []*QueryTestVariantArtifactGroupsResponse_MatchGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVariantArtifactGroupsResponse) Reset() {
	*x = QueryTestVariantArtifactGroupsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVariantArtifactGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantArtifactGroupsResponse) ProtoMessage() {}

func (x *QueryTestVariantArtifactGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantArtifactGroupsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestVariantArtifactGroupsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{39}
}

func (x *QueryTestVariantArtifactGroupsResponse) GetGroups() []*QueryTestVariantArtifactGroupsResponse_MatchGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type QueryTestVariantArtifactsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI project (required).
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The search string to search in text artifact content (required).
	// Support regex or exact match.
	SearchString *ArtifactContentMatcher `protobuf:"bytes,2,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty"`
	// The test id. (required).
	TestId string `protobuf:"bytes,3,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The variant hash (required).
	VariantHash string `protobuf:"bytes,4,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// The artifact id (required).
	ArtifactId string `protobuf:"bytes,5,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// The lower bound of the time range to search in UTC time (exclusive) (required).
	// start_time must not be before 20 July 2024 UTC.
	// start_time must be less than the end time.
	// The duration between start_time and end_time must not be greater than 7 days.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The upper bound of the time range to search in UTC time (inclusive) (required).
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestVariantArtifacts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestVariantArtifacts` must
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVariantArtifactsRequest) Reset() {
	*x = QueryTestVariantArtifactsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVariantArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantArtifactsRequest) ProtoMessage() {}

func (x *QueryTestVariantArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantArtifactsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestVariantArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{40}
}

func (x *QueryTestVariantArtifactsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryTestVariantArtifactsRequest) GetSearchString() *ArtifactContentMatcher {
	if x != nil {
		return x.SearchString
	}
	return nil
}

func (x *QueryTestVariantArtifactsRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *QueryTestVariantArtifactsRequest) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *QueryTestVariantArtifactsRequest) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *QueryTestVariantArtifactsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryTestVariantArtifactsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QueryTestVariantArtifactsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestVariantArtifactsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryTestVariantArtifactsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Artifacts that matches the search.
	// Ordered by partition_time DESC, artifact name.
	Artifacts []*ArtifactMatchingContent `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVariantArtifactsResponse) Reset() {
	*x = QueryTestVariantArtifactsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVariantArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantArtifactsResponse) ProtoMessage() {}

func (x *QueryTestVariantArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantArtifactsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestVariantArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{41}
}

func (x *QueryTestVariantArtifactsResponse) GetArtifacts() []*ArtifactMatchingContent {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *QueryTestVariantArtifactsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type QueryInvocationVariantArtifactGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI project (required).
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The search string to search in text artifact content (required).
	// Support regex or exact match.
	SearchString *ArtifactContentMatcher `protobuf:"bytes,2,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty"`
	// The artifact id matcher to restrict the scope of the search (optional).
	ArtifactIdMatcher *IDMatcher `protobuf:"bytes,3,opt,name=artifact_id_matcher,json=artifactIdMatcher,proto3" json:"artifact_id_matcher,omitempty"`
	// The lower bound of the time range to search in UTC time (exclusive) (required).
	// start_time must not be before 20 July 2024 UTC.
	// start_time must be less than the end time.
	// The duration between start_time and end_time must not be greater than 7 days.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The upper bound of the time range to search in UTC time (inclusive) (required).
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The maximum number of match groups to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryInvocationVariantArtifactGroups` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryInvocationVariantArtifactGroups` must
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryInvocationVariantArtifactGroupsRequest) Reset() {
	*x = QueryInvocationVariantArtifactGroupsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInvocationVariantArtifactGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInvocationVariantArtifactGroupsRequest) ProtoMessage() {}

func (x *QueryInvocationVariantArtifactGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInvocationVariantArtifactGroupsRequest.ProtoReflect.Descriptor instead.
func (*QueryInvocationVariantArtifactGroupsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{42}
}

func (x *QueryInvocationVariantArtifactGroupsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryInvocationVariantArtifactGroupsRequest) GetSearchString() *ArtifactContentMatcher {
	if x != nil {
		return x.SearchString
	}
	return nil
}

func (x *QueryInvocationVariantArtifactGroupsRequest) GetArtifactIdMatcher() *IDMatcher {
	if x != nil {
		return x.ArtifactIdMatcher
	}
	return nil
}

func (x *QueryInvocationVariantArtifactGroupsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryInvocationVariantArtifactGroupsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QueryInvocationVariantArtifactGroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryInvocationVariantArtifactGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryInvocationVariantArtifactGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Invocation variant artifacts  are grouped by variant_union_hash and artifact_id.
	// Ordered by partition_time of the most recent artifact DESC in the group, variant_union_hash, artifact id.
	Groups []*QueryInvocationVariantArtifactGroupsResponse_MatchGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryInvocationVariantArtifactGroupsResponse) Reset() {
	*x = QueryInvocationVariantArtifactGroupsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInvocationVariantArtifactGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInvocationVariantArtifactGroupsResponse) ProtoMessage() {}

func (x *QueryInvocationVariantArtifactGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInvocationVariantArtifactGroupsResponse.ProtoReflect.Descriptor instead.
func (*QueryInvocationVariantArtifactGroupsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{43}
}

func (x *QueryInvocationVariantArtifactGroupsResponse) GetGroups() []*QueryInvocationVariantArtifactGroupsResponse_MatchGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *QueryInvocationVariantArtifactGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type QueryInvocationVariantArtifactsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI project (required).
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The search string to search in text artifact content (required).
	// Support regex or exact match.
	SearchString *ArtifactContentMatcher `protobuf:"bytes,2,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty"`
	// Hash of the union of all variants of test results directly included by the invocation (required).
	VariantUnionHash string `protobuf:"bytes,3,opt,name=variant_union_hash,json=variantUnionHash,proto3" json:"variant_union_hash,omitempty"`
	// The artifact id (required).
	ArtifactId string `protobuf:"bytes,4,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// The lower bound of the time range to search in UTC time (exclusive) (required).
	// start_time must not be before 20 July 2024 UTC.
	// start_time must be less than the end time.
	// The duration between start_time and end_time must not be greater than 7 days.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The upper bound of the time range to search in UTC time (inclusive) (required).
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 100 items will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryInvocationVariantArtifacts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryInvocationVariantArtifacts` must
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,8,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryInvocationVariantArtifactsRequest) Reset() {
	*x = QueryInvocationVariantArtifactsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInvocationVariantArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInvocationVariantArtifactsRequest) ProtoMessage() {}

func (x *QueryInvocationVariantArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInvocationVariantArtifactsRequest.ProtoReflect.Descriptor instead.
func (*QueryInvocationVariantArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{44}
}

func (x *QueryInvocationVariantArtifactsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryInvocationVariantArtifactsRequest) GetSearchString() *ArtifactContentMatcher {
	if x != nil {
		return x.SearchString
	}
	return nil
}

func (x *QueryInvocationVariantArtifactsRequest) GetVariantUnionHash() string {
	if x != nil {
		return x.VariantUnionHash
	}
	return ""
}

func (x *QueryInvocationVariantArtifactsRequest) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *QueryInvocationVariantArtifactsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *QueryInvocationVariantArtifactsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QueryInvocationVariantArtifactsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryInvocationVariantArtifactsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryInvocationVariantArtifactsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Artifacts that matches the search.
	// Ordered by partition_time DESC, artifact name.
	Artifacts []*ArtifactMatchingContent `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryInvocationVariantArtifactsResponse) Reset() {
	*x = QueryInvocationVariantArtifactsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInvocationVariantArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInvocationVariantArtifactsResponse) ProtoMessage() {}

func (x *QueryInvocationVariantArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInvocationVariantArtifactsResponse.ProtoReflect.Descriptor instead.
func (*QueryInvocationVariantArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{45}
}

func (x *QueryInvocationVariantArtifactsResponse) GetArtifacts() []*ArtifactMatchingContent {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *QueryInvocationVariantArtifactsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Represent a artifact that contains a match.
type ArtifactMatchingContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the artifact.
	//   - For invocation-level artifacts:
	//     "invocations/{INVOCATION_ID}/artifacts/{ARTIFACT_ID}".
	//   - For test-result-level artifacts:
	//     "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}/artifacts/{ARTIFACT_ID}".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Partition time of the artifact.
	// This is the creation time of the direct parent invocation.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// The test result status, only populated if it is a result level artifact.
	// Deprecated: Use test_status_v2 instead.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/resultdb.proto.
	TestStatus TestStatus `protobuf:"varint,3,opt,name=test_status,json=testStatus,proto3,enum=luci.resultdb.v1.TestStatus" json:"test_status,omitempty"`
	// The test result status (v2), only populated if it is a result level artifact.
	TestStatusV2 TestResult_Status `protobuf:"varint,6,opt,name=test_status_v2,json=testStatusV2,proto3,enum=luci.resultdb.v1.TestResult_Status" json:"test_status_v2,omitempty"`
	// Part of the artifact content that contains the first occurrence of the match.
	// The snippet is at most 10 KiB.
	// Prioritize fiting first match into the 10KiB first, divided the remaining bytes equally
	// to fit content immediately before and after the first match, including at most one more line above and below.
	// If the first match is more than 10KiB, it will be truncated.
	// Ellipsis ("...") are added, if the snippet is truncated.
	Snippet string `protobuf:"bytes,4,opt,name=snippet,proto3" json:"snippet,omitempty"`
	// All non-overlapping matches exists in the snippet from front to end in order (i.e. matches[i].end_index <= matches[i+1].start_index).
	Matches       []*ArtifactMatchingContent_Match `protobuf:"bytes,5,rep,name=matches,proto3" json:"matches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactMatchingContent) Reset() {
	*x = ArtifactMatchingContent{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactMatchingContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactMatchingContent) ProtoMessage() {}

func (x *ArtifactMatchingContent) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactMatchingContent.ProtoReflect.Descriptor instead.
func (*ArtifactMatchingContent) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{46}
}

func (x *ArtifactMatchingContent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactMatchingContent) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/resultdb/proto/v1/resultdb.proto.
func (x *ArtifactMatchingContent) GetTestStatus() TestStatus {
	if x != nil {
		return x.TestStatus
	}
	return TestStatus_STATUS_UNSPECIFIED
}

func (x *ArtifactMatchingContent) GetTestStatusV2() TestResult_Status {
	if x != nil {
		return x.TestStatusV2
	}
	return TestResult_STATUS_UNSPECIFIED
}

func (x *ArtifactMatchingContent) GetSnippet() string {
	if x != nil {
		return x.Snippet
	}
	return ""
}

func (x *ArtifactMatchingContent) GetMatches() []*ArtifactMatchingContent_Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

// Used to match a artifact content.
type ArtifactContentMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Matcher:
	//
	//	*ArtifactContentMatcher_RegexContain
	//	*ArtifactContentMatcher_Contain
	Matcher       isArtifactContentMatcher_Matcher `protobuf_oneof:"matcher"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactContentMatcher) Reset() {
	*x = ArtifactContentMatcher{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactContentMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactContentMatcher) ProtoMessage() {}

func (x *ArtifactContentMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactContentMatcher.ProtoReflect.Descriptor instead.
func (*ArtifactContentMatcher) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{47}
}

func (x *ArtifactContentMatcher) GetMatcher() isArtifactContentMatcher_Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *ArtifactContentMatcher) GetRegexContain() string {
	if x != nil {
		if x, ok := x.Matcher.(*ArtifactContentMatcher_RegexContain); ok {
			return x.RegexContain
		}
	}
	return ""
}

func (x *ArtifactContentMatcher) GetContain() string {
	if x != nil {
		if x, ok := x.Matcher.(*ArtifactContentMatcher_Contain); ok {
			return x.Contain
		}
	}
	return ""
}

type isArtifactContentMatcher_Matcher interface {
	isArtifactContentMatcher_Matcher()
}

type ArtifactContentMatcher_RegexContain struct {
	// The string is a regex expression. Use regex match to find matching artifact content.
	RegexContain string `protobuf:"bytes,1,opt,name=regex_contain,json=regexContain,proto3,oneof"`
}

type ArtifactContentMatcher_Contain struct {
	// Use case insensitive equality match with this string to find matching artifact content.
	Contain string `protobuf:"bytes,2,opt,name=contain,proto3,oneof"`
}

func (*ArtifactContentMatcher_RegexContain) isArtifactContentMatcher_Matcher() {}

func (*ArtifactContentMatcher_Contain) isArtifactContentMatcher_Matcher() {}

// Used to match IDs (eg. test id, artifact id).
type IDMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Matcher:
	//
	//	*IDMatcher_HasPrefix
	//	*IDMatcher_ExactEqual
	Matcher       isIDMatcher_Matcher `protobuf_oneof:"matcher"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDMatcher) Reset() {
	*x = IDMatcher{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDMatcher) ProtoMessage() {}

func (x *IDMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDMatcher.ProtoReflect.Descriptor instead.
func (*IDMatcher) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{48}
}

func (x *IDMatcher) GetMatcher() isIDMatcher_Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *IDMatcher) GetHasPrefix() string {
	if x != nil {
		if x, ok := x.Matcher.(*IDMatcher_HasPrefix); ok {
			return x.HasPrefix
		}
	}
	return ""
}

func (x *IDMatcher) GetExactEqual() string {
	if x != nil {
		if x, ok := x.Matcher.(*IDMatcher_ExactEqual); ok {
			return x.ExactEqual
		}
	}
	return ""
}

type isIDMatcher_Matcher interface {
	isIDMatcher_Matcher()
}

type IDMatcher_HasPrefix struct {
	// The id should has a matching prefix.
	HasPrefix string `protobuf:"bytes,1,opt,name=has_prefix,json=hasPrefix,proto3,oneof"`
}

type IDMatcher_ExactEqual struct {
	// The id should exactly equal to this string.
	ExactEqual string `protobuf:"bytes,2,opt,name=exact_equal,json=exactEqual,proto3,oneof"`
}

func (*IDMatcher_HasPrefix) isIDMatcher_Matcher() {}

func (*IDMatcher_ExactEqual) isIDMatcher_Matcher() {}

// A request message for QueryTestAggregations RPC.
// Next ID: 6.
type QueryTestAggregationsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The root invocation to retrieve aggregates for.
	// Format: invocations/{INVOCATION_ID}.
	// N.B. Specifying an invocation that is not an export root will yield an
	// INVALID_ARGUMENT error.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The level of aggregate to return.
	// All values except CASE are supported. For CASE-level aggregations,
	// see QueryTestVerdicts instead.
	AggregationLevel AggregationLevel `protobuf:"varint,2,opt,name=aggregation_level,json=aggregationLevel,proto3,enum=luci.resultdb.v1.AggregationLevel" json:"aggregation_level,omitempty"`
	// The test prefix for which to return aggregates.
	//
	// The test prefix must not be more precise than the requested aggregation_level.
	// For example, if the requested aggregation_level is COARSE, you may not
	// use a test_id_prefix with an aggregation_level of FINE.
	//
	// Example #1: To obtain coarse-level aggregates in a module:
	// - set the requested aggregation_level to COARSE.
	// - set the test_prefix_filter.aggregation_level to MODULE, and
	// - test_prefix_filter.id to the Test ID prefix of that module.
	//
	// Example #2: To obtain the invocation-level aggregate:
	//   - set the requested aggregation_level to INVOCATION.
	//   - leave the test_prefix_filter unset, or set it to
	//     test_id_prefix.aggregation_level to INVOCATION.
	TestPrefixFilter *TestIdentifierPrefix `protobuf:"bytes,3,opt,name=test_prefix_filter,json=testPrefixFilter,proto3" json:"test_prefix_filter,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestAggregations` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestAggregationsRequest` must
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestAggregationsRequest) Reset() {
	*x = QueryTestAggregationsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestAggregationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestAggregationsRequest) ProtoMessage() {}

func (x *QueryTestAggregationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestAggregationsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestAggregationsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{49}
}

func (x *QueryTestAggregationsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *QueryTestAggregationsRequest) GetAggregationLevel() AggregationLevel {
	if x != nil {
		return x.AggregationLevel
	}
	return AggregationLevel_AGGREGATION_LEVEL_UNSPECIFIED
}

func (x *QueryTestAggregationsRequest) GetTestPrefixFilter() *TestIdentifierPrefix {
	if x != nil {
		return x.TestPrefixFilter
	}
	return nil
}

func (x *QueryTestAggregationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestAggregationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for QueryTestAggregations RPC.
// Next ID: 3.
type QueryTestAggregationsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test aggregations.
	// Results are sorted by structured test identifier, lexicographically over the tuple
	// (module_name, module_variant_hash, module_scheme, coarse_name, fine_name, case_name).
	//
	// Note: When querying invocations that are not yet finalized, aggregations
	// may be incomplete.
	Aggregations []*TestAggregation `protobuf:"bytes,1,rep,name=aggregations,proto3" json:"aggregations,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestAggregationsResponse) Reset() {
	*x = QueryTestAggregationsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestAggregationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestAggregationsResponse) ProtoMessage() {}

func (x *QueryTestAggregationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestAggregationsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestAggregationsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{50}
}

func (x *QueryTestAggregationsResponse) GetAggregations() []*TestAggregation {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *QueryTestAggregationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for QueryTestVerdicts RPC.
// Next ID: 5.
type QueryTestVerdictsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The root invocation to retrieve test verdicts for.
	// Format: invocations/{INVOCATION_ID}.
	// N.B. Specifying an invocation that is not an export root will yield an
	// INVALID_ARGUMENT error.
	Invocation string `protobuf:"bytes,1,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// The test prefix for which to return aggregates.
	//
	// The test prefix may have:
	// - No fields set, to return all aggregates in the invocation.
	// - Only module set, to return all aggregates within a module.
	// - Module and coarse name set, to return aggregates with a coarse-level aggregation.
	// - Module, coarse name and fine name set, to return aggregates within a fine-level aggregation.
	//
	// The test prefix should not be more precise than the requested aggregation_level.
	// For example, if asking for a coarse-level aggregation, do not include a fine name in the
	// test prefix filter.
	TestPrefixFilter *TestIdentifierPrefix `protobuf:"bytes,2,opt,name=test_prefix_filter,json=testPrefixFilter,proto3" json:"test_prefix_filter,omitempty"`
	// The maximum number of items to return. The service may return fewer than
	// this value.
	// If unspecified, at most 1000 items will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryTestVerdicts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryTestVerdictsRequest` must
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVerdictsRequest) Reset() {
	*x = QueryTestVerdictsRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVerdictsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVerdictsRequest) ProtoMessage() {}

func (x *QueryTestVerdictsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVerdictsRequest.ProtoReflect.Descriptor instead.
func (*QueryTestVerdictsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{51}
}

func (x *QueryTestVerdictsRequest) GetInvocation() string {
	if x != nil {
		return x.Invocation
	}
	return ""
}

func (x *QueryTestVerdictsRequest) GetTestPrefixFilter() *TestIdentifierPrefix {
	if x != nil {
		return x.TestPrefixFilter
	}
	return nil
}

func (x *QueryTestVerdictsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryTestVerdictsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for QueryTestVerdicts RPC.
// Next ID: 3.
type QueryTestVerdictsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test verdicts.
	// Results are sorted by structured test identifier, lexicographically over the tuple
	// (module_name, module_scheme, module_variant_hash, coarse_name, fine_name, case_name).
	TestVerdicts []*TestVerdict `protobuf:"bytes,1,rep,name=test_verdicts,json=testVerdicts,proto3" json:"test_verdicts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVerdictsResponse) Reset() {
	*x = QueryTestVerdictsResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVerdictsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVerdictsResponse) ProtoMessage() {}

func (x *QueryTestVerdictsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVerdictsResponse.ProtoReflect.Descriptor instead.
func (*QueryTestVerdictsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{52}
}

func (x *QueryTestVerdictsResponse) GetTestVerdicts() []*TestVerdict {
	if x != nil {
		return x.TestVerdicts
	}
	return nil
}

func (x *QueryTestVerdictsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A representation of a range of lines in an artifact, where lines are
// represented by their index.  The first line is line 0.
type QueryArtifactFailureOnlyLinesResponse_LineRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The line index of the start of the line range.  The start is inclusive,
	// i.e. the start line is included in the range.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// The line index of the end of the line range.  The end is exclusive, i.e.
	// the end line is not included in the range.
	End int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	// The content of the lines in the range.
	// Only included if include_content in the request is set to true.
	Lines         []string `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryArtifactFailureOnlyLinesResponse_LineRange) Reset() {
	*x = QueryArtifactFailureOnlyLinesResponse_LineRange{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryArtifactFailureOnlyLinesResponse_LineRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryArtifactFailureOnlyLinesResponse_LineRange) ProtoMessage() {}

func (x *QueryArtifactFailureOnlyLinesResponse_LineRange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryArtifactFailureOnlyLinesResponse_LineRange.ProtoReflect.Descriptor instead.
func (*QueryArtifactFailureOnlyLinesResponse_LineRange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{23, 0}
}

func (x *QueryArtifactFailureOnlyLinesResponse_LineRange) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *QueryArtifactFailureOnlyLinesResponse_LineRange) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *QueryArtifactFailureOnlyLinesResponse_LineRange) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type BatchGetTestVariantsRequest_TestVariantIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The structured test identifier. See the comment on
	// TestResult.test_id_structured for full documentation.
	//
	// Either this should be specified, or both test_id and variant_hash below.
	TestIdStructured *TestIdentifier `protobuf:"bytes,3,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// The unique identifier of the test in a LUCI project. See the comment on
	// TestResult.test_id for full documentation.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Hash of the variant. See the comment on TestResult.variant_hash for full
	// documentation.
	VariantHash   string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetTestVariantsRequest_TestVariantIdentifier) Reset() {
	*x = BatchGetTestVariantsRequest_TestVariantIdentifier{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetTestVariantsRequest_TestVariantIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetTestVariantsRequest_TestVariantIdentifier) ProtoMessage() {}

func (x *BatchGetTestVariantsRequest_TestVariantIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetTestVariantsRequest_TestVariantIdentifier.ProtoReflect.Descriptor instead.
func (*BatchGetTestVariantsRequest_TestVariantIdentifier) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{28, 0}
}

func (x *BatchGetTestVariantsRequest_TestVariantIdentifier) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *BatchGetTestVariantsRequest_TestVariantIdentifier) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *BatchGetTestVariantsRequest_TestVariantIdentifier) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

// Represents a new test, which contains minimal information to uniquely identify a TestVariant.
type QueryNewTestVariantsResponse_NewTestVariant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier of the test in a LUCI project.
	// Regex: ^[[::print::]]{1,256}$
	//
	// Refer to TestResult.test_id for details.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Hash of the variant.
	// hex(sha256(sorted(”.join('%s:%s\n' for k, v in variant.items())))).
	VariantHash   string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryNewTestVariantsResponse_NewTestVariant) Reset() {
	*x = QueryNewTestVariantsResponse_NewTestVariant{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryNewTestVariantsResponse_NewTestVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryNewTestVariantsResponse_NewTestVariant) ProtoMessage() {}

func (x *QueryNewTestVariantsResponse_NewTestVariant) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryNewTestVariantsResponse_NewTestVariant.ProtoReflect.Descriptor instead.
func (*QueryNewTestVariantsResponse_NewTestVariant) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{33, 0}
}

func (x *QueryNewTestVariantsResponse_NewTestVariant) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *QueryNewTestVariantsResponse_NewTestVariant) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

// Captures information about a dependency.
type InstructionDependencyChain_Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The instruction name that the dependency belongs to.
	// The format is invocations/{invocation_id}/instructions/{instruction_id}.
	// We need this for the UI to resolve the placeholders of the content.
	InstructionName string `protobuf:"bytes,1,opt,name=instruction_name,json=instructionName,proto3" json:"instruction_name,omitempty"`
	// Content of the dependency.
	// Placeholders (if existed) will be returned as-is.
	// The caller of this RPC is responsible for resolving the placeholders.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// In case the traversal encounters an error, the error will be returned in this field.
	// If an error is returned, it will only be returned in the last dependency node,
	// after that, the chain will stop.
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// The descriptive name of the instruction that the dependency belongs to.
	// In the following cases, the descriptive name will not be set:
	// - If the user does not have the permission to access the instruction for the node, or
	// - If the instruction cannot be found.
	DescriptiveName string `protobuf:"bytes,4,opt,name=descriptive_name,json=descriptiveName,proto3" json:"descriptive_name,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InstructionDependencyChain_Node) Reset() {
	*x = InstructionDependencyChain_Node{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstructionDependencyChain_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionDependencyChain_Node) ProtoMessage() {}

func (x *InstructionDependencyChain_Node) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionDependencyChain_Node.ProtoReflect.Descriptor instead.
func (*InstructionDependencyChain_Node) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{37, 0}
}

func (x *InstructionDependencyChain_Node) GetInstructionName() string {
	if x != nil {
		return x.InstructionName
	}
	return ""
}

func (x *InstructionDependencyChain_Node) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *InstructionDependencyChain_Node) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *InstructionDependencyChain_Node) GetDescriptiveName() string {
	if x != nil {
		return x.DescriptiveName
	}
	return ""
}

// Represents one group of matched artifacts.
// test_id, variant_hash and artifact_id form the group key.
type QueryTestVariantArtifactGroupsResponse_MatchGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI test id.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The hash of the variant.
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// The definition of the variant.
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// ID of the artifact.
	ArtifactId string `protobuf:"bytes,4,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// Artifacts that matches the search for this (test id, variant_hash, artifact id) combination.
	// Return at most 3 items, ordered by partition time DESC, artifact name ASC.
	Artifacts []*ArtifactMatchingContent `protobuf:"bytes,5,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// The total number of matching artifacts for this (test id, variant_hash, artifact id) combination.
	MatchingCount int32 `protobuf:"varint,6,opt,name=matching_count,json=matchingCount,proto3" json:"matching_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) Reset() {
	*x = QueryTestVariantArtifactGroupsResponse_MatchGroup{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTestVariantArtifactGroupsResponse_MatchGroup) ProtoMessage() {}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTestVariantArtifactGroupsResponse_MatchGroup.ProtoReflect.Descriptor instead.
func (*QueryTestVariantArtifactGroupsResponse_MatchGroup) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{39, 0}
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) GetArtifacts() []*ArtifactMatchingContent {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *QueryTestVariantArtifactGroupsResponse_MatchGroup) GetMatchingCount() int32 {
	if x != nil {
		return x.MatchingCount
	}
	return 0
}

// Represents one group of matched artifacts.
// variant_union_hash and artifact_id form the group key.
type QueryInvocationVariantArtifactGroupsResponse_MatchGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hash of the union of all variants of test results directly included by the invocation.
	VariantUnionHash string `protobuf:"bytes,1,opt,name=variant_union_hash,json=variantUnionHash,proto3" json:"variant_union_hash,omitempty"`
	// Union of all variants of test results directly included by the invocation.
	// Roughly defines a specific way to run an invocation.
	VariantUnion *Variant `protobuf:"bytes,2,opt,name=variant_union,json=variantUnion,proto3" json:"variant_union,omitempty"`
	// ID of the artifact.
	ArtifactId string `protobuf:"bytes,3,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	// Artifacts that matches the search for this (variant_union_hash, artifact id) combination.
	// Return at most 3 items, ordered by partition time DESC, artifact name ASC.
	Artifacts []*ArtifactMatchingContent `protobuf:"bytes,4,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	// The total number of matching artifacts for this (variant_union_hash, artifact id) combination.
	MatchingCount int32 `protobuf:"varint,5,opt,name=matching_count,json=matchingCount,proto3" json:"matching_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) Reset() {
	*x = QueryInvocationVariantArtifactGroupsResponse_MatchGroup{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInvocationVariantArtifactGroupsResponse_MatchGroup) ProtoMessage() {}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInvocationVariantArtifactGroupsResponse_MatchGroup.ProtoReflect.Descriptor instead.
func (*QueryInvocationVariantArtifactGroupsResponse_MatchGroup) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{43, 0}
}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) GetVariantUnionHash() string {
	if x != nil {
		return x.VariantUnionHash
	}
	return ""
}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) GetVariantUnion() *Variant {
	if x != nil {
		return x.VariantUnion
	}
	return nil
}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) GetArtifacts() []*ArtifactMatchingContent {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *QueryInvocationVariantArtifactGroupsResponse_MatchGroup) GetMatchingCount() int32 {
	if x != nil {
		return x.MatchingCount
	}
	return 0
}

// Represent the byte location of a match in snippet.
type ArtifactMatchingContent_Match struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start byte index of the match, inclusive.
	StartIndex int32 `protobuf:"varint,1,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	// End byte index of the match, exclusive.
	EndIndex      int32 `protobuf:"varint,2,opt,name=end_index,json=endIndex,proto3" json:"end_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactMatchingContent_Match) Reset() {
	*x = ArtifactMatchingContent_Match{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactMatchingContent_Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactMatchingContent_Match) ProtoMessage() {}

func (x *ArtifactMatchingContent_Match) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactMatchingContent_Match.ProtoReflect.Descriptor instead.
func (*ArtifactMatchingContent_Match) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP(), []int{46, 0}
}

func (x *ArtifactMatchingContent_Match) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *ArtifactMatchingContent_Match) GetEndIndex() int32 {
	if x != nil {
		return x.EndIndex
	}
	return 0
}

var File_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDesc = "" +
	"\n" +
	"5go.chromium.org/luci/resultdb/proto/v1/resultdb.proto\x12\x10luci.resultdb.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a google/protobuf/field_mask.proto\x1a5go.chromium.org/luci/resultdb/proto/v1/artifact.proto\x1a3go.chromium.org/luci/resultdb/proto/v1/common.proto\x1a8go.chromium.org/luci/resultdb/proto/v1/instruction.proto\x1a7go.chromium.org/luci/resultdb/proto/v1/invocation.proto\x1a6go.chromium.org/luci/resultdb/proto/v1/predicate.proto\x1a<go.chromium.org/luci/resultdb/proto/v1/root_invocation.proto\x1a=go.chromium.org/luci/resultdb/proto/v1/test_aggregation.proto\x1a8go.chromium.org/luci/resultdb/proto/v1/test_result.proto\x1a9go.chromium.org/luci/resultdb/proto/v1/test_variant.proto\x1a9go.chromium.org/luci/resultdb/proto/v1/test_verdict.proto\x1a:go.chromium.org/luci/resultdb/proto/v1/test_metadata.proto\x1a6go.chromium.org/luci/resultdb/proto/v1/work_unit.proto\"/\n" +
	"\x14GetInvocationRequest\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\x02R\x04name\":\n" +
	"\x1fQueryRootInvocationNamesRequest\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\x02R\x04name\"V\n" +
	" QueryRootInvocationNamesResponse\x122\n" +
	"\x15root_invocation_names\x18\x01 \x03(\tR\x13rootInvocationNames\"/\n" +
	"\x14GetTestResultRequest\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\x02R\x04name\"\xb2\x01\n" +
	"\x16ListTestResultsRequest\x12#\n" +
	"\n" +
	"invocation\x18\x01 \x01(\tB\x03\xe0A\x02R\n" +
	"invocation\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x127\n" +
	"\tread_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\"\x82\x01\n" +
	"\x17ListTestResultsResponse\x12?\n" +
	"\ftest_results\x18\x01 \x03(\v2\x1c.luci.resultdb.v1.TestResultR\vtestResults\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"/\n" +
	"\x19GetTestExonerationRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"~\n" +
	"\x1bListTestExonerationsRequest\x12#\n" +
	"\n" +
	"invocation\x18\x01 \x01(\tB\x03\xe0A\x02R\n" +
	"invocation\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\x96\x01\n" +
	"\x1cListTestExonerationsResponse\x12N\n" +
	"\x11test_exonerations\x18\x01 \x03(\v2!.luci.resultdb.v1.TestExonerationR\x10testExonerations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xf5\x01\n" +
	"\x17QueryTestResultsRequest\x12 \n" +
	"\vinvocations\x18\x01 \x03(\tR\vinvocations\x12C\n" +
	"\tpredicate\x18\x02 \x01(\v2%.luci.resultdb.v1.TestResultPredicateR\tpredicate\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x127\n" +
	"\tread_mask\x18\x06 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\"\x83\x01\n" +
	"\x18QueryTestResultsResponse\x12?\n" +
	"\ftest_results\x18\x01 \x03(\v2\x1c.luci.resultdb.v1.TestResultR\vtestResults\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xcb\x01\n" +
	"\x1cQueryTestExonerationsRequest\x12 \n" +
	"\vinvocations\x18\x01 \x03(\tR\vinvocations\x12M\n" +
	"\tpredicate\x18\x02 \x01(\v2*.luci.resultdb.v1.TestExonerationPredicateB\x03\xe0A\x02R\tpredicate\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\"\x97\x01\n" +
	"\x1dQueryTestExonerationsResponse\x12N\n" +
	"\x11test_exonerations\x18\x01 \x03(\v2!.luci.resultdb.v1.TestExonerationR\x10testExonerations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"D\n" +
	" QueryTestResultStatisticsRequest\x12 \n" +
	"\vinvocations\x18\x01 \x03(\tR\vinvocations\"Q\n" +
	"!QueryTestResultStatisticsResponse\x12,\n" +
	"\x12total_test_results\x18\x01 \x01(\x03R\x10totalTestResults\"-\n" +
	"\x12GetArtifactRequest\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\x02R\x04name\"o\n" +
	"\x14ListArtifactsRequest\x12\x1b\n" +
	"\x06parent\x18\x01 \x01(\tB\x03\xe0A\x02R\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"y\n" +
	"\x15ListArtifactsResponse\x128\n" +
	"\tartifacts\x18\x01 \x03(\v2\x1a.luci.resultdb.v1.ArtifactR\tartifacts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xf1\x01\n" +
	"\x15QueryArtifactsRequest\x12 \n" +
	"\vinvocations\x18\x01 \x03(\tR\vinvocations\x12A\n" +
	"\tpredicate\x18\x02 \x01(\v2#.luci.resultdb.v1.ArtifactPredicateR\tpredicate\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x127\n" +
	"\tread_mask\x18\x06 \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\"z\n" +
	"\x16QueryArtifactsResponse\x128\n" +
	"\tartifacts\x18\x01 \x03(\v2\x1a.luci.resultdb.v1.ArtifactR\tartifacts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"O\n" +
	"\x18ListArtifactLinesRequest\x12\x16\n" +
	"\x06parent\x18\x01 \x01(\tR\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\"Q\n" +
	"\x19ListArtifactLinesResponse\x124\n" +
	"\x05lines\x18\x01 \x03(\v2\x1e.luci.resultdb.v1.ArtifactLineR\x05lines\"\xa3\x01\n" +
	"$QueryArtifactFailureOnlyLinesRequest\x12\x16\n" +
	"\x06parent\x18\x01 \x01(\tR\x06parent\x12'\n" +
	"\x0finclude_content\x18\x02 \x01(\bR\x0eincludeContent\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\"\x96\x02\n" +
	"%QueryArtifactFailureOnlyLinesResponse\x12z\n" +
	"\x18failure_only_line_ranges\x18\x01 \x03(\v2A.luci.resultdb.v1.QueryArtifactFailureOnlyLinesResponse.LineRangeR\x15failureOnlyLineRanges\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x1aI\n" +
	"\tLineRange\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x05R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x05R\x03end\x12\x14\n" +
	"\x05lines\x18\x03 \x03(\tR\x05lines\"\xcd\x02\n" +
	"\x18QueryTestVariantsRequest\x12 \n" +
	"\vinvocations\x18\x02 \x03(\tR\vinvocations\x12D\n" +
	"\tpredicate\x18\x06 \x01(\v2&.luci.resultdb.v1.TestVariantPredicateR\tpredicate\x12!\n" +
	"\fresult_limit\x18\b \x01(\x05R\vresultLimit\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\x127\n" +
	"\tread_mask\x18\a \x01(\v2\x1a.google.protobuf.FieldMaskR\breadMask\x12\x19\n" +
	"\border_by\x18\t \x01(\tR\aorderBy\x12\x16\n" +
	"\x06filter\x18\n" +
	" \x01(\tR\x06filter\"\xb2\x02\n" +
	"\x19QueryTestVariantsResponse\x12B\n" +
	"\rtest_variants\x18\x01 \x03(\v2\x1d.luci.resultdb.v1.TestVariantR\ftestVariants\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x12R\n" +
	"\asources\x18\x03 \x03(\v28.luci.resultdb.v1.QueryTestVariantsResponse.SourcesEntryR\asources\x1aU\n" +
	"\fSourcesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.luci.resultdb.v1.SourcesR\x05value:\x028\x01\"\x9c\x01\n" +
	"\x1bQueryRunTestVerdictsRequest\x12\x1e\n" +
	"\n" +
	"invocation\x18\x01 \x01(\tR\n" +
	"invocation\x12!\n" +
	"\fresult_limit\x18\x02 \x01(\x05R\vresultLimit\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x04 \x01(\tR\tpageToken\"\x94\x01\n" +
	"\x1cQueryRunTestVerdictsResponse\x12L\n" +
	"\x11run_test_verdicts\x18\x01 \x03(\v2 .luci.resultdb.v1.RunTestVerdictR\x0frunTestVerdicts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xfa\x02\n" +
	"\x1bBatchGetTestVariantsRequest\x12\x1e\n" +
	"\n" +
	"invocation\x18\x01 \x01(\tR\n" +
	"invocation\x12h\n" +
	"\rtest_variants\x18\x02 \x03(\v2C.luci.resultdb.v1.BatchGetTestVariantsRequest.TestVariantIdentifierR\ftestVariants\x12!\n" +
	"\fresult_limit\x18\x03 \x01(\x05R\vresultLimit\x1a\xad\x01\n" +
	"\x15TestVariantIdentifier\x12N\n" +
	"\x12test_id_structured\x18\x03 \x01(\v2 .luci.resultdb.v1.TestIdentifierR\x10testIdStructured\x12\x1c\n" +
	"\atest_id\x18\x01 \x01(\tB\x03\xe0A\x02R\x06testId\x12&\n" +
	"\fvariant_hash\x18\x02 \x01(\tB\x03\xe0A\x02R\vvariantHash\"\x90\x02\n" +
	"\x1cBatchGetTestVariantsResponse\x12B\n" +
	"\rtest_variants\x18\x01 \x03(\v2\x1d.luci.resultdb.v1.TestVariantR\ftestVariants\x12U\n" +
	"\asources\x18\x02 \x03(\v2;.luci.resultdb.v1.BatchGetTestVariantsResponse.SourcesEntryR\asources\x1aU\n" +
	"\fSourcesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.luci.resultdb.v1.SourcesR\x05value:\x028\x01\"\xbc\x01\n" +
	"\x18QueryTestMetadataRequest\x12\x1d\n" +
	"\aproject\x18\x01 \x01(\tB\x03\xe0A\x02R\aproject\x12E\n" +
	"\tpredicate\x18\x02 \x01(\v2'.luci.resultdb.v1.TestMetadataPredicateR\tpredicate\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x04 \x01(\tR\tpageToken\"\x8d\x01\n" +
	"\x19QueryTestMetadataResponse\x12H\n" +
	"\ftestMetadata\x18\x01 \x03(\v2$.luci.resultdb.v1.TestMetadataDetailR\ftestMetadata\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"c\n" +
	"\x1bQueryNewTestVariantsRequest\x12#\n" +
	"\n" +
	"invocation\x18\x01 \x01(\tB\x03\xe0A\x02R\n" +
	"invocation\x12\x1f\n" +
	"\bbaseline\x18\x02 \x01(\tB\x03\xe0A\x02R\bbaseline\"\x83\x02\n" +
	"\x1cQueryNewTestVariantsResponse\x12*\n" +
	"\x11is_baseline_ready\x18\x01 \x01(\bR\x0fisBaselineReady\x12i\n" +
	"\x11new_test_variants\x18\x02 \x03(\v2=.luci.resultdb.v1.QueryNewTestVariantsResponse.NewTestVariantR\x0fnewTestVariants\x1aL\n" +
	"\x0eNewTestVariant\x12\x17\n" +
	"\atest_id\x18\x01 \x01(\tR\x06testId\x12!\n" +
	"\fvariant_hash\x18\x02 \x01(\tR\vvariantHash\"+\n" +
	"\x15GetInstructionRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"_\n" +
	"\x17QueryInstructionRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x120\n" +
	"\x14dependency_max_depth\x18\x02 \x01(\x05R\x12dependencyMaxDepth\"\xb6\x01\n" +
	"\x18QueryInstructionResponse\x12?\n" +
	"\vinstruction\x18\x01 \x01(\v2\x1d.luci.resultdb.v1.InstructionR\vinstruction\x12Y\n" +
	"\x11dependency_chains\x18\x02 \x03(\v2,.luci.resultdb.v1.InstructionDependencyChainR\x10dependencyChains\"\xb1\x02\n" +
	"\x1aInstructionDependencyChain\x12;\n" +
	"\x06target\x18\x01 \x01(\x0e2#.luci.resultdb.v1.InstructionTargetR\x06target\x12G\n" +
	"\x05nodes\x18\x02 \x03(\v21.luci.resultdb.v1.InstructionDependencyChain.NodeR\x05nodes\x1a\x8c\x01\n" +
	"\x04Node\x12)\n" +
	"\x10instruction_name\x18\x01 \x01(\tR\x0finstructionName\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12)\n" +
	"\x10descriptive_name\x18\x04 \x01(\tR\x0fdescriptiveName\"\xd0\x03\n" +
	"%QueryTestVariantArtifactGroupsRequest\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12M\n" +
	"\rsearch_string\x18\x02 \x01(\v2(.luci.resultdb.v1.ArtifactContentMatcherR\fsearchString\x12C\n" +
	"\x0ftest_id_matcher\x18\x03 \x01(\v2\x1b.luci.resultdb.v1.IDMatcherR\rtestIdMatcher\x12K\n" +
	"\x13artifact_id_matcher\x18\x04 \x01(\v2\x1b.luci.resultdb.v1.IDMatcherR\x11artifactIdMatcher\x129\n" +
	"\n" +
	"start_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x1b\n" +
	"\tpage_size\x18\a \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\b \x01(\tR\tpageToken\"\xbe\x03\n" +
	"&QueryTestVariantArtifactGroupsResponse\x12[\n" +
	"\x06groups\x18\x01 \x03(\v2C.luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse.MatchGroupR\x06groups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x1a\x8e\x02\n" +
	"\n" +
	"MatchGroup\x12\x17\n" +
	"\atest_id\x18\x01 \x01(\tR\x06testId\x12!\n" +
	"\fvariant_hash\x18\x02 \x01(\tR\vvariantHash\x123\n" +
	"\avariant\x18\x03 \x01(\v2\x19.luci.resultdb.v1.VariantR\avariant\x12\x1f\n" +
	"\vartifact_id\x18\x04 \x01(\tR\n" +
	"artifactId\x12G\n" +
	"\tartifacts\x18\x05 \x03(\v2).luci.resultdb.v1.ArtifactMatchingContentR\tartifacts\x12%\n" +
	"\x0ematching_count\x18\x06 \x01(\x05R\rmatchingCount\"\x96\x03\n" +
	" QueryTestVariantArtifactsRequest\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12M\n" +
	"\rsearch_string\x18\x02 \x01(\v2(.luci.resultdb.v1.ArtifactContentMatcherR\fsearchString\x12\x17\n" +
	"\atest_id\x18\x03 \x01(\tR\x06testId\x12!\n" +
	"\fvariant_hash\x18\x04 \x01(\tR\vvariantHash\x12\x1f\n" +
	"\vartifact_id\x18\x05 \x01(\tR\n" +
	"artifactId\x129\n" +
	"\n" +
	"start_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x1b\n" +
	"\tpage_size\x18\b \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\t \x01(\tR\tpageToken\"\x94\x01\n" +
	"!QueryTestVariantArtifactsResponse\x12G\n" +
	"\tartifacts\x18\x01 \x03(\v2).luci.resultdb.v1.ArtifactMatchingContentR\tartifacts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x91\x03\n" +
	"+QueryInvocationVariantArtifactGroupsRequest\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12M\n" +
	"\rsearch_string\x18\x02 \x01(\v2(.luci.resultdb.v1.ArtifactContentMatcherR\fsearchString\x12K\n" +
	"\x13artifact_id_matcher\x18\x03 \x01(\v2\x1b.luci.resultdb.v1.IDMatcherR\x11artifactIdMatcher\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\a \x01(\tR\tpageToken\"\xc7\x03\n" +
	",QueryInvocationVariantArtifactGroupsResponse\x12a\n" +
	"\x06groups\x18\x01 \x03(\v2I.luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse.MatchGroupR\x06groups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\x1a\x8b\x02\n" +
	"\n" +
	"MatchGroup\x12,\n" +
	"\x12variant_union_hash\x18\x01 \x01(\tR\x10variantUnionHash\x12>\n" +
	"\rvariant_union\x18\x02 \x01(\v2\x19.luci.resultdb.v1.VariantR\fvariantUnion\x12\x1f\n" +
	"\vartifact_id\x18\x03 \x01(\tR\n" +
	"artifactId\x12G\n" +
	"\tartifacts\x18\x04 \x03(\v2).luci.resultdb.v1.ArtifactMatchingContentR\tartifacts\x12%\n" +
	"\x0ematching_count\x18\x05 \x01(\x05R\rmatchingCount\"\x8e\x03\n" +
	"&QueryInvocationVariantArtifactsRequest\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12M\n" +
	"\rsearch_string\x18\x02 \x01(\v2(.luci.resultdb.v1.ArtifactContentMatcherR\fsearchString\x12,\n" +
	"\x12variant_union_hash\x18\x03 \x01(\tR\x10variantUnionHash\x12\x1f\n" +
	"\vartifact_id\x18\x04 \x01(\tR\n" +
	"artifactId\x129\n" +
	"\n" +
	"start_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x1b\n" +
	"\tpage_size\x18\a \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\b \x01(\tR\tpageToken\"\x9a\x01\n" +
	"'QueryInvocationVariantArtifactsResponse\x12G\n" +
	"\tartifacts\x18\x01 \x03(\v2).luci.resultdb.v1.ArtifactMatchingContentR\tartifacts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xaa\x03\n" +
	"\x17ArtifactMatchingContent\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12A\n" +
	"\x0epartition_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\rpartitionTime\x12A\n" +
	"\vtest_status\x18\x03 \x01(\x0e2\x1c.luci.resultdb.v1.TestStatusB\x02\x18\x01R\n" +
	"testStatus\x12I\n" +
	"\x0etest_status_v2\x18\x06 \x01(\x0e2#.luci.resultdb.v1.TestResult.StatusR\ftestStatusV2\x12\x18\n" +
	"\asnippet\x18\x04 \x01(\tR\asnippet\x12I\n" +
	"\amatches\x18\x05 \x03(\v2/.luci.resultdb.v1.ArtifactMatchingContent.MatchR\amatches\x1aE\n" +
	"\x05Match\x12\x1f\n" +
	"\vstart_index\x18\x01 \x01(\x05R\n" +
	"startIndex\x12\x1b\n" +
	"\tend_index\x18\x02 \x01(\x05R\bendIndex\"f\n" +
	"\x16ArtifactContentMatcher\x12%\n" +
	"\rregex_contain\x18\x01 \x01(\tH\x00R\fregexContain\x12\x1a\n" +
	"\acontain\x18\x02 \x01(\tH\x00R\acontainB\t\n" +
	"\amatcher\"Z\n" +
	"\tIDMatcher\x12\x1f\n" +
	"\n" +
	"has_prefix\x18\x01 \x01(\tH\x00R\thasPrefix\x12!\n" +
	"\vexact_equal\x18\x02 \x01(\tH\x00R\n" +
	"exactEqualB\t\n" +
	"\amatcher\"\xa6\x02\n" +
	"\x1cQueryTestAggregationsRequest\x12#\n" +
	"\n" +
	"invocation\x18\x01 \x01(\tB\x03\xe0A\x02R\n" +
	"invocation\x12O\n" +
	"\x11aggregation_level\x18\x02 \x01(\x0e2\".luci.resultdb.v1.AggregationLevelR\x10aggregationLevel\x12T\n" +
	"\x12test_prefix_filter\x18\x03 \x01(\v2&.luci.resultdb.v1.TestIdentifierPrefixR\x10testPrefixFilter\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tR\tpageToken\"\x8e\x01\n" +
	"\x1dQueryTestAggregationsResponse\x12E\n" +
	"\faggregations\x18\x01 \x03(\v2!.luci.resultdb.v1.TestAggregationR\faggregations\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xcc\x01\n" +
	"\x18QueryTestVerdictsRequest\x12\x1e\n" +
	"\n" +
	"invocation\x18\x01 \x01(\tR\n" +
	"invocation\x12T\n" +
	"\x12test_prefix_filter\x18\x02 \x01(\v2&.luci.resultdb.v1.TestIdentifierPrefixR\x10testPrefixFilter\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x04 \x01(\tR\tpageToken\"\x87\x01\n" +
	"\x19QueryTestVerdictsResponse\x12B\n" +
	"\rtest_verdicts\x18\x01 \x03(\v2\x1d.luci.resultdb.v1.TestVerdictR\ftestVerdicts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken2\xb0\x1b\n" +
	"\bResultDB\x12c\n" +
	"\x11GetRootInvocation\x12*.luci.resultdb.v1.GetRootInvocationRequest\x1a .luci.resultdb.v1.RootInvocation\"\x00\x12Q\n" +
	"\vGetWorkUnit\x12$.luci.resultdb.v1.GetWorkUnitRequest\x1a\x1a.luci.resultdb.v1.WorkUnit\"\x00\x12n\n" +
	"\x11BatchGetWorkUnits\x12*.luci.resultdb.v1.BatchGetWorkUnitsRequest\x1a+.luci.resultdb.v1.BatchGetWorkUnitsResponse\"\x00\x12W\n" +
	"\rGetInvocation\x12&.luci.resultdb.v1.GetInvocationRequest\x1a\x1c.luci.resultdb.v1.Invocation\"\x00\x12\x83\x01\n" +
	"\x18QueryRootInvocationNames\x121.luci.resultdb.v1.QueryRootInvocationNamesRequest\x1a2.luci.resultdb.v1.QueryRootInvocationNamesResponse\"\x00\x12W\n" +
	"\rGetTestResult\x12&.luci.resultdb.v1.GetTestResultRequest\x1a\x1c.luci.resultdb.v1.TestResult\"\x00\x12h\n" +
	"\x0fListTestResults\x12(.luci.resultdb.v1.ListTestResultsRequest\x1a).luci.resultdb.v1.ListTestResultsResponse\"\x00\x12f\n" +
	"\x12GetTestExoneration\x12+.luci.resultdb.v1.GetTestExonerationRequest\x1a!.luci.resultdb.v1.TestExoneration\"\x00\x12w\n" +
	"\x14ListTestExonerations\x12-.luci.resultdb.v1.ListTestExonerationsRequest\x1a..luci.resultdb.v1.ListTestExonerationsResponse\"\x00\x12k\n" +
	"\x10QueryTestResults\x12).luci.resultdb.v1.QueryTestResultsRequest\x1a*.luci.resultdb.v1.QueryTestResultsResponse\"\x00\x12z\n" +
	"\x15QueryTestExonerations\x12..luci.resultdb.v1.QueryTestExonerationsRequest\x1a/.luci.resultdb.v1.QueryTestExonerationsResponse\"\x00\x12\x86\x01\n" +
	"\x19QueryTestResultStatistics\x122.luci.resultdb.v1.QueryTestResultStatisticsRequest\x1a3.luci.resultdb.v1.QueryTestResultStatisticsResponse\"\x00\x12w\n" +
	"\x14QueryNewTestVariants\x12-.luci.resultdb.v1.QueryNewTestVariantsRequest\x1a..luci.resultdb.v1.QueryNewTestVariantsResponse\"\x00\x12w\n" +
	"\x14QueryRunTestVerdicts\x12-.luci.resultdb.v1.QueryRunTestVerdictsRequest\x1a..luci.resultdb.v1.QueryRunTestVerdictsResponse\"\x00\x12n\n" +
	"\x11QueryTestVariants\x12*.luci.resultdb.v1.QueryTestVariantsRequest\x1a+.luci.resultdb.v1.QueryTestVariantsResponse\"\x00\x12w\n" +
	"\x14BatchGetTestVariants\x12-.luci.resultdb.v1.BatchGetTestVariantsRequest\x1a..luci.resultdb.v1.BatchGetTestVariantsResponse\"\x00\x12n\n" +
	"\x11QueryTestMetadata\x12*.luci.resultdb.v1.QueryTestMetadataRequest\x1a+.luci.resultdb.v1.QueryTestMetadataResponse\"\x00\x12Z\n" +
	"\x0eGetInstruction\x12'.luci.resultdb.v1.GetInstructionRequest\x1a\x1d.luci.resultdb.v1.Instruction\"\x00\x12k\n" +
	"\x10QueryInstruction\x12).luci.resultdb.v1.QueryInstructionRequest\x1a*.luci.resultdb.v1.QueryInstructionResponse\"\x00\x12z\n" +
	"\x15QueryTestAggregations\x12..luci.resultdb.v1.QueryTestAggregationsRequest\x1a/.luci.resultdb.v1.QueryTestAggregationsResponse\"\x00\x12n\n" +
	"\x11QueryTestVerdicts\x12*.luci.resultdb.v1.QueryTestVerdictsRequest\x1a+.luci.resultdb.v1.QueryTestVerdictsResponse\"\x00\x12Q\n" +
	"\vGetArtifact\x12$.luci.resultdb.v1.GetArtifactRequest\x1a\x1a.luci.resultdb.v1.Artifact\"\x00\x12b\n" +
	"\rListArtifacts\x12&.luci.resultdb.v1.ListArtifactsRequest\x1a'.luci.resultdb.v1.ListArtifactsResponse\"\x00\x12e\n" +
	"\x0eQueryArtifacts\x12'.luci.resultdb.v1.QueryArtifactsRequest\x1a(.luci.resultdb.v1.QueryArtifactsResponse\"\x00\x12n\n" +
	"\x11ListArtifactLines\x12*.luci.resultdb.v1.ListArtifactLinesRequest\x1a+.luci.resultdb.v1.ListArtifactLinesResponse\"\x00\x12\x92\x01\n" +
	"\x1dQueryArtifactFailureOnlyLines\x126.luci.resultdb.v1.QueryArtifactFailureOnlyLinesRequest\x1a7.luci.resultdb.v1.QueryArtifactFailureOnlyLinesResponse\"\x00\x12\x95\x01\n" +
	"\x1eQueryTestVariantArtifactGroups\x127.luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest\x1a8.luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse\"\x00\x12\x86\x01\n" +
	"\x19QueryTestVariantArtifacts\x122.luci.resultdb.v1.QueryTestVariantArtifactsRequest\x1a3.luci.resultdb.v1.QueryTestVariantArtifactsResponse\"\x00\x12\xa7\x01\n" +
	"$QueryInvocationVariantArtifactGroups\x12=.luci.resultdb.v1.QueryInvocationVariantArtifactGroupsRequest\x1a>.luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse\"\x00\x12\x98\x01\n" +
	"\x1fQueryInvocationVariantArtifacts\x128.luci.resultdb.v1.QueryInvocationVariantArtifactsRequest\x1a9.luci.resultdb.v1.QueryInvocationVariantArtifactsResponse\"\x00BP\n" +
	"\x1bcom.google.luci.resultdb.v1P\x01Z/go.chromium.org/luci/resultdb/proto/v1;resultpbb\x06proto3"

var (
	file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescData []byte
)

func file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_goTypes = []any{
	(*GetInvocationRequest)(nil),                            // 0: luci.resultdb.v1.GetInvocationRequest
	(*QueryRootInvocationNamesRequest)(nil),                 // 1: luci.resultdb.v1.QueryRootInvocationNamesRequest
	(*QueryRootInvocationNamesResponse)(nil),                // 2: luci.resultdb.v1.QueryRootInvocationNamesResponse
	(*GetTestResultRequest)(nil),                            // 3: luci.resultdb.v1.GetTestResultRequest
	(*ListTestResultsRequest)(nil),                          // 4: luci.resultdb.v1.ListTestResultsRequest
	(*ListTestResultsResponse)(nil),                         // 5: luci.resultdb.v1.ListTestResultsResponse
	(*GetTestExonerationRequest)(nil),                       // 6: luci.resultdb.v1.GetTestExonerationRequest
	(*ListTestExonerationsRequest)(nil),                     // 7: luci.resultdb.v1.ListTestExonerationsRequest
	(*ListTestExonerationsResponse)(nil),                    // 8: luci.resultdb.v1.ListTestExonerationsResponse
	(*QueryTestResultsRequest)(nil),                         // 9: luci.resultdb.v1.QueryTestResultsRequest
	(*QueryTestResultsResponse)(nil),                        // 10: luci.resultdb.v1.QueryTestResultsResponse
	(*QueryTestExonerationsRequest)(nil),                    // 11: luci.resultdb.v1.QueryTestExonerationsRequest
	(*QueryTestExonerationsResponse)(nil),                   // 12: luci.resultdb.v1.QueryTestExonerationsResponse
	(*QueryTestResultStatisticsRequest)(nil),                // 13: luci.resultdb.v1.QueryTestResultStatisticsRequest
	(*QueryTestResultStatisticsResponse)(nil),               // 14: luci.resultdb.v1.QueryTestResultStatisticsResponse
	(*GetArtifactRequest)(nil),                              // 15: luci.resultdb.v1.GetArtifactRequest
	(*ListArtifactsRequest)(nil),                            // 16: luci.resultdb.v1.ListArtifactsRequest
	(*ListArtifactsResponse)(nil),                           // 17: luci.resultdb.v1.ListArtifactsResponse
	(*QueryArtifactsRequest)(nil),                           // 18: luci.resultdb.v1.QueryArtifactsRequest
	(*QueryArtifactsResponse)(nil),                          // 19: luci.resultdb.v1.QueryArtifactsResponse
	(*ListArtifactLinesRequest)(nil),                        // 20: luci.resultdb.v1.ListArtifactLinesRequest
	(*ListArtifactLinesResponse)(nil),                       // 21: luci.resultdb.v1.ListArtifactLinesResponse
	(*QueryArtifactFailureOnlyLinesRequest)(nil),            // 22: luci.resultdb.v1.QueryArtifactFailureOnlyLinesRequest
	(*QueryArtifactFailureOnlyLinesResponse)(nil),           // 23: luci.resultdb.v1.QueryArtifactFailureOnlyLinesResponse
	(*QueryTestVariantsRequest)(nil),                        // 24: luci.resultdb.v1.QueryTestVariantsRequest
	(*QueryTestVariantsResponse)(nil),                       // 25: luci.resultdb.v1.QueryTestVariantsResponse
	(*QueryRunTestVerdictsRequest)(nil),                     // 26: luci.resultdb.v1.QueryRunTestVerdictsRequest
	(*QueryRunTestVerdictsResponse)(nil),                    // 27: luci.resultdb.v1.QueryRunTestVerdictsResponse
	(*BatchGetTestVariantsRequest)(nil),                     // 28: luci.resultdb.v1.BatchGetTestVariantsRequest
	(*BatchGetTestVariantsResponse)(nil),                    // 29: luci.resultdb.v1.BatchGetTestVariantsResponse
	(*QueryTestMetadataRequest)(nil),                        // 30: luci.resultdb.v1.QueryTestMetadataRequest
	(*QueryTestMetadataResponse)(nil),                       // 31: luci.resultdb.v1.QueryTestMetadataResponse
	(*QueryNewTestVariantsRequest)(nil),                     // 32: luci.resultdb.v1.QueryNewTestVariantsRequest
	(*QueryNewTestVariantsResponse)(nil),                    // 33: luci.resultdb.v1.QueryNewTestVariantsResponse
	(*GetInstructionRequest)(nil),                           // 34: luci.resultdb.v1.GetInstructionRequest
	(*QueryInstructionRequest)(nil),                         // 35: luci.resultdb.v1.QueryInstructionRequest
	(*QueryInstructionResponse)(nil),                        // 36: luci.resultdb.v1.QueryInstructionResponse
	(*InstructionDependencyChain)(nil),                      // 37: luci.resultdb.v1.InstructionDependencyChain
	(*QueryTestVariantArtifactGroupsRequest)(nil),           // 38: luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest
	(*QueryTestVariantArtifactGroupsResponse)(nil),          // 39: luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse
	(*QueryTestVariantArtifactsRequest)(nil),                // 40: luci.resultdb.v1.QueryTestVariantArtifactsRequest
	(*QueryTestVariantArtifactsResponse)(nil),               // 41: luci.resultdb.v1.QueryTestVariantArtifactsResponse
	(*QueryInvocationVariantArtifactGroupsRequest)(nil),     // 42: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsRequest
	(*QueryInvocationVariantArtifactGroupsResponse)(nil),    // 43: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse
	(*QueryInvocationVariantArtifactsRequest)(nil),          // 44: luci.resultdb.v1.QueryInvocationVariantArtifactsRequest
	(*QueryInvocationVariantArtifactsResponse)(nil),         // 45: luci.resultdb.v1.QueryInvocationVariantArtifactsResponse
	(*ArtifactMatchingContent)(nil),                         // 46: luci.resultdb.v1.ArtifactMatchingContent
	(*ArtifactContentMatcher)(nil),                          // 47: luci.resultdb.v1.ArtifactContentMatcher
	(*IDMatcher)(nil),                                       // 48: luci.resultdb.v1.IDMatcher
	(*QueryTestAggregationsRequest)(nil),                    // 49: luci.resultdb.v1.QueryTestAggregationsRequest
	(*QueryTestAggregationsResponse)(nil),                   // 50: luci.resultdb.v1.QueryTestAggregationsResponse
	(*QueryTestVerdictsRequest)(nil),                        // 51: luci.resultdb.v1.QueryTestVerdictsRequest
	(*QueryTestVerdictsResponse)(nil),                       // 52: luci.resultdb.v1.QueryTestVerdictsResponse
	(*QueryArtifactFailureOnlyLinesResponse_LineRange)(nil), // 53: luci.resultdb.v1.QueryArtifactFailureOnlyLinesResponse.LineRange
	nil, // 54: luci.resultdb.v1.QueryTestVariantsResponse.SourcesEntry
	(*BatchGetTestVariantsRequest_TestVariantIdentifier)(nil), // 55: luci.resultdb.v1.BatchGetTestVariantsRequest.TestVariantIdentifier
	nil, // 56: luci.resultdb.v1.BatchGetTestVariantsResponse.SourcesEntry
	(*QueryNewTestVariantsResponse_NewTestVariant)(nil),             // 57: luci.resultdb.v1.QueryNewTestVariantsResponse.NewTestVariant
	(*InstructionDependencyChain_Node)(nil),                         // 58: luci.resultdb.v1.InstructionDependencyChain.Node
	(*QueryTestVariantArtifactGroupsResponse_MatchGroup)(nil),       // 59: luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse.MatchGroup
	(*QueryInvocationVariantArtifactGroupsResponse_MatchGroup)(nil), // 60: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse.MatchGroup
	(*ArtifactMatchingContent_Match)(nil),                           // 61: luci.resultdb.v1.ArtifactMatchingContent.Match
	(*fieldmaskpb.FieldMask)(nil),                                   // 62: google.protobuf.FieldMask
	(*TestResult)(nil),                                              // 63: luci.resultdb.v1.TestResult
	(*TestExoneration)(nil),                                         // 64: luci.resultdb.v1.TestExoneration
	(*TestResultPredicate)(nil),                                     // 65: luci.resultdb.v1.TestResultPredicate
	(*TestExonerationPredicate)(nil),                                // 66: luci.resultdb.v1.TestExonerationPredicate
	(*Artifact)(nil),                                                // 67: luci.resultdb.v1.Artifact
	(*ArtifactPredicate)(nil),                                       // 68: luci.resultdb.v1.ArtifactPredicate
	(*ArtifactLine)(nil),                                            // 69: luci.resultdb.v1.ArtifactLine
	(*TestVariantPredicate)(nil),                                    // 70: luci.resultdb.v1.TestVariantPredicate
	(*TestVariant)(nil),                                             // 71: luci.resultdb.v1.TestVariant
	(*RunTestVerdict)(nil),                                          // 72: luci.resultdb.v1.RunTestVerdict
	(*TestMetadataPredicate)(nil),                                   // 73: luci.resultdb.v1.TestMetadataPredicate
	(*TestMetadataDetail)(nil),                                      // 74: luci.resultdb.v1.TestMetadataDetail
	(*Instruction)(nil),                                             // 75: luci.resultdb.v1.Instruction
	(InstructionTarget)(0),                                          // 76: luci.resultdb.v1.InstructionTarget
	(*timestamppb.Timestamp)(nil),                                   // 77: google.protobuf.Timestamp
	(TestStatus)(0),                                                 // 78: luci.resultdb.v1.TestStatus
	(TestResult_Status)(0),                                          // 79: luci.resultdb.v1.TestResult.Status
	(AggregationLevel)(0),                                           // 80: luci.resultdb.v1.AggregationLevel
	(*TestIdentifierPrefix)(nil),                                    // 81: luci.resultdb.v1.TestIdentifierPrefix
	(*TestAggregation)(nil),                                         // 82: luci.resultdb.v1.TestAggregation
	(*TestVerdict)(nil),                                             // 83: luci.resultdb.v1.TestVerdict
	(*Sources)(nil),                                                 // 84: luci.resultdb.v1.Sources
	(*TestIdentifier)(nil),                                          // 85: luci.resultdb.v1.TestIdentifier
	(*Variant)(nil),                                                 // 86: luci.resultdb.v1.Variant
	(*GetRootInvocationRequest)(nil),                                // 87: luci.resultdb.v1.GetRootInvocationRequest
	(*GetWorkUnitRequest)(nil),                                      // 88: luci.resultdb.v1.GetWorkUnitRequest
	(*BatchGetWorkUnitsRequest)(nil),                                // 89: luci.resultdb.v1.BatchGetWorkUnitsRequest
	(*RootInvocation)(nil),                                          // 90: luci.resultdb.v1.RootInvocation
	(*WorkUnit)(nil),                                                // 91: luci.resultdb.v1.WorkUnit
	(*BatchGetWorkUnitsResponse)(nil),                               // 92: luci.resultdb.v1.BatchGetWorkUnitsResponse
	(*Invocation)(nil),                                              // 93: luci.resultdb.v1.Invocation
}
var file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_depIdxs = []int32{
	62, // 0: luci.resultdb.v1.ListTestResultsRequest.read_mask:type_name -> google.protobuf.FieldMask
	63, // 1: luci.resultdb.v1.ListTestResultsResponse.test_results:type_name -> luci.resultdb.v1.TestResult
	64, // 2: luci.resultdb.v1.ListTestExonerationsResponse.test_exonerations:type_name -> luci.resultdb.v1.TestExoneration
	65, // 3: luci.resultdb.v1.QueryTestResultsRequest.predicate:type_name -> luci.resultdb.v1.TestResultPredicate
	62, // 4: luci.resultdb.v1.QueryTestResultsRequest.read_mask:type_name -> google.protobuf.FieldMask
	63, // 5: luci.resultdb.v1.QueryTestResultsResponse.test_results:type_name -> luci.resultdb.v1.TestResult
	66, // 6: luci.resultdb.v1.QueryTestExonerationsRequest.predicate:type_name -> luci.resultdb.v1.TestExonerationPredicate
	64, // 7: luci.resultdb.v1.QueryTestExonerationsResponse.test_exonerations:type_name -> luci.resultdb.v1.TestExoneration
	67, // 8: luci.resultdb.v1.ListArtifactsResponse.artifacts:type_name -> luci.resultdb.v1.Artifact
	68, // 9: luci.resultdb.v1.QueryArtifactsRequest.predicate:type_name -> luci.resultdb.v1.ArtifactPredicate
	62, // 10: luci.resultdb.v1.QueryArtifactsRequest.read_mask:type_name -> google.protobuf.FieldMask
	67, // 11: luci.resultdb.v1.QueryArtifactsResponse.artifacts:type_name -> luci.resultdb.v1.Artifact
	69, // 12: luci.resultdb.v1.ListArtifactLinesResponse.lines:type_name -> luci.resultdb.v1.ArtifactLine
	53, // 13: luci.resultdb.v1.QueryArtifactFailureOnlyLinesResponse.failure_only_line_ranges:type_name -> luci.resultdb.v1.QueryArtifactFailureOnlyLinesResponse.LineRange
	70, // 14: luci.resultdb.v1.QueryTestVariantsRequest.predicate:type_name -> luci.resultdb.v1.TestVariantPredicate
	62, // 15: luci.resultdb.v1.QueryTestVariantsRequest.read_mask:type_name -> google.protobuf.FieldMask
	71, // 16: luci.resultdb.v1.QueryTestVariantsResponse.test_variants:type_name -> luci.resultdb.v1.TestVariant
	54, // 17: luci.resultdb.v1.QueryTestVariantsResponse.sources:type_name -> luci.resultdb.v1.QueryTestVariantsResponse.SourcesEntry
	72, // 18: luci.resultdb.v1.QueryRunTestVerdictsResponse.run_test_verdicts:type_name -> luci.resultdb.v1.RunTestVerdict
	55, // 19: luci.resultdb.v1.BatchGetTestVariantsRequest.test_variants:type_name -> luci.resultdb.v1.BatchGetTestVariantsRequest.TestVariantIdentifier
	71, // 20: luci.resultdb.v1.BatchGetTestVariantsResponse.test_variants:type_name -> luci.resultdb.v1.TestVariant
	56, // 21: luci.resultdb.v1.BatchGetTestVariantsResponse.sources:type_name -> luci.resultdb.v1.BatchGetTestVariantsResponse.SourcesEntry
	73, // 22: luci.resultdb.v1.QueryTestMetadataRequest.predicate:type_name -> luci.resultdb.v1.TestMetadataPredicate
	74, // 23: luci.resultdb.v1.QueryTestMetadataResponse.testMetadata:type_name -> luci.resultdb.v1.TestMetadataDetail
	57, // 24: luci.resultdb.v1.QueryNewTestVariantsResponse.new_test_variants:type_name -> luci.resultdb.v1.QueryNewTestVariantsResponse.NewTestVariant
	75, // 25: luci.resultdb.v1.QueryInstructionResponse.instruction:type_name -> luci.resultdb.v1.Instruction
	37, // 26: luci.resultdb.v1.QueryInstructionResponse.dependency_chains:type_name -> luci.resultdb.v1.InstructionDependencyChain
	76, // 27: luci.resultdb.v1.InstructionDependencyChain.target:type_name -> luci.resultdb.v1.InstructionTarget
	58, // 28: luci.resultdb.v1.InstructionDependencyChain.nodes:type_name -> luci.resultdb.v1.InstructionDependencyChain.Node
	47, // 29: luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest.search_string:type_name -> luci.resultdb.v1.ArtifactContentMatcher
	48, // 30: luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest.test_id_matcher:type_name -> luci.resultdb.v1.IDMatcher
	48, // 31: luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest.artifact_id_matcher:type_name -> luci.resultdb.v1.IDMatcher
	77, // 32: luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest.start_time:type_name -> google.protobuf.Timestamp
	77, // 33: luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest.end_time:type_name -> google.protobuf.Timestamp
	59, // 34: luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse.groups:type_name -> luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse.MatchGroup
	47, // 35: luci.resultdb.v1.QueryTestVariantArtifactsRequest.search_string:type_name -> luci.resultdb.v1.ArtifactContentMatcher
	77, // 36: luci.resultdb.v1.QueryTestVariantArtifactsRequest.start_time:type_name -> google.protobuf.Timestamp
	77, // 37: luci.resultdb.v1.QueryTestVariantArtifactsRequest.end_time:type_name -> google.protobuf.Timestamp
	46, // 38: luci.resultdb.v1.QueryTestVariantArtifactsResponse.artifacts:type_name -> luci.resultdb.v1.ArtifactMatchingContent
	47, // 39: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsRequest.search_string:type_name -> luci.resultdb.v1.ArtifactContentMatcher
	48, // 40: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsRequest.artifact_id_matcher:type_name -> luci.resultdb.v1.IDMatcher
	77, // 41: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsRequest.start_time:type_name -> google.protobuf.Timestamp
	77, // 42: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsRequest.end_time:type_name -> google.protobuf.Timestamp
	60, // 43: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse.groups:type_name -> luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse.MatchGroup
	47, // 44: luci.resultdb.v1.QueryInvocationVariantArtifactsRequest.search_string:type_name -> luci.resultdb.v1.ArtifactContentMatcher
	77, // 45: luci.resultdb.v1.QueryInvocationVariantArtifactsRequest.start_time:type_name -> google.protobuf.Timestamp
	77, // 46: luci.resultdb.v1.QueryInvocationVariantArtifactsRequest.end_time:type_name -> google.protobuf.Timestamp
	46, // 47: luci.resultdb.v1.QueryInvocationVariantArtifactsResponse.artifacts:type_name -> luci.resultdb.v1.ArtifactMatchingContent
	77, // 48: luci.resultdb.v1.ArtifactMatchingContent.partition_time:type_name -> google.protobuf.Timestamp
	78, // 49: luci.resultdb.v1.ArtifactMatchingContent.test_status:type_name -> luci.resultdb.v1.TestStatus
	79, // 50: luci.resultdb.v1.ArtifactMatchingContent.test_status_v2:type_name -> luci.resultdb.v1.TestResult.Status
	61, // 51: luci.resultdb.v1.ArtifactMatchingContent.matches:type_name -> luci.resultdb.v1.ArtifactMatchingContent.Match
	80, // 52: luci.resultdb.v1.QueryTestAggregationsRequest.aggregation_level:type_name -> luci.resultdb.v1.AggregationLevel
	81, // 53: luci.resultdb.v1.QueryTestAggregationsRequest.test_prefix_filter:type_name -> luci.resultdb.v1.TestIdentifierPrefix
	82, // 54: luci.resultdb.v1.QueryTestAggregationsResponse.aggregations:type_name -> luci.resultdb.v1.TestAggregation
	81, // 55: luci.resultdb.v1.QueryTestVerdictsRequest.test_prefix_filter:type_name -> luci.resultdb.v1.TestIdentifierPrefix
	83, // 56: luci.resultdb.v1.QueryTestVerdictsResponse.test_verdicts:type_name -> luci.resultdb.v1.TestVerdict
	84, // 57: luci.resultdb.v1.QueryTestVariantsResponse.SourcesEntry.value:type_name -> luci.resultdb.v1.Sources
	85, // 58: luci.resultdb.v1.BatchGetTestVariantsRequest.TestVariantIdentifier.test_id_structured:type_name -> luci.resultdb.v1.TestIdentifier
	84, // 59: luci.resultdb.v1.BatchGetTestVariantsResponse.SourcesEntry.value:type_name -> luci.resultdb.v1.Sources
	86, // 60: luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse.MatchGroup.variant:type_name -> luci.resultdb.v1.Variant
	46, // 61: luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse.MatchGroup.artifacts:type_name -> luci.resultdb.v1.ArtifactMatchingContent
	86, // 62: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse.MatchGroup.variant_union:type_name -> luci.resultdb.v1.Variant
	46, // 63: luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse.MatchGroup.artifacts:type_name -> luci.resultdb.v1.ArtifactMatchingContent
	87, // 64: luci.resultdb.v1.ResultDB.GetRootInvocation:input_type -> luci.resultdb.v1.GetRootInvocationRequest
	88, // 65: luci.resultdb.v1.ResultDB.GetWorkUnit:input_type -> luci.resultdb.v1.GetWorkUnitRequest
	89, // 66: luci.resultdb.v1.ResultDB.BatchGetWorkUnits:input_type -> luci.resultdb.v1.BatchGetWorkUnitsRequest
	0,  // 67: luci.resultdb.v1.ResultDB.GetInvocation:input_type -> luci.resultdb.v1.GetInvocationRequest
	1,  // 68: luci.resultdb.v1.ResultDB.QueryRootInvocationNames:input_type -> luci.resultdb.v1.QueryRootInvocationNamesRequest
	3,  // 69: luci.resultdb.v1.ResultDB.GetTestResult:input_type -> luci.resultdb.v1.GetTestResultRequest
	4,  // 70: luci.resultdb.v1.ResultDB.ListTestResults:input_type -> luci.resultdb.v1.ListTestResultsRequest
	6,  // 71: luci.resultdb.v1.ResultDB.GetTestExoneration:input_type -> luci.resultdb.v1.GetTestExonerationRequest
	7,  // 72: luci.resultdb.v1.ResultDB.ListTestExonerations:input_type -> luci.resultdb.v1.ListTestExonerationsRequest
	9,  // 73: luci.resultdb.v1.ResultDB.QueryTestResults:input_type -> luci.resultdb.v1.QueryTestResultsRequest
	11, // 74: luci.resultdb.v1.ResultDB.QueryTestExonerations:input_type -> luci.resultdb.v1.QueryTestExonerationsRequest
	13, // 75: luci.resultdb.v1.ResultDB.QueryTestResultStatistics:input_type -> luci.resultdb.v1.QueryTestResultStatisticsRequest
	32, // 76: luci.resultdb.v1.ResultDB.QueryNewTestVariants:input_type -> luci.resultdb.v1.QueryNewTestVariantsRequest
	26, // 77: luci.resultdb.v1.ResultDB.QueryRunTestVerdicts:input_type -> luci.resultdb.v1.QueryRunTestVerdictsRequest
	24, // 78: luci.resultdb.v1.ResultDB.QueryTestVariants:input_type -> luci.resultdb.v1.QueryTestVariantsRequest
	28, // 79: luci.resultdb.v1.ResultDB.BatchGetTestVariants:input_type -> luci.resultdb.v1.BatchGetTestVariantsRequest
	30, // 80: luci.resultdb.v1.ResultDB.QueryTestMetadata:input_type -> luci.resultdb.v1.QueryTestMetadataRequest
	34, // 81: luci.resultdb.v1.ResultDB.GetInstruction:input_type -> luci.resultdb.v1.GetInstructionRequest
	35, // 82: luci.resultdb.v1.ResultDB.QueryInstruction:input_type -> luci.resultdb.v1.QueryInstructionRequest
	49, // 83: luci.resultdb.v1.ResultDB.QueryTestAggregations:input_type -> luci.resultdb.v1.QueryTestAggregationsRequest
	51, // 84: luci.resultdb.v1.ResultDB.QueryTestVerdicts:input_type -> luci.resultdb.v1.QueryTestVerdictsRequest
	15, // 85: luci.resultdb.v1.ResultDB.GetArtifact:input_type -> luci.resultdb.v1.GetArtifactRequest
	16, // 86: luci.resultdb.v1.ResultDB.ListArtifacts:input_type -> luci.resultdb.v1.ListArtifactsRequest
	18, // 87: luci.resultdb.v1.ResultDB.QueryArtifacts:input_type -> luci.resultdb.v1.QueryArtifactsRequest
	20, // 88: luci.resultdb.v1.ResultDB.ListArtifactLines:input_type -> luci.resultdb.v1.ListArtifactLinesRequest
	22, // 89: luci.resultdb.v1.ResultDB.QueryArtifactFailureOnlyLines:input_type -> luci.resultdb.v1.QueryArtifactFailureOnlyLinesRequest
	38, // 90: luci.resultdb.v1.ResultDB.QueryTestVariantArtifactGroups:input_type -> luci.resultdb.v1.QueryTestVariantArtifactGroupsRequest
	40, // 91: luci.resultdb.v1.ResultDB.QueryTestVariantArtifacts:input_type -> luci.resultdb.v1.QueryTestVariantArtifactsRequest
	42, // 92: luci.resultdb.v1.ResultDB.QueryInvocationVariantArtifactGroups:input_type -> luci.resultdb.v1.QueryInvocationVariantArtifactGroupsRequest
	44, // 93: luci.resultdb.v1.ResultDB.QueryInvocationVariantArtifacts:input_type -> luci.resultdb.v1.QueryInvocationVariantArtifactsRequest
	90, // 94: luci.resultdb.v1.ResultDB.GetRootInvocation:output_type -> luci.resultdb.v1.RootInvocation
	91, // 95: luci.resultdb.v1.ResultDB.GetWorkUnit:output_type -> luci.resultdb.v1.WorkUnit
	92, // 96: luci.resultdb.v1.ResultDB.BatchGetWorkUnits:output_type -> luci.resultdb.v1.BatchGetWorkUnitsResponse
	93, // 97: luci.resultdb.v1.ResultDB.GetInvocation:output_type -> luci.resultdb.v1.Invocation
	2,  // 98: luci.resultdb.v1.ResultDB.QueryRootInvocationNames:output_type -> luci.resultdb.v1.QueryRootInvocationNamesResponse
	63, // 99: luci.resultdb.v1.ResultDB.GetTestResult:output_type -> luci.resultdb.v1.TestResult
	5,  // 100: luci.resultdb.v1.ResultDB.ListTestResults:output_type -> luci.resultdb.v1.ListTestResultsResponse
	64, // 101: luci.resultdb.v1.ResultDB.GetTestExoneration:output_type -> luci.resultdb.v1.TestExoneration
	8,  // 102: luci.resultdb.v1.ResultDB.ListTestExonerations:output_type -> luci.resultdb.v1.ListTestExonerationsResponse
	10, // 103: luci.resultdb.v1.ResultDB.QueryTestResults:output_type -> luci.resultdb.v1.QueryTestResultsResponse
	12, // 104: luci.resultdb.v1.ResultDB.QueryTestExonerations:output_type -> luci.resultdb.v1.QueryTestExonerationsResponse
	14, // 105: luci.resultdb.v1.ResultDB.QueryTestResultStatistics:output_type -> luci.resultdb.v1.QueryTestResultStatisticsResponse
	33, // 106: luci.resultdb.v1.ResultDB.QueryNewTestVariants:output_type -> luci.resultdb.v1.QueryNewTestVariantsResponse
	27, // 107: luci.resultdb.v1.ResultDB.QueryRunTestVerdicts:output_type -> luci.resultdb.v1.QueryRunTestVerdictsResponse
	25, // 108: luci.resultdb.v1.ResultDB.QueryTestVariants:output_type -> luci.resultdb.v1.QueryTestVariantsResponse
	29, // 109: luci.resultdb.v1.ResultDB.BatchGetTestVariants:output_type -> luci.resultdb.v1.BatchGetTestVariantsResponse
	31, // 110: luci.resultdb.v1.ResultDB.QueryTestMetadata:output_type -> luci.resultdb.v1.QueryTestMetadataResponse
	75, // 111: luci.resultdb.v1.ResultDB.GetInstruction:output_type -> luci.resultdb.v1.Instruction
	36, // 112: luci.resultdb.v1.ResultDB.QueryInstruction:output_type -> luci.resultdb.v1.QueryInstructionResponse
	50, // 113: luci.resultdb.v1.ResultDB.QueryTestAggregations:output_type -> luci.resultdb.v1.QueryTestAggregationsResponse
	52, // 114: luci.resultdb.v1.ResultDB.QueryTestVerdicts:output_type -> luci.resultdb.v1.QueryTestVerdictsResponse
	67, // 115: luci.resultdb.v1.ResultDB.GetArtifact:output_type -> luci.resultdb.v1.Artifact
	17, // 116: luci.resultdb.v1.ResultDB.ListArtifacts:output_type -> luci.resultdb.v1.ListArtifactsResponse
	19, // 117: luci.resultdb.v1.ResultDB.QueryArtifacts:output_type -> luci.resultdb.v1.QueryArtifactsResponse
	21, // 118: luci.resultdb.v1.ResultDB.ListArtifactLines:output_type -> luci.resultdb.v1.ListArtifactLinesResponse
	23, // 119: luci.resultdb.v1.ResultDB.QueryArtifactFailureOnlyLines:output_type -> luci.resultdb.v1.QueryArtifactFailureOnlyLinesResponse
	39, // 120: luci.resultdb.v1.ResultDB.QueryTestVariantArtifactGroups:output_type -> luci.resultdb.v1.QueryTestVariantArtifactGroupsResponse
	41, // 121: luci.resultdb.v1.ResultDB.QueryTestVariantArtifacts:output_type -> luci.resultdb.v1.QueryTestVariantArtifactsResponse
	43, // 122: luci.resultdb.v1.ResultDB.QueryInvocationVariantArtifactGroups:output_type -> luci.resultdb.v1.QueryInvocationVariantArtifactGroupsResponse
	45, // 123: luci.resultdb.v1.ResultDB.QueryInvocationVariantArtifacts:output_type -> luci.resultdb.v1.QueryInvocationVariantArtifactsResponse
	94, // [94:124] is the sub-list for method output_type
	64, // [64:94] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_proto_v1_artifact_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_instruction_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_invocation_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_predicate_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_root_invocation_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_aggregation_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_result_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_variant_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_verdict_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_test_metadata_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_work_unit_proto_init()
	file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[47].OneofWrappers = []any{
		(*ArtifactContentMatcher_RegexContain)(nil),
		(*ArtifactContentMatcher_Contain)(nil),
	}
	file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes[48].OneofWrappers = []any{
		(*IDMatcher_HasPrefix)(nil),
		(*IDMatcher_ExactEqual)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_resultdb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResultDBClient is the client API for ResultDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResultDBClient interface {
	// == Root invocations and work units ========================================
	// Retrieves a root invocation.
	GetRootInvocation(ctx context.Context, in *GetRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error)
	// Retrieves a work unit.
	GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error)
	// Retrieves a list of work units.
	BatchGetWorkUnits(ctx context.Context, in *BatchGetWorkUnitsRequest, opts ...grpc.CallOption) (*BatchGetWorkUnitsResponse, error)
	// == Invocations ============================================================
	// Retrieves an invocation.
	GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error)
	// Retrieve names of all root invocations for a given invocation.
	QueryRootInvocationNames(ctx context.Context, in *QueryRootInvocationNamesRequest, opts ...grpc.CallOption) (*QueryRootInvocationNamesResponse, error)
	// Retrieves a test result.
	GetTestResult(ctx context.Context, in *GetTestResultRequest, opts ...grpc.CallOption) (*TestResult, error)
	// Retrieves test results for a parent invocation.
	//
	// Note: response does not contain test results of included invocations.
	// Use QueryTestResults instead.
	ListTestResults(ctx context.Context, in *ListTestResultsRequest, opts ...grpc.CallOption) (*ListTestResultsResponse, error)
	// Retrieves a test exoneration.
	GetTestExoneration(ctx context.Context, in *GetTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error)
	// Retrieves test exonerations for a parent invocation.
	//
	// Note: response does not contain test results of included invocations.
	// Use QueryTestExonerations instead.
	ListTestExonerations(ctx context.Context, in *ListTestExonerationsRequest, opts ...grpc.CallOption) (*ListTestExonerationsResponse, error)
	// Retrieves test results from an invocation, recursively.
	// Supports invocation inclusions.
	// Supports advanced filtering.
	// Examples: go/resultdb-rpc#querytestresults
	QueryTestResults(ctx context.Context, in *QueryTestResultsRequest, opts ...grpc.CallOption) (*QueryTestResultsResponse, error)
	// Retrieves test exonerations from an invocation.
	// Supports invocation inclusions.
	// Supports advanced filtering.
	QueryTestExonerations(ctx context.Context, in *QueryTestExonerationsRequest, opts ...grpc.CallOption) (*QueryTestExonerationsResponse, error)
	// Retrieves the test result statistics of an invocation.
	// Currently supports total number of test results belong to the invocation,
	// directly and indirectly.
	QueryTestResultStatistics(ctx context.Context, in *QueryTestResultStatisticsRequest, opts ...grpc.CallOption) (*QueryTestResultStatisticsResponse, error)
	// Calculate new test variants by running the difference between the tests
	// run in the given invocation against the submitted test history for the
	// source.
	QueryNewTestVariants(ctx context.Context, in *QueryNewTestVariantsRequest, opts ...grpc.CallOption) (*QueryNewTestVariantsResponse, error)
	// Retrieves test verdicts for a test run. A test run comprises only
	// the test results from a single invocation and not its included
	// invocations.
	//
	// Useful to incrementally ingest test results for an export root as its
	// individual constituent invocations finalize, in conjunction with
	// the invocations-ready-for-export pub/sub.
	//
	// Compared to the ListTestResults RPC, this RPC ensures all results
	// for a test variant are returned together, which is useful when
	// ingesting results into analyses that treat retried test results
	// in a given test run differently to the first retry.
	//
	// To use, the caller must have `resultdb.testResults.list` permission
	// on the queried invocation.
	QueryRunTestVerdicts(ctx context.Context, in *QueryRunTestVerdictsRequest, opts ...grpc.CallOption) (*QueryRunTestVerdictsResponse, error)
	// Retrieves test verdicts from an invocation, recursively.
	// Supports invocation inclusions.
	// TODO(meiring): Update guidance usage to prefer QueryTestVerdicts
	// for use cases where staleness is acceptable once we stablise that RPC.
	QueryTestVariants(ctx context.Context, in *QueryTestVariantsRequest, opts ...grpc.CallOption) (*QueryTestVariantsResponse, error)
	// Retrieves test variants from a single invocation, matching the specified
	// test IDs and hashes.
	BatchGetTestVariants(ctx context.Context, in *BatchGetTestVariantsRequest, opts ...grpc.CallOption) (*BatchGetTestVariantsResponse, error)
	// Retrieves test metadata from a LUCI project, matching the predicate.
	QueryTestMetadata(ctx context.Context, in *QueryTestMetadataRequest, opts ...grpc.CallOption) (*QueryTestMetadataResponse, error)
	// Retrieves an instruction for step or test result.
	// If the instruction contains placeholders, they will not be replaced.
	// The callers of this RPC are responsible to populate the placeholders with real data.
	GetInstruction(ctx context.Context, in *GetInstructionRequest, opts ...grpc.CallOption) (*Instruction, error)
	// Retrieves the instruction and the dependency chain for all targets.
	// A maximum depth can be specified for the maximum number of dependency nodes to be returned.
	// If an error occurs while traversing a chain (e.g. circular dependency, permission, not found...),
	// the chain will stop and the rpc will return whatever it has found so far.
	QueryInstruction(ctx context.Context, in *QueryInstructionRequest, opts ...grpc.CallOption) (*QueryInstructionResponse, error)
	// UNSTABLE (until launched): This RPC is in development and API may change without notice.
	//
	// Retrieves test aggregations for a single root invocation.
	//
	// Unlike QueryTestResults and QueryTestVariants which are guaranteed to read all test results
	// uploaded to Recorder service up to the time of query, this RPC only guarantees eventual
	// consistency (i.e. there may be a lag). Once an invocation is finalized, data is
	// guaranteed to be consistent.
	QueryTestAggregations(ctx context.Context, in *QueryTestAggregationsRequest, opts ...grpc.CallOption) (*QueryTestAggregationsResponse, error)
	// UNSTABLE (until launched): This RPC is in development and API may change without notice.
	// Retrieves test verdicts for a single root invocation.
	//
	// Unlike QueryTestResults and QueryTestVariants which are guaranteed to read all test results
	// uploaded to Recorder service up to the time of query, this RPC only guarantees eventual
	// consistency (i.e. there may be a lag). Once an invocation is finalized, data is
	// guaranteed to be consistent.
	QueryTestVerdicts(ctx context.Context, in *QueryTestVerdictsRequest, opts ...grpc.CallOption) (*QueryTestVerdictsResponse, error)
	// Retrieves an artifact.
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	// Retrieves artifacts for a parent invocation/testResult.
	//
	// Note: if the parent is an invocation, the response does not contain
	// artifacts of included invocations. Use QueryArtifacts instead.
	ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error)
	// Retrieves artifacts from an invocation, recursively.
	// Can retrieve artifacts of test results included in the invocation
	// directly or indirectly.
	// Supports invocation inclusions.
	QueryArtifacts(ctx context.Context, in *QueryArtifactsRequest, opts ...grpc.CallOption) (*QueryArtifactsResponse, error)
	// Lists the artifact contents as a list of log lines and
	// performs best effort extraction of log information
	// such as severity and timestamp for each line.
	//
	// Currently supports artifacts with content types: [text/plain,]
	ListArtifactLines(ctx context.Context, in *ListArtifactLinesRequest, opts ...grpc.CallOption) (*ListArtifactLinesResponse, error)
	// Retrieves the line ranges in the given failure that do not usually appear
	// in logs from passes.
	//
	// Lines are normalized before comparison to remove numbers, dates, tmp file
	// paths, etc.
	//
	// Due to missed normalizations, sampling error or other reasons, this may
	// not eliminate all lines that appear in passes.
	QueryArtifactFailureOnlyLines(ctx context.Context, in *QueryArtifactFailureOnlyLinesRequest, opts ...grpc.CallOption) (*QueryArtifactFailureOnlyLinesResponse, error)
	// Queries result level artifacts that matches a search_string. Support regex or exact match.
	// Results are grouped by test_id, variant_hash, artifact_id.
	// Within each group, artifacts are sorted by recency and at most 3 are returned.
	// To obtain more matching artifacts of a particular group, uses QueryTestVariantArtifacts.
	QueryTestVariantArtifactGroups(ctx context.Context, in *QueryTestVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactGroupsResponse, error)
	// Queries test result artifacts that match a search_string for given test_id, variant_hash and artifact_id.
	QueryTestVariantArtifacts(ctx context.Context, in *QueryTestVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactsResponse, error)
	// Queries invocation level artifacts that matches a search_string. Support regex or exact match.
	// Results are grouped by variant_union_hash, artifact_id.
	// Within each group, artifacts are sorted by recency and at most 3 are returned.
	// To obtain more matching artifacts of a particular group, uses QueryInvocationVariantArtifacts.
	QueryInvocationVariantArtifactGroups(ctx context.Context, in *QueryInvocationVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactGroupsResponse, error)
	// Queries invocation artifacts that match a search_string for given variant_union_hash and artifact_id.
	QueryInvocationVariantArtifacts(ctx context.Context, in *QueryInvocationVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactsResponse, error)
}
type resultDBPRPCClient struct {
	client *prpc.Client
}

func NewResultDBPRPCClient(client *prpc.Client) ResultDBClient {
	return &resultDBPRPCClient{client}
}

func (c *resultDBPRPCClient) GetRootInvocation(ctx context.Context, in *GetRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "GetRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "GetWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) BatchGetWorkUnits(ctx context.Context, in *BatchGetWorkUnitsRequest, opts ...grpc.CallOption) (*BatchGetWorkUnitsResponse, error) {
	out := new(BatchGetWorkUnitsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "BatchGetWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "GetInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryRootInvocationNames(ctx context.Context, in *QueryRootInvocationNamesRequest, opts ...grpc.CallOption) (*QueryRootInvocationNamesResponse, error) {
	out := new(QueryRootInvocationNamesResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryRootInvocationNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) GetTestResult(ctx context.Context, in *GetTestResultRequest, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "GetTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) ListTestResults(ctx context.Context, in *ListTestResultsRequest, opts ...grpc.CallOption) (*ListTestResultsResponse, error) {
	out := new(ListTestResultsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "ListTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) GetTestExoneration(ctx context.Context, in *GetTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error) {
	out := new(TestExoneration)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "GetTestExoneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) ListTestExonerations(ctx context.Context, in *ListTestExonerationsRequest, opts ...grpc.CallOption) (*ListTestExonerationsResponse, error) {
	out := new(ListTestExonerationsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "ListTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestResults(ctx context.Context, in *QueryTestResultsRequest, opts ...grpc.CallOption) (*QueryTestResultsResponse, error) {
	out := new(QueryTestResultsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestExonerations(ctx context.Context, in *QueryTestExonerationsRequest, opts ...grpc.CallOption) (*QueryTestExonerationsResponse, error) {
	out := new(QueryTestExonerationsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestResultStatistics(ctx context.Context, in *QueryTestResultStatisticsRequest, opts ...grpc.CallOption) (*QueryTestResultStatisticsResponse, error) {
	out := new(QueryTestResultStatisticsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestResultStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryNewTestVariants(ctx context.Context, in *QueryNewTestVariantsRequest, opts ...grpc.CallOption) (*QueryNewTestVariantsResponse, error) {
	out := new(QueryNewTestVariantsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryNewTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryRunTestVerdicts(ctx context.Context, in *QueryRunTestVerdictsRequest, opts ...grpc.CallOption) (*QueryRunTestVerdictsResponse, error) {
	out := new(QueryRunTestVerdictsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryRunTestVerdicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestVariants(ctx context.Context, in *QueryTestVariantsRequest, opts ...grpc.CallOption) (*QueryTestVariantsResponse, error) {
	out := new(QueryTestVariantsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) BatchGetTestVariants(ctx context.Context, in *BatchGetTestVariantsRequest, opts ...grpc.CallOption) (*BatchGetTestVariantsResponse, error) {
	out := new(BatchGetTestVariantsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "BatchGetTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestMetadata(ctx context.Context, in *QueryTestMetadataRequest, opts ...grpc.CallOption) (*QueryTestMetadataResponse, error) {
	out := new(QueryTestMetadataResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) GetInstruction(ctx context.Context, in *GetInstructionRequest, opts ...grpc.CallOption) (*Instruction, error) {
	out := new(Instruction)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "GetInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryInstruction(ctx context.Context, in *QueryInstructionRequest, opts ...grpc.CallOption) (*QueryInstructionResponse, error) {
	out := new(QueryInstructionResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestAggregations(ctx context.Context, in *QueryTestAggregationsRequest, opts ...grpc.CallOption) (*QueryTestAggregationsResponse, error) {
	out := new(QueryTestAggregationsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestAggregations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestVerdicts(ctx context.Context, in *QueryTestVerdictsRequest, opts ...grpc.CallOption) (*QueryTestVerdictsResponse, error) {
	out := new(QueryTestVerdictsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestVerdicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "GetArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error) {
	out := new(ListArtifactsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "ListArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryArtifacts(ctx context.Context, in *QueryArtifactsRequest, opts ...grpc.CallOption) (*QueryArtifactsResponse, error) {
	out := new(QueryArtifactsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) ListArtifactLines(ctx context.Context, in *ListArtifactLinesRequest, opts ...grpc.CallOption) (*ListArtifactLinesResponse, error) {
	out := new(ListArtifactLinesResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "ListArtifactLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryArtifactFailureOnlyLines(ctx context.Context, in *QueryArtifactFailureOnlyLinesRequest, opts ...grpc.CallOption) (*QueryArtifactFailureOnlyLinesResponse, error) {
	out := new(QueryArtifactFailureOnlyLinesResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryArtifactFailureOnlyLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestVariantArtifactGroups(ctx context.Context, in *QueryTestVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactGroupsResponse, error) {
	out := new(QueryTestVariantArtifactGroupsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestVariantArtifactGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryTestVariantArtifacts(ctx context.Context, in *QueryTestVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactsResponse, error) {
	out := new(QueryTestVariantArtifactsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryTestVariantArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryInvocationVariantArtifactGroups(ctx context.Context, in *QueryInvocationVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactGroupsResponse, error) {
	out := new(QueryInvocationVariantArtifactGroupsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryInvocationVariantArtifactGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBPRPCClient) QueryInvocationVariantArtifacts(ctx context.Context, in *QueryInvocationVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactsResponse, error) {
	out := new(QueryInvocationVariantArtifactsResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.ResultDB", "QueryInvocationVariantArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type resultDBClient struct {
	cc grpc.ClientConnInterface
}

func NewResultDBClient(cc grpc.ClientConnInterface) ResultDBClient {
	return &resultDBClient{cc}
}

func (c *resultDBClient) GetRootInvocation(ctx context.Context, in *GetRootInvocationRequest, opts ...grpc.CallOption) (*RootInvocation, error) {
	out := new(RootInvocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/GetRootInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) GetWorkUnit(ctx context.Context, in *GetWorkUnitRequest, opts ...grpc.CallOption) (*WorkUnit, error) {
	out := new(WorkUnit)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/GetWorkUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) BatchGetWorkUnits(ctx context.Context, in *BatchGetWorkUnitsRequest, opts ...grpc.CallOption) (*BatchGetWorkUnitsResponse, error) {
	out := new(BatchGetWorkUnitsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/BatchGetWorkUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) GetInvocation(ctx context.Context, in *GetInvocationRequest, opts ...grpc.CallOption) (*Invocation, error) {
	out := new(Invocation)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/GetInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryRootInvocationNames(ctx context.Context, in *QueryRootInvocationNamesRequest, opts ...grpc.CallOption) (*QueryRootInvocationNamesResponse, error) {
	out := new(QueryRootInvocationNamesResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryRootInvocationNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) GetTestResult(ctx context.Context, in *GetTestResultRequest, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/GetTestResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) ListTestResults(ctx context.Context, in *ListTestResultsRequest, opts ...grpc.CallOption) (*ListTestResultsResponse, error) {
	out := new(ListTestResultsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/ListTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) GetTestExoneration(ctx context.Context, in *GetTestExonerationRequest, opts ...grpc.CallOption) (*TestExoneration, error) {
	out := new(TestExoneration)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/GetTestExoneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) ListTestExonerations(ctx context.Context, in *ListTestExonerationsRequest, opts ...grpc.CallOption) (*ListTestExonerationsResponse, error) {
	out := new(ListTestExonerationsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/ListTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestResults(ctx context.Context, in *QueryTestResultsRequest, opts ...grpc.CallOption) (*QueryTestResultsResponse, error) {
	out := new(QueryTestResultsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestExonerations(ctx context.Context, in *QueryTestExonerationsRequest, opts ...grpc.CallOption) (*QueryTestExonerationsResponse, error) {
	out := new(QueryTestExonerationsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestExonerations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestResultStatistics(ctx context.Context, in *QueryTestResultStatisticsRequest, opts ...grpc.CallOption) (*QueryTestResultStatisticsResponse, error) {
	out := new(QueryTestResultStatisticsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestResultStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryNewTestVariants(ctx context.Context, in *QueryNewTestVariantsRequest, opts ...grpc.CallOption) (*QueryNewTestVariantsResponse, error) {
	out := new(QueryNewTestVariantsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryNewTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryRunTestVerdicts(ctx context.Context, in *QueryRunTestVerdictsRequest, opts ...grpc.CallOption) (*QueryRunTestVerdictsResponse, error) {
	out := new(QueryRunTestVerdictsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryRunTestVerdicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestVariants(ctx context.Context, in *QueryTestVariantsRequest, opts ...grpc.CallOption) (*QueryTestVariantsResponse, error) {
	out := new(QueryTestVariantsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) BatchGetTestVariants(ctx context.Context, in *BatchGetTestVariantsRequest, opts ...grpc.CallOption) (*BatchGetTestVariantsResponse, error) {
	out := new(BatchGetTestVariantsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/BatchGetTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestMetadata(ctx context.Context, in *QueryTestMetadataRequest, opts ...grpc.CallOption) (*QueryTestMetadataResponse, error) {
	out := new(QueryTestMetadataResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) GetInstruction(ctx context.Context, in *GetInstructionRequest, opts ...grpc.CallOption) (*Instruction, error) {
	out := new(Instruction)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/GetInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryInstruction(ctx context.Context, in *QueryInstructionRequest, opts ...grpc.CallOption) (*QueryInstructionResponse, error) {
	out := new(QueryInstructionResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryInstruction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestAggregations(ctx context.Context, in *QueryTestAggregationsRequest, opts ...grpc.CallOption) (*QueryTestAggregationsResponse, error) {
	out := new(QueryTestAggregationsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestAggregations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestVerdicts(ctx context.Context, in *QueryTestVerdictsRequest, opts ...grpc.CallOption) (*QueryTestVerdictsResponse, error) {
	out := new(QueryTestVerdictsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestVerdicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/GetArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error) {
	out := new(ListArtifactsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/ListArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryArtifacts(ctx context.Context, in *QueryArtifactsRequest, opts ...grpc.CallOption) (*QueryArtifactsResponse, error) {
	out := new(QueryArtifactsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) ListArtifactLines(ctx context.Context, in *ListArtifactLinesRequest, opts ...grpc.CallOption) (*ListArtifactLinesResponse, error) {
	out := new(ListArtifactLinesResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/ListArtifactLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryArtifactFailureOnlyLines(ctx context.Context, in *QueryArtifactFailureOnlyLinesRequest, opts ...grpc.CallOption) (*QueryArtifactFailureOnlyLinesResponse, error) {
	out := new(QueryArtifactFailureOnlyLinesResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryArtifactFailureOnlyLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestVariantArtifactGroups(ctx context.Context, in *QueryTestVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactGroupsResponse, error) {
	out := new(QueryTestVariantArtifactGroupsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestVariantArtifactGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryTestVariantArtifacts(ctx context.Context, in *QueryTestVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryTestVariantArtifactsResponse, error) {
	out := new(QueryTestVariantArtifactsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryTestVariantArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryInvocationVariantArtifactGroups(ctx context.Context, in *QueryInvocationVariantArtifactGroupsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactGroupsResponse, error) {
	out := new(QueryInvocationVariantArtifactGroupsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryInvocationVariantArtifactGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resultDBClient) QueryInvocationVariantArtifacts(ctx context.Context, in *QueryInvocationVariantArtifactsRequest, opts ...grpc.CallOption) (*QueryInvocationVariantArtifactsResponse, error) {
	out := new(QueryInvocationVariantArtifactsResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.ResultDB/QueryInvocationVariantArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResultDBServer is the server API for ResultDB service.
type ResultDBServer interface {
	// == Root invocations and work units ========================================
	// Retrieves a root invocation.
	GetRootInvocation(context.Context, *GetRootInvocationRequest) (*RootInvocation, error)
	// Retrieves a work unit.
	GetWorkUnit(context.Context, *GetWorkUnitRequest) (*WorkUnit, error)
	// Retrieves a list of work units.
	BatchGetWorkUnits(context.Context, *BatchGetWorkUnitsRequest) (*BatchGetWorkUnitsResponse, error)
	// == Invocations ============================================================
	// Retrieves an invocation.
	GetInvocation(context.Context, *GetInvocationRequest) (*Invocation, error)
	// Retrieve names of all root invocations for a given invocation.
	QueryRootInvocationNames(context.Context, *QueryRootInvocationNamesRequest) (*QueryRootInvocationNamesResponse, error)
	// Retrieves a test result.
	GetTestResult(context.Context, *GetTestResultRequest) (*TestResult, error)
	// Retrieves test results for a parent invocation.
	//
	// Note: response does not contain test results of included invocations.
	// Use QueryTestResults instead.
	ListTestResults(context.Context, *ListTestResultsRequest) (*ListTestResultsResponse, error)
	// Retrieves a test exoneration.
	GetTestExoneration(context.Context, *GetTestExonerationRequest) (*TestExoneration, error)
	// Retrieves test exonerations for a parent invocation.
	//
	// Note: response does not contain test results of included invocations.
	// Use QueryTestExonerations instead.
	ListTestExonerations(context.Context, *ListTestExonerationsRequest) (*ListTestExonerationsResponse, error)
	// Retrieves test results from an invocation, recursively.
	// Supports invocation inclusions.
	// Supports advanced filtering.
	// Examples: go/resultdb-rpc#querytestresults
	QueryTestResults(context.Context, *QueryTestResultsRequest) (*QueryTestResultsResponse, error)
	// Retrieves test exonerations from an invocation.
	// Supports invocation inclusions.
	// Supports advanced filtering.
	QueryTestExonerations(context.Context, *QueryTestExonerationsRequest) (*QueryTestExonerationsResponse, error)
	// Retrieves the test result statistics of an invocation.
	// Currently supports total number of test results belong to the invocation,
	// directly and indirectly.
	QueryTestResultStatistics(context.Context, *QueryTestResultStatisticsRequest) (*QueryTestResultStatisticsResponse, error)
	// Calculate new test variants by running the difference between the tests
	// run in the given invocation against the submitted test history for the
	// source.
	QueryNewTestVariants(context.Context, *QueryNewTestVariantsRequest) (*QueryNewTestVariantsResponse, error)
	// Retrieves test verdicts for a test run. A test run comprises only
	// the test results from a single invocation and not its included
	// invocations.
	//
	// Useful to incrementally ingest test results for an export root as its
	// individual constituent invocations finalize, in conjunction with
	// the invocations-ready-for-export pub/sub.
	//
	// Compared to the ListTestResults RPC, this RPC ensures all results
	// for a test variant are returned together, which is useful when
	// ingesting results into analyses that treat retried test results
	// in a given test run differently to the first retry.
	//
	// To use, the caller must have `resultdb.testResults.list` permission
	// on the queried invocation.
	QueryRunTestVerdicts(context.Context, *QueryRunTestVerdictsRequest) (*QueryRunTestVerdictsResponse, error)
	// Retrieves test verdicts from an invocation, recursively.
	// Supports invocation inclusions.
	// TODO(meiring): Update guidance usage to prefer QueryTestVerdicts
	// for use cases where staleness is acceptable once we stablise that RPC.
	QueryTestVariants(context.Context, *QueryTestVariantsRequest) (*QueryTestVariantsResponse, error)
	// Retrieves test variants from a single invocation, matching the specified
	// test IDs and hashes.
	BatchGetTestVariants(context.Context, *BatchGetTestVariantsRequest) (*BatchGetTestVariantsResponse, error)
	// Retrieves test metadata from a LUCI project, matching the predicate.
	QueryTestMetadata(context.Context, *QueryTestMetadataRequest) (*QueryTestMetadataResponse, error)
	// Retrieves an instruction for step or test result.
	// If the instruction contains placeholders, they will not be replaced.
	// The callers of this RPC are responsible to populate the placeholders with real data.
	GetInstruction(context.Context, *GetInstructionRequest) (*Instruction, error)
	// Retrieves the instruction and the dependency chain for all targets.
	// A maximum depth can be specified for the maximum number of dependency nodes to be returned.
	// If an error occurs while traversing a chain (e.g. circular dependency, permission, not found...),
	// the chain will stop and the rpc will return whatever it has found so far.
	QueryInstruction(context.Context, *QueryInstructionRequest) (*QueryInstructionResponse, error)
	// UNSTABLE (until launched): This RPC is in development and API may change without notice.
	//
	// Retrieves test aggregations for a single root invocation.
	//
	// Unlike QueryTestResults and QueryTestVariants which are guaranteed to read all test results
	// uploaded to Recorder service up to the time of query, this RPC only guarantees eventual
	// consistency (i.e. there may be a lag). Once an invocation is finalized, data is
	// guaranteed to be consistent.
	QueryTestAggregations(context.Context, *QueryTestAggregationsRequest) (*QueryTestAggregationsResponse, error)
	// UNSTABLE (until launched): This RPC is in development and API may change without notice.
	// Retrieves test verdicts for a single root invocation.
	//
	// Unlike QueryTestResults and QueryTestVariants which are guaranteed to read all test results
	// uploaded to Recorder service up to the time of query, this RPC only guarantees eventual
	// consistency (i.e. there may be a lag). Once an invocation is finalized, data is
	// guaranteed to be consistent.
	QueryTestVerdicts(context.Context, *QueryTestVerdictsRequest) (*QueryTestVerdictsResponse, error)
	// Retrieves an artifact.
	GetArtifact(context.Context, *GetArtifactRequest) (*Artifact, error)
	// Retrieves artifacts for a parent invocation/testResult.
	//
	// Note: if the parent is an invocation, the response does not contain
	// artifacts of included invocations. Use QueryArtifacts instead.
	ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactsResponse, error)
	// Retrieves artifacts from an invocation, recursively.
	// Can retrieve artifacts of test results included in the invocation
	// directly or indirectly.
	// Supports invocation inclusions.
	QueryArtifacts(context.Context, *QueryArtifactsRequest) (*QueryArtifactsResponse, error)
	// Lists the artifact contents as a list of log lines and
	// performs best effort extraction of log information
	// such as severity and timestamp for each line.
	//
	// Currently supports artifacts with content types: [text/plain,]
	ListArtifactLines(context.Context, *ListArtifactLinesRequest) (*ListArtifactLinesResponse, error)
	// Retrieves the line ranges in the given failure that do not usually appear
	// in logs from passes.
	//
	// Lines are normalized before comparison to remove numbers, dates, tmp file
	// paths, etc.
	//
	// Due to missed normalizations, sampling error or other reasons, this may
	// not eliminate all lines that appear in passes.
	QueryArtifactFailureOnlyLines(context.Context, *QueryArtifactFailureOnlyLinesRequest) (*QueryArtifactFailureOnlyLinesResponse, error)
	// Queries result level artifacts that matches a search_string. Support regex or exact match.
	// Results are grouped by test_id, variant_hash, artifact_id.
	// Within each group, artifacts are sorted by recency and at most 3 are returned.
	// To obtain more matching artifacts of a particular group, uses QueryTestVariantArtifacts.
	QueryTestVariantArtifactGroups(context.Context, *QueryTestVariantArtifactGroupsRequest) (*QueryTestVariantArtifactGroupsResponse, error)
	// Queries test result artifacts that match a search_string for given test_id, variant_hash and artifact_id.
	QueryTestVariantArtifacts(context.Context, *QueryTestVariantArtifactsRequest) (*QueryTestVariantArtifactsResponse, error)
	// Queries invocation level artifacts that matches a search_string. Support regex or exact match.
	// Results are grouped by variant_union_hash, artifact_id.
	// Within each group, artifacts are sorted by recency and at most 3 are returned.
	// To obtain more matching artifacts of a particular group, uses QueryInvocationVariantArtifacts.
	QueryInvocationVariantArtifactGroups(context.Context, *QueryInvocationVariantArtifactGroupsRequest) (*QueryInvocationVariantArtifactGroupsResponse, error)
	// Queries invocation artifacts that match a search_string for given variant_union_hash and artifact_id.
	QueryInvocationVariantArtifacts(context.Context, *QueryInvocationVariantArtifactsRequest) (*QueryInvocationVariantArtifactsResponse, error)
}

// UnimplementedResultDBServer can be embedded to have forward compatible implementations.
type UnimplementedResultDBServer struct {
}

func (*UnimplementedResultDBServer) GetRootInvocation(context.Context, *GetRootInvocationRequest) (*RootInvocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootInvocation not implemented")
}
func (*UnimplementedResultDBServer) GetWorkUnit(context.Context, *GetWorkUnitRequest) (*WorkUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkUnit not implemented")
}
func (*UnimplementedResultDBServer) BatchGetWorkUnits(context.Context, *BatchGetWorkUnitsRequest) (*BatchGetWorkUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetWorkUnits not implemented")
}
func (*UnimplementedResultDBServer) GetInvocation(context.Context, *GetInvocationRequest) (*Invocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvocation not implemented")
}
func (*UnimplementedResultDBServer) QueryRootInvocationNames(context.Context, *QueryRootInvocationNamesRequest) (*QueryRootInvocationNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRootInvocationNames not implemented")
}
func (*UnimplementedResultDBServer) GetTestResult(context.Context, *GetTestResultRequest) (*TestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestResult not implemented")
}
func (*UnimplementedResultDBServer) ListTestResults(context.Context, *ListTestResultsRequest) (*ListTestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestResults not implemented")
}
func (*UnimplementedResultDBServer) GetTestExoneration(context.Context, *GetTestExonerationRequest) (*TestExoneration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestExoneration not implemented")
}
func (*UnimplementedResultDBServer) ListTestExonerations(context.Context, *ListTestExonerationsRequest) (*ListTestExonerationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestExonerations not implemented")
}
func (*UnimplementedResultDBServer) QueryTestResults(context.Context, *QueryTestResultsRequest) (*QueryTestResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestResults not implemented")
}
func (*UnimplementedResultDBServer) QueryTestExonerations(context.Context, *QueryTestExonerationsRequest) (*QueryTestExonerationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestExonerations not implemented")
}
func (*UnimplementedResultDBServer) QueryTestResultStatistics(context.Context, *QueryTestResultStatisticsRequest) (*QueryTestResultStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestResultStatistics not implemented")
}
func (*UnimplementedResultDBServer) QueryNewTestVariants(context.Context, *QueryNewTestVariantsRequest) (*QueryNewTestVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNewTestVariants not implemented")
}
func (*UnimplementedResultDBServer) QueryRunTestVerdicts(context.Context, *QueryRunTestVerdictsRequest) (*QueryRunTestVerdictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRunTestVerdicts not implemented")
}
func (*UnimplementedResultDBServer) QueryTestVariants(context.Context, *QueryTestVariantsRequest) (*QueryTestVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestVariants not implemented")
}
func (*UnimplementedResultDBServer) BatchGetTestVariants(context.Context, *BatchGetTestVariantsRequest) (*BatchGetTestVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetTestVariants not implemented")
}
func (*UnimplementedResultDBServer) QueryTestMetadata(context.Context, *QueryTestMetadataRequest) (*QueryTestMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestMetadata not implemented")
}
func (*UnimplementedResultDBServer) GetInstruction(context.Context, *GetInstructionRequest) (*Instruction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstruction not implemented")
}
func (*UnimplementedResultDBServer) QueryInstruction(context.Context, *QueryInstructionRequest) (*QueryInstructionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInstruction not implemented")
}
func (*UnimplementedResultDBServer) QueryTestAggregations(context.Context, *QueryTestAggregationsRequest) (*QueryTestAggregationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestAggregations not implemented")
}
func (*UnimplementedResultDBServer) QueryTestVerdicts(context.Context, *QueryTestVerdictsRequest) (*QueryTestVerdictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestVerdicts not implemented")
}
func (*UnimplementedResultDBServer) GetArtifact(context.Context, *GetArtifactRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (*UnimplementedResultDBServer) ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (*UnimplementedResultDBServer) QueryArtifacts(context.Context, *QueryArtifactsRequest) (*QueryArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArtifacts not implemented")
}
func (*UnimplementedResultDBServer) ListArtifactLines(context.Context, *ListArtifactLinesRequest) (*ListArtifactLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifactLines not implemented")
}
func (*UnimplementedResultDBServer) QueryArtifactFailureOnlyLines(context.Context, *QueryArtifactFailureOnlyLinesRequest) (*QueryArtifactFailureOnlyLinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryArtifactFailureOnlyLines not implemented")
}
func (*UnimplementedResultDBServer) QueryTestVariantArtifactGroups(context.Context, *QueryTestVariantArtifactGroupsRequest) (*QueryTestVariantArtifactGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestVariantArtifactGroups not implemented")
}
func (*UnimplementedResultDBServer) QueryTestVariantArtifacts(context.Context, *QueryTestVariantArtifactsRequest) (*QueryTestVariantArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTestVariantArtifacts not implemented")
}
func (*UnimplementedResultDBServer) QueryInvocationVariantArtifactGroups(context.Context, *QueryInvocationVariantArtifactGroupsRequest) (*QueryInvocationVariantArtifactGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvocationVariantArtifactGroups not implemented")
}
func (*UnimplementedResultDBServer) QueryInvocationVariantArtifacts(context.Context, *QueryInvocationVariantArtifactsRequest) (*QueryInvocationVariantArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInvocationVariantArtifacts not implemented")
}

func RegisterResultDBServer(s prpc.Registrar, srv ResultDBServer) {
	s.RegisterService(&_ResultDB_serviceDesc, srv)
}

func _ResultDB_GetRootInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).GetRootInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/GetRootInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).GetRootInvocation(ctx, req.(*GetRootInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_GetWorkUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).GetWorkUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/GetWorkUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).GetWorkUnit(ctx, req.(*GetWorkUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_BatchGetWorkUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetWorkUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).BatchGetWorkUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/BatchGetWorkUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).BatchGetWorkUnits(ctx, req.(*BatchGetWorkUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_GetInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).GetInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/GetInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).GetInvocation(ctx, req.(*GetInvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryRootInvocationNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRootInvocationNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryRootInvocationNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryRootInvocationNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryRootInvocationNames(ctx, req.(*QueryRootInvocationNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_GetTestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).GetTestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/GetTestResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).GetTestResult(ctx, req.(*GetTestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_ListTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).ListTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/ListTestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).ListTestResults(ctx, req.(*ListTestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_GetTestExoneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestExonerationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).GetTestExoneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/GetTestExoneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).GetTestExoneration(ctx, req.(*GetTestExonerationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_ListTestExonerations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestExonerationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).ListTestExonerations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/ListTestExonerations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).ListTestExonerations(ctx, req.(*ListTestExonerationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestResults(ctx, req.(*QueryTestResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestExonerations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestExonerationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestExonerations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestExonerations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestExonerations(ctx, req.(*QueryTestExonerationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestResultStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestResultStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestResultStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestResultStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestResultStatistics(ctx, req.(*QueryTestResultStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryNewTestVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNewTestVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryNewTestVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryNewTestVariants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryNewTestVariants(ctx, req.(*QueryNewTestVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryRunTestVerdicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRunTestVerdictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryRunTestVerdicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryRunTestVerdicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryRunTestVerdicts(ctx, req.(*QueryRunTestVerdictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestVariants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestVariants(ctx, req.(*QueryTestVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_BatchGetTestVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetTestVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).BatchGetTestVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/BatchGetTestVariants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).BatchGetTestVariants(ctx, req.(*BatchGetTestVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestMetadata(ctx, req.(*QueryTestMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_GetInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstructionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).GetInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/GetInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).GetInstruction(ctx, req.(*GetInstructionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryInstruction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInstructionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryInstruction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryInstruction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryInstruction(ctx, req.(*QueryInstructionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestAggregations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestAggregationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestAggregations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestAggregations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestAggregations(ctx, req.(*QueryTestAggregationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestVerdicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestVerdictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestVerdicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestVerdicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestVerdicts(ctx, req.(*QueryTestVerdictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/GetArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/ListArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).ListArtifacts(ctx, req.(*ListArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryArtifacts(ctx, req.(*QueryArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_ListArtifactLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).ListArtifactLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/ListArtifactLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).ListArtifactLines(ctx, req.(*ListArtifactLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryArtifactFailureOnlyLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArtifactFailureOnlyLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryArtifactFailureOnlyLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryArtifactFailureOnlyLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryArtifactFailureOnlyLines(ctx, req.(*QueryArtifactFailureOnlyLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestVariantArtifactGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestVariantArtifactGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestVariantArtifactGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestVariantArtifactGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestVariantArtifactGroups(ctx, req.(*QueryTestVariantArtifactGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryTestVariantArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTestVariantArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryTestVariantArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryTestVariantArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryTestVariantArtifacts(ctx, req.(*QueryTestVariantArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryInvocationVariantArtifactGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvocationVariantArtifactGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryInvocationVariantArtifactGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryInvocationVariantArtifactGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryInvocationVariantArtifactGroups(ctx, req.(*QueryInvocationVariantArtifactGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResultDB_QueryInvocationVariantArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInvocationVariantArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResultDBServer).QueryInvocationVariantArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.ResultDB/QueryInvocationVariantArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResultDBServer).QueryInvocationVariantArtifacts(ctx, req.(*QueryInvocationVariantArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResultDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.resultdb.v1.ResultDB",
	HandlerType: (*ResultDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRootInvocation",
			Handler:    _ResultDB_GetRootInvocation_Handler,
		},
		{
			MethodName: "GetWorkUnit",
			Handler:    _ResultDB_GetWorkUnit_Handler,
		},
		{
			MethodName: "BatchGetWorkUnits",
			Handler:    _ResultDB_BatchGetWorkUnits_Handler,
		},
		{
			MethodName: "GetInvocation",
			Handler:    _ResultDB_GetInvocation_Handler,
		},
		{
			MethodName: "QueryRootInvocationNames",
			Handler:    _ResultDB_QueryRootInvocationNames_Handler,
		},
		{
			MethodName: "GetTestResult",
			Handler:    _ResultDB_GetTestResult_Handler,
		},
		{
			MethodName: "ListTestResults",
			Handler:    _ResultDB_ListTestResults_Handler,
		},
		{
			MethodName: "GetTestExoneration",
			Handler:    _ResultDB_GetTestExoneration_Handler,
		},
		{
			MethodName: "ListTestExonerations",
			Handler:    _ResultDB_ListTestExonerations_Handler,
		},
		{
			MethodName: "QueryTestResults",
			Handler:    _ResultDB_QueryTestResults_Handler,
		},
		{
			MethodName: "QueryTestExonerations",
			Handler:    _ResultDB_QueryTestExonerations_Handler,
		},
		{
			MethodName: "QueryTestResultStatistics",
			Handler:    _ResultDB_QueryTestResultStatistics_Handler,
		},
		{
			MethodName: "QueryNewTestVariants",
			Handler:    _ResultDB_QueryNewTestVariants_Handler,
		},
		{
			MethodName: "QueryRunTestVerdicts",
			Handler:    _ResultDB_QueryRunTestVerdicts_Handler,
		},
		{
			MethodName: "QueryTestVariants",
			Handler:    _ResultDB_QueryTestVariants_Handler,
		},
		{
			MethodName: "BatchGetTestVariants",
			Handler:    _ResultDB_BatchGetTestVariants_Handler,
		},
		{
			MethodName: "QueryTestMetadata",
			Handler:    _ResultDB_QueryTestMetadata_Handler,
		},
		{
			MethodName: "GetInstruction",
			Handler:    _ResultDB_GetInstruction_Handler,
		},
		{
			MethodName: "QueryInstruction",
			Handler:    _ResultDB_QueryInstruction_Handler,
		},
		{
			MethodName: "QueryTestAggregations",
			Handler:    _ResultDB_QueryTestAggregations_Handler,
		},
		{
			MethodName: "QueryTestVerdicts",
			Handler:    _ResultDB_QueryTestVerdicts_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _ResultDB_GetArtifact_Handler,
		},
		{
			MethodName: "ListArtifacts",
			Handler:    _ResultDB_ListArtifacts_Handler,
		},
		{
			MethodName: "QueryArtifacts",
			Handler:    _ResultDB_QueryArtifacts_Handler,
		},
		{
			MethodName: "ListArtifactLines",
			Handler:    _ResultDB_ListArtifactLines_Handler,
		},
		{
			MethodName: "QueryArtifactFailureOnlyLines",
			Handler:    _ResultDB_QueryArtifactFailureOnlyLines_Handler,
		},
		{
			MethodName: "QueryTestVariantArtifactGroups",
			Handler:    _ResultDB_QueryTestVariantArtifactGroups_Handler,
		},
		{
			MethodName: "QueryTestVariantArtifacts",
			Handler:    _ResultDB_QueryTestVariantArtifacts_Handler,
		},
		{
			MethodName: "QueryInvocationVariantArtifactGroups",
			Handler:    _ResultDB_QueryInvocationVariantArtifactGroups_Handler,
		},
		{
			MethodName: "QueryInvocationVariantArtifacts",
			Handler:    _ResultDB_QueryInvocationVariantArtifacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/resultdb/proto/v1/resultdb.proto",
}
