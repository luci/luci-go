// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v6.32.0
// source: go.chromium.org/luci/resultdb/proto/v1/test_exoneration.proto

package resultpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Reason why a test variant was exonerated.
type ExonerationReason int32

const (
	// Reason was not specified.
	// Not to be used in actual test exonerations; serves as a default value for
	// an unset field.
	ExonerationReason_EXONERATION_REASON_UNSPECIFIED ExonerationReason = 0
	// Similar unexpected results were observed on a mainline branch
	// (i.e. against a build without unsubmitted changes applied).
	// (For avoidance of doubt, this includes both flakily and
	// deterministically occurring unexpected results.)
	// Applies to unexpected results in presubmit/CQ runs only.
	ExonerationReason_OCCURS_ON_MAINLINE ExonerationReason = 1
	// Similar unexpected results were observed in presubmit run(s) for other,
	// unrelated CL(s). (This is suggestive of the issue being present
	// on mainline but is not confirmed as there are possible confounding
	// factors, like how tests are run on CLs vs how tests are run on
	// mainline branches.)
	// Applies to unexpected results in presubmit/CQ runs only.
	ExonerationReason_OCCURS_ON_OTHER_CLS ExonerationReason = 2
	// The tests are not critical to the test subject (e.g. CL) passing.
	// This could be because more data is being collected to determine if
	// the tests are stable enough to be made critical (as is often the
	// case for experimental test suites).
	// If information exists indicating the tests are producing unexpected
	// results, and the tests are not critical for that reason,
	// prefer more specific reasons OCCURS_ON_MAINLINE or OCCURS_ON_OTHER_CLS.
	ExonerationReason_NOT_CRITICAL ExonerationReason = 3
	// The test result was an unexpected pass. (Note that such an exoneration is
	// not automatically created for unexpected passes, unless the option is
	// specified to ResultSink or the project manually creates one).
	ExonerationReason_UNEXPECTED_PASS ExonerationReason = 4
)

// Enum value maps for ExonerationReason.
var (
	ExonerationReason_name = map[int32]string{
		0: "EXONERATION_REASON_UNSPECIFIED",
		1: "OCCURS_ON_MAINLINE",
		2: "OCCURS_ON_OTHER_CLS",
		3: "NOT_CRITICAL",
		4: "UNEXPECTED_PASS",
	}
	ExonerationReason_value = map[string]int32{
		"EXONERATION_REASON_UNSPECIFIED": 0,
		"OCCURS_ON_MAINLINE":             1,
		"OCCURS_ON_OTHER_CLS":            2,
		"NOT_CRITICAL":                   3,
		"UNEXPECTED_PASS":                4,
	}
)

func (x ExonerationReason) Enum() *ExonerationReason {
	p := new(ExonerationReason)
	*p = x
	return p
}

func (x ExonerationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExonerationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_enumTypes[0].Descriptor()
}

func (ExonerationReason) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_enumTypes[0]
}

func (x ExonerationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExonerationReason.Descriptor instead.
func (ExonerationReason) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescGZIP(), []int{0}
}

// Indicates that the test subject (e.g., a ChangeList in Gerrit) should not
// be considered "at fault" for an failed result of a particular test variant.
// This is often used in presubmit checks (like CQ) to prevent blaming a CL
// for pre-existing or unrelated issues.
// Next ID: 10.
type TestExoneration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Can be used to refer to this test exoneration, e.g. in
	// ResultDB.GetTestExoneration RPC.
	// Format:
	// invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/exonerations/{EXONERATION_ID}.
	// URL_ESCAPED_TEST_ID uses the flat test ID format.
	//
	// Output only.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The structured identifier of the test that is being exonerated.
	TestIdStructured *TestIdentifier `protobuf:"bytes,9,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// The flat test id of the test that is being exonerated.
	// Output only. (Except for legacy uploaders.)
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The variant of the test that is being exonerated.
	// Output only. (Except for legacy uploaders.)
	Variant *Variant `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// Identifies an exoneration in a given invocation and test id.
	// It is server-generated.
	ExonerationId string `protobuf:"bytes,4,opt,name=exoneration_id,json=exonerationId,proto3" json:"exoneration_id,omitempty"`
	// Humnan readable reasoning behind the exoneration, in HTML.
	// MUST be sanitized before rendering in the browser.
	ExplanationHtml string `protobuf:"bytes,5,opt,name=explanation_html,json=explanationHtml,proto3" json:"explanation_html,omitempty"`
	// SHA256 hash of the module variant key-value pairs, hex-encoded.
	// See variant_hash on TestResult for more details.
	// Output only.
	VariantHash string `protobuf:"bytes,6,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Reasoning behind the exoneration, in machine-readable form.
	// Used to assist downstream analyses, such as automatic bug-filing.
	// This allow detection of e.g. critical tests failing in presubmit,
	// even if they are being exonerated because they fail on other CLs.
	Reason ExonerationReason `protobuf:"varint,7,opt,name=reason,proto3,enum=luci.resultdb.v1.ExonerationReason" json:"reason,omitempty"`
	// Whether the test exoneration has been masked so that it includes only
	// metadata. The metadata fields for a TestExoneration are:
	// * name
	// * test_id_structured
	// * exoneration_id
	// * variant_hash
	// * explanation_html
	// * reason
	// * test_id (deprecated)
	// * variant (deprecated)
	//
	// This field is output only.
	IsMasked bool `protobuf:"varint,8,opt,name=is_masked,json=isMasked,proto3" json:"is_masked,omitempty"`
}

func (x *TestExoneration) Reset() {
	*x = TestExoneration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestExoneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestExoneration) ProtoMessage() {}

func (x *TestExoneration) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestExoneration.ProtoReflect.Descriptor instead.
func (*TestExoneration) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescGZIP(), []int{0}
}

func (x *TestExoneration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestExoneration) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *TestExoneration) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestExoneration) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *TestExoneration) GetExonerationId() string {
	if x != nil {
		return x.ExonerationId
	}
	return ""
}

func (x *TestExoneration) GetExplanationHtml() string {
	if x != nil {
		return x.ExplanationHtml
	}
	return ""
}

func (x *TestExoneration) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestExoneration) GetReason() ExonerationReason {
	if x != nil {
		return x.Reason
	}
	return ExonerationReason_EXONERATION_REASON_UNSPECIFIED
}

func (x *TestExoneration) GetIsMasked() bool {
	if x != nil {
		return x.IsMasked
	}
	return false
}

var File_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78,
	0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x03, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41,
	0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0,
	0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41,
	0x05, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x65, 0x78,
	0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0d, 0x65, 0x78, 0x6f, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x10, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x05, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x40, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4d,
	0x61, 0x73, 0x6b, 0x65, 0x64, 0x2a, 0x8f, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x43, 0x43, 0x55, 0x52,
	0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x53, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x04, 0x42, 0x50, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31,
	0x3b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescData = file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDesc
)

func file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescData)
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_goTypes = []interface{}{
	(ExonerationReason)(0),  // 0: luci.resultdb.v1.ExonerationReason
	(*TestExoneration)(nil), // 1: luci.resultdb.v1.TestExoneration
	(*TestIdentifier)(nil),  // 2: luci.resultdb.v1.TestIdentifier
	(*Variant)(nil),         // 3: luci.resultdb.v1.Variant
}
var file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_depIdxs = []int32{
	2, // 0: luci.resultdb.v1.TestExoneration.test_id_structured:type_name -> luci.resultdb.v1.TestIdentifier
	3, // 1: luci.resultdb.v1.TestExoneration.variant:type_name -> luci.resultdb.v1.Variant
	0, // 2: luci.resultdb.v1.TestExoneration.reason:type_name -> luci.resultdb.v1.ExonerationReason
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto != nil {
		return
	}
	file_go_chromium_org_luci_resultdb_proto_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestExoneration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_rawDesc = nil
	file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_test_exoneration_proto_depIdxs = nil
}
