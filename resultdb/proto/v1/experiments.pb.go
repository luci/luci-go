// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/resultdb/proto/v1/experiments.proto

package resultpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message for Echo RPC.
type EchoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A message, which is to be returned in the response.
	//
	// Must consist only of printable ASCII characters.
	// Max 1024 characters. Mandatory.
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoRequest) Reset() {
	*x = EchoRequest{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoRequest) ProtoMessage() {}

func (x *EchoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoRequest.ProtoReflect.Descriptor instead.
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescGZIP(), []int{0}
}

func (x *EchoRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// A response message for Echo RPC.
type EchoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message, which was provided in the request.
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoResponse) Reset() {
	*x = EchoResponse{}
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoResponse) ProtoMessage() {}

func (x *EchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoResponse.ProtoReflect.Descriptor instead.
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescGZIP(), []int{1}
}

func (x *EchoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_go_chromium_org_luci_resultdb_proto_v1_experiments_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDesc = "" +
	"\n" +
	"8go.chromium.org/luci/resultdb/proto/v1/experiments.proto\x12\x10luci.resultdb.v1\"'\n" +
	"\vEchoRequest\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"(\n" +
	"\fEchoResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage2V\n" +
	"\vExperiments\x12G\n" +
	"\x04Echo\x12\x1d.luci.resultdb.v1.EchoRequest\x1a\x1e.luci.resultdb.v1.EchoResponse\"\x00BP\n" +
	"\x1bcom.google.luci.resultdb.v1P\x01Z/go.chromium.org/luci/resultdb/proto/v1;resultpbb\x06proto3"

var (
	file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescData []byte
)

func file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDescData
}

var file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_goTypes = []any{
	(*EchoRequest)(nil),  // 0: luci.resultdb.v1.EchoRequest
	(*EchoResponse)(nil), // 1: luci.resultdb.v1.EchoResponse
}
var file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_depIdxs = []int32{
	0, // 0: luci.resultdb.v1.Experiments.Echo:input_type -> luci.resultdb.v1.EchoRequest
	1, // 1: luci.resultdb.v1.Experiments.Echo:output_type -> luci.resultdb.v1.EchoResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_init() }
func file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_init() {
	if File_go_chromium_org_luci_resultdb_proto_v1_experiments_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDesc), len(file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_resultdb_proto_v1_experiments_proto = out.File
	file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_goTypes = nil
	file_go_chromium_org_luci_resultdb_proto_v1_experiments_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExperimentsClient is the client API for Experiments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExperimentsClient interface {
	// Sample RPC to allow verification the server is up and running.
	// Replace with actual RPC.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}
type experimentsPRPCClient struct {
	client *prpc.Client
}

func NewExperimentsPRPCClient(client *prpc.Client) ExperimentsClient {
	return &experimentsPRPCClient{client}
}

func (c *experimentsPRPCClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.client.Call(ctx, "luci.resultdb.v1.Experiments", "Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type experimentsClient struct {
	cc grpc.ClientConnInterface
}

func NewExperimentsClient(cc grpc.ClientConnInterface) ExperimentsClient {
	return &experimentsClient{cc}
}

func (c *experimentsClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/luci.resultdb.v1.Experiments/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentsServer is the server API for Experiments service.
type ExperimentsServer interface {
	// Sample RPC to allow verification the server is up and running.
	// Replace with actual RPC.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
}

// UnimplementedExperimentsServer can be embedded to have forward compatible implementations.
type UnimplementedExperimentsServer struct {
}

func (*UnimplementedExperimentsServer) Echo(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterExperimentsServer(s prpc.Registrar, srv ExperimentsServer) {
	s.RegisterService(&_Experiments_serviceDesc, srv)
}

func _Experiments_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentsServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.resultdb.v1.Experiments/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentsServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Experiments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.resultdb.v1.Experiments",
	HandlerType: (*ExperimentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Experiments_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/resultdb/proto/v1/experiments.proto",
}
