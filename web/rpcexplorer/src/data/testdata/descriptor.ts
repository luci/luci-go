// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is generated by gen.go.
// To update run "go generate .".

export const TestDescriptor = {
  "file":  [
    {
      "name":  "google/protobuf/any.proto",
      "package":  "google.protobuf",
      "messageType":  [
        {
          "name":  "Any",
          "field":  [
            {
              "name":  "type_url",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_STRING",
              "jsonName":  "typeUrl"
            },
            {
              "name":  "value",
              "number":  2,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_BYTES",
              "jsonName":  "value"
            }
          ]
        }
      ],
      "options":  {
        "javaPackage":  "com.google.protobuf",
        "javaOuterClassname":  "AnyProto",
        "javaMultipleFiles":  true,
        "goPackage":  "google.golang.org/protobuf/types/known/anypb",
        "objcClassPrefix":  "GPB",
        "csharpNamespace":  "Google.Protobuf.WellKnownTypes"
      },
      "sourceCodeInfo":  {
        "location":  [
          {
            "span":  [
              30,
              0,
              161,
              1
            ]
          },
          {
            "path":  [
              12
            ],
            "span":  [
              30,
              0,
              18
            ],
            "leadingDetachedComments":  [
              " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
            ]
          },
          {
            "path":  [
              2
            ],
            "span":  [
              32,
              0,
              24
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              34,
              0,
              67
            ]
          },
          {
            "path":  [
              8,
              11
            ],
            "span":  [
              34,
              0,
              67
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              35,
              0,
              44
            ]
          },
          {
            "path":  [
              8,
              1
            ],
            "span":  [
              35,
              0,
              44
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              36,
              0,
              41
            ]
          },
          {
            "path":  [
              8,
              8
            ],
            "span":  [
              36,
              0,
              41
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              37,
              0,
              34
            ]
          },
          {
            "path":  [
              8,
              10
            ],
            "span":  [
              37,
              0,
              34
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              38,
              0,
              33
            ]
          },
          {
            "path":  [
              8,
              36
            ],
            "span":  [
              38,
              0,
              33
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              39,
              0,
              59
            ]
          },
          {
            "path":  [
              8,
              37
            ],
            "span":  [
              39,
              0,
              59
            ]
          },
          {
            "path":  [
              4,
              0
            ],
            "span":  [
              127,
              0,
              161,
              1
            ],
            "leadingComments":  " `Any` contains an arbitrary serialized protocol buffer message along with a\n URL that describes the type of the serialized message.\n\n Protobuf library provides support to pack/unpack Any values in the form\n of utility functions or additional generated methods of the Any type.\n\n Example 1: Pack and unpack a message in C++.\n\n     Foo foo = ...;\n     Any any;\n     any.PackFrom(foo);\n     ...\n     if (any.UnpackTo(&foo)) {\n       ...\n     }\n\n Example 2: Pack and unpack a message in Java.\n\n     Foo foo = ...;\n     Any any = Any.pack(foo);\n     ...\n     if (any.is(Foo.class)) {\n       foo = any.unpack(Foo.class);\n     }\n     // or ...\n     if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n       foo = any.unpack(Foo.getDefaultInstance());\n     }\n\n  Example 3: Pack and unpack a message in Python.\n\n     foo = Foo(...)\n     any = Any()\n     any.Pack(foo)\n     ...\n     if any.Is(Foo.DESCRIPTOR):\n       any.Unpack(foo)\n       ...\n\n  Example 4: Pack and unpack a message in Go\n\n      foo := &pb.Foo{...}\n      any, err := anypb.New(foo)\n      if err != nil {\n        ...\n      }\n      ...\n      foo := &pb.Foo{}\n      if err := any.UnmarshalTo(foo); err != nil {\n        ...\n      }\n\n The pack methods provided by protobuf library will by default use\n 'type.googleapis.com/full.type.name' as the type URL and the unpack\n methods only use the fully qualified type name after the last '/'\n in the type URL, for example \"foo.bar.com/x/y.z\" will yield type\n name \"y.z\".\n\n JSON\n ====\n The JSON representation of an `Any` value uses the regular\n representation of the deserialized, embedded message, with an\n additional field `@type` which contains the type URL. Example:\n\n     package google.profile;\n     message Person {\n       string first_name = 1;\n       string last_name = 2;\n     }\n\n     {\n       \"@type\": \"type.googleapis.com/google.profile.Person\",\n       \"firstName\": <string>,\n       \"lastName\": <string>\n     }\n\n If the embedded message type is well-known and has a custom JSON\n representation, that representation will be embedded adding a field\n `value` which holds the custom JSON in addition to the `@type`\n field. Example (for message [google.protobuf.Duration][]):\n\n     {\n       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n       \"value\": \"1.212s\"\n     }\n\n"
          },
          {
            "path":  [
              4,
              0,
              1
            ],
            "span":  [
              127,
              8,
              11
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0
            ],
            "span":  [
              157,
              2,
              22
            ],
            "leadingComments":  " A URL/resource name that uniquely identifies the type of the serialized\n protocol buffer message. This string must contain at least\n one \"/\" character. The last segment of the URL's path must represent\n the fully qualified name of the type (as in\n `path/google.protobuf.Duration`). The name should be in a canonical form\n (e.g., leading \".\" is not accepted).\n\n In practice, teams usually precompile into the binary all types that they\n expect it to use in the context of Any. However, for URLs which use the\n scheme `http`, `https`, or no scheme, one can optionally set up a type\n server that maps type URLs to message definitions as follows:\n\n * If no scheme is provided, `https` is assumed.\n * An HTTP GET on the URL must yield a [google.protobuf.Type][]\n   value in binary format, or produce an error.\n * Applications are allowed to cache lookup results based on the\n   URL, or have them precompiled into a binary to avoid any\n   lookup. Therefore, binary compatibility needs to be preserved\n   on changes to types. (Use versioned type names to manage\n   breaking changes.)\n\n Note: this functionality is not currently available in the official\n protobuf release, and it is not used for type URLs beginning with\n type.googleapis.com. As of May 2023, there are no widely used type server\n implementations and no plans to implement one.\n\n Schemes other than `http`, `https` (or the empty scheme) might be\n used with implementation specific semantics.\n\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              5
            ],
            "span":  [
              157,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              1
            ],
            "span":  [
              157,
              9,
              17
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              3
            ],
            "span":  [
              157,
              20,
              21
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1
            ],
            "span":  [
              160,
              2,
              18
            ],
            "leadingComments":  " Must be a valid serialized protocol buffer of the above specified type.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              5
            ],
            "span":  [
              160,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              1
            ],
            "span":  [
              160,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              3
            ],
            "span":  [
              160,
              16,
              17
            ]
          }
        ]
      },
      "syntax":  "proto3"
    },
    {
      "name":  "google/protobuf/duration.proto",
      "package":  "google.protobuf",
      "messageType":  [
        {
          "name":  "Duration",
          "field":  [
            {
              "name":  "seconds",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT64",
              "jsonName":  "seconds"
            },
            {
              "name":  "nanos",
              "number":  2,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT32",
              "jsonName":  "nanos"
            }
          ]
        }
      ],
      "options":  {
        "javaPackage":  "com.google.protobuf",
        "javaOuterClassname":  "DurationProto",
        "javaMultipleFiles":  true,
        "goPackage":  "google.golang.org/protobuf/types/known/durationpb",
        "ccEnableArenas":  true,
        "objcClassPrefix":  "GPB",
        "csharpNamespace":  "Google.Protobuf.WellKnownTypes"
      },
      "sourceCodeInfo":  {
        "location":  [
          {
            "span":  [
              30,
              0,
              114,
              1
            ]
          },
          {
            "path":  [
              12
            ],
            "span":  [
              30,
              0,
              18
            ],
            "leadingDetachedComments":  [
              " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
            ]
          },
          {
            "path":  [
              2
            ],
            "span":  [
              32,
              0,
              24
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              34,
              0,
              31
            ]
          },
          {
            "path":  [
              8,
              31
            ],
            "span":  [
              34,
              0,
              31
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              35,
              0,
              72
            ]
          },
          {
            "path":  [
              8,
              11
            ],
            "span":  [
              35,
              0,
              72
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              36,
              0,
              44
            ]
          },
          {
            "path":  [
              8,
              1
            ],
            "span":  [
              36,
              0,
              44
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              37,
              0,
              46
            ]
          },
          {
            "path":  [
              8,
              8
            ],
            "span":  [
              37,
              0,
              46
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              38,
              0,
              34
            ]
          },
          {
            "path":  [
              8,
              10
            ],
            "span":  [
              38,
              0,
              34
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              39,
              0,
              33
            ]
          },
          {
            "path":  [
              8,
              36
            ],
            "span":  [
              39,
              0,
              33
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              40,
              0,
              59
            ]
          },
          {
            "path":  [
              8,
              37
            ],
            "span":  [
              40,
              0,
              59
            ]
          },
          {
            "path":  [
              4,
              0
            ],
            "span":  [
              101,
              0,
              114,
              1
            ],
            "leadingComments":  " A Duration represents a signed, fixed-length span of time represented\n as a count of seconds and fractions of seconds at nanosecond\n resolution. It is independent of any calendar and concepts like \"day\"\n or \"month\". It is related to Timestamp in that the difference between\n two Timestamp values is a Duration and it can be added or subtracted\n from a Timestamp. Range is approximately +-10,000 years.\n\n # Examples\n\n Example 1: Compute Duration from two Timestamps in pseudo code.\n\n     Timestamp start = ...;\n     Timestamp end = ...;\n     Duration duration = ...;\n\n     duration.seconds = end.seconds - start.seconds;\n     duration.nanos = end.nanos - start.nanos;\n\n     if (duration.seconds < 0 && duration.nanos > 0) {\n       duration.seconds += 1;\n       duration.nanos -= 1000000000;\n     } else if (duration.seconds > 0 && duration.nanos < 0) {\n       duration.seconds -= 1;\n       duration.nanos += 1000000000;\n     }\n\n Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.\n\n     Timestamp start = ...;\n     Duration duration = ...;\n     Timestamp end = ...;\n\n     end.seconds = start.seconds + duration.seconds;\n     end.nanos = start.nanos + duration.nanos;\n\n     if (end.nanos < 0) {\n       end.seconds -= 1;\n       end.nanos += 1000000000;\n     } else if (end.nanos >= 1000000000) {\n       end.seconds += 1;\n       end.nanos -= 1000000000;\n     }\n\n Example 3: Compute Duration from datetime.timedelta in Python.\n\n     td = datetime.timedelta(days=3, minutes=10)\n     duration = Duration()\n     duration.FromTimedelta(td)\n\n # JSON Mapping\n\n In JSON format, the Duration type is encoded as a string rather than an\n object, where the string ends in the suffix \"s\" (indicating seconds) and\n is preceded by the number of seconds, with nanoseconds expressed as\n fractional seconds. For example, 3 seconds with 0 nanoseconds should be\n encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should\n be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1\n microsecond should be expressed in JSON format as \"3.000001s\".\n\n"
          },
          {
            "path":  [
              4,
              0,
              1
            ],
            "span":  [
              101,
              8,
              16
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0
            ],
            "span":  [
              105,
              2,
              20
            ],
            "leadingComments":  " Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              5
            ],
            "span":  [
              105,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              1
            ],
            "span":  [
              105,
              8,
              15
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              3
            ],
            "span":  [
              105,
              18,
              19
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1
            ],
            "span":  [
              113,
              2,
              18
            ],
            "leadingComments":  " Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              5
            ],
            "span":  [
              113,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              1
            ],
            "span":  [
              113,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              3
            ],
            "span":  [
              113,
              16,
              17
            ]
          }
        ]
      },
      "syntax":  "proto3"
    },
    {
      "name":  "google/protobuf/field_mask.proto",
      "package":  "google.protobuf",
      "messageType":  [
        {
          "name":  "FieldMask",
          "field":  [
            {
              "name":  "paths",
              "number":  1,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_STRING",
              "jsonName":  "paths"
            }
          ]
        }
      ],
      "options":  {
        "javaPackage":  "com.google.protobuf",
        "javaOuterClassname":  "FieldMaskProto",
        "javaMultipleFiles":  true,
        "goPackage":  "google.golang.org/protobuf/types/known/fieldmaskpb",
        "ccEnableArenas":  true,
        "objcClassPrefix":  "GPB",
        "csharpNamespace":  "Google.Protobuf.WellKnownTypes"
      },
      "sourceCodeInfo":  {
        "location":  [
          {
            "span":  [
              30,
              0,
              244,
              1
            ]
          },
          {
            "path":  [
              12
            ],
            "span":  [
              30,
              0,
              18
            ],
            "leadingDetachedComments":  [
              " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
            ]
          },
          {
            "path":  [
              2
            ],
            "span":  [
              32,
              0,
              24
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              34,
              0,
              44
            ]
          },
          {
            "path":  [
              8,
              1
            ],
            "span":  [
              34,
              0,
              44
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              35,
              0,
              47
            ]
          },
          {
            "path":  [
              8,
              8
            ],
            "span":  [
              35,
              0,
              47
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              36,
              0,
              34
            ]
          },
          {
            "path":  [
              8,
              10
            ],
            "span":  [
              36,
              0,
              34
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              37,
              0,
              33
            ]
          },
          {
            "path":  [
              8,
              36
            ],
            "span":  [
              37,
              0,
              33
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              38,
              0,
              59
            ]
          },
          {
            "path":  [
              8,
              37
            ],
            "span":  [
              38,
              0,
              59
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              39,
              0,
              73
            ]
          },
          {
            "path":  [
              8,
              11
            ],
            "span":  [
              39,
              0,
              73
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              40,
              0,
              31
            ]
          },
          {
            "path":  [
              8,
              31
            ],
            "span":  [
              40,
              0,
              31
            ]
          },
          {
            "path":  [
              4,
              0
            ],
            "span":  [
              241,
              0,
              244,
              1
            ],
            "leadingComments":  " `FieldMask` represents a set of symbolic field paths, for example:\n\n     paths: \"f.a\"\n     paths: \"f.b.d\"\n\n Here `f` represents a field in some root message, `a` and `b`\n fields in the message found in `f`, and `d` a field found in the\n message in `f.b`.\n\n Field masks are used to specify a subset of fields that should be\n returned by a get operation or modified by an update operation.\n Field masks also have a custom JSON encoding (see below).\n\n # Field Masks in Projections\n\n When used in the context of a projection, a response message or\n sub-message is filtered by the API to only contain those fields as\n specified in the mask. For example, if the mask in the previous\n example is applied to a response message as follows:\n\n     f {\n       a : 22\n       b {\n         d : 1\n         x : 2\n       }\n       y : 13\n     }\n     z: 8\n\n The result will not contain specific values for fields x,y and z\n (their value will be set to the default, and omitted in proto text\n output):\n\n\n     f {\n       a : 22\n       b {\n         d : 1\n       }\n     }\n\n A repeated field is not allowed except at the last position of a\n paths string.\n\n If a FieldMask object is not present in a get operation, the\n operation applies to all fields (as if a FieldMask of all fields\n had been specified).\n\n Note that a field mask does not necessarily apply to the\n top-level response message. In case of a REST get operation, the\n field mask applies directly to the response, but in case of a REST\n list operation, the mask instead applies to each individual message\n in the returned resource list. In case of a REST custom method,\n other definitions may be used. Where the mask applies will be\n clearly documented together with its declaration in the API.  In\n any case, the effect on the returned resource/resources is required\n behavior for APIs.\n\n # Field Masks in Update Operations\n\n A field mask in update operations specifies which fields of the\n targeted resource are going to be updated. The API is required\n to only change the values of the fields as specified in the mask\n and leave the others untouched. If a resource is passed in to\n describe the updated values, the API ignores the values of all\n fields not covered by the mask.\n\n If a repeated field is specified for an update operation, new values will\n be appended to the existing repeated field in the target resource. Note that\n a repeated field is only allowed in the last position of a `paths` string.\n\n If a sub-message is specified in the last position of the field mask for an\n update operation, then new value will be merged into the existing sub-message\n in the target resource.\n\n For example, given the target message:\n\n     f {\n       b {\n         d: 1\n         x: 2\n       }\n       c: [1]\n     }\n\n And an update message:\n\n     f {\n       b {\n         d: 10\n       }\n       c: [2]\n     }\n\n then if the field mask is:\n\n  paths: [\"f.b\", \"f.c\"]\n\n then the result will be:\n\n     f {\n       b {\n         d: 10\n         x: 2\n       }\n       c: [1, 2]\n     }\n\n An implementation may provide options to override this default behavior for\n repeated and message fields.\n\n In order to reset a field's value to the default, the field must\n be in the mask and set to the default value in the provided resource.\n Hence, in order to reset all fields of a resource, provide a default\n instance of the resource and set all fields in the mask, or do\n not provide a mask as described below.\n\n If a field mask is not present on update, the operation applies to\n all fields (as if a field mask of all fields has been specified).\n Note that in the presence of schema evolution, this may mean that\n fields the client does not know and has therefore not filled into\n the request will be reset to their default. If this is unwanted\n behavior, a specific service may require a client to always specify\n a field mask, producing an error if not.\n\n As with get operations, the location of the resource which\n describes the updated values in the request message depends on the\n operation kind. In any case, the effect of the field mask is\n required to be honored by the API.\n\n ## Considerations for HTTP REST\n\n The HTTP kind of an update operation which uses a field mask must\n be set to PATCH instead of PUT in order to satisfy HTTP semantics\n (PUT must only be used for full updates).\n\n # JSON Encoding of Field Masks\n\n In JSON, a field mask is encoded as a single string where paths are\n separated by a comma. Fields name in each path are converted\n to/from lower-camel naming conventions.\n\n As an example, consider the following message declarations:\n\n     message Profile {\n       User user = 1;\n       Photo photo = 2;\n     }\n     message User {\n       string display_name = 1;\n       string address = 2;\n     }\n\n In proto a field mask for `Profile` may look as such:\n\n     mask {\n       paths: \"user.display_name\"\n       paths: \"photo\"\n     }\n\n In JSON, the same mask is represented as below:\n\n     {\n       mask: \"user.displayName,photo\"\n     }\n\n # Field Masks and Oneof Fields\n\n Field masks treat fields in oneofs just as regular fields. Consider the\n following message:\n\n     message SampleMessage {\n       oneof test_oneof {\n         string name = 4;\n         SubMessage sub_message = 9;\n       }\n     }\n\n The field mask can be:\n\n     mask {\n       paths: \"name\"\n     }\n\n Or:\n\n     mask {\n       paths: \"sub_message\"\n     }\n\n Note that oneof type names (\"test_oneof\" in this case) cannot be used in\n paths.\n\n ## Field Mask Verification\n\n The implementation of any API method which has a FieldMask type field in the\n request should verify the included field paths, and return an\n `INVALID_ARGUMENT` error if any path is unmappable.\n"
          },
          {
            "path":  [
              4,
              0,
              1
            ],
            "span":  [
              241,
              8,
              17
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0
            ],
            "span":  [
              243,
              2,
              28
            ],
            "leadingComments":  " The set of field mask paths.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              4
            ],
            "span":  [
              243,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              5
            ],
            "span":  [
              243,
              11,
              17
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              1
            ],
            "span":  [
              243,
              18,
              23
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              3
            ],
            "span":  [
              243,
              26,
              27
            ]
          }
        ]
      },
      "syntax":  "proto3"
    },
    {
      "name":  "google/protobuf/struct.proto",
      "package":  "google.protobuf",
      "messageType":  [
        {
          "name":  "Struct",
          "field":  [
            {
              "name":  "fields",
              "number":  1,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Struct.FieldsEntry",
              "jsonName":  "fields"
            }
          ],
          "nestedType":  [
            {
              "name":  "FieldsEntry",
              "field":  [
                {
                  "name":  "key",
                  "number":  1,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_STRING",
                  "jsonName":  "key"
                },
                {
                  "name":  "value",
                  "number":  2,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_MESSAGE",
                  "typeName":  ".google.protobuf.Value",
                  "jsonName":  "value"
                }
              ],
              "options":  {
                "mapEntry":  true
              }
            }
          ]
        },
        {
          "name":  "Value",
          "field":  [
            {
              "name":  "null_value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_ENUM",
              "typeName":  ".google.protobuf.NullValue",
              "oneofIndex":  0,
              "jsonName":  "nullValue"
            },
            {
              "name":  "number_value",
              "number":  2,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_DOUBLE",
              "oneofIndex":  0,
              "jsonName":  "numberValue"
            },
            {
              "name":  "string_value",
              "number":  3,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_STRING",
              "oneofIndex":  0,
              "jsonName":  "stringValue"
            },
            {
              "name":  "bool_value",
              "number":  4,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_BOOL",
              "oneofIndex":  0,
              "jsonName":  "boolValue"
            },
            {
              "name":  "struct_value",
              "number":  5,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Struct",
              "oneofIndex":  0,
              "jsonName":  "structValue"
            },
            {
              "name":  "list_value",
              "number":  6,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.ListValue",
              "oneofIndex":  0,
              "jsonName":  "listValue"
            }
          ],
          "oneofDecl":  [
            {
              "name":  "kind"
            }
          ]
        },
        {
          "name":  "ListValue",
          "field":  [
            {
              "name":  "values",
              "number":  1,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Value",
              "jsonName":  "values"
            }
          ]
        }
      ],
      "enumType":  [
        {
          "name":  "NullValue",
          "value":  [
            {
              "name":  "NULL_VALUE",
              "number":  0
            }
          ]
        }
      ],
      "options":  {
        "javaPackage":  "com.google.protobuf",
        "javaOuterClassname":  "StructProto",
        "javaMultipleFiles":  true,
        "goPackage":  "google.golang.org/protobuf/types/known/structpb",
        "ccEnableArenas":  true,
        "objcClassPrefix":  "GPB",
        "csharpNamespace":  "Google.Protobuf.WellKnownTypes"
      },
      "sourceCodeInfo":  {
        "location":  [
          {
            "span":  [
              30,
              0,
              94,
              1
            ]
          },
          {
            "path":  [
              12
            ],
            "span":  [
              30,
              0,
              18
            ],
            "leadingDetachedComments":  [
              " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
            ]
          },
          {
            "path":  [
              2
            ],
            "span":  [
              32,
              0,
              24
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              34,
              0,
              31
            ]
          },
          {
            "path":  [
              8,
              31
            ],
            "span":  [
              34,
              0,
              31
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              35,
              0,
              70
            ]
          },
          {
            "path":  [
              8,
              11
            ],
            "span":  [
              35,
              0,
              70
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              36,
              0,
              44
            ]
          },
          {
            "path":  [
              8,
              1
            ],
            "span":  [
              36,
              0,
              44
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              37,
              0,
              44
            ]
          },
          {
            "path":  [
              8,
              8
            ],
            "span":  [
              37,
              0,
              44
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              38,
              0,
              34
            ]
          },
          {
            "path":  [
              8,
              10
            ],
            "span":  [
              38,
              0,
              34
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              39,
              0,
              33
            ]
          },
          {
            "path":  [
              8,
              36
            ],
            "span":  [
              39,
              0,
              33
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              40,
              0,
              59
            ]
          },
          {
            "path":  [
              8,
              37
            ],
            "span":  [
              40,
              0,
              59
            ]
          },
          {
            "path":  [
              4,
              0
            ],
            "span":  [
              50,
              0,
              53,
              1
            ],
            "leadingComments":  " `Struct` represents a structured data value, consisting of fields\n which map to dynamically typed values. In some languages, `Struct`\n might be supported by a native representation. For example, in\n scripting languages like JS a struct is represented as an\n object. The details of that representation are described together\n with the proto support for the language.\n\n The JSON representation for `Struct` is JSON object.\n"
          },
          {
            "path":  [
              4,
              0,
              1
            ],
            "span":  [
              50,
              8,
              14
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0
            ],
            "span":  [
              52,
              2,
              32
            ],
            "leadingComments":  " Unordered map of dynamically typed values.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              6
            ],
            "span":  [
              52,
              2,
              20
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              1
            ],
            "span":  [
              52,
              21,
              27
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              3
            ],
            "span":  [
              52,
              30,
              31
            ]
          },
          {
            "path":  [
              4,
              1
            ],
            "span":  [
              61,
              0,
              77,
              1
            ],
            "leadingComments":  " `Value` represents a dynamically typed value which can be either\n null, a number, a string, a boolean, a recursive struct value, or a\n list of values. A producer of value is expected to set one of these\n variants. Absence of any variant indicates an error.\n\n The JSON representation for `Value` is JSON value.\n"
          },
          {
            "path":  [
              4,
              1,
              1
            ],
            "span":  [
              61,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              1,
              8,
              0
            ],
            "span":  [
              63,
              2,
              76,
              3
            ],
            "leadingComments":  " The kind of value.\n"
          },
          {
            "path":  [
              4,
              1,
              8,
              0,
              1
            ],
            "span":  [
              63,
              8,
              12
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0
            ],
            "span":  [
              65,
              4,
              29
            ],
            "leadingComments":  " Represents a null value.\n"
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              6
            ],
            "span":  [
              65,
              4,
              13
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              1
            ],
            "span":  [
              65,
              14,
              24
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              3
            ],
            "span":  [
              65,
              27,
              28
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              1
            ],
            "span":  [
              67,
              4,
              28
            ],
            "leadingComments":  " Represents a double value.\n"
          },
          {
            "path":  [
              4,
              1,
              2,
              1,
              5
            ],
            "span":  [
              67,
              4,
              10
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              1,
              1
            ],
            "span":  [
              67,
              11,
              23
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              1,
              3
            ],
            "span":  [
              67,
              26,
              27
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              2
            ],
            "span":  [
              69,
              4,
              28
            ],
            "leadingComments":  " Represents a string value.\n"
          },
          {
            "path":  [
              4,
              1,
              2,
              2,
              5
            ],
            "span":  [
              69,
              4,
              10
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              2,
              1
            ],
            "span":  [
              69,
              11,
              23
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              2,
              3
            ],
            "span":  [
              69,
              26,
              27
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              3
            ],
            "span":  [
              71,
              4,
              24
            ],
            "leadingComments":  " Represents a boolean value.\n"
          },
          {
            "path":  [
              4,
              1,
              2,
              3,
              5
            ],
            "span":  [
              71,
              4,
              8
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              3,
              1
            ],
            "span":  [
              71,
              9,
              19
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              3,
              3
            ],
            "span":  [
              71,
              22,
              23
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              4
            ],
            "span":  [
              73,
              4,
              28
            ],
            "leadingComments":  " Represents a structured value.\n"
          },
          {
            "path":  [
              4,
              1,
              2,
              4,
              6
            ],
            "span":  [
              73,
              4,
              10
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              4,
              1
            ],
            "span":  [
              73,
              11,
              23
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              4,
              3
            ],
            "span":  [
              73,
              26,
              27
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              5
            ],
            "span":  [
              75,
              4,
              29
            ],
            "leadingComments":  " Represents a repeated `Value`.\n"
          },
          {
            "path":  [
              4,
              1,
              2,
              5,
              6
            ],
            "span":  [
              75,
              4,
              13
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              5,
              1
            ],
            "span":  [
              75,
              14,
              24
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              5,
              3
            ],
            "span":  [
              75,
              27,
              28
            ]
          },
          {
            "path":  [
              5,
              0
            ],
            "span":  [
              83,
              0,
              86,
              1
            ],
            "leadingComments":  " `NullValue` is a singleton enumeration to represent the null value for the\n `Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n"
          },
          {
            "path":  [
              5,
              0,
              1
            ],
            "span":  [
              83,
              5,
              14
            ]
          },
          {
            "path":  [
              5,
              0,
              2,
              0
            ],
            "span":  [
              85,
              2,
              17
            ],
            "leadingComments":  " Null value.\n"
          },
          {
            "path":  [
              5,
              0,
              2,
              0,
              1
            ],
            "span":  [
              85,
              2,
              12
            ]
          },
          {
            "path":  [
              5,
              0,
              2,
              0,
              2
            ],
            "span":  [
              85,
              15,
              16
            ]
          },
          {
            "path":  [
              4,
              2
            ],
            "span":  [
              91,
              0,
              94,
              1
            ],
            "leadingComments":  " `ListValue` is a wrapper around a repeated field of values.\n\n The JSON representation for `ListValue` is JSON array.\n"
          },
          {
            "path":  [
              4,
              2,
              1
            ],
            "span":  [
              91,
              8,
              17
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0
            ],
            "span":  [
              93,
              2,
              28
            ],
            "leadingComments":  " Repeated field of dynamically typed values.\n"
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              4
            ],
            "span":  [
              93,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              6
            ],
            "span":  [
              93,
              11,
              16
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              1
            ],
            "span":  [
              93,
              17,
              23
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              3
            ],
            "span":  [
              93,
              26,
              27
            ]
          }
        ]
      },
      "syntax":  "proto3"
    },
    {
      "name":  "google/protobuf/timestamp.proto",
      "package":  "google.protobuf",
      "messageType":  [
        {
          "name":  "Timestamp",
          "field":  [
            {
              "name":  "seconds",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT64",
              "jsonName":  "seconds"
            },
            {
              "name":  "nanos",
              "number":  2,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT32",
              "jsonName":  "nanos"
            }
          ]
        }
      ],
      "options":  {
        "javaPackage":  "com.google.protobuf",
        "javaOuterClassname":  "TimestampProto",
        "javaMultipleFiles":  true,
        "goPackage":  "google.golang.org/protobuf/types/known/timestamppb",
        "ccEnableArenas":  true,
        "objcClassPrefix":  "GPB",
        "csharpNamespace":  "Google.Protobuf.WellKnownTypes"
      },
      "sourceCodeInfo":  {
        "location":  [
          {
            "span":  [
              30,
              0,
              143,
              1
            ]
          },
          {
            "path":  [
              12
            ],
            "span":  [
              30,
              0,
              18
            ],
            "leadingDetachedComments":  [
              " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
            ]
          },
          {
            "path":  [
              2
            ],
            "span":  [
              32,
              0,
              24
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              34,
              0,
              31
            ]
          },
          {
            "path":  [
              8,
              31
            ],
            "span":  [
              34,
              0,
              31
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              35,
              0,
              73
            ]
          },
          {
            "path":  [
              8,
              11
            ],
            "span":  [
              35,
              0,
              73
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              36,
              0,
              44
            ]
          },
          {
            "path":  [
              8,
              1
            ],
            "span":  [
              36,
              0,
              44
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              37,
              0,
              47
            ]
          },
          {
            "path":  [
              8,
              8
            ],
            "span":  [
              37,
              0,
              47
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              38,
              0,
              34
            ]
          },
          {
            "path":  [
              8,
              10
            ],
            "span":  [
              38,
              0,
              34
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              39,
              0,
              33
            ]
          },
          {
            "path":  [
              8,
              36
            ],
            "span":  [
              39,
              0,
              33
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              40,
              0,
              59
            ]
          },
          {
            "path":  [
              8,
              37
            ],
            "span":  [
              40,
              0,
              59
            ]
          },
          {
            "path":  [
              4,
              0
            ],
            "span":  [
              132,
              0,
              143,
              1
            ],
            "leadingComments":  " A Timestamp represents a point in time independent of any time zone or local\n calendar, encoded as a count of seconds and fractions of seconds at\n nanosecond resolution. The count is relative to an epoch at UTC midnight on\n January 1, 1970, in the proleptic Gregorian calendar which extends the\n Gregorian calendar backwards to year one.\n\n All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n second table is needed for interpretation, using a [24-hour linear\n smear](https://developers.google.com/time/smear).\n\n The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n restricting to that range, we ensure that we can convert to and from [RFC\n 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n\n # Examples\n\n Example 1: Compute Timestamp from POSIX `time()`.\n\n     Timestamp timestamp;\n     timestamp.set_seconds(time(NULL));\n     timestamp.set_nanos(0);\n\n Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n\n     struct timeval tv;\n     gettimeofday(&tv, NULL);\n\n     Timestamp timestamp;\n     timestamp.set_seconds(tv.tv_sec);\n     timestamp.set_nanos(tv.tv_usec * 1000);\n\n Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\n     FILETIME ft;\n     GetSystemTimeAsFileTime(&ft);\n     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n\n     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n     Timestamp timestamp;\n     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\n Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\n     long millis = System.currentTimeMillis();\n\n     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n         .setNanos((int) ((millis % 1000) * 1000000)).build();\n\n Example 5: Compute Timestamp from Java `Instant.now()`.\n\n     Instant now = Instant.now();\n\n     Timestamp timestamp =\n         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n             .setNanos(now.getNano()).build();\n\n Example 6: Compute Timestamp from current time in Python.\n\n     timestamp = Timestamp()\n     timestamp.GetCurrentTime()\n\n # JSON Mapping\n\n In JSON format, the Timestamp type is encoded as a string in the\n [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n where {year} is always expressed using four digits while {month}, {day},\n {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n is required. A proto3 JSON serializer should always use UTC (as indicated by\n \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n able to accept both UTC and other timezones (as indicated by an offset).\n\n For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n 01:30 UTC on January 15, 2017.\n\n In JavaScript, one can convert a Date object to this format using the\n standard\n [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n method. In Python, a standard `datetime.datetime` object can be converted\n to this format using\n [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n the Joda Time's [`ISODateTimeFormat.dateTime()`](\n http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()\n ) to obtain a formatter capable of generating timestamps in this format.\n\n"
          },
          {
            "path":  [
              4,
              0,
              1
            ],
            "span":  [
              132,
              8,
              17
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0
            ],
            "span":  [
              136,
              2,
              20
            ],
            "leadingComments":  " Represents seconds of UTC time since Unix epoch\n 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n 9999-12-31T23:59:59Z inclusive.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              5
            ],
            "span":  [
              136,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              1
            ],
            "span":  [
              136,
              8,
              15
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              3
            ],
            "span":  [
              136,
              18,
              19
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1
            ],
            "span":  [
              142,
              2,
              18
            ],
            "leadingComments":  " Non-negative fractions of a second at nanosecond resolution. Negative\n second values with fractions must still have non-negative nanos values\n that count forward in time. Must be from 0 to 999,999,999\n inclusive.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              5
            ],
            "span":  [
              142,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              1
            ],
            "span":  [
              142,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              3
            ],
            "span":  [
              142,
              16,
              17
            ]
          }
        ]
      },
      "syntax":  "proto3"
    },
    {
      "name":  "google/protobuf/wrappers.proto",
      "package":  "google.protobuf",
      "messageType":  [
        {
          "name":  "DoubleValue",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_DOUBLE",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "FloatValue",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_FLOAT",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "Int64Value",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT64",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "UInt64Value",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_UINT64",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "Int32Value",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT32",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "UInt32Value",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_UINT32",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "BoolValue",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_BOOL",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "StringValue",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_STRING",
              "jsonName":  "value"
            }
          ]
        },
        {
          "name":  "BytesValue",
          "field":  [
            {
              "name":  "value",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_BYTES",
              "jsonName":  "value"
            }
          ]
        }
      ],
      "options":  {
        "javaPackage":  "com.google.protobuf",
        "javaOuterClassname":  "WrappersProto",
        "javaMultipleFiles":  true,
        "goPackage":  "google.golang.org/protobuf/types/known/wrapperspb",
        "ccEnableArenas":  true,
        "objcClassPrefix":  "GPB",
        "csharpNamespace":  "Google.Protobuf.WellKnownTypes"
      },
      "sourceCodeInfo":  {
        "location":  [
          {
            "span":  [
              47,
              0,
              156,
              1
            ]
          },
          {
            "path":  [
              12
            ],
            "span":  [
              47,
              0,
              18
            ],
            "leadingDetachedComments":  [
              " Protocol Buffers - Google's data interchange format\n Copyright 2008 Google Inc.  All rights reserved.\n https://developers.google.com/protocol-buffers/\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are\n met:\n\n     * Redistributions of source code must retain the above copyright\n notice, this list of conditions and the following disclaimer.\n     * Redistributions in binary form must reproduce the above\n copyright notice, this list of conditions and the following disclaimer\n in the documentation and/or other materials provided with the\n distribution.\n     * Neither the name of Google Inc. nor the names of its\n contributors may be used to endorse or promote products derived from\n this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n Wrappers for primitive (non-message) types. These types were needed\n for legacy reasons and are not recommended for use in new APIs.\n\n Historically these wrappers were useful to have presence on proto3 primitive\n fields, but proto3 syntax has been updated to support the `optional` keyword.\n Using that keyword is now the strongly preferred way to add presence to\n proto3 primitive fields.\n\n A secondary usecase was to embed primitives in the `google.protobuf.Any`\n type: it is now recommended that you embed your value in your own wrapper\n message which can be specifically documented.\n\n These wrappers have no meaningful use within repeated fields as they lack\n the ability to detect presence on individual elements.\n These wrappers have no meaningful use within a map or a oneof since\n individual entries of a map or fields of a oneof can already detect presence.\n"
            ]
          },
          {
            "path":  [
              2
            ],
            "span":  [
              49,
              0,
              24
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              51,
              0,
              31
            ]
          },
          {
            "path":  [
              8,
              31
            ],
            "span":  [
              51,
              0,
              31
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              52,
              0,
              72
            ]
          },
          {
            "path":  [
              8,
              11
            ],
            "span":  [
              52,
              0,
              72
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              53,
              0,
              44
            ]
          },
          {
            "path":  [
              8,
              1
            ],
            "span":  [
              53,
              0,
              44
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              54,
              0,
              46
            ]
          },
          {
            "path":  [
              8,
              8
            ],
            "span":  [
              54,
              0,
              46
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              55,
              0,
              34
            ]
          },
          {
            "path":  [
              8,
              10
            ],
            "span":  [
              55,
              0,
              34
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              56,
              0,
              33
            ]
          },
          {
            "path":  [
              8,
              36
            ],
            "span":  [
              56,
              0,
              33
            ]
          },
          {
            "path":  [
              8
            ],
            "span":  [
              57,
              0,
              59
            ]
          },
          {
            "path":  [
              8,
              37
            ],
            "span":  [
              57,
              0,
              59
            ]
          },
          {
            "path":  [
              4,
              0
            ],
            "span":  [
              65,
              0,
              68,
              1
            ],
            "leadingComments":  " Wrapper message for `double`.\n\n The JSON representation for `DoubleValue` is JSON number.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              0,
              1
            ],
            "span":  [
              65,
              8,
              19
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0
            ],
            "span":  [
              67,
              2,
              19
            ],
            "leadingComments":  " The double value.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              5
            ],
            "span":  [
              67,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              1
            ],
            "span":  [
              67,
              9,
              14
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              3
            ],
            "span":  [
              67,
              17,
              18
            ]
          },
          {
            "path":  [
              4,
              1
            ],
            "span":  [
              76,
              0,
              79,
              1
            ],
            "leadingComments":  " Wrapper message for `float`.\n\n The JSON representation for `FloatValue` is JSON number.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              1,
              1
            ],
            "span":  [
              76,
              8,
              18
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0
            ],
            "span":  [
              78,
              2,
              18
            ],
            "leadingComments":  " The float value.\n"
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              5
            ],
            "span":  [
              78,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              1
            ],
            "span":  [
              78,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              3
            ],
            "span":  [
              78,
              16,
              17
            ]
          },
          {
            "path":  [
              4,
              2
            ],
            "span":  [
              87,
              0,
              90,
              1
            ],
            "leadingComments":  " Wrapper message for `int64`.\n\n The JSON representation for `Int64Value` is JSON string.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              2,
              1
            ],
            "span":  [
              87,
              8,
              18
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0
            ],
            "span":  [
              89,
              2,
              18
            ],
            "leadingComments":  " The int64 value.\n"
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              5
            ],
            "span":  [
              89,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              1
            ],
            "span":  [
              89,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              3
            ],
            "span":  [
              89,
              16,
              17
            ]
          },
          {
            "path":  [
              4,
              3
            ],
            "span":  [
              98,
              0,
              101,
              1
            ],
            "leadingComments":  " Wrapper message for `uint64`.\n\n The JSON representation for `UInt64Value` is JSON string.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              3,
              1
            ],
            "span":  [
              98,
              8,
              19
            ]
          },
          {
            "path":  [
              4,
              3,
              2,
              0
            ],
            "span":  [
              100,
              2,
              19
            ],
            "leadingComments":  " The uint64 value.\n"
          },
          {
            "path":  [
              4,
              3,
              2,
              0,
              5
            ],
            "span":  [
              100,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              3,
              2,
              0,
              1
            ],
            "span":  [
              100,
              9,
              14
            ]
          },
          {
            "path":  [
              4,
              3,
              2,
              0,
              3
            ],
            "span":  [
              100,
              17,
              18
            ]
          },
          {
            "path":  [
              4,
              4
            ],
            "span":  [
              109,
              0,
              112,
              1
            ],
            "leadingComments":  " Wrapper message for `int32`.\n\n The JSON representation for `Int32Value` is JSON number.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              4,
              1
            ],
            "span":  [
              109,
              8,
              18
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              0
            ],
            "span":  [
              111,
              2,
              18
            ],
            "leadingComments":  " The int32 value.\n"
          },
          {
            "path":  [
              4,
              4,
              2,
              0,
              5
            ],
            "span":  [
              111,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              0,
              1
            ],
            "span":  [
              111,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              0,
              3
            ],
            "span":  [
              111,
              16,
              17
            ]
          },
          {
            "path":  [
              4,
              5
            ],
            "span":  [
              120,
              0,
              123,
              1
            ],
            "leadingComments":  " Wrapper message for `uint32`.\n\n The JSON representation for `UInt32Value` is JSON number.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              5,
              1
            ],
            "span":  [
              120,
              8,
              19
            ]
          },
          {
            "path":  [
              4,
              5,
              2,
              0
            ],
            "span":  [
              122,
              2,
              19
            ],
            "leadingComments":  " The uint32 value.\n"
          },
          {
            "path":  [
              4,
              5,
              2,
              0,
              5
            ],
            "span":  [
              122,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              5,
              2,
              0,
              1
            ],
            "span":  [
              122,
              9,
              14
            ]
          },
          {
            "path":  [
              4,
              5,
              2,
              0,
              3
            ],
            "span":  [
              122,
              17,
              18
            ]
          },
          {
            "path":  [
              4,
              6
            ],
            "span":  [
              131,
              0,
              134,
              1
            ],
            "leadingComments":  " Wrapper message for `bool`.\n\n The JSON representation for `BoolValue` is JSON `true` and `false`.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              6,
              1
            ],
            "span":  [
              131,
              8,
              17
            ]
          },
          {
            "path":  [
              4,
              6,
              2,
              0
            ],
            "span":  [
              133,
              2,
              17
            ],
            "leadingComments":  " The bool value.\n"
          },
          {
            "path":  [
              4,
              6,
              2,
              0,
              5
            ],
            "span":  [
              133,
              2,
              6
            ]
          },
          {
            "path":  [
              4,
              6,
              2,
              0,
              1
            ],
            "span":  [
              133,
              7,
              12
            ]
          },
          {
            "path":  [
              4,
              6,
              2,
              0,
              3
            ],
            "span":  [
              133,
              15,
              16
            ]
          },
          {
            "path":  [
              4,
              7
            ],
            "span":  [
              142,
              0,
              145,
              1
            ],
            "leadingComments":  " Wrapper message for `string`.\n\n The JSON representation for `StringValue` is JSON string.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              7,
              1
            ],
            "span":  [
              142,
              8,
              19
            ]
          },
          {
            "path":  [
              4,
              7,
              2,
              0
            ],
            "span":  [
              144,
              2,
              19
            ],
            "leadingComments":  " The string value.\n"
          },
          {
            "path":  [
              4,
              7,
              2,
              0,
              5
            ],
            "span":  [
              144,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              7,
              2,
              0,
              1
            ],
            "span":  [
              144,
              9,
              14
            ]
          },
          {
            "path":  [
              4,
              7,
              2,
              0,
              3
            ],
            "span":  [
              144,
              17,
              18
            ]
          },
          {
            "path":  [
              4,
              8
            ],
            "span":  [
              153,
              0,
              156,
              1
            ],
            "leadingComments":  " Wrapper message for `bytes`.\n\n The JSON representation for `BytesValue` is JSON string.\n\n Not recommended for use in new APIs, but still useful for legacy APIs and\n has no plan to be removed.\n"
          },
          {
            "path":  [
              4,
              8,
              1
            ],
            "span":  [
              153,
              8,
              18
            ]
          },
          {
            "path":  [
              4,
              8,
              2,
              0
            ],
            "span":  [
              155,
              2,
              18
            ],
            "leadingComments":  " The bytes value.\n"
          },
          {
            "path":  [
              4,
              8,
              2,
              0,
              5
            ],
            "span":  [
              155,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              8,
              2,
              0,
              1
            ],
            "span":  [
              155,
              8,
              13
            ]
          },
          {
            "path":  [
              4,
              8,
              2,
              0,
              3
            ],
            "span":  [
              155,
              16,
              17
            ]
          }
        ]
      },
      "syntax":  "proto3"
    },
    {
      "name":  "testdata/types.proto",
      "package":  "rpcexplorer",
      "dependency":  [
        "google/protobuf/any.proto",
        "google/protobuf/duration.proto",
        "google/protobuf/field_mask.proto",
        "google/protobuf/struct.proto",
        "google/protobuf/timestamp.proto",
        "google/protobuf/wrappers.proto"
      ],
      "messageType":  [
        {
          "name":  "M",
          "field":  [
            {
              "name":  "i",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT32",
              "jsonName":  "i"
            },
            {
              "name":  "ri",
              "number":  2,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_INT32",
              "jsonName":  "ri"
            },
            {
              "name":  "s",
              "number":  3,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_STRING",
              "jsonName":  "s"
            },
            {
              "name":  "e",
              "number":  4,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_ENUM",
              "typeName":  ".rpcexplorer.E",
              "jsonName":  "e"
            },
            {
              "name":  "m",
              "number":  10,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.M2",
              "jsonName":  "m"
            },
            {
              "name":  "mr",
              "number":  11,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.M2",
              "jsonName":  "mr"
            }
          ]
        },
        {
          "name":  "M2",
          "field":  [
            {
              "name":  "i",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT32",
              "jsonName":  "i"
            },
            {
              "name":  "s",
              "number":  2,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_STRING",
              "jsonName":  "s"
            }
          ]
        },
        {
          "name":  "MapContainer",
          "field":  [
            {
              "name":  "im",
              "number":  1,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.MapContainer.ImEntry",
              "jsonName":  "im"
            },
            {
              "name":  "ii",
              "number":  2,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.MapContainer.IiEntry",
              "jsonName":  "ii"
            }
          ],
          "nestedType":  [
            {
              "name":  "ImEntry",
              "field":  [
                {
                  "name":  "key",
                  "number":  1,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_INT32",
                  "jsonName":  "key"
                },
                {
                  "name":  "value",
                  "number":  2,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_MESSAGE",
                  "typeName":  ".rpcexplorer.M",
                  "jsonName":  "value"
                }
              ],
              "options":  {
                "mapEntry":  true
              }
            },
            {
              "name":  "IiEntry",
              "field":  [
                {
                  "name":  "key",
                  "number":  1,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_INT32",
                  "jsonName":  "key"
                },
                {
                  "name":  "value",
                  "number":  2,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_INT32",
                  "jsonName":  "value"
                }
              ],
              "options":  {
                "mapEntry":  true
              }
            }
          ]
        },
        {
          "name":  "MultiWord",
          "field":  [
            {
              "name":  "foo_bar",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_STRING",
              "jsonName":  "fooBar"
            }
          ]
        },
        {
          "name":  "Autocomplete",
          "field":  [
            {
              "name":  "single_int",
              "number":  1,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_INT32",
              "jsonName":  "singleInt"
            },
            {
              "name":  "single_enum",
              "number":  2,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_ENUM",
              "typeName":  ".rpcexplorer.E",
              "jsonName":  "singleEnum"
            },
            {
              "name":  "single_msg",
              "number":  3,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.MultiWord",
              "jsonName":  "singleMsg"
            },
            {
              "name":  "repeated_int",
              "number":  4,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_INT32",
              "jsonName":  "repeatedInt"
            },
            {
              "name":  "repeated_enum",
              "number":  5,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_ENUM",
              "typeName":  ".rpcexplorer.E",
              "jsonName":  "repeatedEnum"
            },
            {
              "name":  "repeated_msg",
              "number":  6,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.MultiWord",
              "jsonName":  "repeatedMsg"
            },
            {
              "name":  "map_int",
              "number":  7,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.Autocomplete.MapIntEntry",
              "jsonName":  "mapInt"
            },
            {
              "name":  "map_enum",
              "number":  8,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.Autocomplete.MapEnumEntry",
              "jsonName":  "mapEnum"
            },
            {
              "name":  "map_msg",
              "number":  9,
              "label":  "LABEL_REPEATED",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".rpcexplorer.Autocomplete.MapMsgEntry",
              "jsonName":  "mapMsg"
            },
            {
              "name":  "any_msg",
              "number":  10,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Any",
              "jsonName":  "anyMsg"
            },
            {
              "name":  "dur_msg",
              "number":  11,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Duration",
              "jsonName":  "durMsg"
            },
            {
              "name":  "ts_msg",
              "number":  12,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Timestamp",
              "jsonName":  "tsMsg"
            },
            {
              "name":  "fm_msg",
              "number":  13,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.FieldMask",
              "jsonName":  "fmMsg"
            },
            {
              "name":  "struct_msg",
              "number":  14,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Struct",
              "jsonName":  "structMsg"
            },
            {
              "name":  "str_msg",
              "number":  15,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.StringValue",
              "jsonName":  "strMsg"
            },
            {
              "name":  "int_msg",
              "number":  16,
              "label":  "LABEL_OPTIONAL",
              "type":  "TYPE_MESSAGE",
              "typeName":  ".google.protobuf.Int64Value",
              "jsonName":  "intMsg"
            }
          ],
          "nestedType":  [
            {
              "name":  "MapIntEntry",
              "field":  [
                {
                  "name":  "key",
                  "number":  1,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_INT32",
                  "jsonName":  "key"
                },
                {
                  "name":  "value",
                  "number":  2,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_INT32",
                  "jsonName":  "value"
                }
              ],
              "options":  {
                "mapEntry":  true
              }
            },
            {
              "name":  "MapEnumEntry",
              "field":  [
                {
                  "name":  "key",
                  "number":  1,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_INT32",
                  "jsonName":  "key"
                },
                {
                  "name":  "value",
                  "number":  2,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_ENUM",
                  "typeName":  ".rpcexplorer.E",
                  "jsonName":  "value"
                }
              ],
              "options":  {
                "mapEntry":  true
              }
            },
            {
              "name":  "MapMsgEntry",
              "field":  [
                {
                  "name":  "key",
                  "number":  1,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_INT32",
                  "jsonName":  "key"
                },
                {
                  "name":  "value",
                  "number":  2,
                  "label":  "LABEL_OPTIONAL",
                  "type":  "TYPE_MESSAGE",
                  "typeName":  ".rpcexplorer.MultiWord",
                  "jsonName":  "value"
                }
              ],
              "options":  {
                "mapEntry":  true
              }
            }
          ]
        }
      ],
      "enumType":  [
        {
          "name":  "E",
          "value":  [
            {
              "name":  "V0",
              "number":  0
            },
            {
              "name":  "V1",
              "number":  1
            }
          ]
        }
      ],
      "service":  [
        {
          "name":  "S1",
          "method":  [
            {
              "name":  "Method",
              "inputType":  ".rpcexplorer.M",
              "outputType":  ".rpcexplorer.M2"
            }
          ]
        },
        {
          "name":  "S2"
        }
      ],
      "sourceCodeInfo":  {
        "location":  [
          {
            "span":  [
              4,
              0,
              76,
              1
            ]
          },
          {
            "path":  [
              12
            ],
            "span":  [
              4,
              0,
              18
            ],
            "leadingDetachedComments":  [
              " Copyright 2023 The LUCI Authors. All rights reserved.\n Use of this source code is governed under the Apache License, Version 2.0\n that can be found in the LICENSE file.\n"
            ]
          },
          {
            "path":  [
              2
            ],
            "span":  [
              6,
              0,
              20
            ]
          },
          {
            "path":  [
              3,
              0
            ],
            "span":  [
              8,
              0,
              35
            ]
          },
          {
            "path":  [
              3,
              1
            ],
            "span":  [
              9,
              0,
              40
            ]
          },
          {
            "path":  [
              3,
              2
            ],
            "span":  [
              10,
              0,
              42
            ]
          },
          {
            "path":  [
              3,
              3
            ],
            "span":  [
              11,
              0,
              38
            ]
          },
          {
            "path":  [
              3,
              4
            ],
            "span":  [
              12,
              0,
              41
            ]
          },
          {
            "path":  [
              3,
              5
            ],
            "span":  [
              13,
              0,
              40
            ]
          },
          {
            "path":  [
              6,
              0
            ],
            "span":  [
              18,
              0,
              21,
              1
            ],
            "leadingComments":  " S1 service does something.\n\n And one more line.\n"
          },
          {
            "path":  [
              6,
              0,
              1
            ],
            "span":  [
              18,
              8,
              10
            ]
          },
          {
            "path":  [
              6,
              0,
              2,
              0
            ],
            "span":  [
              20,
              2,
              29
            ],
            "leadingComments":  " Method does blah.  And something extra.\n"
          },
          {
            "path":  [
              6,
              0,
              2,
              0,
              1
            ],
            "span":  [
              20,
              6,
              12
            ]
          },
          {
            "path":  [
              6,
              0,
              2,
              0,
              2
            ],
            "span":  [
              20,
              13,
              14
            ]
          },
          {
            "path":  [
              6,
              0,
              2,
              0,
              3
            ],
            "span":  [
              20,
              25,
              27
            ]
          },
          {
            "path":  [
              6,
              1
            ],
            "span":  [
              23,
              0,
              24,
              1
            ]
          },
          {
            "path":  [
              6,
              1,
              1
            ],
            "span":  [
              23,
              8,
              10
            ]
          },
          {
            "path":  [
              4,
              0
            ],
            "span":  [
              26,
              0,
              36,
              1
            ]
          },
          {
            "path":  [
              4,
              0,
              1
            ],
            "span":  [
              26,
              8,
              9
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0
            ],
            "span":  [
              28,
              2,
              14
            ],
            "leadingComments":  " i is integer\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              5
            ],
            "span":  [
              28,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              1
            ],
            "span":  [
              28,
              8,
              9
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              0,
              3
            ],
            "span":  [
              28,
              12,
              13
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1
            ],
            "span":  [
              29,
              2,
              24
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              4
            ],
            "span":  [
              29,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              5
            ],
            "span":  [
              29,
              11,
              16
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              1
            ],
            "span":  [
              29,
              17,
              19
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              1,
              3
            ],
            "span":  [
              29,
              22,
              23
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              2
            ],
            "span":  [
              30,
              2,
              15
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              2,
              5
            ],
            "span":  [
              30,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              2,
              1
            ],
            "span":  [
              30,
              9,
              10
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              2,
              3
            ],
            "span":  [
              30,
              13,
              14
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              3
            ],
            "span":  [
              31,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              3,
              6
            ],
            "span":  [
              31,
              2,
              3
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              3,
              1
            ],
            "span":  [
              31,
              4,
              5
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              3,
              3
            ],
            "span":  [
              31,
              8,
              9
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              4
            ],
            "span":  [
              32,
              2,
              12
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              4,
              6
            ],
            "span":  [
              32,
              2,
              4
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              4,
              1
            ],
            "span":  [
              32,
              5,
              6
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              4,
              3
            ],
            "span":  [
              32,
              9,
              11
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              5
            ],
            "span":  [
              35,
              2,
              22
            ],
            "leadingComments":  " mr is repeated message\n second line.\n"
          },
          {
            "path":  [
              4,
              0,
              2,
              5,
              4
            ],
            "span":  [
              35,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              5,
              6
            ],
            "span":  [
              35,
              11,
              13
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              5,
              1
            ],
            "span":  [
              35,
              14,
              16
            ]
          },
          {
            "path":  [
              4,
              0,
              2,
              5,
              3
            ],
            "span":  [
              35,
              19,
              21
            ]
          },
          {
            "path":  [
              4,
              1
            ],
            "span":  [
              38,
              0,
              41,
              1
            ]
          },
          {
            "path":  [
              4,
              1,
              1
            ],
            "span":  [
              38,
              8,
              10
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0
            ],
            "span":  [
              39,
              2,
              14
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              5
            ],
            "span":  [
              39,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              1
            ],
            "span":  [
              39,
              8,
              9
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              0,
              3
            ],
            "span":  [
              39,
              12,
              13
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              1
            ],
            "span":  [
              40,
              2,
              15
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              1,
              5
            ],
            "span":  [
              40,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              1,
              1
            ],
            "span":  [
              40,
              9,
              10
            ]
          },
          {
            "path":  [
              4,
              1,
              2,
              1,
              3
            ],
            "span":  [
              40,
              13,
              14
            ]
          },
          {
            "path":  [
              4,
              2
            ],
            "span":  [
              43,
              0,
              46,
              1
            ]
          },
          {
            "path":  [
              4,
              2,
              1
            ],
            "span":  [
              43,
              8,
              20
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0
            ],
            "span":  [
              44,
              2,
              23
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              6
            ],
            "span":  [
              44,
              2,
              15
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              1
            ],
            "span":  [
              44,
              16,
              18
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              0,
              3
            ],
            "span":  [
              44,
              21,
              22
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              1
            ],
            "span":  [
              45,
              2,
              27
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              1,
              6
            ],
            "span":  [
              45,
              2,
              19
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              1,
              1
            ],
            "span":  [
              45,
              20,
              22
            ]
          },
          {
            "path":  [
              4,
              2,
              2,
              1,
              3
            ],
            "span":  [
              45,
              25,
              26
            ]
          },
          {
            "path":  [
              5,
              0
            ],
            "span":  [
              48,
              0,
              53,
              1
            ]
          },
          {
            "path":  [
              5,
              0,
              1
            ],
            "span":  [
              48,
              5,
              6
            ]
          },
          {
            "path":  [
              5,
              0,
              2,
              0
            ],
            "span":  [
              50,
              2,
              9
            ],
            "leadingComments":  " V0 comment.\n"
          },
          {
            "path":  [
              5,
              0,
              2,
              0,
              1
            ],
            "span":  [
              50,
              2,
              4
            ]
          },
          {
            "path":  [
              5,
              0,
              2,
              0,
              2
            ],
            "span":  [
              50,
              7,
              8
            ]
          },
          {
            "path":  [
              5,
              0,
              2,
              1
            ],
            "span":  [
              52,
              2,
              9
            ],
            "leadingComments":  " V1 comment.\n"
          },
          {
            "path":  [
              5,
              0,
              2,
              1,
              1
            ],
            "span":  [
              52,
              2,
              4
            ]
          },
          {
            "path":  [
              5,
              0,
              2,
              1,
              2
            ],
            "span":  [
              52,
              7,
              8
            ]
          },
          {
            "path":  [
              4,
              3
            ],
            "span":  [
              55,
              0,
              57,
              1
            ]
          },
          {
            "path":  [
              4,
              3,
              1
            ],
            "span":  [
              55,
              8,
              17
            ]
          },
          {
            "path":  [
              4,
              3,
              2,
              0
            ],
            "span":  [
              56,
              2,
              21
            ]
          },
          {
            "path":  [
              4,
              3,
              2,
              0,
              5
            ],
            "span":  [
              56,
              2,
              8
            ]
          },
          {
            "path":  [
              4,
              3,
              2,
              0,
              1
            ],
            "span":  [
              56,
              9,
              16
            ]
          },
          {
            "path":  [
              4,
              3,
              2,
              0,
              3
            ],
            "span":  [
              56,
              19,
              20
            ]
          },
          {
            "path":  [
              4,
              4
            ],
            "span":  [
              59,
              0,
              76,
              1
            ]
          },
          {
            "path":  [
              4,
              4,
              1
            ],
            "span":  [
              59,
              8,
              20
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              0
            ],
            "span":  [
              60,
              2,
              23
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              0,
              5
            ],
            "span":  [
              60,
              2,
              7
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              0,
              1
            ],
            "span":  [
              60,
              8,
              18
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              0,
              3
            ],
            "span":  [
              60,
              21,
              22
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              1
            ],
            "span":  [
              61,
              2,
              20
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              1,
              6
            ],
            "span":  [
              61,
              2,
              3
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              1,
              1
            ],
            "span":  [
              61,
              4,
              15
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              1,
              3
            ],
            "span":  [
              61,
              18,
              19
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              2
            ],
            "span":  [
              62,
              2,
              27
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              2,
              6
            ],
            "span":  [
              62,
              2,
              11
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              2,
              1
            ],
            "span":  [
              62,
              12,
              22
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              2,
              3
            ],
            "span":  [
              62,
              25,
              26
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              3
            ],
            "span":  [
              63,
              2,
              34
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              3,
              4
            ],
            "span":  [
              63,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              3,
              5
            ],
            "span":  [
              63,
              11,
              16
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              3,
              1
            ],
            "span":  [
              63,
              17,
              29
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              3,
              3
            ],
            "span":  [
              63,
              32,
              33
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              4
            ],
            "span":  [
              64,
              2,
              31
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              4,
              4
            ],
            "span":  [
              64,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              4,
              6
            ],
            "span":  [
              64,
              11,
              12
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              4,
              1
            ],
            "span":  [
              64,
              13,
              26
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              4,
              3
            ],
            "span":  [
              64,
              29,
              30
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              5
            ],
            "span":  [
              65,
              2,
              38
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              5,
              4
            ],
            "span":  [
              65,
              2,
              10
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              5,
              6
            ],
            "span":  [
              65,
              11,
              20
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              5,
              1
            ],
            "span":  [
              65,
              21,
              33
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              5,
              3
            ],
            "span":  [
              65,
              36,
              37
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              6
            ],
            "span":  [
              66,
              2,
              32
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              6,
              6
            ],
            "span":  [
              66,
              2,
              19
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              6,
              1
            ],
            "span":  [
              66,
              20,
              27
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              6,
              3
            ],
            "span":  [
              66,
              30,
              31
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              7
            ],
            "span":  [
              67,
              2,
              29
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              7,
              6
            ],
            "span":  [
              67,
              2,
              15
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              7,
              1
            ],
            "span":  [
              67,
              16,
              24
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              7,
              3
            ],
            "span":  [
              67,
              27,
              28
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              8
            ],
            "span":  [
              68,
              2,
              36
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              8,
              6
            ],
            "span":  [
              68,
              2,
              23
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              8,
              1
            ],
            "span":  [
              68,
              24,
              31
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              8,
              3
            ],
            "span":  [
              68,
              34,
              35
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              9
            ],
            "span":  [
              69,
              2,
              35
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              9,
              6
            ],
            "span":  [
              69,
              2,
              21
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              9,
              1
            ],
            "span":  [
              69,
              22,
              29
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              9,
              3
            ],
            "span":  [
              69,
              32,
              34
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              10
            ],
            "span":  [
              70,
              2,
              40
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              10,
              6
            ],
            "span":  [
              70,
              2,
              26
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              10,
              1
            ],
            "span":  [
              70,
              27,
              34
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              10,
              3
            ],
            "span":  [
              70,
              37,
              39
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              11
            ],
            "span":  [
              71,
              2,
              40
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              11,
              6
            ],
            "span":  [
              71,
              2,
              27
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              11,
              1
            ],
            "span":  [
              71,
              28,
              34
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              11,
              3
            ],
            "span":  [
              71,
              37,
              39
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              12
            ],
            "span":  [
              72,
              2,
              40
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              12,
              6
            ],
            "span":  [
              72,
              2,
              27
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              12,
              1
            ],
            "span":  [
              72,
              28,
              34
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              12,
              3
            ],
            "span":  [
              72,
              37,
              39
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              13
            ],
            "span":  [
              73,
              2,
              41
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              13,
              6
            ],
            "span":  [
              73,
              2,
              24
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              13,
              1
            ],
            "span":  [
              73,
              25,
              35
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              13,
              3
            ],
            "span":  [
              73,
              38,
              40
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              14
            ],
            "span":  [
              74,
              2,
              43
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              14,
              6
            ],
            "span":  [
              74,
              2,
              29
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              14,
              1
            ],
            "span":  [
              74,
              30,
              37
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              14,
              3
            ],
            "span":  [
              74,
              40,
              42
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              15
            ],
            "span":  [
              75,
              2,
              42
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              15,
              6
            ],
            "span":  [
              75,
              2,
              28
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              15,
              1
            ],
            "span":  [
              75,
              29,
              36
            ]
          },
          {
            "path":  [
              4,
              4,
              2,
              15,
              3
            ],
            "span":  [
              75,
              39,
              41
            ]
          }
        ]
      },
      "syntax":  "proto3"
    }
  ]
};

export default TestDescriptor;
