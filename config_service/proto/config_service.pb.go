// Copyright 2023 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/config_service/proto/config_service.proto

package configpb

import (
	config "go.chromium.org/luci/common/proto/config"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListConfigSetsRequest_ConfigSetDomain int32

const (
	// The default value when domain is omitted. Used to retrieve config sets
	// in all domains.
	ListConfigSetsRequest_ALL ListConfigSetsRequest_ConfigSetDomain = 0
	// Service domain.
	ListConfigSetsRequest_SERVICE ListConfigSetsRequest_ConfigSetDomain = 1
	// Project domain.
	ListConfigSetsRequest_PROJECT ListConfigSetsRequest_ConfigSetDomain = 2
)

// Enum value maps for ListConfigSetsRequest_ConfigSetDomain.
var (
	ListConfigSetsRequest_ConfigSetDomain_name = map[int32]string{
		0: "ALL",
		1: "SERVICE",
		2: "PROJECT",
	}
	ListConfigSetsRequest_ConfigSetDomain_value = map[string]int32{
		"ALL":     0,
		"SERVICE": 1,
		"PROJECT": 2,
	}
)

func (x ListConfigSetsRequest_ConfigSetDomain) Enum() *ListConfigSetsRequest_ConfigSetDomain {
	p := new(ListConfigSetsRequest_ConfigSetDomain)
	*p = x
	return p
}

func (x ListConfigSetsRequest_ConfigSetDomain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListConfigSetsRequest_ConfigSetDomain) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_enumTypes[0].Descriptor()
}

func (ListConfigSetsRequest_ConfigSetDomain) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_config_service_proto_config_service_proto_enumTypes[0]
}

func (x ListConfigSetsRequest_ConfigSetDomain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListConfigSetsRequest_ConfigSetDomain.Descriptor instead.
func (ListConfigSetsRequest_ConfigSetDomain) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{6, 0}
}

// A request message for GetConfig rpc.
type GetConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ConfigSet where the requested config belongs to.
	//
	// Required.
	ConfigSet string `protobuf:"bytes,1,opt,name=config_set,json=configSet,proto3" json:"config_set,omitempty"`
	// Path of the config. Mutually exclusive with content_sha256.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Content SHA256 value of the config. Mutually exclusive with path.
	ContentSha256 string `protobuf:"bytes,3,opt,name=content_sha256,json=contentSha256,proto3" json:"content_sha256,omitempty"`
	// Fields of the Config proto to include.
	//
	// By default, all fields are included.
	//
	// Note: For content field, the client should always pass "content" to get
	// the content. Populating "raw_content" or "signed_url" is a pure server
	// side decision based on the size of the config. Therefore, explicitly
	// passing one of "raw_content" or "signed_url" may cause unexpected
	// behavior. For example, "raw_content" is passed and the content is large
	// and supposed to return by signed_url field, the client would get an
	// empty "raw_content".
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetConfigRequest) GetConfigSet() string {
	if x != nil {
		return x.ConfigSet
	}
	return ""
}

func (x *GetConfigRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetConfigRequest) GetContentSha256() string {
	if x != nil {
		return x.ContentSha256
	}
	return ""
}

func (x *GetConfigRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

// A single config.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the config set.
	// For a service config set, "services/<service_id>".
	// For a project config set, "projects/<project_id>".
	ConfigSet string `protobuf:"bytes,1,opt,name=config_set,json=configSet,proto3" json:"config_set,omitempty"`
	// Path of the config file relative to the config directory.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Content of the config.
	//
	// Types that are valid to be assigned to Content:
	//
	//	*Config_RawContent
	//	*Config_SignedUrl
	Content isConfig_Content `protobuf_oneof:"content"`
	// SHA256 value of the raw content.
	ContentSha256 string `protobuf:"bytes,5,opt,name=content_sha256,json=contentSha256,proto3" json:"content_sha256,omitempty"`
	// Size of the raw config in bytes.
	Size int64 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	// Git revision
	Revision string `protobuf:"bytes,6,opt,name=revision,proto3" json:"revision,omitempty"`
	// Original config file url on Git repo.
	Url           string `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{1}
}

func (x *Config) GetConfigSet() string {
	if x != nil {
		return x.ConfigSet
	}
	return ""
}

func (x *Config) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Config) GetContent() isConfig_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Config) GetRawContent() []byte {
	if x != nil {
		if x, ok := x.Content.(*Config_RawContent); ok {
			return x.RawContent
		}
	}
	return nil
}

func (x *Config) GetSignedUrl() string {
	if x != nil {
		if x, ok := x.Content.(*Config_SignedUrl); ok {
			return x.SignedUrl
		}
	}
	return ""
}

func (x *Config) GetContentSha256() string {
	if x != nil {
		return x.ContentSha256
	}
	return ""
}

func (x *Config) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Config) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *Config) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type isConfig_Content interface {
	isConfig_Content()
}

type Config_RawContent struct {
	// For small content where its raw content is less than 30MB and gzipped
	// size is less than 800KB, the raw and uncompressed content will be
	// included directly.
	RawContent []byte `protobuf:"bytes,3,opt,name=raw_content,json=rawContent,proto3,oneof"`
}

type Config_SignedUrl struct {
	// For large content, a sign_url which points the actual config content
	// will be provided.
	// Note: The signed url is set to expire in 10 minutes. And it's encouraged
	// to use "Accept-Encoding: gzip" header in the request to minimize the size
	// in data transfer, and decompress it by yourself.
	SignedUrl string `protobuf:"bytes,4,opt,name=signed_url,json=signedUrl,proto3,oneof"`
}

func (*Config_RawContent) isConfig_Content() {}

func (*Config_SignedUrl) isConfig_Content() {}

// Get project-level configs matched with the provided path in all `projects/xxx`
// config_sets.
type GetProjectConfigsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required
	// Path to the desired config in each project config set.
	//
	// TODO: In future, it can expand to support regex match in some ways, since
	// in v2, Luci-config is supposed to support multi-file configuration.
	// For example, `cr-buildbucket.cfg` can be split into smaller configs,
	// e.g. `bucket-a.cfg`, `bucket-b.cfg`, etc. But file names might be dynamic
	// and how these files are organized with other project configs are undecided.
	// It's better to implement the regex check logic when there is a concrete
	// use case.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Fields of Config proto to include.
	//
	// By default, all fields are included.
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectConfigsRequest) Reset() {
	*x = GetProjectConfigsRequest{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectConfigsRequest) ProtoMessage() {}

func (x *GetProjectConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectConfigsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectConfigsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectConfigsRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetProjectConfigsRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

// GetProjectConfigsResponse is the response of GetProjectConfigs rpc.
//
// Note: When the sum of the first ith config.Content size larger than 200MB,
// the rest of config.Content will be always a signed url.
type GetProjectConfigsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requested configs in each project.
	Configs       []*Config `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectConfigsResponse) Reset() {
	*x = GetProjectConfigsResponse{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectConfigsResponse) ProtoMessage() {}

func (x *GetProjectConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectConfigsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetProjectConfigsResponse) GetConfigs() []*Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

// ValidateConfigsRequest is the request of ValidateConfigs rpc.
type ValidateConfigsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ConfigSet to validate against.
	//
	// See: https://pkg.go.dev/go.chromium.org/luci/config#Set
	ConfigSet string `protobuf:"bytes,1,opt,name=config_set,json=configSet,proto3" json:"config_set,omitempty"`
	// FileHashes represent the manifest of the config directory.
	FileHashes    []*ValidateConfigsRequest_FileHash `protobuf:"bytes,2,rep,name=file_hashes,json=fileHashes,proto3" json:"file_hashes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateConfigsRequest) Reset() {
	*x = ValidateConfigsRequest{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConfigsRequest) ProtoMessage() {}

func (x *ValidateConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConfigsRequest.ProtoReflect.Descriptor instead.
func (*ValidateConfigsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateConfigsRequest) GetConfigSet() string {
	if x != nil {
		return x.ConfigSet
	}
	return ""
}

func (x *ValidateConfigsRequest) GetFileHashes() []*ValidateConfigsRequest_FileHash {
	if x != nil {
		return x.FileHashes
	}
	return nil
}

// BadValidationRequestFixInfo describes the problem in `ValidateConfigsRequest`
// and provide the fix instruction. The server will include this message in
// grpc error status details[1] and return InvalidArgument error code.
//
// [1]: https://github.com/googleapis/googleapis/blob/f36c65081b19e0758ef5696feca27c7dcee5475e/google/rpc/status.proto#L48
type BadValidationRequestFixInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The files that have NOT been seen by LUCI Config and need to be uploaded.
	UploadFiles []*BadValidationRequestFixInfo_UploadFile `protobuf:"bytes,1,rep,name=upload_files,json=uploadFiles,proto3" json:"upload_files,omitempty"`
	// Files that none of the services can validate and SHOULD NOT be included
	// in the ValidateConfigsRequest.
	UnvalidatableFiles []string `protobuf:"bytes,2,rep,name=unvalidatable_files,json=unvalidatableFiles,proto3" json:"unvalidatable_files,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BadValidationRequestFixInfo) Reset() {
	*x = BadValidationRequestFixInfo{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadValidationRequestFixInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadValidationRequestFixInfo) ProtoMessage() {}

func (x *BadValidationRequestFixInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadValidationRequestFixInfo.ProtoReflect.Descriptor instead.
func (*BadValidationRequestFixInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{5}
}

func (x *BadValidationRequestFixInfo) GetUploadFiles() []*BadValidationRequestFixInfo_UploadFile {
	if x != nil {
		return x.UploadFiles
	}
	return nil
}

func (x *BadValidationRequestFixInfo) GetUnvalidatableFiles() []string {
	if x != nil {
		return x.UnvalidatableFiles
	}
	return nil
}

// ListConfigSetsRequest is the request of ListConfigSets rpc.
type ListConfigSetsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List config sets in the specified domain.
	Domain ListConfigSetsRequest_ConfigSetDomain `protobuf:"varint,1,opt,name=domain,proto3,enum=config.service.v2.ListConfigSetsRequest_ConfigSetDomain" json:"domain,omitempty"`
	// Fields of ConfigSet proto to include.
	// By default, only return config_set, url and revision fields.
	// Note: "file_paths" and "configs" is not supported in this rpc and only be
	// supported in GetConfigSet rpc.
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConfigSetsRequest) Reset() {
	*x = ListConfigSetsRequest{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigSetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigSetsRequest) ProtoMessage() {}

func (x *ListConfigSetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigSetsRequest.ProtoReflect.Descriptor instead.
func (*ListConfigSetsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListConfigSetsRequest) GetDomain() ListConfigSetsRequest_ConfigSetDomain {
	if x != nil {
		return x.Domain
	}
	return ListConfigSetsRequest_ALL
}

func (x *ListConfigSetsRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

// ListConfigSetsResponse is the response of ListConfigSets rpc.
type ListConfigSetsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of config sets.
	ConfigSets    []*ConfigSet `protobuf:"bytes,1,rep,name=config_sets,json=configSets,proto3" json:"config_sets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConfigSetsResponse) Reset() {
	*x = ListConfigSetsResponse{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfigSetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfigSetsResponse) ProtoMessage() {}

func (x *ListConfigSetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfigSetsResponse.ProtoReflect.Descriptor instead.
func (*ListConfigSetsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListConfigSetsResponse) GetConfigSets() []*ConfigSet {
	if x != nil {
		return x.ConfigSets
	}
	return nil
}

// A single ConfigSet.
type ConfigSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the config set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Git Repo url which holds configs of this config set.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Latest imported Git revision.
	Revision *ConfigSet_Revision `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// All file paths related to the corresponding config set location.
	//
	// Use `configs` instead.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/config_service/proto/config_service.proto.
	FilePaths []string `protobuf:"bytes,4,rep,name=file_paths,json=filePaths,proto3" json:"file_paths,omitempty"`
	// Last import attempt information.
	LastImportAttempt *ConfigSet_Attempt `protobuf:"bytes,5,opt,name=last_import_attempt,json=lastImportAttempt,proto3" json:"last_import_attempt,omitempty"`
	// Metadata of all config files in the set.
	//
	// Messages here exclude `raw_content` and `signed_url`. Use separate
	// GetConfig call to fetch the full config file body.
	Configs       []*Config `protobuf:"bytes,6,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigSet) Reset() {
	*x = ConfigSet{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSet) ProtoMessage() {}

func (x *ConfigSet) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSet.ProtoReflect.Descriptor instead.
func (*ConfigSet) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigSet) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConfigSet) GetRevision() *ConfigSet_Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/config_service/proto/config_service.proto.
func (x *ConfigSet) GetFilePaths() []string {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

func (x *ConfigSet) GetLastImportAttempt() *ConfigSet_Attempt {
	if x != nil {
		return x.LastImportAttempt
	}
	return nil
}

func (x *ConfigSet) GetConfigs() []*Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

// GetConfigSetRequest is the request of GetConfigSet rpc.
type GetConfigSetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Config set to fetch.
	ConfigSet string `protobuf:"bytes,1,opt,name=config_set,json=configSet,proto3" json:"config_set,omitempty"`
	// Fields of ConfigSet proto to include.
	// By default, only return config_set, url and revision fields.
	Fields        *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigSetRequest) Reset() {
	*x = GetConfigSetRequest{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigSetRequest) ProtoMessage() {}

func (x *GetConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigSetRequest.ProtoReflect.Descriptor instead.
func (*GetConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetConfigSetRequest) GetConfigSet() string {
	if x != nil {
		return x.ConfigSet
	}
	return ""
}

func (x *GetConfigSetRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ValidateConfigsRequest_FileHash struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Relative path to the config file in POSIX style.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The SHA256 hash of the config file.
	Sha256        string `protobuf:"bytes,2,opt,name=sha256,proto3" json:"sha256,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateConfigsRequest_FileHash) Reset() {
	*x = ValidateConfigsRequest_FileHash{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateConfigsRequest_FileHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConfigsRequest_FileHash) ProtoMessage() {}

func (x *ValidateConfigsRequest_FileHash) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConfigsRequest_FileHash.ProtoReflect.Descriptor instead.
func (*ValidateConfigsRequest_FileHash) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ValidateConfigsRequest_FileHash) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ValidateConfigsRequest_FileHash) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

type BadValidationRequestFixInfo_UploadFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Relative path to the config file in POSIX style.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The url to upload the config.
	//
	// The caller SHOULD send compressed config and include following headers
	//   - Content-Encoding: gzip
	//   - x-goog-content-length-range: 0,$max_config_size
	SignedUrl string `protobuf:"bytes,2,opt,name=signed_url,json=signedUrl,proto3" json:"signed_url,omitempty"`
	// Maximum config size in bytes that client can upload.
	MaxConfigSize int64 `protobuf:"varint,3,opt,name=max_config_size,json=maxConfigSize,proto3" json:"max_config_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadValidationRequestFixInfo_UploadFile) Reset() {
	*x = BadValidationRequestFixInfo_UploadFile{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadValidationRequestFixInfo_UploadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadValidationRequestFixInfo_UploadFile) ProtoMessage() {}

func (x *BadValidationRequestFixInfo_UploadFile) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadValidationRequestFixInfo_UploadFile.ProtoReflect.Descriptor instead.
func (*BadValidationRequestFixInfo_UploadFile) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BadValidationRequestFixInfo_UploadFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *BadValidationRequestFixInfo_UploadFile) GetSignedUrl() string {
	if x != nil {
		return x.SignedUrl
	}
	return ""
}

func (x *BadValidationRequestFixInfo_UploadFile) GetMaxConfigSize() int64 {
	if x != nil {
		return x.MaxConfigSize
	}
	return 0
}

type ConfigSet_Revision struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Revision id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Repo url points to this revision of config set.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// Committer email who commit this revision
	CommitterEmail string `protobuf:"bytes,3,opt,name=committer_email,json=committerEmail,proto3" json:"committer_email,omitempty"`
	// The commit author email.
	AuthorEmail string `protobuf:"bytes,5,opt,name=author_email,json=authorEmail,proto3" json:"author_email,omitempty"`
	// Time of this committed revision.
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigSet_Revision) Reset() {
	*x = ConfigSet_Revision{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSet_Revision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSet_Revision) ProtoMessage() {}

func (x *ConfigSet_Revision) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSet_Revision.ProtoReflect.Descriptor instead.
func (*ConfigSet_Revision) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ConfigSet_Revision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConfigSet_Revision) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConfigSet_Revision) GetCommitterEmail() string {
	if x != nil {
		return x.CommitterEmail
	}
	return ""
}

func (x *ConfigSet_Revision) GetAuthorEmail() string {
	if x != nil {
		return x.AuthorEmail
	}
	return ""
}

func (x *ConfigSet_Revision) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Attempt information about importing this config set.
type ConfigSet_Attempt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Human-readable message of the attempt.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// Whether this attempt is successful or not.
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Git revision attempt to import
	Revision *ConfigSet_Revision `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// Time of this attempt.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The validation result in this import attempt.
	ValidationResult *config.ValidationResult `protobuf:"bytes,5,opt,name=validationResult,proto3" json:"validationResult,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConfigSet_Attempt) Reset() {
	*x = ConfigSet_Attempt{}
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigSet_Attempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSet_Attempt) ProtoMessage() {}

func (x *ConfigSet_Attempt) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSet_Attempt.ProtoReflect.Descriptor instead.
func (*ConfigSet_Attempt) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ConfigSet_Attempt) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigSet_Attempt) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigSet_Attempt) GetRevision() *ConfigSet_Revision {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *ConfigSet_Attempt) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ConfigSet_Attempt) GetValidationResult() *config.ValidationResult {
	if x != nil {
		return x.ValidationResult
	}
	return nil
}

var File_go_chromium_org_luci_config_service_proto_config_service_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDesc = string([]byte{
	0x0a, 0x3e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x32, 0x35,
	0x36, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x62,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x22, 0x50, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x53,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x22, 0x95, 0x02, 0x0a, 0x1b,
	0x42, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x0c, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x75, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x67, 0x0a, 0x0a, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x22, 0x57, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x73, 0x22, 0xda, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x54, 0x0a, 0x13,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0xb2, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x80, 0x02, 0x0a,
	0x07, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x08,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x68, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0xe5, 0x03, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x12,
	0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x32, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x42, 0x37, 0x5a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x90, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescData []byte
)

func file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDesc), len(file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDescData
}

var file_go_chromium_org_luci_config_service_proto_config_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_go_chromium_org_luci_config_service_proto_config_service_proto_goTypes = []any{
	(ListConfigSetsRequest_ConfigSetDomain)(0),     // 0: config.service.v2.ListConfigSetsRequest.ConfigSetDomain
	(*GetConfigRequest)(nil),                       // 1: config.service.v2.GetConfigRequest
	(*Config)(nil),                                 // 2: config.service.v2.Config
	(*GetProjectConfigsRequest)(nil),               // 3: config.service.v2.GetProjectConfigsRequest
	(*GetProjectConfigsResponse)(nil),              // 4: config.service.v2.GetProjectConfigsResponse
	(*ValidateConfigsRequest)(nil),                 // 5: config.service.v2.ValidateConfigsRequest
	(*BadValidationRequestFixInfo)(nil),            // 6: config.service.v2.BadValidationRequestFixInfo
	(*ListConfigSetsRequest)(nil),                  // 7: config.service.v2.ListConfigSetsRequest
	(*ListConfigSetsResponse)(nil),                 // 8: config.service.v2.ListConfigSetsResponse
	(*ConfigSet)(nil),                              // 9: config.service.v2.ConfigSet
	(*GetConfigSetRequest)(nil),                    // 10: config.service.v2.GetConfigSetRequest
	(*ValidateConfigsRequest_FileHash)(nil),        // 11: config.service.v2.ValidateConfigsRequest.FileHash
	(*BadValidationRequestFixInfo_UploadFile)(nil), // 12: config.service.v2.BadValidationRequestFixInfo.UploadFile
	(*ConfigSet_Revision)(nil),                     // 13: config.service.v2.ConfigSet.Revision
	(*ConfigSet_Attempt)(nil),                      // 14: config.service.v2.ConfigSet.Attempt
	(*fieldmaskpb.FieldMask)(nil),                  // 15: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                  // 16: google.protobuf.Timestamp
	(*config.ValidationResult)(nil),                // 17: config.ValidationResult
}
var file_go_chromium_org_luci_config_service_proto_config_service_proto_depIdxs = []int32{
	15, // 0: config.service.v2.GetConfigRequest.fields:type_name -> google.protobuf.FieldMask
	15, // 1: config.service.v2.GetProjectConfigsRequest.fields:type_name -> google.protobuf.FieldMask
	2,  // 2: config.service.v2.GetProjectConfigsResponse.configs:type_name -> config.service.v2.Config
	11, // 3: config.service.v2.ValidateConfigsRequest.file_hashes:type_name -> config.service.v2.ValidateConfigsRequest.FileHash
	12, // 4: config.service.v2.BadValidationRequestFixInfo.upload_files:type_name -> config.service.v2.BadValidationRequestFixInfo.UploadFile
	0,  // 5: config.service.v2.ListConfigSetsRequest.domain:type_name -> config.service.v2.ListConfigSetsRequest.ConfigSetDomain
	15, // 6: config.service.v2.ListConfigSetsRequest.fields:type_name -> google.protobuf.FieldMask
	9,  // 7: config.service.v2.ListConfigSetsResponse.config_sets:type_name -> config.service.v2.ConfigSet
	13, // 8: config.service.v2.ConfigSet.revision:type_name -> config.service.v2.ConfigSet.Revision
	14, // 9: config.service.v2.ConfigSet.last_import_attempt:type_name -> config.service.v2.ConfigSet.Attempt
	2,  // 10: config.service.v2.ConfigSet.configs:type_name -> config.service.v2.Config
	15, // 11: config.service.v2.GetConfigSetRequest.fields:type_name -> google.protobuf.FieldMask
	16, // 12: config.service.v2.ConfigSet.Revision.timestamp:type_name -> google.protobuf.Timestamp
	13, // 13: config.service.v2.ConfigSet.Attempt.revision:type_name -> config.service.v2.ConfigSet.Revision
	16, // 14: config.service.v2.ConfigSet.Attempt.timestamp:type_name -> google.protobuf.Timestamp
	17, // 15: config.service.v2.ConfigSet.Attempt.validationResult:type_name -> config.ValidationResult
	1,  // 16: config.service.v2.Configs.GetConfig:input_type -> config.service.v2.GetConfigRequest
	3,  // 17: config.service.v2.Configs.GetProjectConfigs:input_type -> config.service.v2.GetProjectConfigsRequest
	7,  // 18: config.service.v2.Configs.ListConfigSets:input_type -> config.service.v2.ListConfigSetsRequest
	10, // 19: config.service.v2.Configs.GetConfigSet:input_type -> config.service.v2.GetConfigSetRequest
	5,  // 20: config.service.v2.Configs.ValidateConfigs:input_type -> config.service.v2.ValidateConfigsRequest
	2,  // 21: config.service.v2.Configs.GetConfig:output_type -> config.service.v2.Config
	4,  // 22: config.service.v2.Configs.GetProjectConfigs:output_type -> config.service.v2.GetProjectConfigsResponse
	8,  // 23: config.service.v2.Configs.ListConfigSets:output_type -> config.service.v2.ListConfigSetsResponse
	9,  // 24: config.service.v2.Configs.GetConfigSet:output_type -> config.service.v2.ConfigSet
	17, // 25: config.service.v2.Configs.ValidateConfigs:output_type -> config.ValidationResult
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_config_service_proto_config_service_proto_init() }
func file_go_chromium_org_luci_config_service_proto_config_service_proto_init() {
	if File_go_chromium_org_luci_config_service_proto_config_service_proto != nil {
		return
	}
	file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes[1].OneofWrappers = []any{
		(*Config_RawContent)(nil),
		(*Config_SignedUrl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDesc), len(file_go_chromium_org_luci_config_service_proto_config_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_config_service_proto_config_service_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_config_service_proto_config_service_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_config_service_proto_config_service_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_config_service_proto_config_service_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_config_service_proto_config_service_proto = out.File
	file_go_chromium_org_luci_config_service_proto_config_service_proto_goTypes = nil
	file_go_chromium_org_luci_config_service_proto_config_service_proto_depIdxs = nil
}
