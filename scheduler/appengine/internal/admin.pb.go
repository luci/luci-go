// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/scheduler/appengine/internal/admin.proto

package internal

import (
	v1 "go.chromium.org/luci/scheduler/api/scheduler/v1"
	pb "go.chromium.org/luci/scheduler/appengine/task/gitiles/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DebugJobState loosely matches Job entity and associated data structures.
//
// See the engine implementation for details.
//
// Next tag: 10.
type DebugJobState struct {
	state               protoimpl.MessageState   `protogen:"open.v1"`
	Enabled             bool                     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Paused              bool                     `protobuf:"varint,2,opt,name=paused,proto3" json:"paused,omitempty"`
	LastTriage          *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=last_triage,json=lastTriage,proto3" json:"last_triage,omitempty"`
	CronState           *DebugJobState_CronState `protobuf:"bytes,4,opt,name=cron_state,json=cronState,proto3" json:"cron_state,omitempty"`
	ManagerState        *DebugManagerState       `protobuf:"bytes,9,opt,name=manager_state,json=managerState,proto3" json:"manager_state,omitempty"`
	ActiveInvocations   []int64                  `protobuf:"varint,5,rep,packed,name=active_invocations,json=activeInvocations,proto3" json:"active_invocations,omitempty"`
	FinishedInvocations []*FinishedInvocation    `protobuf:"bytes,6,rep,name=finished_invocations,json=finishedInvocations,proto3" json:"finished_invocations,omitempty"`
	RecentlyFinishedSet []int64                  `protobuf:"varint,7,rep,packed,name=recently_finished_set,json=recentlyFinishedSet,proto3" json:"recently_finished_set,omitempty"`
	PendingTriggersSet  []*Trigger               `protobuf:"bytes,8,rep,name=pending_triggers_set,json=pendingTriggersSet,proto3" json:"pending_triggers_set,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DebugJobState) Reset() {
	*x = DebugJobState{}
	mi := &file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugJobState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugJobState) ProtoMessage() {}

func (x *DebugJobState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugJobState.ProtoReflect.Descriptor instead.
func (*DebugJobState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescGZIP(), []int{0}
}

func (x *DebugJobState) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DebugJobState) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *DebugJobState) GetLastTriage() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTriage
	}
	return nil
}

func (x *DebugJobState) GetCronState() *DebugJobState_CronState {
	if x != nil {
		return x.CronState
	}
	return nil
}

func (x *DebugJobState) GetManagerState() *DebugManagerState {
	if x != nil {
		return x.ManagerState
	}
	return nil
}

func (x *DebugJobState) GetActiveInvocations() []int64 {
	if x != nil {
		return x.ActiveInvocations
	}
	return nil
}

func (x *DebugJobState) GetFinishedInvocations() []*FinishedInvocation {
	if x != nil {
		return x.FinishedInvocations
	}
	return nil
}

func (x *DebugJobState) GetRecentlyFinishedSet() []int64 {
	if x != nil {
		return x.RecentlyFinishedSet
	}
	return nil
}

func (x *DebugJobState) GetPendingTriggersSet() []*Trigger {
	if x != nil {
		return x.PendingTriggersSet
	}
	return nil
}

// DebugManagerState is whatever is reported by task.Manager.GetDebugState.
type DebugManagerState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Error         string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	DebugLog      string                 `protobuf:"bytes,2,opt,name=debug_log,json=debugLog,proto3" json:"debug_log,omitempty"`
	GitilesPoller *pb.DebugState         `protobuf:"bytes,3,opt,name=gitiles_poller,json=gitilesPoller,proto3" json:"gitiles_poller,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugManagerState) Reset() {
	*x = DebugManagerState{}
	mi := &file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugManagerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugManagerState) ProtoMessage() {}

func (x *DebugManagerState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugManagerState.ProtoReflect.Descriptor instead.
func (*DebugManagerState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescGZIP(), []int{1}
}

func (x *DebugManagerState) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *DebugManagerState) GetDebugLog() string {
	if x != nil {
		return x.DebugLog
	}
	return ""
}

func (x *DebugManagerState) GetGitilesPoller() *pb.DebugState {
	if x != nil {
		return x.GitilesPoller
	}
	return nil
}

type DebugJobState_CronState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Generation    int64                  `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	LastRewind    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_rewind,json=lastRewind,proto3" json:"last_rewind,omitempty"`
	LastTickWhen  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_tick_when,json=lastTickWhen,proto3" json:"last_tick_when,omitempty"`
	LastTickNonce int64                  `protobuf:"varint,5,opt,name=last_tick_nonce,json=lastTickNonce,proto3" json:"last_tick_nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DebugJobState_CronState) Reset() {
	*x = DebugJobState_CronState{}
	mi := &file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DebugJobState_CronState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugJobState_CronState) ProtoMessage() {}

func (x *DebugJobState_CronState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugJobState_CronState.ProtoReflect.Descriptor instead.
func (*DebugJobState_CronState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DebugJobState_CronState) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DebugJobState_CronState) GetGeneration() int64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *DebugJobState_CronState) GetLastRewind() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRewind
	}
	return nil
}

func (x *DebugJobState_CronState) GetLastTickWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTickWhen
	}
	return nil
}

func (x *DebugJobState_CronState) GetLastTickNonce() int64 {
	if x != nil {
		return x.LastTickNonce
	}
	return 0
}

var File_go_chromium_org_luci_scheduler_appengine_internal_admin_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDesc = string([]byte{
	0x0a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x47, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x06, 0x0a, 0x0d, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x72, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x12, 0x4c, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x12, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x53, 0x65, 0x74, 0x1a, 0xec,
	0x01, 0x0a, 0x09, 0x43, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x77, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77,
	0x69, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x63,
	0x6b, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x63, 0x6b, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x62, 0x75, 0x67, 0x4c, 0x6f, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x67, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x32, 0x4d, 0x0a, 0x05, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x1a, 0x1d, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescData []byte
)

func file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDesc), len(file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDescData
}

var file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_goTypes = []any{
	(*DebugJobState)(nil),           // 0: internal.admin.DebugJobState
	(*DebugManagerState)(nil),       // 1: internal.admin.DebugManagerState
	(*DebugJobState_CronState)(nil), // 2: internal.admin.DebugJobState.CronState
	(*timestamppb.Timestamp)(nil),   // 3: google.protobuf.Timestamp
	(*FinishedInvocation)(nil),      // 4: internal.db.FinishedInvocation
	(*Trigger)(nil),                 // 5: internal.triggers.Trigger
	(*pb.DebugState)(nil),           // 6: gitiles.messages.DebugState
	(*v1.JobRef)(nil),               // 7: scheduler.JobRef
}
var file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_depIdxs = []int32{
	3, // 0: internal.admin.DebugJobState.last_triage:type_name -> google.protobuf.Timestamp
	2, // 1: internal.admin.DebugJobState.cron_state:type_name -> internal.admin.DebugJobState.CronState
	1, // 2: internal.admin.DebugJobState.manager_state:type_name -> internal.admin.DebugManagerState
	4, // 3: internal.admin.DebugJobState.finished_invocations:type_name -> internal.db.FinishedInvocation
	5, // 4: internal.admin.DebugJobState.pending_triggers_set:type_name -> internal.triggers.Trigger
	6, // 5: internal.admin.DebugManagerState.gitiles_poller:type_name -> gitiles.messages.DebugState
	3, // 6: internal.admin.DebugJobState.CronState.last_rewind:type_name -> google.protobuf.Timestamp
	3, // 7: internal.admin.DebugJobState.CronState.last_tick_when:type_name -> google.protobuf.Timestamp
	7, // 8: internal.admin.Admin.GetDebugJobState:input_type -> scheduler.JobRef
	0, // 9: internal.admin.Admin.GetDebugJobState:output_type -> internal.admin.DebugJobState
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_init() }
func file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_init() {
	if File_go_chromium_org_luci_scheduler_appengine_internal_admin_proto != nil {
		return
	}
	file_go_chromium_org_luci_scheduler_appengine_internal_db_proto_init()
	file_go_chromium_org_luci_scheduler_appengine_internal_triggers_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDesc), len(file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_scheduler_appengine_internal_admin_proto = out.File
	file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_goTypes = nil
	file_go_chromium_org_luci_scheduler_appengine_internal_admin_proto_depIdxs = nil
}
