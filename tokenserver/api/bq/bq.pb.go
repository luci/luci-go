// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/tokenserver/api/bq/bq.proto

package bq

import (
	messages "go.chromium.org/luci/server/auth/delegation/messages"
	api "go.chromium.org/luci/tokenserver/api"
	v1 "go.chromium.org/luci/tokenserver/api/minter/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Issued delegation tokens.
type DelegationToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// First 16 bytes of SHA256 of the token body, hex-encoded.
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Kind of the token.
	TokenKind messages.Subtoken_Kind `protobuf:"varint,2,opt,name=token_kind,json=tokenKind,proto3,enum=messages.Subtoken_Kind" json:"token_kind,omitempty"`
	// Identifier of this token as generated by the token server.
	TokenId string `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	// Identity whose authority is delegated.
	DelegatedIdentity string `protobuf:"bytes,4,opt,name=delegated_identity,json=delegatedIdentity,proto3" json:"delegated_identity,omitempty"`
	// Who requested this token.
	RequestorIdentity string `protobuf:"bytes,5,opt,name=requestor_identity,json=requestorIdentity,proto3" json:"requestor_identity,omitempty"`
	// When the token was generated.
	IssuedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	// When the token expires.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Who can present this token.
	TargetAudience []string `protobuf:"bytes,8,rep,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	// What services should accept this token
	TargetServices []string `protobuf:"bytes,9,rep,name=target_services,json=targetServices,proto3" json:"target_services,omitempty"`
	// Token validity duration (in seconds), as requested by the caller.
	RequestedValidity int64 `protobuf:"varint,10,opt,name=requested_validity,json=requestedValidity,proto3" json:"requested_validity,omitempty"`
	// An intent string provided by the caller.
	RequestedIntent string `protobuf:"bytes,11,opt,name=requested_intent,json=requestedIntent,proto3" json:"requested_intent,omitempty"`
	// Arbitrary key:value pairs embedded into the token.
	Tags []string `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	// Revision of the luci-config repo with rules.
	ConfigRev string `protobuf:"bytes,13,opt,name=config_rev,json=configRev,proto3" json:"config_rev,omitempty"`
	// Name of the rule used to authorize this call.
	ConfigRule string `protobuf:"bytes,14,opt,name=config_rule,json=configRule,proto3" json:"config_rule,omitempty"`
	// IP address of the caller.
	PeerIp string `protobuf:"bytes,15,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	// Identifier of the token server GAE app and version.
	ServiceVersion string `protobuf:"bytes,16,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// ID of the GAE request that handled the call.
	GaeRequestId string `protobuf:"bytes,17,opt,name=gae_request_id,json=gaeRequestId,proto3" json:"gae_request_id,omitempty"`
	// Revision of the authorization database used to authorize this call.
	AuthDbRev     int64 `protobuf:"varint,18,opt,name=auth_db_rev,json=authDbRev,proto3" json:"auth_db_rev,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelegationToken) Reset() {
	*x = DelegationToken{}
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelegationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegationToken) ProtoMessage() {}

func (x *DelegationToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegationToken.ProtoReflect.Descriptor instead.
func (*DelegationToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescGZIP(), []int{0}
}

func (x *DelegationToken) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *DelegationToken) GetTokenKind() messages.Subtoken_Kind {
	if x != nil {
		return x.TokenKind
	}
	return messages.Subtoken_Kind(0)
}

func (x *DelegationToken) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

func (x *DelegationToken) GetDelegatedIdentity() string {
	if x != nil {
		return x.DelegatedIdentity
	}
	return ""
}

func (x *DelegationToken) GetRequestorIdentity() string {
	if x != nil {
		return x.RequestorIdentity
	}
	return ""
}

func (x *DelegationToken) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *DelegationToken) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *DelegationToken) GetTargetAudience() []string {
	if x != nil {
		return x.TargetAudience
	}
	return nil
}

func (x *DelegationToken) GetTargetServices() []string {
	if x != nil {
		return x.TargetServices
	}
	return nil
}

func (x *DelegationToken) GetRequestedValidity() int64 {
	if x != nil {
		return x.RequestedValidity
	}
	return 0
}

func (x *DelegationToken) GetRequestedIntent() string {
	if x != nil {
		return x.RequestedIntent
	}
	return ""
}

func (x *DelegationToken) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DelegationToken) GetConfigRev() string {
	if x != nil {
		return x.ConfigRev
	}
	return ""
}

func (x *DelegationToken) GetConfigRule() string {
	if x != nil {
		return x.ConfigRule
	}
	return ""
}

func (x *DelegationToken) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *DelegationToken) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *DelegationToken) GetGaeRequestId() string {
	if x != nil {
		return x.GaeRequestId
	}
	return ""
}

func (x *DelegationToken) GetAuthDbRev() int64 {
	if x != nil {
		return x.AuthDbRev
	}
	return 0
}

// Issued machine tokens.
type MachineToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// First 16 bytes of SHA256 of the token body, hex-encoded.
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Machine domain name encoded in the token.
	MachineFqdn string `protobuf:"bytes,2,opt,name=machine_fqdn,json=machineFqdn,proto3" json:"machine_fqdn,omitempty"`
	// Type of the machine token.
	TokenType api.MachineTokenType `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3,enum=tokenserver.MachineTokenType" json:"token_type,omitempty"`
	// When the token was generated.
	IssuedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	// When the token expires.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Serial number of the peer certificate.
	CertSerialNumber string `protobuf:"bytes,6,opt,name=cert_serial_number,json=certSerialNumber,proto3" json:"cert_serial_number,omitempty"`
	// Type of the signature used to proof possession of the private key.
	SignatureAlgorithm v1.SignatureAlgorithm `protobuf:"varint,7,opt,name=signature_algorithm,json=signatureAlgorithm,proto3,enum=tokenserver.minter.SignatureAlgorithm" json:"signature_algorithm,omitempty"`
	// Common Name of a CA that signed the peer certificate.
	CaCommonName string `protobuf:"bytes,8,opt,name=ca_common_name,json=caCommonName,proto3" json:"ca_common_name,omitempty"`
	// Revision of the luci-config repo that contains the CA.
	CaConfigRev string `protobuf:"bytes,9,opt,name=ca_config_rev,json=caConfigRev,proto3" json:"ca_config_rev,omitempty"`
	// IP address of the caller.
	PeerIp string `protobuf:"bytes,10,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	// Identifier of the token server GAE app and version.
	ServiceVersion string `protobuf:"bytes,11,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// ID of the GAE request that handled the call.
	GaeRequestId  string `protobuf:"bytes,12,opt,name=gae_request_id,json=gaeRequestId,proto3" json:"gae_request_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineToken) Reset() {
	*x = MachineToken{}
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineToken) ProtoMessage() {}

func (x *MachineToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineToken.ProtoReflect.Descriptor instead.
func (*MachineToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescGZIP(), []int{1}
}

func (x *MachineToken) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *MachineToken) GetMachineFqdn() string {
	if x != nil {
		return x.MachineFqdn
	}
	return ""
}

func (x *MachineToken) GetTokenType() api.MachineTokenType {
	if x != nil {
		return x.TokenType
	}
	return api.MachineTokenType(0)
}

func (x *MachineToken) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *MachineToken) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *MachineToken) GetCertSerialNumber() string {
	if x != nil {
		return x.CertSerialNumber
	}
	return ""
}

func (x *MachineToken) GetSignatureAlgorithm() v1.SignatureAlgorithm {
	if x != nil {
		return x.SignatureAlgorithm
	}
	return v1.SignatureAlgorithm(0)
}

func (x *MachineToken) GetCaCommonName() string {
	if x != nil {
		return x.CaCommonName
	}
	return ""
}

func (x *MachineToken) GetCaConfigRev() string {
	if x != nil {
		return x.CaConfigRev
	}
	return ""
}

func (x *MachineToken) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *MachineToken) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *MachineToken) GetGaeRequestId() string {
	if x != nil {
		return x.GaeRequestId
	}
	return ""
}

// Issued Project tokens.
type ProjectToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// First 16 bytes of SHA256 of the token body, hex-encoded.
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Service account email the luci service wants to act as.
	ServiceAccount string `protobuf:"bytes,2,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Requested OAuth scopes.
	OauthScopes []string `protobuf:"bytes,3,rep,name=oauth_scopes,json=oauthScopes,proto3" json:"oauth_scopes,omitempty"`
	// LUCI project for which token is requested.
	LuciProject string `protobuf:"bytes,4,opt,name=luci_project,json=luciProject,proto3" json:"luci_project,omitempty"`
	// Who requested and who can use this token.
	ServiceIdentity string `protobuf:"bytes,5,opt,name=service_identity,json=serviceIdentity,proto3" json:"service_identity,omitempty"`
	// When this request happened.
	RequestedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	// When the token expires.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Arbitrary key:value pairs provided by the caller.
	AuditTags []string `protobuf:"bytes,8,rep,name=audit_tags,json=auditTags,proto3" json:"audit_tags,omitempty"`
	// IP address of the caller.
	PeerIp string `protobuf:"bytes,9,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	// Identifier of the token server GAE app and version.
	ServiceVersion string `protobuf:"bytes,10,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// ID of the GAE request that handled the call.
	GaeRequestId string `protobuf:"bytes,11,opt,name=gae_request_id,json=gaeRequestId,proto3" json:"gae_request_id,omitempty"`
	// Revision of the authorization database used to authorize this call.
	AuthDbRev     int64 `protobuf:"varint,12,opt,name=auth_db_rev,json=authDbRev,proto3" json:"auth_db_rev,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectToken) Reset() {
	*x = ProjectToken{}
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectToken) ProtoMessage() {}

func (x *ProjectToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectToken.ProtoReflect.Descriptor instead.
func (*ProjectToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectToken) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *ProjectToken) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ProjectToken) GetOauthScopes() []string {
	if x != nil {
		return x.OauthScopes
	}
	return nil
}

func (x *ProjectToken) GetLuciProject() string {
	if x != nil {
		return x.LuciProject
	}
	return ""
}

func (x *ProjectToken) GetServiceIdentity() string {
	if x != nil {
		return x.ServiceIdentity
	}
	return ""
}

func (x *ProjectToken) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *ProjectToken) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *ProjectToken) GetAuditTags() []string {
	if x != nil {
		return x.AuditTags
	}
	return nil
}

func (x *ProjectToken) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *ProjectToken) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *ProjectToken) GetGaeRequestId() string {
	if x != nil {
		return x.GaeRequestId
	}
	return ""
}

func (x *ProjectToken) GetAuthDbRev() int64 {
	if x != nil {
		return x.AuthDbRev
	}
	return 0
}

// Issued service account tokens.
type ServiceAccountToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// First 16 bytes of SHA256 of the token body, hex-encoded.
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// The kind of the token requested (OAuth2 access token or ID token).
	Kind v1.ServiceAccountTokenKind `protobuf:"varint,2,opt,name=kind,proto3,enum=tokenserver.minter.ServiceAccountTokenKind" json:"kind,omitempty"`
	// Service account email the luci service wants to act as.
	ServiceAccount string `protobuf:"bytes,3,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// LUCI realm used to authorize the call.
	Realm string `protobuf:"bytes,4,opt,name=realm,proto3" json:"realm,omitempty"`
	// Requested OAuth scopes when minting OAuth tokens.
	OauthScopes []string `protobuf:"bytes,5,rep,name=oauth_scopes,json=oauthScopes,proto3" json:"oauth_scopes,omitempty"`
	// Requested audience when minting ID tokens.
	IdTokenAudience string `protobuf:"bytes,6,opt,name=id_token_audience,json=idTokenAudience,proto3" json:"id_token_audience,omitempty"`
	// Identity used to authorize the call.
	RequestIdentity string `protobuf:"bytes,7,opt,name=request_identity,json=requestIdentity,proto3" json:"request_identity,omitempty"`
	// Identity of a service that made the RPC.
	PeerIdentity string `protobuf:"bytes,8,opt,name=peer_identity,json=peerIdentity,proto3" json:"peer_identity,omitempty"`
	// When this request happened.
	RequestedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=requested_at,json=requestedAt,proto3" json:"requested_at,omitempty"`
	// When the token expires.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Arbitrary key:value pairs provided by the caller.
	AuditTags []string `protobuf:"bytes,11,rep,name=audit_tags,json=auditTags,proto3" json:"audit_tags,omitempty"`
	// Revision of the luci-config repo with project_owned_accounts.cfg.
	ConfigRev string `protobuf:"bytes,12,opt,name=config_rev,json=configRev,proto3" json:"config_rev,omitempty"`
	// IP address of the caller.
	PeerIp string `protobuf:"bytes,13,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	// Identifier of the token server GAE app and version.
	ServiceVersion string `protobuf:"bytes,14,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	// ID of the GAE request that handled the call.
	GaeRequestId string `protobuf:"bytes,15,opt,name=gae_request_id,json=gaeRequestId,proto3" json:"gae_request_id,omitempty"`
	// Revision of the authorization database used to authorize this call.
	AuthDbRev     int64 `protobuf:"varint,16,opt,name=auth_db_rev,json=authDbRev,proto3" json:"auth_db_rev,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceAccountToken) Reset() {
	*x = ServiceAccountToken{}
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceAccountToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccountToken) ProtoMessage() {}

func (x *ServiceAccountToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccountToken.ProtoReflect.Descriptor instead.
func (*ServiceAccountToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceAccountToken) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *ServiceAccountToken) GetKind() v1.ServiceAccountTokenKind {
	if x != nil {
		return x.Kind
	}
	return v1.ServiceAccountTokenKind(0)
}

func (x *ServiceAccountToken) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ServiceAccountToken) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *ServiceAccountToken) GetOauthScopes() []string {
	if x != nil {
		return x.OauthScopes
	}
	return nil
}

func (x *ServiceAccountToken) GetIdTokenAudience() string {
	if x != nil {
		return x.IdTokenAudience
	}
	return ""
}

func (x *ServiceAccountToken) GetRequestIdentity() string {
	if x != nil {
		return x.RequestIdentity
	}
	return ""
}

func (x *ServiceAccountToken) GetPeerIdentity() string {
	if x != nil {
		return x.PeerIdentity
	}
	return ""
}

func (x *ServiceAccountToken) GetRequestedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestedAt
	}
	return nil
}

func (x *ServiceAccountToken) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *ServiceAccountToken) GetAuditTags() []string {
	if x != nil {
		return x.AuditTags
	}
	return nil
}

func (x *ServiceAccountToken) GetConfigRev() string {
	if x != nil {
		return x.ConfigRev
	}
	return ""
}

func (x *ServiceAccountToken) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *ServiceAccountToken) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *ServiceAccountToken) GetGaeRequestId() string {
	if x != nil {
		return x.GaeRequestId
	}
	return ""
}

func (x *ServiceAccountToken) GetAuthDbRev() int64 {
	if x != nil {
		return x.AuthDbRev
	}
	return 0
}

var File_go_chromium_org_luci_tokenserver_api_bq_bq_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDesc = string([]byte{
	0x0a, 0x30, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x71, 0x2f, 0x62, 0x71, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x62, 0x71, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x05, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x37,
	0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65,
	0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x76, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67,
	0x61, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x44, 0x62, 0x52, 0x65, 0x76, 0x22, 0xbf, 0x04, 0x0a, 0x0c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x46, 0x71, 0x64,
	0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x63,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72,
	0x65, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x61, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xec, 0x03,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x75, 0x63, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x75, 0x63, 0x69, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x61, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x62, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x44, 0x62, 0x52, 0x65, 0x76, 0x22, 0x97, 0x05, 0x0a,
	0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x76, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64,
	0x62, 0x5f, 0x72, 0x65, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x44, 0x62, 0x52, 0x65, 0x76, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x71, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescData []byte
)

func file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDesc), len(file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDescData
}

var file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_goTypes = []any{
	(*DelegationToken)(nil),         // 0: tokenserver.bq.DelegationToken
	(*MachineToken)(nil),            // 1: tokenserver.bq.MachineToken
	(*ProjectToken)(nil),            // 2: tokenserver.bq.ProjectToken
	(*ServiceAccountToken)(nil),     // 3: tokenserver.bq.ServiceAccountToken
	(messages.Subtoken_Kind)(0),     // 4: messages.Subtoken.Kind
	(*timestamppb.Timestamp)(nil),   // 5: google.protobuf.Timestamp
	(api.MachineTokenType)(0),       // 6: tokenserver.MachineTokenType
	(v1.SignatureAlgorithm)(0),      // 7: tokenserver.minter.SignatureAlgorithm
	(v1.ServiceAccountTokenKind)(0), // 8: tokenserver.minter.ServiceAccountTokenKind
}
var file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_depIdxs = []int32{
	4,  // 0: tokenserver.bq.DelegationToken.token_kind:type_name -> messages.Subtoken.Kind
	5,  // 1: tokenserver.bq.DelegationToken.issued_at:type_name -> google.protobuf.Timestamp
	5,  // 2: tokenserver.bq.DelegationToken.expiration:type_name -> google.protobuf.Timestamp
	6,  // 3: tokenserver.bq.MachineToken.token_type:type_name -> tokenserver.MachineTokenType
	5,  // 4: tokenserver.bq.MachineToken.issued_at:type_name -> google.protobuf.Timestamp
	5,  // 5: tokenserver.bq.MachineToken.expiration:type_name -> google.protobuf.Timestamp
	7,  // 6: tokenserver.bq.MachineToken.signature_algorithm:type_name -> tokenserver.minter.SignatureAlgorithm
	5,  // 7: tokenserver.bq.ProjectToken.requested_at:type_name -> google.protobuf.Timestamp
	5,  // 8: tokenserver.bq.ProjectToken.expiration:type_name -> google.protobuf.Timestamp
	8,  // 9: tokenserver.bq.ServiceAccountToken.kind:type_name -> tokenserver.minter.ServiceAccountTokenKind
	5,  // 10: tokenserver.bq.ServiceAccountToken.requested_at:type_name -> google.protobuf.Timestamp
	5,  // 11: tokenserver.bq.ServiceAccountToken.expiration:type_name -> google.protobuf.Timestamp
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_init() }
func file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_init() {
	if File_go_chromium_org_luci_tokenserver_api_bq_bq_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDesc), len(file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_tokenserver_api_bq_bq_proto = out.File
	file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_goTypes = nil
	file_go_chromium_org_luci_tokenserver_api_bq_bq_proto_depIdxs = nil
}
