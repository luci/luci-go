// Copyright 2020 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Messages that describe internal representation of LUCI Realms.
//
// They are produced and distributed by the LUCI Auth service based on a high
// level representation fetched via LUCI Config from realms.cfg project config
// files. See realms_config.proto in the auth service source code for schema.
//
// Comments in this file is the authoritative documentation of how LUCI services
// should interpret realms when making authorization decisions.

syntax = "proto3";

package components.auth.realms;

option go_package = "go.chromium.org/luci/server/auth/service/protocol;protocol";


// Realms is a complete definition of all known permissions and realms in a LUCI
// deployment.
//
// It is generated and distributed across all LUCI services (as part of the
// AuthDB) by the LUCI Auth service.
//
// Note that this is a denormalized internal representation of realms which is
// derived from the high level user-facing representation supplied via multiple
// realms.cfg config files in various config sets. See comments for Realm
// message for details.
//
// The internal representation doesn't have a notion of roles or realm
// inheritance. These concepts are handled by the LUCI Auth service and
// individual downstream services generally **must not care** how it works.
// Instead they should follow the rules outlined in comments in this file (or
// equivalently just use the Realms API exposed by the LUCI auth libraries).
//
// Next ID: 5.
message Realms {
  // API version is incremented whenever the semantic meaning of Realms message
  // changes in some backward incompatible way (e.g. some message grows a new
  // field that *must* be checked by services). LUCI services must reject Realms
  // messages that have API versions they don't recognize. It is a precaution
  // against misinterpreting the realms configuration.
  //
  // The current version is 1.
  int64 api_version = 1;

  // List of all possible permissions in alphabetical order.
  //
  // Acts as a universal set of permissions in Binding messages.
  //
  // Services may also use this field to check that permissions they are about
  // to use are actually known to the LUCI auth system. This is useful for
  // debugging when adding or removing permissions.
  //
  // See Permission message for more details.
  repeated Permission permissions = 2;

  // List of all conditions referenced by bindings.
  //
  // Bindings reference them by their zero-based index in this list.
  repeated Condition conditions = 4;

  // List of all registered realms in alphabetical order.
  //
  // See Realm message for more details.
  repeated Realm realms = 3;
}


// Permission is a symbol that has form "<service>.<subject>.<verb>", which
// describes some elementary action ("<verb>") that can be done to some category
// of resources ("<subject>"), managed by some particular kind of LUCI service
// ("<service>").
//
// Within each individual realm (see Realm message), a principal (such as an end
// user or a service account) can have zero or more permissions that describe
// what this user can actually do to resources belonging to the realm. See Realm
// message for the definition of what "belonging to the realm" means.
//
// Examples of permissions:
//   * buildbucket.build.create
//   * swarming.pool.listBots
//   * swarming.task.cancel
//
// Note that permission names are composed of generic terms, not some specific
// IDs of service deployments or resources. Generally, using a concrete
// permission name in the service's source code as a constant should look
// natural.
//
// A permission can be marked as "internal". Internal permissions are not
// allowed to appear in custom roles in user-defined project realms.cfg files.
// They can be used in internal realms (defined in realms.cfg in the LUCI Auth
// service config set, see comments for Realm message) and they are added to
// some predefined roles by the LUCI Auth service itself. They are used to setup
// ACLs for internal interactions between LUCI components.
//
// Each individual LUCI service should document what permissions it checks and
// when. It becomes a part of service's public API. Usually services should
// check only permissions of resources they own (e.g. "<service>.<subject>.*"),
// but in exceptional cases they may also check permissions intended for other
// services. This is primarily useful for services that somehow "proxy" access
// to resources.
//
// Field `permissions` in Realms message describes all permissions known to the
// LUCI Auth service. The LUCI Auth service guarantees that all permissions
// mentioned in all realms (in `realms` field) are among `permissions` set.
//
// If a LUCI service checks a permission that is no longer (or not yet) listed
// in the `permissions` set, the check should succeed with "no permission"
// result, and produce a warning in service's logs.
message Permission {
  string name = 1;  // "<service>.<subject>.<verb>"
  bool internal = 2; // internal permissions cannot be used in project realms
}


// Condition defines a predicate that takes a set of `attribute = value` pairs
// with a context of a particular permission check and returns True if the
// binding guarded by this condition should be respected.
//
// When a service checks a permission, it should pass to the authorization
// library a string-valued dictionary of attributes that describe the context
// of the permission check. It may contain things like the name of the resource
// being accessed, or parameters of the incoming RPC request that triggered
// the check.
//
// A list of available attributes and meaning of their values depends on
// the permission being checked and the service should document it in its API
// documentation.
message Condition {
  // AttributeRestriction checks that the attributes set (as a set of key-value
  // pairs) contains a particular (attribute, value) pair. Checked values are
  // given as a list. The check succeeds if ANY of (attribute, value) pairs are
  // present: `any((attribute, value) in attrs for value in values)`.
  message AttributeRestriction {
    string attribute = 1;
    repeated string values = 2;  // sorted alphabetically, no dups
  }

  oneof op {
    AttributeRestriction restrict = 1;
  }
}


// Realm is a named collection of (<principal>, <permission>) pairs.
//
// Realms are primarily defined in realms.cfg project config files. Such realms
// are called project realms. They are controlled by respective **project**
// owners and used to define ACLs for resources owned by these projects.
//
// There's a special set of realms (called internal realms or, sometimes, global
// realms) that are defined in realms.cfg in the LUCI Auth service config set.
// They are controlled by LUCI **deployment** owners and used to define ACLs for
// resources that are associated with LUCI deployment or LUCI services (and do
// not belong to any particular LUCI project). They are also allowed to use
// internal roles and permissions to define administrative-level ACLs (i.e. ACLs
// that transcend project boundaries).
//
// A full realm name has form "<project>:<realm>", where:
//   * "<project>" is a name of the LUCI project that defined the realm or
//     literal "@internal" for internal realms.
//   * "<realm>" is a name of the realm from a realms.cfg config file. This name
//     is also known as a project-scoped name, since it makes sense only within
//     a scope of some concrete LUCI project.
//
// A LUCI resource can point to exactly one realm by referring to its full
// "<project>:<realm>" name. Such reference can either be calculated on the fly
// from other resource's properties, or be stored alongside the resource's data.
// We say that such resource "belongs to the realm" or "lives in the realm" or
// is just "in the realm". We also say that such resource belongs to the project
// "<project>". The corresponding Realm message then describes who can do what
// to the resource.
//
// The logic of how resources get assigned to realms is a part of the public API
// of the service that owns resources. Some services may use a static realm
// assignment via project configuration files, others may do it dynamically by
// accepting a realm when a resource is created via an RPC.
//
// There are three special realms (all optional) that a project can have:
// "<project>:@root", "<project>:@legacy" and "<project>:@project".
//
// The root realm should be used as a fallback when an existing resource points
// to a realm that doesn't exist. Without the root realm, such resources become
// effectively inaccessible and this may be undesirable. The root realm usually
// contains only administrative-level bindings.
//
// The legacy realm should be used for legacy resources created before the
// realms mechanism was introduced in case the service can't figure out a more
// appropriate realm based on resource's properties. The service must clearly
// document when and how it uses the legacy realm (if it uses it at all).
//
// The project realm should be used as the realm for 'project global' resources,
// for example, the project configuration itself, or derivations thereof. Some
// LUCI services may use bindings in this realm to allow federation of
// administration responsibilities to the project (rather than relying on
// exclusively LUCI service administrators).
//
// The actual list of (<principal>, <permission>) pairs is defined via a list of
// bindings, where each binding basically says "all these principals have all
// these permissions". In other words, each binding defines some subset of
// permissions and the overall realm permissions is a union of all such subsets.
// Subsets defined by bindings may potentially intersect or be empty.
//
// The LUCI Auth service constructs bindings by interpreting realms.cfg files
// using some set of rules. Individual LUCI services **must not care** about
// what these rules really are. They should use only the end result (in the form
// of bindings) provided in the Realm message. This allows to decouple the
// high-level user-facing language for defining permissions from the
// implementation of each individual LUCI service that checks permissions.
//
// A realm can also carry some small amount of data (usually auth related) that
// LUCI services use when dealing with this realm. It should be something that
// all (or at least more than one) LUCI services use. Configuration specific to
// a single service should be in this service's project config instead.
message Realm {
  // Name of the realm as "<project>:<realm>" string, where:
  //   "<project>" matches `^([a-z0-9\-_]{1,100}|@internal)$`.
  //   "<realm>" matches `^([a-z0-9_\.\-/]{1,400}|@root|@legacy|@project)$`.
  string name = 1;

  // A list of bindings in lexicographical order of their `permissions` fields.
  repeated Binding bindings = 2;

  // Associated data extracted from the realms.cfg project config.
  RealmData data = 3;
}


// Binding assigns all specified permissions to all specified principals.
message Binding {
  // Permissions in increasing order of their indexes.
  //
  // This set is a subset of `permissions` in the Realms message. Each element
  // is an index of a permission in the `permissions` list in the Realms
  // message.
  //
  // These indexes are not stable across different copies of Realms message.
  // They must not be stored or processed in isolation from the containing
  // Realms message.
  repeated uint32 permissions = 1;

  // A set of principals to grant all above permissions to.
  //
  // Each entry can either be an identity string (like "user:<email>") or a
  // LUCI group reference "group:<name>".
  //
  // Ordered alphabetically.
  repeated string principals = 2;

  // Conditions in increasing order of their indexes.
  //
  // Each element is an index of a condition in the `conditions` list in the
  // Realms message. These conditions are ANDed together. See the public API for
  // details of the semantics.
  //
  // These indexes are not stable across different copies of Realms message.
  // They must not be stored or processed in isolation from the containing
  // Realms message.
  repeated uint32 conditions = 3;
}


// RealmData is semi-arbitrary non-ACL data extracted from configs (the
// realms.cfg project config and global service configs) and attached to
// a realm.
message RealmData {
  // Used only during Realms migration to gradually roll out the enforcement.
  repeated string enforce_in_service = 1;

  // An email of Cloud Service account that LUCI uses to make calls as, if any.
  //
  // Set only on the "@root" realm.
  string project_scoped_account = 2;

  // A Cloud Project ID number to bill calls to, if any.
  //
  // Set only on the "@root" realm.
  uint64 billing_cloud_project_id = 3;
}
