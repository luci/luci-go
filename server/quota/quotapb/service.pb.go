// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/server/quota/quotapb/service.proto

package quotapb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpResult_AccountStatus int32

const (
	// This Op updated an existing account.
	OpResult_ALREADY_EXISTS OpResult_AccountStatus = 0
	// This Op resulted in the creation of an account.
	OpResult_CREATED OpResult_AccountStatus = 1
	// This Op found an existing, unreadable, account, and the account was
	// recreated (as if it were missing).
	//
	// Note that this is supposed to be a rare condition, and will be monitored
	// on the server side. If seen at elevated rates, this is likely alertable.
	OpResult_RECREATED OpResult_AccountStatus = 2
)

// Enum value maps for OpResult_AccountStatus.
var (
	OpResult_AccountStatus_name = map[int32]string{
		0: "ALREADY_EXISTS",
		1: "CREATED",
		2: "RECREATED",
	}
	OpResult_AccountStatus_value = map[string]int32{
		"ALREADY_EXISTS": 0,
		"CREATED":        1,
		"RECREATED":      2,
	}
)

func (x OpResult_AccountStatus) Enum() *OpResult_AccountStatus {
	p := new(OpResult_AccountStatus)
	*p = x
	return p
}

func (x OpResult_AccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResult_AccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_enumTypes[0].Descriptor()
}

func (OpResult_AccountStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_server_quota_quotapb_service_proto_enumTypes[0]
}

func (x OpResult_AccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResult_AccountStatus.Descriptor instead.
func (OpResult_AccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{3, 0}
}

type OpResult_OpStatus int32

const (
	// The Operation was successful.
	OpResult_SUCCESS OpResult_OpStatus = 0
	// There was an otherwise-unclassified error while applying this operation.
	OpResult_ERR_UNKNOWN OpResult_OpStatus = 1
	// The Op failed because it would bring the Account balance above the policy
	// limit.
	OpResult_ERR_OVERFLOW OpResult_OpStatus = 2
	// The Op failed because it would bring the Account balance below 0.
	OpResult_ERR_UNDERFLOW OpResult_OpStatus = 3
	// The Op failed because it referred to a Policy which doesn't exist.
	OpResult_ERR_UNKNOWN_POLICY OpResult_OpStatus = 4
	// The Op failed because it applied to a non-existant Account and no Policy
	// was given.
	OpResult_ERR_MISSING_ACCOUNT OpResult_OpStatus = 5
	// The Op failed because it used relative_to=DEFAULT or LIMIT, but the Account
	// had no Policy attached to it, or if the Op did not include the
	// IGNORE_POLICY_BOUNDS option.
	OpResult_ERR_POLICY_REQUIRED OpResult_OpStatus = 6
)

// Enum value maps for OpResult_OpStatus.
var (
	OpResult_OpStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "ERR_UNKNOWN",
		2: "ERR_OVERFLOW",
		3: "ERR_UNDERFLOW",
		4: "ERR_UNKNOWN_POLICY",
		5: "ERR_MISSING_ACCOUNT",
		6: "ERR_POLICY_REQUIRED",
	}
	OpResult_OpStatus_value = map[string]int32{
		"SUCCESS":             0,
		"ERR_UNKNOWN":         1,
		"ERR_OVERFLOW":        2,
		"ERR_UNDERFLOW":       3,
		"ERR_UNKNOWN_POLICY":  4,
		"ERR_MISSING_ACCOUNT": 5,
		"ERR_POLICY_REQUIRED": 6,
	}
)

func (x OpResult_OpStatus) Enum() *OpResult_OpStatus {
	p := new(OpResult_OpStatus)
	*p = x
	return p
}

func (x OpResult_OpStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpResult_OpStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_enumTypes[1].Descriptor()
}

func (OpResult_OpStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_server_quota_quotapb_service_proto_enumTypes[1]
}

func (x OpResult_OpStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpResult_OpStatus.Descriptor instead.
func (OpResult_OpStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{3, 1}
}

// A GetAccountsRequest is a request to fetch multiple Account entries.
//
// You must have the `quota.accounts.read` permission in the realm of all the
// indicated accounts.
type GetAccountsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of specific accounts to fetch.
	Account       []*AccountID `protobuf:"bytes,1,rep,name=account,proto3" json:"account,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountsRequest) Reset() {
	*x = GetAccountsRequest{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsRequest) ProtoMessage() {}

func (x *GetAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsRequest.ProtoReflect.Descriptor instead.
func (*GetAccountsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetAccountsRequest) GetAccount() []*AccountID {
	if x != nil {
		return x.Account
	}
	return nil
}

// GetAccountsResponse is the response to GetAccounts()
type GetAccountsResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Accounts      []*GetAccountsResponse_AccountState `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAccountsResponse) Reset() {
	*x = GetAccountsResponse{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsResponse) ProtoMessage() {}

func (x *GetAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsResponse.ProtoReflect.Descriptor instead.
func (*GetAccountsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetAccountsResponse) GetAccounts() []*GetAccountsResponse_AccountState {
	if x != nil {
		return x.Accounts
	}
	return nil
}

// ApplyOpsRequest allows a number of quota operations to be performed atomically.
type ApplyOpsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If provided, the service will de-duplicate the request based on this ID,
	// namespaced to the calling user.
	//
	// Once this ApplyOpsRequest successfully applies once, futher ApplyOpsRequests
	// within `request_id_ttl` will immediately return as successful.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Must be set, and positive, if request_id is set.
	//
	// If this is omitted, the request_id_ttl is 2 hours.
	//
	// If this is zero, the request_id_ttl is infinite.
	RequestIdTtl *durationpb.Duration `protobuf:"bytes,2,opt,name=request_id_ttl,json=requestIdTtl,proto3" json:"request_id_ttl,omitempty"`
	// The operations to apply.
	Ops           []*Op `protobuf:"bytes,3,rep,name=ops,proto3" json:"ops,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyOpsRequest) Reset() {
	*x = ApplyOpsRequest{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyOpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOpsRequest) ProtoMessage() {}

func (x *ApplyOpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOpsRequest.ProtoReflect.Descriptor instead.
func (*ApplyOpsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{2}
}

func (x *ApplyOpsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ApplyOpsRequest) GetRequestIdTtl() *durationpb.Duration {
	if x != nil {
		return x.RequestIdTtl
	}
	return nil
}

func (x *ApplyOpsRequest) GetOps() []*Op {
	if x != nil {
		return x.Ops
	}
	return nil
}

// OpResult contains the summary of applying a single Op as part of an
// ApplyOpsRequest.
//
// Note that `previous_balance` and `balance` are first in this message to make
// the success-case encoding of an OpResult with non-zero balances as compact as
// possible (will be represented by a 2-number msgpack array, rather than
// a msgpack object).
type OpResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This will be set to the balance of the Account after the SUCCESS-ful
	// operation.
	NewBalance int64 `protobuf:"varint,1,opt,name=new_balance,json=newBalance,proto3" json:"new_balance,omitempty"`
	// If the account already existed, this will be set to the balance observed at
	// the start of this Operation (after applying refill under existing policy,
	// if the account had one set). If the account did not previously exist, this
	// will be 0, even if the Policy in this Op would set a default value.
	//
	// Note that if the same account is used for multiple operations in the same
	// RPC, for the N'th operation on account X, this will have the N-1'th
	// `balance` value.
	PreviousBalance int64                  `protobuf:"varint,2,opt,name=previous_balance,json=previousBalance,proto3" json:"previous_balance,omitempty"`
	AccountStatus   OpResult_AccountStatus `protobuf:"varint,3,opt,name=account_status,json=accountStatus,proto3,enum=go.chromium.org.luci.server.quota.quotapb.OpResult_AccountStatus" json:"account_status,omitempty"`
	// Status for this operation.
	Status OpResult_OpStatus `protobuf:"varint,4,opt,name=status,proto3,enum=go.chromium.org.luci.server.quota.quotapb.OpResult_OpStatus" json:"status,omitempty"`
	// Extra context for `status` as english text. Usually unset, but will be most
	// frequently set for UNKNOWN errors.
	StatusMsg string `protobuf:"bytes,5,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	// When WITH_POLICY_LIMIT_DELTA option is used, previous_balance_adjusted is
	// set to the previous balance + delta (where delta is the difference between
	// the new Policy.limit and the old Policy.limit). If WITH_POLICY_LIMIT_DELTA
	// is not set or if there is no change in policy_ref, or if the account has no
	// existing policy_ref, previous_balance_adjusted is same as previous_balance.
	PreviousBalanceAdjusted int64 `protobuf:"varint,6,opt,name=previous_balance_adjusted,json=previousBalanceAdjusted,proto3" json:"previous_balance_adjusted,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *OpResult) Reset() {
	*x = OpResult{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpResult) ProtoMessage() {}

func (x *OpResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpResult.ProtoReflect.Descriptor instead.
func (*OpResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{3}
}

func (x *OpResult) GetNewBalance() int64 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

func (x *OpResult) GetPreviousBalance() int64 {
	if x != nil {
		return x.PreviousBalance
	}
	return 0
}

func (x *OpResult) GetAccountStatus() OpResult_AccountStatus {
	if x != nil {
		return x.AccountStatus
	}
	return OpResult_ALREADY_EXISTS
}

func (x *OpResult) GetStatus() OpResult_OpStatus {
	if x != nil {
		return x.Status
	}
	return OpResult_SUCCESS
}

func (x *OpResult) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *OpResult) GetPreviousBalanceAdjusted() int64 {
	if x != nil {
		return x.PreviousBalanceAdjusted
	}
	return 0
}

type ApplyOpsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is a sequence of results, one per op in the original ApplyOpsRequest.
	//
	// NOTE: The caller must observe the `status` field of each result in order to
	// determine if this request was successful.
	//
	// If any result contains a non-SUCCESS `status`, NONE of the operations have
	// been saved.
	Results []*OpResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// The time this ApplyOpsResponse was created, according to the quota state.
	// Note that for deduplicated requests, this could be fairly old (assuming the
	// original request was made a while ago).
	OriginallySet *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=originally_set,json=originallySet,proto3" json:"originally_set,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyOpsResponse) Reset() {
	*x = ApplyOpsResponse{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyOpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyOpsResponse) ProtoMessage() {}

func (x *ApplyOpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyOpsResponse.ProtoReflect.Descriptor instead.
func (*ApplyOpsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{4}
}

func (x *ApplyOpsResponse) GetResults() []*OpResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ApplyOpsResponse) GetOriginallySet() *timestamppb.Timestamp {
	if x != nil {
		return x.OriginallySet
	}
	return nil
}

type WritePolicyConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If id.version_kind != Manual, id.version will be ignored.
	Id            *PolicyConfigID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyConfig  *PolicyConfig   `protobuf:"bytes,2,opt,name=policy_config,json=policyConfig,proto3" json:"policy_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WritePolicyConfigRequest) Reset() {
	*x = WritePolicyConfigRequest{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WritePolicyConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePolicyConfigRequest) ProtoMessage() {}

func (x *WritePolicyConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePolicyConfigRequest.ProtoReflect.Descriptor instead.
func (*WritePolicyConfigRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{5}
}

func (x *WritePolicyConfigRequest) GetId() *PolicyConfigID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WritePolicyConfigRequest) GetPolicyConfig() *PolicyConfig {
	if x != nil {
		return x.PolicyConfig
	}
	return nil
}

type WritePolicyConfigResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Returns the computed hash version (or responds with the input `version` if
	// using an application-specific version)
	Version       string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WritePolicyConfigResponse) Reset() {
	*x = WritePolicyConfigResponse{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WritePolicyConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePolicyConfigResponse) ProtoMessage() {}

func (x *WritePolicyConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePolicyConfigResponse.ProtoReflect.Descriptor instead.
func (*WritePolicyConfigResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{6}
}

func (x *WritePolicyConfigResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetAccountsResponse_AccountState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *AccountID             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The current account, if the account exists, unset otherwise.
	Account *Account `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// Contains the effective balance for the account, given its current
	// refill policy and updated_ts.
	ProjectedBalance int64 `protobuf:"varint,3,opt,name=projected_balance,json=projectedBalance,proto3" json:"projected_balance,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetAccountsResponse_AccountState) Reset() {
	*x = GetAccountsResponse_AccountState{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAccountsResponse_AccountState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountsResponse_AccountState) ProtoMessage() {}

func (x *GetAccountsResponse_AccountState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountsResponse_AccountState.ProtoReflect.Descriptor instead.
func (*GetAccountsResponse_AccountState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetAccountsResponse_AccountState) GetId() *AccountID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetAccountsResponse_AccountState) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *GetAccountsResponse_AccountState) GetProjectedBalance() int64 {
	if x != nil {
		return x.ProjectedBalance
	}
	return 0
}

var File_go_chromium_org_luci_server_quota_quotapb_service_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDesc = string([]byte{
	0x0a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x70, 0x62, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x70, 0x62, 0x2f, 0x69, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2f, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xda, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a,
	0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0xd9, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04,
	0x08, 0x00, 0x2a, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x54,
	0x74, 0x6c, 0x12, 0x3f, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x52, 0x03,
	0x6f, 0x70, 0x73, 0x22, 0xcc, 0x04, 0x0a, 0x08, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62,
	0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4f, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x97, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x46,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x52, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x06, 0x22, 0xa4, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x53, 0x65, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x18, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x44, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x66, 0x0a, 0x0d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x35, 0x0a, 0x19, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xbd, 0x03, 0x0a, 0x05, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x73,
	0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x43, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescData []byte
)

func file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDesc), len(file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDescData
}

var file_go_chromium_org_luci_server_quota_quotapb_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_go_chromium_org_luci_server_quota_quotapb_service_proto_goTypes = []any{
	(OpResult_AccountStatus)(0),              // 0: go.chromium.org.luci.server.quota.quotapb.OpResult.AccountStatus
	(OpResult_OpStatus)(0),                   // 1: go.chromium.org.luci.server.quota.quotapb.OpResult.OpStatus
	(*GetAccountsRequest)(nil),               // 2: go.chromium.org.luci.server.quota.quotapb.GetAccountsRequest
	(*GetAccountsResponse)(nil),              // 3: go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse
	(*ApplyOpsRequest)(nil),                  // 4: go.chromium.org.luci.server.quota.quotapb.ApplyOpsRequest
	(*OpResult)(nil),                         // 5: go.chromium.org.luci.server.quota.quotapb.OpResult
	(*ApplyOpsResponse)(nil),                 // 6: go.chromium.org.luci.server.quota.quotapb.ApplyOpsResponse
	(*WritePolicyConfigRequest)(nil),         // 7: go.chromium.org.luci.server.quota.quotapb.WritePolicyConfigRequest
	(*WritePolicyConfigResponse)(nil),        // 8: go.chromium.org.luci.server.quota.quotapb.WritePolicyConfigResponse
	(*GetAccountsResponse_AccountState)(nil), // 9: go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse.AccountState
	(*AccountID)(nil),                        // 10: go.chromium.org.luci.server.quota.quotapb.AccountID
	(*durationpb.Duration)(nil),              // 11: google.protobuf.Duration
	(*Op)(nil),                               // 12: go.chromium.org.luci.server.quota.quotapb.Op
	(*timestamppb.Timestamp)(nil),            // 13: google.protobuf.Timestamp
	(*PolicyConfigID)(nil),                   // 14: go.chromium.org.luci.server.quota.quotapb.PolicyConfigID
	(*PolicyConfig)(nil),                     // 15: go.chromium.org.luci.server.quota.quotapb.PolicyConfig
	(*Account)(nil),                          // 16: go.chromium.org.luci.server.quota.quotapb.Account
}
var file_go_chromium_org_luci_server_quota_quotapb_service_proto_depIdxs = []int32{
	10, // 0: go.chromium.org.luci.server.quota.quotapb.GetAccountsRequest.account:type_name -> go.chromium.org.luci.server.quota.quotapb.AccountID
	9,  // 1: go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse.accounts:type_name -> go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse.AccountState
	11, // 2: go.chromium.org.luci.server.quota.quotapb.ApplyOpsRequest.request_id_ttl:type_name -> google.protobuf.Duration
	12, // 3: go.chromium.org.luci.server.quota.quotapb.ApplyOpsRequest.ops:type_name -> go.chromium.org.luci.server.quota.quotapb.Op
	0,  // 4: go.chromium.org.luci.server.quota.quotapb.OpResult.account_status:type_name -> go.chromium.org.luci.server.quota.quotapb.OpResult.AccountStatus
	1,  // 5: go.chromium.org.luci.server.quota.quotapb.OpResult.status:type_name -> go.chromium.org.luci.server.quota.quotapb.OpResult.OpStatus
	5,  // 6: go.chromium.org.luci.server.quota.quotapb.ApplyOpsResponse.results:type_name -> go.chromium.org.luci.server.quota.quotapb.OpResult
	13, // 7: go.chromium.org.luci.server.quota.quotapb.ApplyOpsResponse.originally_set:type_name -> google.protobuf.Timestamp
	14, // 8: go.chromium.org.luci.server.quota.quotapb.WritePolicyConfigRequest.id:type_name -> go.chromium.org.luci.server.quota.quotapb.PolicyConfigID
	15, // 9: go.chromium.org.luci.server.quota.quotapb.WritePolicyConfigRequest.policy_config:type_name -> go.chromium.org.luci.server.quota.quotapb.PolicyConfig
	10, // 10: go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse.AccountState.id:type_name -> go.chromium.org.luci.server.quota.quotapb.AccountID
	16, // 11: go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse.AccountState.account:type_name -> go.chromium.org.luci.server.quota.quotapb.Account
	2,  // 12: go.chromium.org.luci.server.quota.quotapb.Admin.GetAccounts:input_type -> go.chromium.org.luci.server.quota.quotapb.GetAccountsRequest
	4,  // 13: go.chromium.org.luci.server.quota.quotapb.Admin.ApplyOps:input_type -> go.chromium.org.luci.server.quota.quotapb.ApplyOpsRequest
	7,  // 14: go.chromium.org.luci.server.quota.quotapb.Admin.WritePolicyConfig:input_type -> go.chromium.org.luci.server.quota.quotapb.WritePolicyConfigRequest
	3,  // 15: go.chromium.org.luci.server.quota.quotapb.Admin.GetAccounts:output_type -> go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse
	6,  // 16: go.chromium.org.luci.server.quota.quotapb.Admin.ApplyOps:output_type -> go.chromium.org.luci.server.quota.quotapb.ApplyOpsResponse
	8,  // 17: go.chromium.org.luci.server.quota.quotapb.Admin.WritePolicyConfig:output_type -> go.chromium.org.luci.server.quota.quotapb.WritePolicyConfigResponse
	15, // [15:18] is the sub-list for method output_type
	12, // [12:15] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_server_quota_quotapb_service_proto_init() }
func file_go_chromium_org_luci_server_quota_quotapb_service_proto_init() {
	if File_go_chromium_org_luci_server_quota_quotapb_service_proto != nil {
		return
	}
	file_go_chromium_org_luci_server_quota_quotapb_account_proto_init()
	file_go_chromium_org_luci_server_quota_quotapb_ids_proto_init()
	file_go_chromium_org_luci_server_quota_quotapb_op_proto_init()
	file_go_chromium_org_luci_server_quota_quotapb_policy_config_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDesc), len(file_go_chromium_org_luci_server_quota_quotapb_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_server_quota_quotapb_service_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_server_quota_quotapb_service_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_server_quota_quotapb_service_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_server_quota_quotapb_service_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_server_quota_quotapb_service_proto = out.File
	file_go_chromium_org_luci_server_quota_quotapb_service_proto_goTypes = nil
	file_go_chromium_org_luci_server_quota_quotapb_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// GetAccounts returns the indicated Accounts.
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	// ApplyOps updates the available resources with the provided operations.
	ApplyOps(ctx context.Context, in *ApplyOpsRequest, opts ...grpc.CallOption) (*ApplyOpsResponse, error)
	// WritePolicyConfig ingests the given PolicyConfig into the database.
	WritePolicyConfig(ctx context.Context, in *WritePolicyConfigRequest, opts ...grpc.CallOption) (*WritePolicyConfigResponse, error)
}
type adminPRPCClient struct {
	client *prpc.Client
}

func NewAdminPRPCClient(client *prpc.Client) AdminClient {
	return &adminPRPCClient{client}
}

func (c *adminPRPCClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.client.Call(ctx, "go.chromium.org.luci.server.quota.quotapb.Admin", "GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) ApplyOps(ctx context.Context, in *ApplyOpsRequest, opts ...grpc.CallOption) (*ApplyOpsResponse, error) {
	out := new(ApplyOpsResponse)
	err := c.client.Call(ctx, "go.chromium.org.luci.server.quota.quotapb.Admin", "ApplyOps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminPRPCClient) WritePolicyConfig(ctx context.Context, in *WritePolicyConfigRequest, opts ...grpc.CallOption) (*WritePolicyConfigResponse, error) {
	out := new(WritePolicyConfigResponse)
	err := c.client.Call(ctx, "go.chromium.org.luci.server.quota.quotapb.Admin", "WritePolicyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, "/go.chromium.org.luci.server.quota.quotapb.Admin/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ApplyOps(ctx context.Context, in *ApplyOpsRequest, opts ...grpc.CallOption) (*ApplyOpsResponse, error) {
	out := new(ApplyOpsResponse)
	err := c.cc.Invoke(ctx, "/go.chromium.org.luci.server.quota.quotapb.Admin/ApplyOps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) WritePolicyConfig(ctx context.Context, in *WritePolicyConfigRequest, opts ...grpc.CallOption) (*WritePolicyConfigResponse, error) {
	out := new(WritePolicyConfigResponse)
	err := c.cc.Invoke(ctx, "/go.chromium.org.luci.server.quota.quotapb.Admin/WritePolicyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// GetAccounts returns the indicated Accounts.
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	// ApplyOps updates the available resources with the provided operations.
	ApplyOps(context.Context, *ApplyOpsRequest) (*ApplyOpsResponse, error)
	// WritePolicyConfig ingests the given PolicyConfig into the database.
	WritePolicyConfig(context.Context, *WritePolicyConfigRequest) (*WritePolicyConfigResponse, error)
}

// UnimplementedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (*UnimplementedAdminServer) ApplyOps(context.Context, *ApplyOpsRequest) (*ApplyOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyOps not implemented")
}
func (*UnimplementedAdminServer) WritePolicyConfig(context.Context, *WritePolicyConfigRequest) (*WritePolicyConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePolicyConfig not implemented")
}

func RegisterAdminServer(s prpc.Registrar, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.chromium.org.luci.server.quota.quotapb.Admin/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ApplyOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyOpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ApplyOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.chromium.org.luci.server.quota.quotapb.Admin/ApplyOps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ApplyOps(ctx, req.(*ApplyOpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_WritePolicyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WritePolicyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).WritePolicyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.chromium.org.luci.server.quota.quotapb.Admin/WritePolicyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).WritePolicyConfig(ctx, req.(*WritePolicyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.chromium.org.luci.server.quota.quotapb.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccounts",
			Handler:    _Admin_GetAccounts_Handler,
		},
		{
			MethodName: "ApplyOps",
			Handler:    _Admin_ApplyOps_Handler,
		},
		{
			MethodName: "WritePolicyConfig",
			Handler:    _Admin_WritePolicyConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/server/quota/quotapb/service.proto",
}
