// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/server/quota/quotapb/service.proto

package quotapb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsRequestMultiError, or nil if none found.
func (m *GetAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountsRequestValidationError{
						field:  fmt.Sprintf("Account[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountsRequestValidationError{
						field:  fmt.Sprintf("Account[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountsRequestValidationError{
					field:  fmt.Sprintf("Account[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountsRequestMultiError(errors)
	}

	return nil
}

// GetAccountsRequestMultiError is an error wrapping multiple validation errors
// returned by GetAccountsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsRequestMultiError) AllErrors() []error { return m }

// GetAccountsRequestValidationError is the validation error returned by
// GetAccountsRequest.Validate if the designated constraints aren't met.
type GetAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsRequestValidationError) ErrorName() string {
	return "GetAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsRequestValidationError{}

// Validate checks the field values on GetAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountsResponseMultiError, or nil if none found.
func (m *GetAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountsResponseValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountsResponseValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountsResponseMultiError(errors)
	}

	return nil
}

// GetAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsResponseMultiError) AllErrors() []error { return m }

// GetAccountsResponseValidationError is the validation error returned by
// GetAccountsResponse.Validate if the designated constraints aren't met.
type GetAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsResponseValidationError) ErrorName() string {
	return "GetAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsResponseValidationError{}

// Validate checks the field values on ApplyOpsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplyOpsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyOpsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyOpsRequestMultiError, or nil if none found.
func (m *ApplyOpsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyOpsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if d := m.GetRequestIdTtl(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = ApplyOpsRequestValidationError{
				field:  "RequestIdTtl",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			gt := time.Duration(0*time.Second + 0*time.Nanosecond)

			if dur <= gt {
				err := ApplyOpsRequestValidationError{
					field:  "RequestIdTtl",
					reason: "value must be greater than 0s",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	for idx, item := range m.GetOps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplyOpsRequestValidationError{
						field:  fmt.Sprintf("Ops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplyOpsRequestValidationError{
						field:  fmt.Sprintf("Ops[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyOpsRequestValidationError{
					field:  fmt.Sprintf("Ops[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ApplyOpsRequestMultiError(errors)
	}

	return nil
}

// ApplyOpsRequestMultiError is an error wrapping multiple validation errors
// returned by ApplyOpsRequest.ValidateAll() if the designated constraints
// aren't met.
type ApplyOpsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyOpsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyOpsRequestMultiError) AllErrors() []error { return m }

// ApplyOpsRequestValidationError is the validation error returned by
// ApplyOpsRequest.Validate if the designated constraints aren't met.
type ApplyOpsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyOpsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyOpsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyOpsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyOpsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyOpsRequestValidationError) ErrorName() string { return "ApplyOpsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApplyOpsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyOpsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyOpsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyOpsRequestValidationError{}

// Validate checks the field values on OpResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OpResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OpResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OpResultMultiError, or nil
// if none found.
func (m *OpResult) ValidateAll() error {
	return m.validate(true)
}

func (m *OpResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewBalance

	// no validation rules for PreviousBalance

	// no validation rules for AccountStatus

	// no validation rules for Status

	// no validation rules for StatusMsg

	// no validation rules for PreviousBalanceAdjusted

	if len(errors) > 0 {
		return OpResultMultiError(errors)
	}

	return nil
}

// OpResultMultiError is an error wrapping multiple validation errors returned
// by OpResult.ValidateAll() if the designated constraints aren't met.
type OpResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OpResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OpResultMultiError) AllErrors() []error { return m }

// OpResultValidationError is the validation error returned by
// OpResult.Validate if the designated constraints aren't met.
type OpResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpResultValidationError) ErrorName() string { return "OpResultValidationError" }

// Error satisfies the builtin error interface
func (e OpResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpResultValidationError{}

// Validate checks the field values on ApplyOpsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ApplyOpsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyOpsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyOpsResponseMultiError, or nil if none found.
func (m *ApplyOpsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyOpsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApplyOpsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApplyOpsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyOpsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOriginallySet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplyOpsResponseValidationError{
					field:  "OriginallySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplyOpsResponseValidationError{
					field:  "OriginallySet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginallySet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplyOpsResponseValidationError{
				field:  "OriginallySet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplyOpsResponseMultiError(errors)
	}

	return nil
}

// ApplyOpsResponseMultiError is an error wrapping multiple validation errors
// returned by ApplyOpsResponse.ValidateAll() if the designated constraints
// aren't met.
type ApplyOpsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyOpsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyOpsResponseMultiError) AllErrors() []error { return m }

// ApplyOpsResponseValidationError is the validation error returned by
// ApplyOpsResponse.Validate if the designated constraints aren't met.
type ApplyOpsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyOpsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyOpsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyOpsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyOpsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyOpsResponseValidationError) ErrorName() string { return "ApplyOpsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ApplyOpsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyOpsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyOpsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyOpsResponseValidationError{}

// Validate checks the field values on WritePolicyConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WritePolicyConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WritePolicyConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WritePolicyConfigRequestMultiError, or nil if none found.
func (m *WritePolicyConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WritePolicyConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := WritePolicyConfigRequestValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WritePolicyConfigRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WritePolicyConfigRequestValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WritePolicyConfigRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetPolicyConfig() == nil {
		err := WritePolicyConfigRequestValidationError{
			field:  "PolicyConfig",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPolicyConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WritePolicyConfigRequestValidationError{
					field:  "PolicyConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WritePolicyConfigRequestValidationError{
					field:  "PolicyConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicyConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WritePolicyConfigRequestValidationError{
				field:  "PolicyConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WritePolicyConfigRequestMultiError(errors)
	}

	return nil
}

// WritePolicyConfigRequestMultiError is an error wrapping multiple validation
// errors returned by WritePolicyConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type WritePolicyConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WritePolicyConfigRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WritePolicyConfigRequestMultiError) AllErrors() []error { return m }

// WritePolicyConfigRequestValidationError is the validation error returned by
// WritePolicyConfigRequest.Validate if the designated constraints aren't met.
type WritePolicyConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WritePolicyConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WritePolicyConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WritePolicyConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WritePolicyConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WritePolicyConfigRequestValidationError) ErrorName() string {
	return "WritePolicyConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WritePolicyConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWritePolicyConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WritePolicyConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WritePolicyConfigRequestValidationError{}

// Validate checks the field values on WritePolicyConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WritePolicyConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WritePolicyConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WritePolicyConfigResponseMultiError, or nil if none found.
func (m *WritePolicyConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WritePolicyConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return WritePolicyConfigResponseMultiError(errors)
	}

	return nil
}

// WritePolicyConfigResponseMultiError is an error wrapping multiple validation
// errors returned by WritePolicyConfigResponse.ValidateAll() if the
// designated constraints aren't met.
type WritePolicyConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WritePolicyConfigResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WritePolicyConfigResponseMultiError) AllErrors() []error { return m }

// WritePolicyConfigResponseValidationError is the validation error returned by
// WritePolicyConfigResponse.Validate if the designated constraints aren't met.
type WritePolicyConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WritePolicyConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WritePolicyConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WritePolicyConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WritePolicyConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WritePolicyConfigResponseValidationError) ErrorName() string {
	return "WritePolicyConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WritePolicyConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWritePolicyConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WritePolicyConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WritePolicyConfigResponseValidationError{}

// Validate checks the field values on GetAccountsResponse_AccountState with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAccountsResponse_AccountState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountsResponse_AccountState with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAccountsResponse_AccountStateMultiError, or nil if none found.
func (m *GetAccountsResponse_AccountState) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountsResponse_AccountState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := GetAccountsResponse_AccountStateValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountsResponse_AccountStateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountsResponse_AccountStateValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountsResponse_AccountStateValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountsResponse_AccountStateValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountsResponse_AccountStateValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountsResponse_AccountStateValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProjectedBalance

	if len(errors) > 0 {
		return GetAccountsResponse_AccountStateMultiError(errors)
	}

	return nil
}

// GetAccountsResponse_AccountStateMultiError is an error wrapping multiple
// validation errors returned by
// GetAccountsResponse_AccountState.ValidateAll() if the designated
// constraints aren't met.
type GetAccountsResponse_AccountStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountsResponse_AccountStateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountsResponse_AccountStateMultiError) AllErrors() []error { return m }

// GetAccountsResponse_AccountStateValidationError is the validation error
// returned by GetAccountsResponse_AccountState.Validate if the designated
// constraints aren't met.
type GetAccountsResponse_AccountStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountsResponse_AccountStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountsResponse_AccountStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountsResponse_AccountStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountsResponse_AccountStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountsResponse_AccountStateValidationError) ErrorName() string {
	return "GetAccountsResponse_AccountStateValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountsResponse_AccountStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountsResponse_AccountState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountsResponse_AccountStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountsResponse_AccountStateValidationError{}
