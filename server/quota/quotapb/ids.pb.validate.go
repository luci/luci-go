// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/server/quota/quotapb/ids.proto

package quotapb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PolicyConfigID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyConfigID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyConfigID with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyConfigIDMultiError,
// or nil if none found.
func (m *PolicyConfigID) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyConfigID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if strings.Contains(m.GetAppId(), "~") {
		err := PolicyConfigIDValidationError{
			field:  "AppId",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetRealm(), "~") {
		err := PolicyConfigIDValidationError{
			field:  "Realm",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetVersionScheme() > 1 {
		err := PolicyConfigIDValidationError{
			field:  "VersionScheme",
			reason: "value must be less than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetVersion(), "~") {
		err := PolicyConfigIDValidationError{
			field:  "Version",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PolicyConfigIDMultiError(errors)
	}

	return nil
}

// PolicyConfigIDMultiError is an error wrapping multiple validation errors
// returned by PolicyConfigID.ValidateAll() if the designated constraints
// aren't met.
type PolicyConfigIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyConfigIDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyConfigIDMultiError) AllErrors() []error { return m }

// PolicyConfigIDValidationError is the validation error returned by
// PolicyConfigID.Validate if the designated constraints aren't met.
type PolicyConfigIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyConfigIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyConfigIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyConfigIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyConfigIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyConfigIDValidationError) ErrorName() string { return "PolicyConfigIDValidationError" }

// Error satisfies the builtin error interface
func (e PolicyConfigIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyConfigID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyConfigIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyConfigIDValidationError{}

// Validate checks the field values on PolicyID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyIDMultiError, or nil
// if none found.
func (m *PolicyID) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConfig() == nil {
		err := PolicyIDValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyIDValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyIDValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyIDValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetKey() == nil {
		err := PolicyIDValidationError{
			field:  "Key",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetKey()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PolicyIDValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PolicyIDValidationError{
					field:  "Key",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PolicyIDValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PolicyIDMultiError(errors)
	}

	return nil
}

// PolicyIDMultiError is an error wrapping multiple validation errors returned
// by PolicyID.ValidateAll() if the designated constraints aren't met.
type PolicyIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyIDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyIDMultiError) AllErrors() []error { return m }

// PolicyIDValidationError is the validation error returned by
// PolicyID.Validate if the designated constraints aren't met.
type PolicyIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyIDValidationError) ErrorName() string { return "PolicyIDValidationError" }

// Error satisfies the builtin error interface
func (e PolicyIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyIDValidationError{}

// Validate checks the field values on PolicyRef with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyRef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyRef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyRefMultiError, or nil
// if none found.
func (m *PolicyRef) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyRef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	// no validation rules for Key

	if len(errors) > 0 {
		return PolicyRefMultiError(errors)
	}

	return nil
}

// PolicyRefMultiError is an error wrapping multiple validation errors returned
// by PolicyRef.ValidateAll() if the designated constraints aren't met.
type PolicyRefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyRefMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyRefMultiError) AllErrors() []error { return m }

// PolicyRefValidationError is the validation error returned by
// PolicyRef.Validate if the designated constraints aren't met.
type PolicyRefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyRefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyRefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyRefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyRefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyRefValidationError) ErrorName() string { return "PolicyRefValidationError" }

// Error satisfies the builtin error interface
func (e PolicyRefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyRefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyRefValidationError{}

// Validate checks the field values on PolicyKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PolicyKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PolicyKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PolicyKeyMultiError, or nil
// if none found.
func (m *PolicyKey) ValidateAll() error {
	return m.validate(true)
}

func (m *PolicyKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if strings.Contains(m.GetNamespace(), "~") {
		err := PolicyKeyValidationError{
			field:  "Namespace",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetName(), "~") {
		err := PolicyKeyValidationError{
			field:  "Name",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetResourceType(), "~") {
		err := PolicyKeyValidationError{
			field:  "ResourceType",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PolicyKeyMultiError(errors)
	}

	return nil
}

// PolicyKeyMultiError is an error wrapping multiple validation errors returned
// by PolicyKey.ValidateAll() if the designated constraints aren't met.
type PolicyKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PolicyKeyMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PolicyKeyMultiError) AllErrors() []error { return m }

// PolicyKeyValidationError is the validation error returned by
// PolicyKey.Validate if the designated constraints aren't met.
type PolicyKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PolicyKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PolicyKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PolicyKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PolicyKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PolicyKeyValidationError) ErrorName() string { return "PolicyKeyValidationError" }

// Error satisfies the builtin error interface
func (e PolicyKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPolicyKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PolicyKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PolicyKeyValidationError{}

// Validate checks the field values on AccountID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountIDMultiError, or nil
// if none found.
func (m *AccountID) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if strings.Contains(m.GetAppId(), "~") {
		err := AccountIDValidationError{
			field:  "AppId",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetRealm(), "~") {
		err := AccountIDValidationError{
			field:  "Realm",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetIdentity(), "~") {
		err := AccountIDValidationError{
			field:  "Identity",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetNamespace(), "~") {
		err := AccountIDValidationError{
			field:  "Namespace",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetName(), "~") {
		err := AccountIDValidationError{
			field:  "Name",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if strings.Contains(m.GetResourceType(), "~") {
		err := AccountIDValidationError{
			field:  "ResourceType",
			reason: "value contains substring \"~\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AccountIDMultiError(errors)
	}

	return nil
}

// AccountIDMultiError is an error wrapping multiple validation errors returned
// by AccountID.ValidateAll() if the designated constraints aren't met.
type AccountIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountIDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountIDMultiError) AllErrors() []error { return m }

// AccountIDValidationError is the validation error returned by
// AccountID.Validate if the designated constraints aren't met.
type AccountIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountIDValidationError) ErrorName() string { return "AccountIDValidationError" }

// Error satisfies the builtin error interface
func (e AccountIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountIDValidationError{}
