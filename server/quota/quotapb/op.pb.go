// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/server/quota/quotapb/op.proto

package quotapb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Op_RelativeTo int32

const (
	// This will apply Delta by adding it to the Account's current balance.
	//
	// Note that if the Account is new, and `policy_ref` was omitted, this will
	// fail with an error status MISSING_ACCOUNT.
	Op_CURRENT_BALANCE Op_RelativeTo = 0
	// This will apply Delta by adding it to zero; This effectively allows you
	// to 'set' an Account to some specific value.
	Op_ZERO Op_RelativeTo = 1
	// This will apply Delta by adding it to the policy `default` value.
	//
	// This uses the `default` field of the Account's current policy, if
	// `policy` on this Op is omitted. Otherwise this will use the `default`
	// field of the new policy.
	//
	// It is an error to use this RelativeTo value with an Account containing no
	// Policy, and this will result in an error status of POLICY_REQUIRED.
	Op_DEFAULT Op_RelativeTo = 2
	// This will apply Delta by adding it to the policy `limit` value.
	// Usually this is used with a negative Delta.
	//
	// This uses the `limit` field of the Account's current policy, if
	// `limit` on this Op is omitted. Otherwise this will use the `limit`
	// field of the new policy.
	//
	// It is an error to use this RelativeTo value with an Account containing no
	// Policy, and this will result in an error status of POLICY_REQUIRED.
	Op_LIMIT Op_RelativeTo = 3
)

// Enum value maps for Op_RelativeTo.
var (
	Op_RelativeTo_name = map[int32]string{
		0: "CURRENT_BALANCE",
		1: "ZERO",
		2: "DEFAULT",
		3: "LIMIT",
	}
	Op_RelativeTo_value = map[string]int32{
		"CURRENT_BALANCE": 0,
		"ZERO":            1,
		"DEFAULT":         2,
		"LIMIT":           3,
	}
)

func (x Op_RelativeTo) Enum() *Op_RelativeTo {
	p := new(Op_RelativeTo)
	*p = x
	return p
}

func (x Op_RelativeTo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op_RelativeTo) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_server_quota_quotapb_op_proto_enumTypes[0].Descriptor()
}

func (Op_RelativeTo) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_server_quota_quotapb_op_proto_enumTypes[0]
}

func (x Op_RelativeTo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op_RelativeTo.Descriptor instead.
func (Op_RelativeTo) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescGZIP(), []int{0, 0}
}

// NOTE: Options is a collection of bit-field values, not a standard enum.
type Op_Options int32

const (
	// Default value; no implied behavior change.
	Op_NO_OPTIONS Op_Options = 0
	// If set, this Op can bring the account balance out of bounds; A positive
	// Delta will be allowed to bring the account balance above the
	// Policy.limit, and a negative Delta will be allowed to bring the account
	// balance below zero.
	//
	// NOTE: Regardless of this setting, Refill will never cause an Account to
	// go out of [0, Policy.limit], or cause an Account already in such a state
	// to go MORE out of bounds. This option only affects the behavior of `delta`.
	//
	// REQUIRED to do an operation on an Account with no associated Policy.
	//
	// Mutually exclusive with DO_NOT_CAP_PROPOSED.
	Op_IGNORE_POLICY_BOUNDS Op_Options = 1
	// If set, and this Op's positive delta would be capped by the policy limit,
	// AND the new value would be greater than the current balance, this Op will
	// produce an error with status OVERFLOW.
	//
	// For example, if the account has a value 10 with a limit of 15, normally
	// an Op{CURRENT_BALANCE, +10} would result in a balance of 15, but if it
	// instead had this bit set, the Op would error out.
	//
	// Additionally, if an account has a value 20, with a limit of 10, normally
	// an Op{CURRENT_BALANCE, -5} would result in a balance of 10 (the limit),
	// but if it instead had this bit set, the Op would result in a balance of
	// 15.
	//
	// Mutually exclusive with IGNORE_POLICY_BOUNDS.
	// No-op for Ops with delta <= 0.
	Op_DO_NOT_CAP_PROPOSED Op_Options = 2
	// If set, and if this Op introduces a policy change, i.e., it contains a
	// different policy_ref than what the account currently uses, the delta
	// between the new Policy.limit and old Policy.limit will be added to the
	// account's current balance. If the account has no existing policy_ref,
	// WITH_POLICY_LIMIT_DELTA is a noop.
	//
	// For example, if an account has a value of 3 with a limit of 5, and
	// the new policy_ref in this Op has a limit of 10, the account's value
	// with be updated to 8 (3 + delta, where delta = 10 - 5) before the Op is
	// applied. Similarly, if the limit were updated to 1 from 5, the account's
	// value will be updated to -1 (3 + delta, where delta = 1 - 5) before the
	// Op is applied.
	//
	// NOTE: IGNORE_POLICY_BOUNDS still works as documented if this option is
	// set, and WITH_POLICY_LIMIT_DELTA takes the balance below zero.
	Op_WITH_POLICY_LIMIT_DELTA Op_Options = 4 // Next entry is 8.
)

// Enum value maps for Op_Options.
var (
	Op_Options_name = map[int32]string{
		0: "NO_OPTIONS",
		1: "IGNORE_POLICY_BOUNDS",
		2: "DO_NOT_CAP_PROPOSED",
		4: "WITH_POLICY_LIMIT_DELTA",
	}
	Op_Options_value = map[string]int32{
		"NO_OPTIONS":              0,
		"IGNORE_POLICY_BOUNDS":    1,
		"DO_NOT_CAP_PROPOSED":     2,
		"WITH_POLICY_LIMIT_DELTA": 4,
	}
)

func (x Op_Options) Enum() *Op_Options {
	p := new(Op_Options)
	*p = x
	return p
}

func (x Op_Options) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Op_Options) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_server_quota_quotapb_op_proto_enumTypes[1].Descriptor()
}

func (Op_Options) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_server_quota_quotapb_op_proto_enumTypes[1]
}

func (x Op_Options) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Op_Options.Descriptor instead.
func (Op_Options) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescGZIP(), []int{0, 1}
}

// A single operation to apply to the quota state.
//
// NOTE: Keep in sync with RawOp, which is the type which is actually passed to
// the update lua script.
type Op struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Account to adjust the value for.
	AccountId *AccountID `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The policy under which to adjust the account balance.
	//
	// If the policy is not specified, this will use the Policy already set on the
	// Account.
	//
	// If the Account doesn't already exist, this Op will fail with an error of
	// status MISSING_ACCOUNT, unless relative_to is ZERO.
	PolicyId *PolicyID `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The value that `delta` is relative to, when calculating the new balance.
	RelativeTo Op_RelativeTo `protobuf:"varint,3,opt,name=relative_to,json=relativeTo,proto3,enum=go.chromium.org.luci.server.quota.quotapb.Op_RelativeTo" json:"relative_to,omitempty"`
	// Delta is the number of units to add (or subtract) from the `relative_to` to
	// get a new `proposed` balance for the given Account.
	//
	// If `proposed` would bring a positive Account balance below 0, this will an
	// error with status UNDERFLOW.
	//   - IGNORE_POLICY_BOUNDS will allow this Op to bring the Account balance
	//     negative.
	//
	// If `proposed` would set the Account balance above Policy.limit, this will
	// instead set the Account balance to Policy.limit.
	//   - IGNORE_POLICY_BOUNDS will allow this Op to set the Account balance above
	//     Policy.limit.
	//   - DO_NOT_CAP_PROPOSED will cause this to be an error with status OVERFLOW.
	//
	// Adding to an account with a negative balance is OK, and will increase the
	// balance by the given amount (subject to the rules above).
	// Subtracting from an account with an over-limit balance is OK, and will
	// decrease the balance by the given amount (subject to the rules above).
	//
	// Ops with relative_to CURRENT_BALANCE or ZERO and no Policy set have no
	// boundaries (i.e. value can drop below zero or go all the way up to the
	// maximum balance without issue).
	//
	// Note that Ops with `delta == 0` are legitimate, for example:
	//   - as a means to apply a new policy without explicitly modifying
	//     the balance.
	//   - as a means to recalculate and save a refill policy value (note that
	//     this should not effect the observed value of the balance; e.g. delta:
	//     0 followed by delta: 1 at the same time will have the same cumulative
	//     effect as just delta: 1)
	//   - as a means to 'touch' an active account, resetting its updated_ts
	//     time and any potential expiration timer.
	Delta int64 `protobuf:"varint,4,opt,name=delta,proto3" json:"delta,omitempty"`
	// Bitwise-OR of Options values.
	Options       uint32 `protobuf:"varint,5,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Op) Reset() {
	*x = Op{}
	mi := &file_go_chromium_org_luci_server_quota_quotapb_op_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Op) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Op) ProtoMessage() {}

func (x *Op) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_quota_quotapb_op_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Op.ProtoReflect.Descriptor instead.
func (*Op) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescGZIP(), []int{0}
}

func (x *Op) GetAccountId() *AccountID {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *Op) GetPolicyId() *PolicyID {
	if x != nil {
		return x.PolicyId
	}
	return nil
}

func (x *Op) GetRelativeTo() Op_RelativeTo {
	if x != nil {
		return x.RelativeTo
	}
	return Op_CURRENT_BALANCE
}

func (x *Op) GetDelta() int64 {
	if x != nil {
		return x.Delta
	}
	return 0
}

func (x *Op) GetOptions() uint32 {
	if x != nil {
		return x.Options
	}
	return 0
}

var File_go_chromium_org_luci_server_quota_quotapb_op_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDesc = string([]byte{
	0x0a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2f, 0x6f, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x70, 0x62, 0x2f, 0x69, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x04,
	0x0a, 0x02, 0x4f, 0x70, 0x12, 0x5d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x44, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x12, 0x2e, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x18, 0xfa, 0x42, 0x15, 0x22, 0x13, 0x18, 0xd4, 0xf1, 0xa5, 0xb7, 0x92, 0x86, 0x02, 0x28, 0xac,
	0x8e, 0xda, 0xc8, 0xed, 0xf9, 0xfd, 0xff, 0xff, 0x01, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x0a, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x22,
	0x69, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x47,
	0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43,
	0x41, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x04, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescData []byte
)

func file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDesc), len(file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDescData
}

var file_go_chromium_org_luci_server_quota_quotapb_op_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_server_quota_quotapb_op_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_go_chromium_org_luci_server_quota_quotapb_op_proto_goTypes = []any{
	(Op_RelativeTo)(0), // 0: go.chromium.org.luci.server.quota.quotapb.Op.RelativeTo
	(Op_Options)(0),    // 1: go.chromium.org.luci.server.quota.quotapb.Op.Options
	(*Op)(nil),         // 2: go.chromium.org.luci.server.quota.quotapb.Op
	(*AccountID)(nil),  // 3: go.chromium.org.luci.server.quota.quotapb.AccountID
	(*PolicyID)(nil),   // 4: go.chromium.org.luci.server.quota.quotapb.PolicyID
}
var file_go_chromium_org_luci_server_quota_quotapb_op_proto_depIdxs = []int32{
	3, // 0: go.chromium.org.luci.server.quota.quotapb.Op.account_id:type_name -> go.chromium.org.luci.server.quota.quotapb.AccountID
	4, // 1: go.chromium.org.luci.server.quota.quotapb.Op.policy_id:type_name -> go.chromium.org.luci.server.quota.quotapb.PolicyID
	0, // 2: go.chromium.org.luci.server.quota.quotapb.Op.relative_to:type_name -> go.chromium.org.luci.server.quota.quotapb.Op.RelativeTo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_server_quota_quotapb_op_proto_init() }
func file_go_chromium_org_luci_server_quota_quotapb_op_proto_init() {
	if File_go_chromium_org_luci_server_quota_quotapb_op_proto != nil {
		return
	}
	file_go_chromium_org_luci_server_quota_quotapb_ids_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDesc), len(file_go_chromium_org_luci_server_quota_quotapb_op_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_server_quota_quotapb_op_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_server_quota_quotapb_op_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_server_quota_quotapb_op_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_server_quota_quotapb_op_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_server_quota_quotapb_op_proto = out.File
	file_go_chromium_org_luci_server_quota_quotapb_op_proto_goTypes = nil
	file_go_chromium_org_luci_server_quota_quotapb_op_proto_depIdxs = nil
}
