// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/server/dsmapper/internal/tasks/tasks.proto

package tasks

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SplitAndLaunch task splits the key range into shards and kicks off processing
// of each individual shard.
//
// Enqueued transactionally when creating a new mapping job.
type SplitAndLaunch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int64                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplitAndLaunch) Reset() {
	*x = SplitAndLaunch{}
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplitAndLaunch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitAndLaunch) ProtoMessage() {}

func (x *SplitAndLaunch) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitAndLaunch.ProtoReflect.Descriptor instead.
func (*SplitAndLaunch) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescGZIP(), []int{0}
}

func (x *SplitAndLaunch) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

// FanOutShards enqueues a bunch of ProcessShard named tasks (one per shard).
//
// Enqueued transactionally by SplitAndLaunch after it has constructed shards.
type FanOutShards struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int64                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FanOutShards) Reset() {
	*x = FanOutShards{}
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FanOutShards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanOutShards) ProtoMessage() {}

func (x *FanOutShards) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanOutShards.ProtoReflect.Descriptor instead.
func (*FanOutShards) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescGZIP(), []int{1}
}

func (x *FanOutShards) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

// ProcessShard sequentially reads the entities belonging to a key range
// assigned to a shard and applies the mapper to them.
//
// Upon reaching 1 min mark, relaunches itself, increasing task_num. Thus
// ProcessShard is actually a chain of tasks that runs as long as needed to
// completely process the shard.
type ProcessShard struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int64                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	ShardId       int64                  `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	TaskNum       int64                  `protobuf:"varint,3,opt,name=task_num,json=taskNum,proto3" json:"task_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessShard) Reset() {
	*x = ProcessShard{}
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessShard) ProtoMessage() {}

func (x *ProcessShard) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessShard.ProtoReflect.Descriptor instead.
func (*ProcessShard) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessShard) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *ProcessShard) GetShardId() int64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ProcessShard) GetTaskNum() int64 {
	if x != nil {
		return x.TaskNum
	}
	return 0
}

// RequestJobStateUpdate is transactionally emitted by ProcessShard when shard's
// state changes.
//
// It eventually (with some throttling) causes UpdateJobState to be emitted,
// which updates the job state based on states of the shards.
type RequestJobStateUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int64                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	ShardId       int64                  `protobuf:"varint,2,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"` // mostly FYI
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestJobStateUpdate) Reset() {
	*x = RequestJobStateUpdate{}
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestJobStateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestJobStateUpdate) ProtoMessage() {}

func (x *RequestJobStateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestJobStateUpdate.ProtoReflect.Descriptor instead.
func (*RequestJobStateUpdate) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescGZIP(), []int{3}
}

func (x *RequestJobStateUpdate) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *RequestJobStateUpdate) GetShardId() int64 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

// UpdateJobState is emitted after one or more shards have changed their state.
//
// It recalculates the job's state based on state of all its shards. Throttled
// to 0.5 QPS.
type UpdateJobState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         int64                  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateJobState) Reset() {
	*x = UpdateJobState{}
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateJobState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobState) ProtoMessage() {}

func (x *UpdateJobState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobState.ProtoReflect.Descriptor instead.
func (*UpdateJobState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateJobState) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

var File_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDesc = string([]byte{
	0x0a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x64, 0x73,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x23, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64,
	0x73, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x27, 0x0a, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x41,
	0x6e, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22,
	0x25, 0x0a, 0x0c, 0x46, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x75, 0x6d, 0x22, 0x49, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x27,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x64, 0x73, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescData []byte
)

func file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDesc), len(file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDescData
}

var file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_goTypes = []any{
	(*SplitAndLaunch)(nil),        // 0: luci.server.dsmapper.internal.tasks.SplitAndLaunch
	(*FanOutShards)(nil),          // 1: luci.server.dsmapper.internal.tasks.FanOutShards
	(*ProcessShard)(nil),          // 2: luci.server.dsmapper.internal.tasks.ProcessShard
	(*RequestJobStateUpdate)(nil), // 3: luci.server.dsmapper.internal.tasks.RequestJobStateUpdate
	(*UpdateJobState)(nil),        // 4: luci.server.dsmapper.internal.tasks.UpdateJobState
}
var file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_init() }
func file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_init() {
	if File_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDesc), len(file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto = out.File
	file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_goTypes = nil
	file_go_chromium_org_luci_server_dsmapper_internal_tasks_tasks_proto_depIdxs = nil
}
