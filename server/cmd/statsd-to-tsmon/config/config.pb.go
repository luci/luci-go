// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/server/cmd/statsd-to-tsmon/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Kind int32

const (
	Kind_KIND_UNSPECIFIED        Kind = 0
	Kind_GAUGE                   Kind = 1
	Kind_COUNTER                 Kind = 2
	Kind_CUMULATIVE_DISTRIBUTION Kind = 3
)

// Enum value maps for Kind.
var (
	Kind_name = map[int32]string{
		0: "KIND_UNSPECIFIED",
		1: "GAUGE",
		2: "COUNTER",
		3: "CUMULATIVE_DISTRIBUTION",
	}
	Kind_value = map[string]int32{
		"KIND_UNSPECIFIED":        0,
		"GAUGE":                   1,
		"COUNTER":                 2,
		"CUMULATIVE_DISTRIBUTION": 3,
	}
)

func (x Kind) Enum() *Kind {
	p := new(Kind)
	*p = x
	return p
}

func (x Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_enumTypes[0].Descriptor()
}

func (Kind) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_enumTypes[0]
}

func (x Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Kind.Descriptor instead.
func (Kind) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescGZIP(), []int{0}
}

type Unit int32

const (
	Unit_UNIT_UNSPECIFIED Unit = 0
	Unit_MILLISECONDS     Unit = 1
	Unit_BYTES            Unit = 2
)

// Enum value maps for Unit.
var (
	Unit_name = map[int32]string{
		0: "UNIT_UNSPECIFIED",
		1: "MILLISECONDS",
		2: "BYTES",
	}
	Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED": 0,
		"MILLISECONDS":     1,
		"BYTES":            2,
	}
)

func (x Unit) Enum() *Unit {
	p := new(Unit)
	*p = x
	return p
}

func (x Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_enumTypes[1].Descriptor()
}

func (Unit) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_enumTypes[1]
}

func (x Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Unit.Descriptor instead.
func (Unit) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescGZIP(), []int{1}
}

type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A collection of tsmon metrics and rules for how to extract them from statsd
	// metrics.
	Metrics       []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Metric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the tsmon metric to produce, required.
	Metric string `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	// A kind of the metric, required.
	Kind Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=statsd_to_tsmon.config.Kind" json:"kind,omitempty"`
	// Metric description. Optional, but recommended.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Units of the metric value. Optional, but recommended.
	Units Unit `protobuf:"varint,4,opt,name=units,proto3,enum=statsd_to_tsmon.config.Unit" json:"units,omitempty"`
	// A set of fields of this metric.
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	// A list of rules that map statds metrics to fields of this metric.
	//
	// Each rule is represented by a statsd metric name pattern (that looks like
	// e.g. "something.*.${var}.*.sfx") and a recipe of how to get tsmon field
	// name of metrics matching the pattern.
	//
	// In the current implementation the last component of each pattern must be
	// some static string (i.e. not `*` and not a var) and all such suffixes must
	// be unique across the entire configuration file.
	Rules         []*Rule `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Metric) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *Metric) GetKind() Kind {
	if x != nil {
		return x.Kind
	}
	return Kind_KIND_UNSPECIFIED
}

func (x *Metric) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Metric) GetUnits() Unit {
	if x != nil {
		return x.Units
	}
	return Unit_UNIT_UNSPECIFIED
}

func (x *Metric) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Metric) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A pattern to match statsd metric name against.
	//
	// Also used to "extract" interesting portions of the metric name to use them
	// in `fields`.
	//
	// For example, if the pattern is "something.*.${var}.*.sfx", statds metric
	// "something.foo.val.bar.sfx" matches it, and `var` value is set to "val".
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// A map "field name => its value".
	//
	// The set of field names should be equal to the set of fields specified
	// in the metric definition.
	//
	// Each field value is either a static string ("foo"), or a reference to
	// some variable ("${var}") parsed from the statsd metric name according to
	// the pattern.
	Fields        map[string]string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Rule) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *Rule) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

var File_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDesc = string([]byte{
	0x0a, 0x43, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6d,
	0x64, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x2d, 0x74, 0x6f, 0x2d, 0x74, 0x73, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x74, 0x73, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x42, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x73, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0xe6, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x73, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x73, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x73, 0x6d, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x40, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x73, 0x6d, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x51, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x55, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x39, 0x0a,
	0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x64, 0x2d, 0x74, 0x6f, 0x2d, 0x74, 0x73, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescData []byte
)

func file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDesc), len(file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDescData
}

var file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_goTypes = []any{
	(Kind)(0),      // 0: statsd_to_tsmon.config.Kind
	(Unit)(0),      // 1: statsd_to_tsmon.config.Unit
	(*Config)(nil), // 2: statsd_to_tsmon.config.Config
	(*Metric)(nil), // 3: statsd_to_tsmon.config.Metric
	(*Rule)(nil),   // 4: statsd_to_tsmon.config.Rule
	nil,            // 5: statsd_to_tsmon.config.Rule.FieldsEntry
}
var file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_depIdxs = []int32{
	3, // 0: statsd_to_tsmon.config.Config.metrics:type_name -> statsd_to_tsmon.config.Metric
	0, // 1: statsd_to_tsmon.config.Metric.kind:type_name -> statsd_to_tsmon.config.Kind
	1, // 2: statsd_to_tsmon.config.Metric.units:type_name -> statsd_to_tsmon.config.Unit
	4, // 3: statsd_to_tsmon.config.Metric.rules:type_name -> statsd_to_tsmon.config.Rule
	5, // 4: statsd_to_tsmon.config.Rule.fields:type_name -> statsd_to_tsmon.config.Rule.FieldsEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_init() }
func file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_init() {
	if File_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDesc), len(file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto = out.File
	file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_goTypes = nil
	file_go_chromium_org_luci_server_cmd_statsd_to_tsmon_config_config_proto_depIdxs = nil
}
