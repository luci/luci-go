// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package issuetracker

import (
	reflect "reflect"
	sync "sync"

	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"

	_ "google.golang.org/genproto/googleapis/api/annotations"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Significance levels assigned to an edit,
// used to determine whether to send notifications.
type EditSignificance int32

const (
	// Default value. Let the API decide the significance of an edit.
	EditSignificance_EDIT_SIGNIFICANCE_UNSPECIFIED EditSignificance = 0
	// Describes an edit that should never generate a notification, regardless of
	// a user's interest in the issue.
	// The SILENT notification level is only there to support migrations from
	// other systems, during which we don't want to send emails.
	// Regular users should instead use MINOR or BULK, as appropriate, to limit
	// the amount of email sent.
	EditSignificance_SILENT EditSignificance = 1
	// Describes an edit that should only send notifications to users that are
	// closely-involved with an issue or have expressed a high level of interest
	// in the issue.
	EditSignificance_MINOR EditSignificance = 2
	// Describes an edit that should send notifications to all users involved or
	// interested in the issue.
	EditSignificance_MAJOR EditSignificance = 3
	// Describes an edit that was part of a bulk edit and should notify users in
	// digest form.
	EditSignificance_BULK EditSignificance = 4
	// Describes an edit that causes an issue to be closed.
	// Regular users should use MINOR or BULK, as appropriate, to limit
	// the amount of email sent.
	EditSignificance_CLOSING EditSignificance = 5
)

// Enum value maps for EditSignificance.
var (
	EditSignificance_name = map[int32]string{
		0: "EDIT_SIGNIFICANCE_UNSPECIFIED",
		1: "SILENT",
		2: "MINOR",
		3: "MAJOR",
		4: "BULK",
		5: "CLOSING",
	}
	EditSignificance_value = map[string]int32{
		"EDIT_SIGNIFICANCE_UNSPECIFIED": 0,
		"SILENT":                        1,
		"MINOR":                         2,
		"MAJOR":                         3,
		"BULK":                          4,
		"CLOSING":                       5,
	}
)

func (x EditSignificance) Enum() *EditSignificance {
	p := new(EditSignificance)
	*p = x
	return p
}

func (x EditSignificance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EditSignificance) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[0].Descriptor()
}

func (EditSignificance) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[0]
}

func (x EditSignificance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EditSignificance.Descriptor instead.
func (EditSignificance) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{0}
}

// Represents a type of relationships between issues.
type IssueRelationshipType int32

const (
	// Unspecified. Invalid state.
	IssueRelationshipType_ISSUE_RELATIONSHIP_TYPE_UNSPECIFIED IssueRelationshipType = 0
	// Parent / child relationship.
	IssueRelationshipType_CHILD IssueRelationshipType = 1
	// Dependency relationship.
	//
	// Deprecated: Marked as deprecated in google/devtools/issuetracker/v1/issuetracker.proto.
	IssueRelationshipType_DEPENDENCY IssueRelationshipType = 2
	// Linked relationship.
	//
	// Deprecated: Marked as deprecated in google/devtools/issuetracker/v1/issuetracker.proto.
	IssueRelationshipType_LINKED IssueRelationshipType = 3
)

// Enum value maps for IssueRelationshipType.
var (
	IssueRelationshipType_name = map[int32]string{
		0: "ISSUE_RELATIONSHIP_TYPE_UNSPECIFIED",
		1: "CHILD",
		2: "DEPENDENCY",
		3: "LINKED",
	}
	IssueRelationshipType_value = map[string]int32{
		"ISSUE_RELATIONSHIP_TYPE_UNSPECIFIED": 0,
		"CHILD":                               1,
		"DEPENDENCY":                          2,
		"LINKED":                              3,
	}
)

func (x IssueRelationshipType) Enum() *IssueRelationshipType {
	p := new(IssueRelationshipType)
	*p = x
	return p
}

func (x IssueRelationshipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueRelationshipType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[1].Descriptor()
}

func (IssueRelationshipType) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[1]
}

func (x IssueRelationshipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueRelationshipType.Descriptor instead.
func (IssueRelationshipType) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{1}
}

// Status of an entity, e.g. ACTIVE or DELETED
type EntityStatus_Status int32

const (
	// Default value. Entity exists and is available for use.
	EntityStatus_ACTIVE EntityStatus_Status = 0
	// Entity is invisible except for administrative actions, i.e. undelete.
	EntityStatus_DELETED EntityStatus_Status = 1
	// Entity is irretrievably wiped.
	EntityStatus_PURGED EntityStatus_Status = 2
)

// Enum value maps for EntityStatus_Status.
var (
	EntityStatus_Status_name = map[int32]string{
		0: "ACTIVE",
		1: "DELETED",
		2: "PURGED",
	}
	EntityStatus_Status_value = map[string]int32{
		"ACTIVE":  0,
		"DELETED": 1,
		"PURGED":  2,
	}
)

func (x EntityStatus_Status) Enum() *EntityStatus_Status {
	p := new(EntityStatus_Status)
	*p = x
	return p
}

func (x EntityStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[2].Descriptor()
}

func (EntityStatus_Status) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[2]
}

func (x EntityStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityStatus_Status.Descriptor instead.
func (EntityStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{0, 0}
}

// Reasons for a status change from "active"
type EntityStatus_Reason int32

const (
	// Unspecified. The only valid reason when entity is active, and invalid if
	// it has any other status.
	EntityStatus_UNSPECIFIED EntityStatus_Reason = 0
	// Entity was marked at user request.
	EntityStatus_USER_REQUEST EntityStatus_Reason = 1
	// Entity was marked for spam or abuse.
	EntityStatus_ABUSE EntityStatus_Reason = 2
	// Entity was marked for restricted content.
	EntityStatus_RESTRICTED EntityStatus_Reason = 3
	// Entity was marked for expired retention.
	EntityStatus_RETENTION EntityStatus_Reason = 4
	// Entity was marked for account capabilities.
	EntityStatus_ACCOUNT_CAPABILITIES EntityStatus_Reason = 5
)

// Enum value maps for EntityStatus_Reason.
var (
	EntityStatus_Reason_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "USER_REQUEST",
		2: "ABUSE",
		3: "RESTRICTED",
		4: "RETENTION",
		5: "ACCOUNT_CAPABILITIES",
	}
	EntityStatus_Reason_value = map[string]int32{
		"UNSPECIFIED":          0,
		"USER_REQUEST":         1,
		"ABUSE":                2,
		"RESTRICTED":           3,
		"RETENTION":            4,
		"ACCOUNT_CAPABILITIES": 5,
	}
)

func (x EntityStatus_Reason) Enum() *EntityStatus_Reason {
	p := new(EntityStatus_Reason)
	*p = x
	return p
}

func (x EntityStatus_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityStatus_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[3].Descriptor()
}

func (EntityStatus_Reason) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[3]
}

func (x EntityStatus_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityStatus_Reason.Descriptor instead.
func (EntityStatus_Reason) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{0, 1}
}

// Defines the level of internal/external access permissible for a component.
// The default is INTERNAL.
type AccessLimit_AccessLevel int32

const (
	// Unspecified.  If unspecified during create, the value will default to
	// INTERNAL. If unspecified during update, the value will be left as-is.
	AccessLimit_ACCESS_LEVEL_UNSPECIFIED AccessLimit_AccessLevel = 0
	// The component and its issues are only accessible to the google.com
	// domain.
	AccessLimit_INTERNAL AccessLimit_AccessLevel = 1
	// The component and its issues are accessible to google.com domain and
	// partner domains.
	AccessLimit_EXTERNAL_PARTNER AccessLimit_AccessLevel = 2
	// The component and its issues are generally available to the public.
	// This *may not be set* via the api.  Marking a component as
	// EXTERNAL_PUBLIC requires special authorization.
	AccessLimit_EXTERNAL_PUBLIC AccessLimit_AccessLevel = 3
)

// Enum value maps for AccessLimit_AccessLevel.
var (
	AccessLimit_AccessLevel_name = map[int32]string{
		0: "ACCESS_LEVEL_UNSPECIFIED",
		1: "INTERNAL",
		2: "EXTERNAL_PARTNER",
		3: "EXTERNAL_PUBLIC",
	}
	AccessLimit_AccessLevel_value = map[string]int32{
		"ACCESS_LEVEL_UNSPECIFIED": 0,
		"INTERNAL":                 1,
		"EXTERNAL_PARTNER":         2,
		"EXTERNAL_PUBLIC":          3,
	}
)

func (x AccessLimit_AccessLevel) Enum() *AccessLimit_AccessLevel {
	p := new(AccessLimit_AccessLevel)
	*p = x
	return p
}

func (x AccessLimit_AccessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLimit_AccessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[4].Descriptor()
}

func (AccessLimit_AccessLevel) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[4]
}

func (x AccessLimit_AccessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLimit_AccessLevel.Descriptor instead.
func (AccessLimit_AccessLevel) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{2, 0}
}

// Enumeration of the valid types of custom fields.
type CustomField_Type int32

const (
	// Custom field value is undefined.
	CustomField_TYPE_UNSPECIFIED CustomField_Type = 0
	// Custom field value is text.
	CustomField_TEXT CustomField_Type = 1
	// Custom field value is a google.type.Date.
	CustomField_DATE CustomField_Type = 2
	// Custom field value is an enum.
	CustomField_ENUM CustomField_Type = 3
	// Custom field value is a number.
	CustomField_NUMERIC CustomField_Type = 4
	// Custom field value is a list of text values.
	CustomField_REPEATED_TEXT CustomField_Type = 5
	// Custom field value is a list of date values.
	CustomField_REPEATED_DATE CustomField_Type = 6
	// Custom field value is a list of enum values.
	CustomField_REPEATED_ENUM CustomField_Type = 7
	// Custom field value is a list of numeric values.
	CustomField_REPEATED_NUMERIC CustomField_Type = 8
)

// Enum value maps for CustomField_Type.
var (
	CustomField_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TEXT",
		2: "DATE",
		3: "ENUM",
		4: "NUMERIC",
		5: "REPEATED_TEXT",
		6: "REPEATED_DATE",
		7: "REPEATED_ENUM",
		8: "REPEATED_NUMERIC",
	}
	CustomField_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TEXT":             1,
		"DATE":             2,
		"ENUM":             3,
		"NUMERIC":          4,
		"REPEATED_TEXT":    5,
		"REPEATED_DATE":    6,
		"REPEATED_ENUM":    7,
		"REPEATED_NUMERIC": 8,
	}
)

func (x CustomField_Type) Enum() *CustomField_Type {
	p := new(CustomField_Type)
	*p = x
	return p
}

func (x CustomField_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomField_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[5].Descriptor()
}

func (CustomField_Type) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[5]
}

func (x CustomField_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomField_Type.Descriptor instead.
func (CustomField_Type) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{3, 0}
}

// Represents a standard field that is globally available.
type FieldId_StandardField int32

const (
	// Standard field is undefined.
	FieldId_STANDARD_FIELD_UNSPECIFIED FieldId_StandardField = 0
	// The Reporter field.
	FieldId_REPORTER FieldId_StandardField = 1
	// The Assignee field.
	FieldId_ASSIGNEE FieldId_StandardField = 2
	// The Verifier field.
	FieldId_VERIFIER FieldId_StandardField = 3
	// The CC field.
	FieldId_CC FieldId_StandardField = 4
	// The Issue Type field.
	FieldId_TYPE FieldId_StandardField = 5
	// The Issue Status field.
	FieldId_STATUS FieldId_StandardField = 6
	// The Priority field.
	FieldId_PRIORITY FieldId_StandardField = 7
	// The Severity field.
	FieldId_SEVERITY FieldId_StandardField = 8
	// The Changelists field.
	FieldId_CHANGELISTS FieldId_StandardField = 9
	// The Pending Changelists field.
	FieldId_PENDING_CHANGELISTS FieldId_StandardField = 10
	// The Postmortems field.
	FieldId_POSTMORTEMS FieldId_StandardField = 11
	// The Found In field.
	FieldId_FOUND_IN FieldId_StandardField = 12
	// The Targeted To field.
	FieldId_TARGETED_TO FieldId_StandardField = 13
	// The Verified In field.
	FieldId_VERIFIED_IN FieldId_StandardField = 14
	// The In Production field.
	FieldId_IN_PRODUCTION FieldId_StandardField = 15
	// The SLO status field.
	FieldId_SLO_STATUS FieldId_StandardField = 16
	// The Team field.
	FieldId_TEAM FieldId_StandardField = 17
	// The Collaborators field.
	FieldId_COLLABORATORS FieldId_StandardField = 18
)

// Enum value maps for FieldId_StandardField.
var (
	FieldId_StandardField_name = map[int32]string{
		0:  "STANDARD_FIELD_UNSPECIFIED",
		1:  "REPORTER",
		2:  "ASSIGNEE",
		3:  "VERIFIER",
		4:  "CC",
		5:  "TYPE",
		6:  "STATUS",
		7:  "PRIORITY",
		8:  "SEVERITY",
		9:  "CHANGELISTS",
		10: "PENDING_CHANGELISTS",
		11: "POSTMORTEMS",
		12: "FOUND_IN",
		13: "TARGETED_TO",
		14: "VERIFIED_IN",
		15: "IN_PRODUCTION",
		16: "SLO_STATUS",
		17: "TEAM",
		18: "COLLABORATORS",
	}
	FieldId_StandardField_value = map[string]int32{
		"STANDARD_FIELD_UNSPECIFIED": 0,
		"REPORTER":                   1,
		"ASSIGNEE":                   2,
		"VERIFIER":                   3,
		"CC":                         4,
		"TYPE":                       5,
		"STATUS":                     6,
		"PRIORITY":                   7,
		"SEVERITY":                   8,
		"CHANGELISTS":                9,
		"PENDING_CHANGELISTS":        10,
		"POSTMORTEMS":                11,
		"FOUND_IN":                   12,
		"TARGETED_TO":                13,
		"VERIFIED_IN":                14,
		"IN_PRODUCTION":              15,
		"SLO_STATUS":                 16,
		"TEAM":                       17,
		"COLLABORATORS":              18,
	}
)

func (x FieldId_StandardField) Enum() *FieldId_StandardField {
	p := new(FieldId_StandardField)
	*p = x
	return p
}

func (x FieldId_StandardField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldId_StandardField) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[6].Descriptor()
}

func (FieldId_StandardField) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[6]
}

func (x FieldId_StandardField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldId_StandardField.Descriptor instead.
func (FieldId_StandardField) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{4, 0}
}

// Valid types for an issue.
// WARNING: please note it's possible that we add more issue types in the
// future. Therefore you must not treat the issue types as a fixed set, but
// instead you should handle new unknown issue types in your code, e.g. add a
// default case when using switch statement.
type Issue_Type int32

const (
	// Unspecified.  Invalid state.
	Issue_TYPE_UNSPECIFIED Issue_Type = 0
	// Bug
	Issue_BUG Issue_Type = 1
	// Feature Request
	Issue_FEATURE_REQUEST Issue_Type = 2
	// Customer Issue
	Issue_CUSTOMER_ISSUE Issue_Type = 3
	// Internal Cleanup
	Issue_INTERNAL_CLEANUP Issue_Type = 4
	// Process
	Issue_PROCESS Issue_Type = 5
	// Vulnerability (e.g. security or privacy)
	Issue_VULNERABILITY Issue_Type = 6
	// Privacy Issue
	Issue_PRIVACY_ISSUE Issue_Type = 7
	// Portfolio (NOT SUPPORTED YET)
	Issue_PORTFOLIO Issue_Type = 8
	// Program (NOT SUPPORTED YET)
	Issue_PROGRAM Issue_Type = 9
	// Project
	Issue_PROJECT Issue_Type = 10
	// Feature
	Issue_FEATURE Issue_Type = 11
	// Milestone
	Issue_MILESTONE Issue_Type = 12
	// Epic
	Issue_EPIC Issue_Type = 13
	// Story
	Issue_STORY Issue_Type = 14
	// Task
	Issue_TASK Issue_Type = 15
)

// Enum value maps for Issue_Type.
var (
	Issue_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "BUG",
		2:  "FEATURE_REQUEST",
		3:  "CUSTOMER_ISSUE",
		4:  "INTERNAL_CLEANUP",
		5:  "PROCESS",
		6:  "VULNERABILITY",
		7:  "PRIVACY_ISSUE",
		8:  "PORTFOLIO",
		9:  "PROGRAM",
		10: "PROJECT",
		11: "FEATURE",
		12: "MILESTONE",
		13: "EPIC",
		14: "STORY",
		15: "TASK",
	}
	Issue_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"BUG":              1,
		"FEATURE_REQUEST":  2,
		"CUSTOMER_ISSUE":   3,
		"INTERNAL_CLEANUP": 4,
		"PROCESS":          5,
		"VULNERABILITY":    6,
		"PRIVACY_ISSUE":    7,
		"PORTFOLIO":        8,
		"PROGRAM":          9,
		"PROJECT":          10,
		"FEATURE":          11,
		"MILESTONE":        12,
		"EPIC":             13,
		"STORY":            14,
		"TASK":             15,
	}
)

func (x Issue_Type) Enum() *Issue_Type {
	p := new(Issue_Type)
	*p = x
	return p
}

func (x Issue_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[7].Descriptor()
}

func (Issue_Type) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[7]
}

func (x Issue_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_Type.Descriptor instead.
func (Issue_Type) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{6, 0}
}

// Valid states for an issue.
type Issue_Status int32

const (
	// Unspecified.  Invalid state.
	Issue_STATUS_UNSPECIFIED Issue_Status = 0
	// Issue is unassigned.
	Issue_NEW Issue_Status = 1
	// Issue has been assigned.
	Issue_ASSIGNED Issue_Status = 2
	// Issue has been accepted as a task by the assignee.
	Issue_ACCEPTED Issue_Status = 3
	// Issue has been marked Fixed.
	Issue_FIXED Issue_Status = 4
	// Issue has been marked Verified.
	Issue_VERIFIED Issue_Status = 5
	// Issue has been marked: Won't Fix (Not Reproducible).
	Issue_NOT_REPRODUCIBLE Issue_Status = 6
	// Issue has been marked: Won't Fix (Intended Behavior).
	Issue_INTENDED_BEHAVIOR Issue_Status = 7
	// Issue has been marked: Won't Fix (Obsolete).
	Issue_OBSOLETE Issue_Status = 8
	// Issue has been marked: Won't Fix (Infeasible).
	Issue_INFEASIBLE Issue_Status = 9
	// Issue has been marked as a duplicate of another issue.
	Issue_DUPLICATE Issue_Status = 10
	// Issue is considered inactive.
	Issue_INACTIVE Issue_Status = 11
)

// Enum value maps for Issue_Status.
var (
	Issue_Status_name = map[int32]string{
		0:  "STATUS_UNSPECIFIED",
		1:  "NEW",
		2:  "ASSIGNED",
		3:  "ACCEPTED",
		4:  "FIXED",
		5:  "VERIFIED",
		6:  "NOT_REPRODUCIBLE",
		7:  "INTENDED_BEHAVIOR",
		8:  "OBSOLETE",
		9:  "INFEASIBLE",
		10: "DUPLICATE",
		11: "INACTIVE",
	}
	Issue_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"NEW":                1,
		"ASSIGNED":           2,
		"ACCEPTED":           3,
		"FIXED":              4,
		"VERIFIED":           5,
		"NOT_REPRODUCIBLE":   6,
		"INTENDED_BEHAVIOR":  7,
		"OBSOLETE":           8,
		"INFEASIBLE":         9,
		"DUPLICATE":          10,
		"INACTIVE":           11,
	}
)

func (x Issue_Status) Enum() *Issue_Status {
	p := new(Issue_Status)
	*p = x
	return p
}

func (x Issue_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[8].Descriptor()
}

func (Issue_Status) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[8]
}

func (x Issue_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_Status.Descriptor instead.
func (Issue_Status) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{6, 1}
}

// 5-point scale of issue priority, used to indicate importance of issue.
type Issue_Priority int32

const (
	// Unspecified.  Invalid state.
	Issue_PRIORITY_UNSPECIFIED Issue_Priority = 0
	// P0
	Issue_P0 Issue_Priority = 1
	// P1
	Issue_P1 Issue_Priority = 2
	// P2
	Issue_P2 Issue_Priority = 3
	// P3
	Issue_P3 Issue_Priority = 4
	// P4
	Issue_P4 Issue_Priority = 5
)

// Enum value maps for Issue_Priority.
var (
	Issue_Priority_name = map[int32]string{
		0: "PRIORITY_UNSPECIFIED",
		1: "P0",
		2: "P1",
		3: "P2",
		4: "P3",
		5: "P4",
	}
	Issue_Priority_value = map[string]int32{
		"PRIORITY_UNSPECIFIED": 0,
		"P0":                   1,
		"P1":                   2,
		"P2":                   3,
		"P3":                   4,
		"P4":                   5,
	}
)

func (x Issue_Priority) Enum() *Issue_Priority {
	p := new(Issue_Priority)
	*p = x
	return p
}

func (x Issue_Priority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_Priority) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[9].Descriptor()
}

func (Issue_Priority) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[9]
}

func (x Issue_Priority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_Priority.Descriptor instead.
func (Issue_Priority) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{6, 2}
}

// 5-point scale of issue severity, used to indicate impact of issue.
type Issue_Severity int32

const (
	// Unspecified.  Invalid state.
	Issue_SEVERITY_UNSPECIFIED Issue_Severity = 0
	// S0
	Issue_S0 Issue_Severity = 1
	// S1
	Issue_S1 Issue_Severity = 2
	// S2
	Issue_S2 Issue_Severity = 3
	// S3
	Issue_S3 Issue_Severity = 4
	// S4
	Issue_S4 Issue_Severity = 5
)

// Enum value maps for Issue_Severity.
var (
	Issue_Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "S0",
		2: "S1",
		3: "S2",
		4: "S3",
		5: "S4",
	}
	Issue_Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"S0":                   1,
		"S1":                   2,
		"S2":                   3,
		"S3":                   4,
		"S4":                   5,
	}
)

func (x Issue_Severity) Enum() *Issue_Severity {
	p := new(Issue_Severity)
	*p = x
	return p
}

func (x Issue_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Issue_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[10].Descriptor()
}

func (Issue_Severity) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[10]
}

func (x Issue_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Issue_Severity.Descriptor instead.
func (Issue_Severity) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{6, 3}
}

// The different access levels we can set on an issue.
type IssueAccessLimit_AccessLevel int32

const (
	// API will reject all access limits that are unspecified.
	IssueAccessLimit_ACCESS_LEVEL_UNSPECIFIED IssueAccessLimit_AccessLevel = 0
	// There are no access limits set on this issue.
	IssueAccessLimit_LIMIT_NONE IssueAccessLimit_AccessLevel = 1
	// Only actors on the issue retain view access.
	IssueAccessLimit_LIMIT_VIEW IssueAccessLimit_AccessLevel = 2
	// Only actors on the issue retain append (e.g. comment) access. Issue
	// admins also retain access
	IssueAccessLimit_LIMIT_APPEND IssueAccessLimit_AccessLevel = 3
	// Only actors on the issue or trusted (Full-time Googlers + Common tools by
	// default) users retain view access.
	IssueAccessLimit_LIMIT_VIEW_TRUSTED IssueAccessLimit_AccessLevel = 4
)

// Enum value maps for IssueAccessLimit_AccessLevel.
var (
	IssueAccessLimit_AccessLevel_name = map[int32]string{
		0: "ACCESS_LEVEL_UNSPECIFIED",
		1: "LIMIT_NONE",
		2: "LIMIT_VIEW",
		3: "LIMIT_APPEND",
		4: "LIMIT_VIEW_TRUSTED",
	}
	IssueAccessLimit_AccessLevel_value = map[string]int32{
		"ACCESS_LEVEL_UNSPECIFIED": 0,
		"LIMIT_NONE":               1,
		"LIMIT_VIEW":               2,
		"LIMIT_APPEND":             3,
		"LIMIT_VIEW_TRUSTED":       4,
	}
)

func (x IssueAccessLimit_AccessLevel) Enum() *IssueAccessLimit_AccessLevel {
	p := new(IssueAccessLimit_AccessLevel)
	*p = x
	return p
}

func (x IssueAccessLimit_AccessLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueAccessLimit_AccessLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[11].Descriptor()
}

func (IssueAccessLimit_AccessLevel) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[11]
}

func (x IssueAccessLimit_AccessLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueAccessLimit_AccessLevel.Descriptor instead.
func (IssueAccessLimit_AccessLevel) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{8, 0}
}

// Represents the current state of a Gerrit change. ABANDONED is not a
// supported state. Changes that get abandoned will be deleted from the
// system.
type GerritChange_State int32

const (
	// Unspecified.
	GerritChange_STATE_UNSPECIFIED GerritChange_State = 0
	// The change has not been submitted.
	GerritChange_PENDING GerritChange_State = 1
	// The change has been submitted.
	GerritChange_MERGED GerritChange_State = 2
)

// Enum value maps for GerritChange_State.
var (
	GerritChange_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PENDING",
		2: "MERGED",
	}
	GerritChange_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PENDING":           1,
		"MERGED":            2,
	}
)

func (x GerritChange_State) Enum() *GerritChange_State {
	p := new(GerritChange_State)
	*p = x
	return p
}

func (x GerritChange_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GerritChange_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[12].Descriptor()
}

func (GerritChange_State) Type() protoreflect.EnumType {
	return &file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes[12]
}

func (x GerritChange_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GerritChange_State.Descriptor instead.
func (GerritChange_State) EnumDescriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{24, 0}
}

// Current status of an entity (issue, comment, attachment, etc) and reason
type EntityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the entity
	Status EntityStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=google.devtools.issuetracker.v1.EntityStatus_Status" json:"status,omitempty"`
	// Reason for the current status. Status = ACTIVE iff reason = UNSPECIFIED
	Reason EntityStatus_Reason `protobuf:"varint,2,opt,name=reason,proto3,enum=google.devtools.issuetracker.v1.EntityStatus_Reason" json:"reason,omitempty"`
}

func (x *EntityStatus) Reset() {
	*x = EntityStatus{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityStatus) ProtoMessage() {}

func (x *EntityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityStatus.ProtoReflect.Descriptor instead.
func (*EntityStatus) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{0}
}

func (x *EntityStatus) GetStatus() EntityStatus_Status {
	if x != nil {
		return x.Status
	}
	return EntityStatus_ACTIVE
}

func (x *EntityStatus) GetReason() EntityStatus_Reason {
	if x != nil {
		return x.Reason
	}
	return EntityStatus_UNSPECIFIED
}

// Represents a hierarchical container for issues,
// used for grouping issues into projects.
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Unique ID. Assigned at creation time by the API backend.
	ComponentId int64 `protobuf:"varint,2,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	// If true, the component cannot have new issues created within it
	// and the component by default is excluded from component searches.
	IsArchived bool `protobuf:"varint,8,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	// The maximum permissions that may be applied to a component
	// and its contained issues.  Access may be restricted down to a smaller
	// group of users, but this represents the limits of access.
	// Filled in when a component is read, but may be set only on component
	// creation. If set, must be equal to the AccessLimit of the parent, except
	// if the parent is INTERNAL, in which case the new component may be set to
	// either INTERNAL or EXTERNAL_PARTNER. May not be set when updating a
	// component.
	AccessLimit *AccessLimit `protobuf:"bytes,9,opt,name=access_limit,json=accessLimit,proto3" json:"access_limit,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{1}
}

func (x *Component) GetComponentId() int64 {
	if x != nil {
		return x.ComponentId
	}
	return 0
}

func (x *Component) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *Component) GetAccessLimit() *AccessLimit {
	if x != nil {
		return x.AccessLimit
	}
	return nil
}

// Represents the possible audience for a component and its contained issues.
type AccessLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Access level for a component.
	AccessLevel AccessLimit_AccessLevel `protobuf:"varint,1,opt,name=access_level,json=accessLevel,proto3,enum=google.devtools.issuetracker.v1.AccessLimit_AccessLevel" json:"access_level,omitempty"`
}

func (x *AccessLimit) Reset() {
	*x = AccessLimit{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLimit) ProtoMessage() {}

func (x *AccessLimit) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLimit.ProtoReflect.Descriptor instead.
func (*AccessLimit) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{2}
}

func (x *AccessLimit) GetAccessLevel() AccessLimit_AccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return AccessLimit_ACCESS_LEVEL_UNSPECIFIED
}

// Represents the definition of a custom field.  Exists as part of a Component.
type CustomField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Unique ID. Assigned at creation time by the API backend.
	CustomFieldId int64 `protobuf:"varint,1,opt,name=custom_field_id,json=customFieldId,proto3" json:"custom_field_id,omitempty"`
	// ID of the component that owns this custom field.  May not be changed after
	// creation.
	ComponentId int64 `protobuf:"varint,2,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	// Describes how the custom field value should be interpreted.
	Type CustomField_Type `protobuf:"varint,3,opt,name=type,proto3,enum=google.devtools.issuetracker.v1.CustomField_Type" json:"type,omitempty"`
	// Whether the custom field is considered a required field in the api.
	Required bool `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"`
	// The name used to represent the field.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// An optional description of the custom field.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// A default value that will be automatically set if none is provided by the
	// user.
	TypedDefaultValue *CustomFieldValue `protobuf:"bytes,10,opt,name=typed_default_value,json=typedDefaultValue,proto3" json:"typed_default_value,omitempty"`
	// Describes all allowed values. Used only for the ENUM type.
	EnumValues []string `protobuf:"bytes,8,rep,name=enum_values,json=enumValues,proto3" json:"enum_values,omitempty"`
	// Output only. An optional attribute to make the field available outside the
	// component where it's defined.
	Shared bool `protobuf:"varint,11,opt,name=shared,proto3" json:"shared,omitempty"`
}

func (x *CustomField) Reset() {
	*x = CustomField{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomField) ProtoMessage() {}

func (x *CustomField) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomField.ProtoReflect.Descriptor instead.
func (*CustomField) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{3}
}

func (x *CustomField) GetCustomFieldId() int64 {
	if x != nil {
		return x.CustomFieldId
	}
	return 0
}

func (x *CustomField) GetComponentId() int64 {
	if x != nil {
		return x.ComponentId
	}
	return 0
}

func (x *CustomField) GetType() CustomField_Type {
	if x != nil {
		return x.Type
	}
	return CustomField_TYPE_UNSPECIFIED
}

func (x *CustomField) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *CustomField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomField) GetTypedDefaultValue() *CustomFieldValue {
	if x != nil {
		return x.TypedDefaultValue
	}
	return nil
}

func (x *CustomField) GetEnumValues() []string {
	if x != nil {
		return x.EnumValues
	}
	return nil
}

func (x *CustomField) GetShared() bool {
	if x != nil {
		return x.Shared
	}
	return false
}

// Represents an identifier that can be used to uniquely identify either a
// standard or custom field.
type FieldId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains a value that can be used to uniquely identify a field.
	//
	// Types that are assignable to IdType:
	//
	//	*FieldId_CustomFieldId
	//	*FieldId_StandardField_
	IdType isFieldId_IdType `protobuf_oneof:"id_type"`
}

func (x *FieldId) Reset() {
	*x = FieldId{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldId) ProtoMessage() {}

func (x *FieldId) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldId.ProtoReflect.Descriptor instead.
func (*FieldId) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{4}
}

func (m *FieldId) GetIdType() isFieldId_IdType {
	if m != nil {
		return m.IdType
	}
	return nil
}

func (x *FieldId) GetCustomFieldId() int64 {
	if x, ok := x.GetIdType().(*FieldId_CustomFieldId); ok {
		return x.CustomFieldId
	}
	return 0
}

func (x *FieldId) GetStandardField() FieldId_StandardField {
	if x, ok := x.GetIdType().(*FieldId_StandardField_); ok {
		return x.StandardField
	}
	return FieldId_STANDARD_FIELD_UNSPECIFIED
}

type isFieldId_IdType interface {
	isFieldId_IdType()
}

type FieldId_CustomFieldId struct {
	// The ID of a custom field.
	CustomFieldId int64 `protobuf:"varint,1,opt,name=custom_field_id,json=customFieldId,proto3,oneof"`
}

type FieldId_StandardField_ struct {
	// A standard system field.
	StandardField FieldId_StandardField `protobuf:"varint,2,opt,name=standard_field,json=standardField,proto3,enum=google.devtools.issuetracker.v1.FieldId_StandardField,oneof"`
}

func (*FieldId_CustomFieldId) isFieldId_IdType() {}

func (*FieldId_StandardField_) isFieldId_IdType() {}

// Represents a value in an instance of a custom field.
// Exists as a part of an issue.
type CustomFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The numeric ID of the custom field that describes this value.
	CustomFieldId int64 `protobuf:"varint,1,opt,name=custom_field_id,json=customFieldId,proto3" json:"custom_field_id,omitempty"`
	// The actual value of a custom field for an issue.
	//
	// Types that are assignable to Value:
	//
	//	*CustomFieldValue_TextValue
	//	*CustomFieldValue_DateValue
	//	*CustomFieldValue_EnumValue
	//	*CustomFieldValue_NumericValue
	//	*CustomFieldValue_RepeatedTextValue
	//	*CustomFieldValue_RepeatedDateValue
	//	*CustomFieldValue_RepeatedEnumValue
	//	*CustomFieldValue_RepeatedNumericValue
	Value isCustomFieldValue_Value `protobuf_oneof:"value"`
	// A read-only string for displaying the value, regardless of type.
	// Date strings are in ISO-8601 format.
	DisplayString string `protobuf:"bytes,10,opt,name=display_string,json=displayString,proto3" json:"display_string,omitempty"`
}

func (x *CustomFieldValue) Reset() {
	*x = CustomFieldValue{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFieldValue) ProtoMessage() {}

func (x *CustomFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFieldValue.ProtoReflect.Descriptor instead.
func (*CustomFieldValue) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{5}
}

func (x *CustomFieldValue) GetCustomFieldId() int64 {
	if x != nil {
		return x.CustomFieldId
	}
	return 0
}

func (m *CustomFieldValue) GetValue() isCustomFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *CustomFieldValue) GetTextValue() string {
	if x, ok := x.GetValue().(*CustomFieldValue_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *CustomFieldValue) GetDateValue() *date.Date {
	if x, ok := x.GetValue().(*CustomFieldValue_DateValue); ok {
		return x.DateValue
	}
	return nil
}

func (x *CustomFieldValue) GetEnumValue() string {
	if x, ok := x.GetValue().(*CustomFieldValue_EnumValue); ok {
		return x.EnumValue
	}
	return ""
}

func (x *CustomFieldValue) GetNumericValue() float64 {
	if x, ok := x.GetValue().(*CustomFieldValue_NumericValue); ok {
		return x.NumericValue
	}
	return 0
}

func (x *CustomFieldValue) GetRepeatedTextValue() *CustomFieldValue_RepeatedString {
	if x, ok := x.GetValue().(*CustomFieldValue_RepeatedTextValue); ok {
		return x.RepeatedTextValue
	}
	return nil
}

func (x *CustomFieldValue) GetRepeatedDateValue() *CustomFieldValue_RepeatedDate {
	if x, ok := x.GetValue().(*CustomFieldValue_RepeatedDateValue); ok {
		return x.RepeatedDateValue
	}
	return nil
}

func (x *CustomFieldValue) GetRepeatedEnumValue() *CustomFieldValue_RepeatedString {
	if x, ok := x.GetValue().(*CustomFieldValue_RepeatedEnumValue); ok {
		return x.RepeatedEnumValue
	}
	return nil
}

func (x *CustomFieldValue) GetRepeatedNumericValue() *CustomFieldValue_RepeatedDouble {
	if x, ok := x.GetValue().(*CustomFieldValue_RepeatedNumericValue); ok {
		return x.RepeatedNumericValue
	}
	return nil
}

func (x *CustomFieldValue) GetDisplayString() string {
	if x != nil {
		return x.DisplayString
	}
	return ""
}

type isCustomFieldValue_Value interface {
	isCustomFieldValue_Value()
}

type CustomFieldValue_TextValue struct {
	// Corresponds to CustomFieldType.TEXT.
	TextValue string `protobuf:"bytes,2,opt,name=text_value,json=textValue,proto3,oneof"`
}

type CustomFieldValue_DateValue struct {
	// Corresponds to CustomFieldType.DATE.
	DateValue *date.Date `protobuf:"bytes,3,opt,name=date_value,json=dateValue,proto3,oneof"`
}

type CustomFieldValue_EnumValue struct {
	// Corresponds to CustomFieldType.ENUM.
	EnumValue string `protobuf:"bytes,4,opt,name=enum_value,json=enumValue,proto3,oneof"`
}

type CustomFieldValue_NumericValue struct {
	// Corresponds to CustomFieldType.NUMERIC.
	NumericValue float64 `protobuf:"fixed64,5,opt,name=numeric_value,json=numericValue,proto3,oneof"`
}

type CustomFieldValue_RepeatedTextValue struct {
	// Corresponds to CustomFieldType.REPEATED_TEXT.
	RepeatedTextValue *CustomFieldValue_RepeatedString `protobuf:"bytes,6,opt,name=repeated_text_value,json=repeatedTextValue,proto3,oneof"`
}

type CustomFieldValue_RepeatedDateValue struct {
	// Corresponds to CustomFieldType.REPEATED_DATE.
	RepeatedDateValue *CustomFieldValue_RepeatedDate `protobuf:"bytes,7,opt,name=repeated_date_value,json=repeatedDateValue,proto3,oneof"`
}

type CustomFieldValue_RepeatedEnumValue struct {
	// Corresponds to CustomFieldType.REPEATED_ENUM.
	RepeatedEnumValue *CustomFieldValue_RepeatedString `protobuf:"bytes,8,opt,name=repeated_enum_value,json=repeatedEnumValue,proto3,oneof"`
}

type CustomFieldValue_RepeatedNumericValue struct {
	// Corresponds to CustomFieldType.REPEATED_NUMERIC.
	RepeatedNumericValue *CustomFieldValue_RepeatedDouble `protobuf:"bytes,9,opt,name=repeated_numeric_value,json=repeatedNumericValue,proto3,oneof"`
}

func (*CustomFieldValue_TextValue) isCustomFieldValue_Value() {}

func (*CustomFieldValue_DateValue) isCustomFieldValue_Value() {}

func (*CustomFieldValue_EnumValue) isCustomFieldValue_Value() {}

func (*CustomFieldValue_NumericValue) isCustomFieldValue_Value() {}

func (*CustomFieldValue_RepeatedTextValue) isCustomFieldValue_Value() {}

func (*CustomFieldValue_RepeatedDateValue) isCustomFieldValue_Value() {}

func (*CustomFieldValue_RepeatedEnumValue) isCustomFieldValue_Value() {}

func (*CustomFieldValue_RepeatedNumericValue) isCustomFieldValue_Value() {}

// Represents the current state of an issue.
type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Unique ID. Assigned at creation time by the API backend.
	IssueId int64 `protobuf:"varint,2,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// The current state of the issue.  Will always be present.
	IssueState *IssueState `protobuf:"bytes,3,opt,name=issue_state,json=issueState,proto3" json:"issue_state,omitempty"`
	// Optional. The issue_comment field has different functions based on the
	// usage:
	//
	//   - In a CreateIssueRequest, this message should be used to provide
	//     an optional comment. Do not use this field to create attachments, use
	//     the attachments field below instead.
	//   - In the response to CreateIssue or ModifyIssue, this message contains
	//     the added comment.
	//   - In the response to GetIssue or ListIssues, this field is left unset.
	IssueComment *IssueComment `protobuf:"bytes,4,opt,name=issue_comment,json=issueComment,proto3" json:"issue_comment,omitempty"`
	// The attachment field has different functions based on usages (similar to
	// issue_comment):
	//
	//   - In a CreateIssueRequest, this message can be used to provide
	//     attachments as part of issue creation.
	//   - In the response to CreateIssue, this message contains
	//     the added attachments. It includes the
	//     resource names to pass to the ByteStream API to write attachment data.
	//   - In the response to GetIssue or ListIssues, this field is left unset.
	Attachments []*Attachment `protobuf:"bytes,18,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Output only. The description of this issue.
	// This field is only set if IssueView is set to FULL in the request to fetch
	// this issue.
	Description *IssueComment `protobuf:"bytes,44,opt,name=description,proto3" json:"description,omitempty"`
	// When creating an issue the status_update field can be populated to create
	// an initial status_update on the issue.
	// This field is only set if IssueView is set to FULL in the request to fetch
	// this issue.
	StatusUpdate *StatusUpdate `protobuf:"bytes,43,opt,name=status_update,json=statusUpdate,proto3" json:"status_update,omitempty"`
	// Output only. Time when this issue was created.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Output only. Time when this issue was last modified.
	ModifiedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	// Output only. Time when this issue was last modified by a "Major" edit.
	// See https://developers.google.com/issue-tracker/concepts/issues#edit_levels
	MajorModifiedTime *timestamppb.Timestamp `protobuf:"bytes,35,opt,name=major_modified_time,json=majorModifiedTime,proto3" json:"major_modified_time,omitempty"`
	// Output only. Time when this issue was last modified by a "Minor" or above
	// edit.
	// See https://developers.google.com/issue-tracker/concepts/issues#edit_levels
	MinorModifiedTime *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=minor_modified_time,json=minorModifiedTime,proto3" json:"minor_modified_time,omitempty"`
	// Output only. The last modifier of the issue.
	LastModifier *User `protobuf:"bytes,14,opt,name=last_modifier,json=lastModifier,proto3" json:"last_modifier,omitempty"`
	// Output only. Time when this issue was resolved.
	ResolvedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=resolved_time,json=resolvedTime,proto3" json:"resolved_time,omitempty"`
	// Output only. Time when this issue was verified.
	VerifiedTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=verified_time,json=verifiedTime,proto3" json:"verified_time,omitempty"`
	// Output only. IssueUserData is private to the user requesting this issue.
	UserData *IssueUserData `protobuf:"bytes,9,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	// Output only. The number of users who have upvoted this issue.
	VoteCount int64 `protobuf:"varint,10,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	// Output only. A list of parent issue IDs.
	ParentIssueIds []int64 `protobuf:"varint,37,rep,packed,name=parent_issue_ids,json=parentIssueIds,proto3" json:"parent_issue_ids,omitempty"`
	// Output only. The current version of this issue.
	Version int32 `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`
	// Output only. The fingerprint of the issue.
	Etag []byte `protobuf:"bytes,13,opt,name=etag,proto3" json:"etag,omitempty"`
	// Output only. The Custom Fields definitions effective in this issue, as
	// determined by the component it is currently in. For the
	// Custom Field values, see IssueState.custom_fields.
	CustomFields []*CustomField `protobuf:"bytes,15,rep,name=custom_fields,json=customFields,proto3" json:"custom_fields,omitempty"`
	// Output only. The complete, ordered list of all custom fields that are
	// visible on this issue.
	VisibleFields []*FieldId `protobuf:"bytes,34,rep,name=visible_fields,json=visibleFields,proto3" json:"visible_fields,omitempty"`
	// Output only. Human user responsible for issue escalations.
	// This value is not yet available for public use.
	EscalationOwner *User `protobuf:"bytes,48,opt,name=escalation_owner,json=escalationOwner,proto3" json:"escalation_owner,omitempty"`
	// Output only. A map from a child issue ID to parent issue IDs for all of the
	// ancestors of this issue. The values are based on cache. It is not
	// transactionally guaranteed, but eventually consistent. This field is only
	// set if IssueView is set to FULL in the request to fetch this issue.
	Ancestors map[int64]*Issue_SourceIssues `protobuf:"bytes,38,rep,name=ancestors,proto3" json:"ancestors,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. The number of child issues of this issue.
	// This field is only set if IssueView is set to FULL in the request to fetch
	// this issue.
	ChildIssueCount int32 `protobuf:"varint,39,opt,name=child_issue_count,json=childIssueCount,proto3" json:"child_issue_count,omitempty"`
	// Output only. The number of descendant issues of this issue.
	DescendantIssueCount int32 `protobuf:"varint,45,opt,name=descendant_issue_count,json=descendantIssueCount,proto3" json:"descendant_issue_count,omitempty"`
	// Output only. The number of open descendant issues of this issue.
	OpenDescendantIssueCount int32 `protobuf:"varint,46,opt,name=open_descendant_issue_count,json=openDescendantIssueCount,proto3" json:"open_descendant_issue_count,omitempty"`
	// Output only. Whether or not the issue is in an archived state. Issue
	// archived through component archiving or per issue archiving will both be
	// considered as in an archived state.
	IsArchived bool `protobuf:"varint,40,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	// Output only. Related links present in comments on the issue.
	// This field is only set if IssueView is set to FULL in the request to fetch
	// this issue.
	RelatedLinks []*RelatedLink `protobuf:"bytes,41,rep,name=related_links,json=relatedLinks,proto3" json:"related_links,omitempty"`
	// Output only. ID of the Tracker the issue belongs to. This value is cached
	// from the tracker_id of the Component that the issue is in. It is not
	// transactionally guaranteed, but eventually consistent.
	TrackerId int64 `protobuf:"varint,42,opt,name=tracker_id,json=trackerId,proto3" json:"tracker_id,omitempty"`
	// Output only. The statistical values of user activities.
	UserActivityStats *Issue_UserActivityStats `protobuf:"bytes,47,opt,name=user_activity_stats,json=userActivityStats,proto3" json:"user_activity_stats,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{6}
}

func (x *Issue) GetIssueId() int64 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

func (x *Issue) GetIssueState() *IssueState {
	if x != nil {
		return x.IssueState
	}
	return nil
}

func (x *Issue) GetIssueComment() *IssueComment {
	if x != nil {
		return x.IssueComment
	}
	return nil
}

func (x *Issue) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *Issue) GetDescription() *IssueComment {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Issue) GetStatusUpdate() *StatusUpdate {
	if x != nil {
		return x.StatusUpdate
	}
	return nil
}

func (x *Issue) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Issue) GetModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedTime
	}
	return nil
}

func (x *Issue) GetMajorModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MajorModifiedTime
	}
	return nil
}

func (x *Issue) GetMinorModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MinorModifiedTime
	}
	return nil
}

func (x *Issue) GetLastModifier() *User {
	if x != nil {
		return x.LastModifier
	}
	return nil
}

func (x *Issue) GetResolvedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedTime
	}
	return nil
}

func (x *Issue) GetVerifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VerifiedTime
	}
	return nil
}

func (x *Issue) GetUserData() *IssueUserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *Issue) GetVoteCount() int64 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

func (x *Issue) GetParentIssueIds() []int64 {
	if x != nil {
		return x.ParentIssueIds
	}
	return nil
}

func (x *Issue) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Issue) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *Issue) GetCustomFields() []*CustomField {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

func (x *Issue) GetVisibleFields() []*FieldId {
	if x != nil {
		return x.VisibleFields
	}
	return nil
}

func (x *Issue) GetEscalationOwner() *User {
	if x != nil {
		return x.EscalationOwner
	}
	return nil
}

func (x *Issue) GetAncestors() map[int64]*Issue_SourceIssues {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

func (x *Issue) GetChildIssueCount() int32 {
	if x != nil {
		return x.ChildIssueCount
	}
	return 0
}

func (x *Issue) GetDescendantIssueCount() int32 {
	if x != nil {
		return x.DescendantIssueCount
	}
	return 0
}

func (x *Issue) GetOpenDescendantIssueCount() int32 {
	if x != nil {
		return x.OpenDescendantIssueCount
	}
	return 0
}

func (x *Issue) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *Issue) GetRelatedLinks() []*RelatedLink {
	if x != nil {
		return x.RelatedLinks
	}
	return nil
}

func (x *Issue) GetTrackerId() int64 {
	if x != nil {
		return x.TrackerId
	}
	return 0
}

func (x *Issue) GetUserActivityStats() *Issue_UserActivityStats {
	if x != nil {
		return x.UserActivityStats
	}
	return nil
}

// Represents issue-related data private to a requesting user.
type IssueUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the user has starred the issue.
	HasStarred bool `protobuf:"varint,1,opt,name=has_starred,json=hasStarred,proto3" json:"has_starred,omitempty"`
	// True if the user has upvoted the issue.
	HasUpvoted bool `protobuf:"varint,2,opt,name=has_upvoted,json=hasUpvoted,proto3" json:"has_upvoted,omitempty"`
}

func (x *IssueUserData) Reset() {
	*x = IssueUserData{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueUserData) ProtoMessage() {}

func (x *IssueUserData) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueUserData.ProtoReflect.Descriptor instead.
func (*IssueUserData) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{7}
}

func (x *IssueUserData) GetHasStarred() bool {
	if x != nil {
		return x.HasStarred
	}
	return false
}

func (x *IssueUserData) GetHasUpvoted() bool {
	if x != nil {
		return x.HasUpvoted
	}
	return false
}

// Represents the access limit set on an issue.
type IssueAccessLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The access level set on an issue.
	AccessLevel IssueAccessLimit_AccessLevel `protobuf:"varint,1,opt,name=access_level,json=accessLevel,proto3,enum=google.devtools.issuetracker.v1.IssueAccessLimit_AccessLevel" json:"access_level,omitempty"`
}

func (x *IssueAccessLimit) Reset() {
	*x = IssueAccessLimit{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueAccessLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueAccessLimit) ProtoMessage() {}

func (x *IssueAccessLimit) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueAccessLimit.ProtoReflect.Descriptor instead.
func (*IssueAccessLimit) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{8}
}

func (x *IssueAccessLimit) GetAccessLevel() IssueAccessLimit_AccessLevel {
	if x != nil {
		return x.AccessLevel
	}
	return IssueAccessLimit_ACCESS_LEVEL_UNSPECIFIED
}

// Contains the current state of an issue.
type IssueState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Component this issue belongs to.
	ComponentId int64 `protobuf:"varint,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	// Required. The current type of the issue.
	Type Issue_Type `protobuf:"varint,2,opt,name=type,proto3,enum=google.devtools.issuetracker.v1.Issue_Type" json:"type,omitempty"`
	// Required. The current state of the issue.
	Status Issue_Status `protobuf:"varint,3,opt,name=status,proto3,enum=google.devtools.issuetracker.v1.Issue_Status" json:"status,omitempty"`
	// Required. The current priority of the issue.
	Priority Issue_Priority `protobuf:"varint,4,opt,name=priority,proto3,enum=google.devtools.issuetracker.v1.Issue_Priority" json:"priority,omitempty"`
	// Required. The current severity of the issue.
	Severity Issue_Severity `protobuf:"varint,5,opt,name=severity,proto3,enum=google.devtools.issuetracker.v1.Issue_Severity" json:"severity,omitempty"`
	// Required. Short summary of the issue.
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	// *Required except for CreateIssue calls.* The reporter of the issue.
	// On CreateIssue calls only, if not set or if set to a blank email address,
	// will be set to the id of the requesting user.
	Reporter *User `protobuf:"bytes,7,opt,name=reporter,proto3" json:"reporter,omitempty"`
	// The current assignee of the issue.
	Assignee *User `protobuf:"bytes,8,opt,name=assignee,proto3" json:"assignee,omitempty"`
	// The current verifier of the issue.
	Verifier *User `protobuf:"bytes,9,opt,name=verifier,proto3" json:"verifier,omitempty"`
	// CCed users and list addresses on this issue.
	Ccs []*User `protobuf:"bytes,10,rep,name=ccs,proto3" json:"ccs,omitempty"`
	// Users collaborating on the issue.
	Collaborators []*User `protobuf:"bytes,31,rep,name=collaborators,proto3" json:"collaborators,omitempty"`
	// If the issue has an IssueStatus of DUPLICATE, this field will
	// be populated with the issue id this is marked as a duplicate of.
	CanonicalIssueId int64 `protobuf:"varint,11,opt,name=canonical_issue_id,json=canonicalIssueId,proto3" json:"canonical_issue_id,omitempty"`
	// A list of issue ids that block completion of this issue.
	BlockedByIssueIds []int64 `protobuf:"varint,12,rep,packed,name=blocked_by_issue_ids,json=blockedByIssueIds,proto3" json:"blocked_by_issue_ids,omitempty"`
	// A list of issue ids that are blocked by this issue.
	BlockingIssueIds []int64 `protobuf:"varint,13,rep,packed,name=blocking_issue_ids,json=blockingIssueIds,proto3" json:"blocking_issue_ids,omitempty"`
	// All of the hotlists currently applied to the issue.
	HotlistIds []int64 `protobuf:"varint,14,rep,packed,name=hotlist_ids,json=hotlistIds,proto3" json:"hotlist_ids,omitempty"`
	// The custom field values currently set on the issue.
	CustomFields []*CustomFieldValue `protobuf:"bytes,15,rep,name=custom_fields,json=customFields,proto3" json:"custom_fields,omitempty"`
	// A collection of fully-qualified Gerrit code change numbers.
	GerritChanges []*GerritChange `protobuf:"bytes,35,rep,name=gerrit_changes,json=gerritChanges,proto3" json:"gerrit_changes,omitempty"`
	// A collection of release versions affected by this issue.
	FoundInVersions []string `protobuf:"bytes,17,rep,name=found_in_versions,json=foundInVersions,proto3" json:"found_in_versions,omitempty"`
	// The targeted release versions that will include the fix for this issue.
	TargetedToVersions []string `protobuf:"bytes,18,rep,name=targeted_to_versions,json=targetedToVersions,proto3" json:"targeted_to_versions,omitempty"`
	// The release versions which have been confirmed as verified.
	VerifiedInVersions []string `protobuf:"bytes,19,rep,name=verified_in_versions,json=verifiedInVersions,proto3" json:"verified_in_versions,omitempty"`
	// Whether or not the behavior of this issue is exhibited in production.
	InProd bool `protobuf:"varint,20,opt,name=in_prod,json=inProd,proto3" json:"in_prod,omitempty"`
	// Output only. Whether the issue has been archived through per issue
	// archiving. Note: use Issue.is_archived to decide if the issue is in an
	// archived state because issue can also be archived through component.
	IsArchived bool `protobuf:"varint,21,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	// Output only. The ids of duplicate issues that have marked this one as
	// their canonical issue.
	DuplicateIssueIds []int64 `protobuf:"varint,22,rep,packed,name=duplicate_issue_ids,json=duplicateIssueIds,proto3" json:"duplicate_issue_ids,omitempty"`
	// Output only. Current status of the issue entity.
	EntityStatus *EntityStatus `protobuf:"bytes,25,opt,name=entity_status,json=entityStatus,proto3" json:"entity_status,omitempty"`
	// The access limit set on this issue.
	AccessLimit *IssueAccessLimit `protobuf:"bytes,32,opt,name=access_limit,json=accessLimit,proto3" json:"access_limit,omitempty"`
}

func (x *IssueState) Reset() {
	*x = IssueState{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueState) ProtoMessage() {}

func (x *IssueState) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueState.ProtoReflect.Descriptor instead.
func (*IssueState) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{9}
}

func (x *IssueState) GetComponentId() int64 {
	if x != nil {
		return x.ComponentId
	}
	return 0
}

func (x *IssueState) GetType() Issue_Type {
	if x != nil {
		return x.Type
	}
	return Issue_TYPE_UNSPECIFIED
}

func (x *IssueState) GetStatus() Issue_Status {
	if x != nil {
		return x.Status
	}
	return Issue_STATUS_UNSPECIFIED
}

func (x *IssueState) GetPriority() Issue_Priority {
	if x != nil {
		return x.Priority
	}
	return Issue_PRIORITY_UNSPECIFIED
}

func (x *IssueState) GetSeverity() Issue_Severity {
	if x != nil {
		return x.Severity
	}
	return Issue_SEVERITY_UNSPECIFIED
}

func (x *IssueState) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *IssueState) GetReporter() *User {
	if x != nil {
		return x.Reporter
	}
	return nil
}

func (x *IssueState) GetAssignee() *User {
	if x != nil {
		return x.Assignee
	}
	return nil
}

func (x *IssueState) GetVerifier() *User {
	if x != nil {
		return x.Verifier
	}
	return nil
}

func (x *IssueState) GetCcs() []*User {
	if x != nil {
		return x.Ccs
	}
	return nil
}

func (x *IssueState) GetCollaborators() []*User {
	if x != nil {
		return x.Collaborators
	}
	return nil
}

func (x *IssueState) GetCanonicalIssueId() int64 {
	if x != nil {
		return x.CanonicalIssueId
	}
	return 0
}

func (x *IssueState) GetBlockedByIssueIds() []int64 {
	if x != nil {
		return x.BlockedByIssueIds
	}
	return nil
}

func (x *IssueState) GetBlockingIssueIds() []int64 {
	if x != nil {
		return x.BlockingIssueIds
	}
	return nil
}

func (x *IssueState) GetHotlistIds() []int64 {
	if x != nil {
		return x.HotlistIds
	}
	return nil
}

func (x *IssueState) GetCustomFields() []*CustomFieldValue {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

func (x *IssueState) GetGerritChanges() []*GerritChange {
	if x != nil {
		return x.GerritChanges
	}
	return nil
}

func (x *IssueState) GetFoundInVersions() []string {
	if x != nil {
		return x.FoundInVersions
	}
	return nil
}

func (x *IssueState) GetTargetedToVersions() []string {
	if x != nil {
		return x.TargetedToVersions
	}
	return nil
}

func (x *IssueState) GetVerifiedInVersions() []string {
	if x != nil {
		return x.VerifiedInVersions
	}
	return nil
}

func (x *IssueState) GetInProd() bool {
	if x != nil {
		return x.InProd
	}
	return false
}

func (x *IssueState) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *IssueState) GetDuplicateIssueIds() []int64 {
	if x != nil {
		return x.DuplicateIssueIds
	}
	return nil
}

func (x *IssueState) GetEntityStatus() *EntityStatus {
	if x != nil {
		return x.EntityStatus
	}
	return nil
}

func (x *IssueState) GetAccessLimit() *IssueAccessLimit {
	if x != nil {
		return x.AccessLimit
	}
	return nil
}

// A set of changes made to an issue, represented as a collection of diffs.
// A collection of IssueUpdate messages can represent the full change history
// of an issue.
type IssueUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Author of the update.
	Author *User `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	// Output only. Time that the Issue update occurred.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Output only. The StatusUpdate entered by a user.
	StatusUpdate *StatusUpdate `protobuf:"bytes,9,opt,name=status_update,json=statusUpdate,proto3" json:"status_update,omitempty"`
	// Output only. The set of updates representing this particular Issue update.
	FieldUpdates []*FieldUpdate `protobuf:"bytes,6,rep,name=field_updates,json=fieldUpdates,proto3" json:"field_updates,omitempty"`
}

func (x *IssueUpdate) Reset() {
	*x = IssueUpdate{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueUpdate) ProtoMessage() {}

func (x *IssueUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueUpdate.ProtoReflect.Descriptor instead.
func (*IssueUpdate) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{10}
}

func (x *IssueUpdate) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *IssueUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *IssueUpdate) GetStatusUpdate() *StatusUpdate {
	if x != nil {
		return x.StatusUpdate
	}
	return nil
}

func (x *IssueUpdate) GetFieldUpdates() []*FieldUpdate {
	if x != nil {
		return x.FieldUpdates
	}
	return nil
}

// The StatusUpdate field on an issue.
type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Uniquely identifies the issue this statusUpdate belongs to.
	IssueId int64 `protobuf:"varint,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// StatusUpdate entered by the user.
	UpdateText string `protobuf:"bytes,2,opt,name=update_text,json=updateText,proto3" json:"update_text,omitempty"`
	// Output only. The user who authored this status update.
	Author *User `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	// Output only. The time that this statusUpdate was created
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Current status of the status update
	EntityStatus *EntityStatus `protobuf:"bytes,8,opt,name=entity_status,json=entityStatus,proto3" json:"entity_status,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{11}
}

func (x *StatusUpdate) GetIssueId() int64 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

func (x *StatusUpdate) GetUpdateText() string {
	if x != nil {
		return x.UpdateText
	}
	return ""
}

func (x *StatusUpdate) GetAuthor() *User {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *StatusUpdate) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *StatusUpdate) GetEntityStatus() *EntityStatus {
	if x != nil {
		return x.EntityStatus
	}
	return nil
}

// A container for user-entered text and attachments provided as a
// part of an update to an issue or issue creation.  All fields in
// this message are optional. It could have been named "Comment", but Issue
// Comment was chosen to emphasize that it's a dependent child of issue. When
// IssueCommentView is unspecified, it will be returned in basic view.
type IssueComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Issue ID for this issue comment.  It uniquely identifies the
	// issue this comment belongs to.
	IssueId int64 `protobuf:"varint,6,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// Output only. Comment number for this issue comment. This is the 1-based
	// position of the comment in the stream of comments associated with the
	// issue.
	CommentNumber int32 `protobuf:"varint,7,opt,name=comment_number,json=commentNumber,proto3" json:"comment_number,omitempty"`
	// Issue comment entered by the user.
	Comment string `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *IssueComment) Reset() {
	*x = IssueComment{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueComment) ProtoMessage() {}

func (x *IssueComment) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueComment.ProtoReflect.Descriptor instead.
func (*IssueComment) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{12}
}

func (x *IssueComment) GetIssueId() int64 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

func (x *IssueComment) GetCommentNumber() int32 {
	if x != nil {
		return x.CommentNumber
	}
	return 0
}

func (x *IssueComment) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// Represents an update to a single field in an issue.
type FieldUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The name of the field this diff represents.  The value of
	// field will match a name from the fields of IssueState.  A change in a
	// custom field value will be named 'custom_fields', and is treated as changes
	// to a single field, rather than a collection.  There may be more than one
	// custom field change in an IssueUpdate.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// The actual value of the diff.
	//
	// Types that are assignable to ValueUpdate:
	//
	//	*FieldUpdate_SingleValueUpdate
	//	*FieldUpdate_CollectionUpdate
	ValueUpdate isFieldUpdate_ValueUpdate `protobuf_oneof:"value_update"`
}

func (x *FieldUpdate) Reset() {
	*x = FieldUpdate{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldUpdate) ProtoMessage() {}

func (x *FieldUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldUpdate.ProtoReflect.Descriptor instead.
func (*FieldUpdate) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{13}
}

func (x *FieldUpdate) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *FieldUpdate) GetValueUpdate() isFieldUpdate_ValueUpdate {
	if m != nil {
		return m.ValueUpdate
	}
	return nil
}

func (x *FieldUpdate) GetSingleValueUpdate() *SingleValueUpdate {
	if x, ok := x.GetValueUpdate().(*FieldUpdate_SingleValueUpdate); ok {
		return x.SingleValueUpdate
	}
	return nil
}

func (x *FieldUpdate) GetCollectionUpdate() *CollectionUpdate {
	if x, ok := x.GetValueUpdate().(*FieldUpdate_CollectionUpdate); ok {
		return x.CollectionUpdate
	}
	return nil
}

type isFieldUpdate_ValueUpdate interface {
	isFieldUpdate_ValueUpdate()
}

type FieldUpdate_SingleValueUpdate struct {
	// Set if the field edited has a single value.
	SingleValueUpdate *SingleValueUpdate `protobuf:"bytes,3,opt,name=single_value_update,json=singleValueUpdate,proto3,oneof"`
}

type FieldUpdate_CollectionUpdate struct {
	// Output only. Set if the field edited is a collection.
	CollectionUpdate *CollectionUpdate `protobuf:"bytes,4,opt,name=collection_update,json=collectionUpdate,proto3,oneof"`
}

func (*FieldUpdate_SingleValueUpdate) isFieldUpdate_ValueUpdate() {}

func (*FieldUpdate_CollectionUpdate) isFieldUpdate_ValueUpdate() {}

// If both old and new values are set, they will always be of the same type.
type SingleValueUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. May be null. The value previous to this IssueUpdate.
	OldValue *anypb.Any `protobuf:"bytes,1,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	// Output only. May be null. The new value set by this IssueUpdate.
	NewValue *anypb.Any `protobuf:"bytes,2,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
}

func (x *SingleValueUpdate) Reset() {
	*x = SingleValueUpdate{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SingleValueUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleValueUpdate) ProtoMessage() {}

func (x *SingleValueUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleValueUpdate.ProtoReflect.Descriptor instead.
func (*SingleValueUpdate) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{14}
}

func (x *SingleValueUpdate) GetOldValue() *anypb.Any {
	if x != nil {
		return x.OldValue
	}
	return nil
}

func (x *SingleValueUpdate) GetNewValue() *anypb.Any {
	if x != nil {
		return x.NewValue
	}
	return nil
}

// Representation of a change to a collection.
type CollectionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Values added to the collection.
	AddedValues []*anypb.Any `protobuf:"bytes,1,rep,name=added_values,json=addedValues,proto3" json:"added_values,omitempty"`
	// Output only. Values removed from the collection.
	RemovedValues []*anypb.Any `protobuf:"bytes,2,rep,name=removed_values,json=removedValues,proto3" json:"removed_values,omitempty"`
}

func (x *CollectionUpdate) Reset() {
	*x = CollectionUpdate{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionUpdate) ProtoMessage() {}

func (x *CollectionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionUpdate.ProtoReflect.Descriptor instead.
func (*CollectionUpdate) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{15}
}

func (x *CollectionUpdate) GetAddedValues() []*anypb.Any {
	if x != nil {
		return x.AddedValues
	}
	return nil
}

func (x *CollectionUpdate) GetRemovedValues() []*anypb.Any {
	if x != nil {
		return x.RemovedValues
	}
	return nil
}

// Contains resource name to uniquely identify attachments for reading/writing.
type AttachmentDataRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the attachment data.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
}

func (x *AttachmentDataRef) Reset() {
	*x = AttachmentDataRef{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachmentDataRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachmentDataRef) ProtoMessage() {}

func (x *AttachmentDataRef) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachmentDataRef.ProtoReflect.Descriptor instead.
func (*AttachmentDataRef) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{16}
}

func (x *AttachmentDataRef) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

// Represents an issue attachment. Each attachment is owned by a single issue,
// designated on creation. After creation, it cannot be transferred to another
// issue.
type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Unique ID.
	AttachmentId int64 `protobuf:"varint,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
	// MIME type of the data.
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Size of the data, in bytes.
	Length int64 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Original file name.
	Filename string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	// Proto to uniquely identify an attachment for reading/writing its data.
	AttachmentDataRef *AttachmentDataRef `protobuf:"bytes,5,opt,name=attachment_data_ref,json=attachmentDataRef,proto3" json:"attachment_data_ref,omitempty"`
	// Output only. Current status of the attachment entity, e.g. ACTIVE or
	// DELETED.
	EntityStatus *EntityStatus `protobuf:"bytes,6,opt,name=entity_status,json=entityStatus,proto3" json:"entity_status,omitempty"`
	// Output only. Fingerprint of the attachment.
	Etag []byte `protobuf:"bytes,7,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{17}
}

func (x *Attachment) GetAttachmentId() int64 {
	if x != nil {
		return x.AttachmentId
	}
	return 0
}

func (x *Attachment) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Attachment) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Attachment) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Attachment) GetAttachmentDataRef() *AttachmentDataRef {
	if x != nil {
		return x.AttachmentDataRef
	}
	return nil
}

func (x *Attachment) GetEntityStatus() *EntityStatus {
	if x != nil {
		return x.EntityStatus
	}
	return nil
}

func (x *Attachment) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

// Represents a relationship between issues.
type IssueRelationship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Numeric ID of the target issue.
	TargetIssueId int64 `protobuf:"varint,1,opt,name=target_issue_id,json=targetIssueId,proto3" json:"target_issue_id,omitempty"`
	// Numeric ID of the target issue that is ordered to be before the target
	// issue of this issue relationship. 0 if the target issue of this issue
	// relationship is at the top.
	AfterIssueId int64 `protobuf:"varint,2,opt,name=after_issue_id,json=afterIssueId,proto3" json:"after_issue_id,omitempty"`
	// Output only. It's set only if the caller has read access to the target
	// issue.
	TargetIssue *Issue `protobuf:"bytes,3,opt,name=target_issue,json=targetIssue,proto3" json:"target_issue,omitempty"`
}

func (x *IssueRelationship) Reset() {
	*x = IssueRelationship{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueRelationship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueRelationship) ProtoMessage() {}

func (x *IssueRelationship) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueRelationship.ProtoReflect.Descriptor instead.
func (*IssueRelationship) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{18}
}

func (x *IssueRelationship) GetTargetIssueId() int64 {
	if x != nil {
		return x.TargetIssueId
	}
	return 0
}

func (x *IssueRelationship) GetAfterIssueId() int64 {
	if x != nil {
		return x.AfterIssueId
	}
	return 0
}

func (x *IssueRelationship) GetTargetIssue() *Issue {
	if x != nil {
		return x.TargetIssue
	}
	return nil
}

// An issue present in a hotlist.
// A collection of HotlistEntry's can be ordered or un-ordered.
// The HotlistEntry collection is added to or removed from by calling the
// CreateHotlistEntry and DeleteHotlistEntry methods.  Although these methods
// only require view permission on the issue, the act of adding or removing a
// hotlist entry for an issue is reflected in the issue's change history and
// touches the issue modification date.
type HotlistEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Numeric ID of an issue contained in a hotlist.
	IssueId int64 `protobuf:"varint,1,opt,name=issue_id,json=issueId,proto3" json:"issue_id,omitempty"`
	// Position values for an ordered collection begin at 1 and increment to the
	// end of the collection.
	Position int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// Output only. The actual issue, for convenience.
	Issue *Issue `protobuf:"bytes,3,opt,name=issue,proto3" json:"issue,omitempty"`
}

func (x *HotlistEntry) Reset() {
	*x = HotlistEntry{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HotlistEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotlistEntry) ProtoMessage() {}

func (x *HotlistEntry) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotlistEntry.ProtoReflect.Descriptor instead.
func (*HotlistEntry) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{19}
}

func (x *HotlistEntry) GetIssueId() int64 {
	if x != nil {
		return x.IssueId
	}
	return 0
}

func (x *HotlistEntry) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *HotlistEntry) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

// Represents a user.
// The canonical identifier for a user is the email address. This MUST be set
// when updating data.
// When retrieving data, in some cases the canonical email address may not be
// visible to the caller. In this case, the email_address field will be left
// blank, and one of the other non-canonical fields may be set in its place.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's email address, including domain name.
	// Blank (i.e. the empty string) if the user's identity is not visible to
	// the caller.
	EmailAddress string `protobuf:"bytes,1,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// Output only. A displayable obfuscated email address. Cannot be used to
	// update data, but may be present when retrieving data if the canonical
	// email_address is not visible to the caller.
	ObfuscatedEmailAddress string `protobuf:"bytes,2,opt,name=obfuscated_email_address,json=obfuscatedEmailAddress,proto3" json:"obfuscated_email_address,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{20}
}

func (x *User) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *User) GetObfuscatedEmailAddress() string {
	if x != nil {
		return x.ObfuscatedEmailAddress
	}
	return ""
}

// Represents a hyperlink.
type Hyperlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL.
	Href *string `protobuf:"bytes,1,opt,name=href,proto3,oneof" json:"href,omitempty"`
}

func (x *Hyperlink) Reset() {
	*x = Hyperlink{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Hyperlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hyperlink) ProtoMessage() {}

func (x *Hyperlink) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hyperlink.ProtoReflect.Descriptor instead.
func (*Hyperlink) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{21}
}

func (x *Hyperlink) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

// Represents a reference to an issue.
type IssueReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Issue ID.
	IssueId *int64 `protobuf:"varint,1,opt,name=issue_id,json=issueId,proto3,oneof" json:"issue_id,omitempty"`
	// The comment number the reference is pointing to.  If not referencing a
	// specific comment, 0.
	CommentNumber *int32 `protobuf:"varint,2,opt,name=comment_number,json=commentNumber,proto3,oneof" json:"comment_number,omitempty"`
}

func (x *IssueReference) Reset() {
	*x = IssueReference{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueReference) ProtoMessage() {}

func (x *IssueReference) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueReference.ProtoReflect.Descriptor instead.
func (*IssueReference) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{22}
}

func (x *IssueReference) GetIssueId() int64 {
	if x != nil && x.IssueId != nil {
		return *x.IssueId
	}
	return 0
}

func (x *IssueReference) GetCommentNumber() int32 {
	if x != nil && x.CommentNumber != nil {
		return *x.CommentNumber
	}
	return 0
}

// A related link is a reference within a comment to some other entity.
type RelatedLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The link.
	//
	// Types that are assignable to Link:
	//
	//	*RelatedLink_Hyperlink
	//	*RelatedLink_IssueReference
	Link isRelatedLink_Link `protobuf_oneof:"link"`
	// The comment number this RelatedLink was extracted from.
	SourceCommentNumber int32 `protobuf:"varint,3,opt,name=source_comment_number,json=sourceCommentNumber,proto3" json:"source_comment_number,omitempty"`
}

func (x *RelatedLink) Reset() {
	*x = RelatedLink{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelatedLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedLink) ProtoMessage() {}

func (x *RelatedLink) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedLink.ProtoReflect.Descriptor instead.
func (*RelatedLink) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{23}
}

func (m *RelatedLink) GetLink() isRelatedLink_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (x *RelatedLink) GetHyperlink() *Hyperlink {
	if x, ok := x.GetLink().(*RelatedLink_Hyperlink); ok {
		return x.Hyperlink
	}
	return nil
}

func (x *RelatedLink) GetIssueReference() *IssueReference {
	if x, ok := x.GetLink().(*RelatedLink_IssueReference); ok {
		return x.IssueReference
	}
	return nil
}

func (x *RelatedLink) GetSourceCommentNumber() int32 {
	if x != nil {
		return x.SourceCommentNumber
	}
	return 0
}

type isRelatedLink_Link interface {
	isRelatedLink_Link()
}

type RelatedLink_Hyperlink struct {
	// A hyperlink.
	Hyperlink *Hyperlink `protobuf:"bytes,1,opt,name=hyperlink,proto3,oneof"`
}

type RelatedLink_IssueReference struct {
	// A reference to another issue in the tracker.
	IssueReference *IssueReference `protobuf:"bytes,2,opt,name=issue_reference,json=issueReference,proto3,oneof"`
}

func (*RelatedLink_Hyperlink) isRelatedLink_Link() {}

func (*RelatedLink_IssueReference) isRelatedLink_Link() {}

// All the info needed to identify a fully-qualified Gerrit code change number,
// and what state it's in.
type GerritChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Gerrit host associated with this change
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The Gerrit repo associated with this change
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	// The Gerrit change number for this change
	ChangeNumber int64 `protobuf:"varint,3,opt,name=change_number,json=changeNumber,proto3" json:"change_number,omitempty"`
	// The current state of the Gerrit change
	State GerritChange_State `protobuf:"varint,4,opt,name=state,proto3,enum=google.devtools.issuetracker.v1.GerritChange_State" json:"state,omitempty"`
}

func (x *GerritChange) Reset() {
	*x = GerritChange{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GerritChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritChange) ProtoMessage() {}

func (x *GerritChange) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritChange.ProtoReflect.Descriptor instead.
func (*GerritChange) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{24}
}

func (x *GerritChange) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GerritChange) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GerritChange) GetChangeNumber() int64 {
	if x != nil {
		return x.ChangeNumber
	}
	return 0
}

func (x *GerritChange) GetState() GerritChange_State {
	if x != nil {
		return x.State
	}
	return GerritChange_STATE_UNSPECIFIED
}

// A repeated String.
type CustomFieldValue_RepeatedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The string values.
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CustomFieldValue_RepeatedString) Reset() {
	*x = CustomFieldValue_RepeatedString{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomFieldValue_RepeatedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFieldValue_RepeatedString) ProtoMessage() {}

func (x *CustomFieldValue_RepeatedString) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFieldValue_RepeatedString.ProtoReflect.Descriptor instead.
func (*CustomFieldValue_RepeatedString) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CustomFieldValue_RepeatedString) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A repeated Date.
type CustomFieldValue_RepeatedDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Date values.
	Values []*date.Date `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CustomFieldValue_RepeatedDate) Reset() {
	*x = CustomFieldValue_RepeatedDate{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomFieldValue_RepeatedDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFieldValue_RepeatedDate) ProtoMessage() {}

func (x *CustomFieldValue_RepeatedDate) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFieldValue_RepeatedDate.ProtoReflect.Descriptor instead.
func (*CustomFieldValue_RepeatedDate) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{5, 1}
}

func (x *CustomFieldValue_RepeatedDate) GetValues() []*date.Date {
	if x != nil {
		return x.Values
	}
	return nil
}

// A repeated Double.
type CustomFieldValue_RepeatedDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The double values.
	Values []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *CustomFieldValue_RepeatedDouble) Reset() {
	*x = CustomFieldValue_RepeatedDouble{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomFieldValue_RepeatedDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomFieldValue_RepeatedDouble) ProtoMessage() {}

func (x *CustomFieldValue_RepeatedDouble) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomFieldValue_RepeatedDouble.ProtoReflect.Descriptor instead.
func (*CustomFieldValue_RepeatedDouble) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{5, 2}
}

func (x *CustomFieldValue_RepeatedDouble) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Source issue IDs to store ancestor cache.
type Issue_SourceIssues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parent issue IDs for parent/child relationships.
	SourceIssueIds []int64 `protobuf:"varint,1,rep,packed,name=source_issue_ids,json=sourceIssueIds,proto3" json:"source_issue_ids,omitempty"`
}

func (x *Issue_SourceIssues) Reset() {
	*x = Issue_SourceIssues{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Issue_SourceIssues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue_SourceIssues) ProtoMessage() {}

func (x *Issue_SourceIssues) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue_SourceIssues.ProtoReflect.Descriptor instead.
func (*Issue_SourceIssues) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Issue_SourceIssues) GetSourceIssueIds() []int64 {
	if x != nil {
		return x.SourceIssueIds
	}
	return nil
}

// The statistical values, for example, the total view count for the
// past days, of user activities to an issue.
type Issue_UserActivityStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. the total view count in the past 1 day;
	OneDayViewCount int64 `protobuf:"varint,1,opt,name=one_day_view_count,json=oneDayViewCount,proto3" json:"one_day_view_count,omitempty"`
	// Output only. the total view count in the past 7 days;
	SevenDayViewCount int64 `protobuf:"varint,2,opt,name=seven_day_view_count,json=sevenDayViewCount,proto3" json:"seven_day_view_count,omitempty"`
	// Output only. the total view count in the past 30 days;
	ThirtyDayViewCount int64 `protobuf:"varint,3,opt,name=thirty_day_view_count,json=thirtyDayViewCount,proto3" json:"thirty_day_view_count,omitempty"`
}

func (x *Issue_UserActivityStats) Reset() {
	*x = Issue_UserActivityStats{}
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Issue_UserActivityStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue_UserActivityStats) ProtoMessage() {}

func (x *Issue_UserActivityStats) ProtoReflect() protoreflect.Message {
	mi := &file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue_UserActivityStats.ProtoReflect.Descriptor instead.
func (*Issue_UserActivityStats) Descriptor() ([]byte, []int) {
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Issue_UserActivityStats) GetOneDayViewCount() int64 {
	if x != nil {
		return x.OneDayViewCount
	}
	return 0
}

func (x *Issue_UserActivityStats) GetSevenDayViewCount() int64 {
	if x != nil {
		return x.SevenDayViewCount
	}
	return 0
}

func (x *Issue_UserActivityStats) GetThirtyDayViewCount() int64 {
	if x != nil {
		return x.ThirtyDayViewCount
	}
	return 0
}

var File_google_devtools_issuetracker_v1_issuetracker_proto protoreflect.FileDescriptor

var file_google_devtools_issuetracker_v1_issuetracker_proto_rawDesc = []byte{
	0x0a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x02, 0x0a, 0x0c, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x52, 0x47, 0x45, 0x44, 0x10, 0x02, 0x22, 0x6f, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x52, 0x45, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x05, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4f,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xd0, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x5b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x64, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x10, 0x03, 0x22, 0xb0, 0x04, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x13, 0x74,
	0x79, 0x70, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x74, 0x79, 0x70,
	0x65, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x22, 0x96, 0x01, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d,
	0x45, 0x52, 0x49, 0x43, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x45,
	0x52, 0x49, 0x43, 0x10, 0x08, 0x22, 0xe0, 0x03, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xbe, 0x02, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45,
	0x52, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x43, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x4f, 0x53, 0x54, 0x4d, 0x4f, 0x52, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x0b, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x0e, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f,
	0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x10,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f,
	0x4c, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x12, 0x42, 0x09, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xef, 0x06, 0x0a, 0x10, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x72, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65,
	0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x72, 0x0a,
	0x13, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x78, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x1a, 0x28, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0c,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x28, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x93, 0x17, 0x0a, 0x05, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f,
	0x0a, 0x13, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x4f, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0a, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f,
	0x65, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x58, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x41, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x16, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x14, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x18, 0x6f, 0x70, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x56, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x38, 0x0a, 0x0c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x64, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x12, 0x6f, 0x6e,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6f, 0x6e, 0x65,
	0x44, 0x61, 0x79, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x14,
	0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x11, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x15, 0x74, 0x68, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x79,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x74, 0x68, 0x69, 0x72, 0x74, 0x79, 0x44, 0x61,
	0x79, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x71, 0x0a, 0x0e, 0x41, 0x6e,
	0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e,
	0x55, 0x50, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x52, 0x54, 0x46,
	0x4f, 0x4c, 0x49, 0x4f, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0a,
	0x12, 0x0b, 0x0a, 0x07, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x49, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x50, 0x49, 0x43, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10,
	0x0e, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0f, 0x22, 0xc6, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x49, 0x42, 0x4c, 0x45,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53,
	0x4f, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x46, 0x45, 0x41,
	0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x0b, 0x22, 0x4c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x30,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x31, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x32,
	0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x33, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x34,
	0x10, 0x05, 0x22, 0x4c, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x30, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x53, 0x31, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x32, 0x10, 0x03,
	0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x34, 0x10, 0x05,
	0x22, 0x51, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x53, 0x74, 0x61, 0x72, 0x72,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x55, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x60, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x75, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x22, 0xe3, 0x0b, 0x0a, 0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x12,
	0x41, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x03, 0x63, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x03, 0x63, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x6f, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x6f, 0x74, 0x6c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x54,
	0x0a, 0x0e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x54, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xae, 0x02, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x0c,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x64, 0x0a,
	0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x09, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08,
	0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xe3, 0x02, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x62, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x66,
	0x52, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x66, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0xb1, 0x01, 0x0a, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x48, 0x6f,
	0x74, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x22, 0x6a, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x18, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x16, 0x6f,
	0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2d, 0x0a, 0x09, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x72, 0x65, 0x66, 0x22, 0x7c, 0x0a, 0x0e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x4a, 0x0a, 0x09, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e,
	0x6b, 0x48, 0x00, 0x52, 0x09, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x5a,
	0x0a, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x06,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x37, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x44, 0x49, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x49, 0x46, 0x49, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x49, 0x4e, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x4c, 0x4b, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x2a, 0x6f, 0x0a, 0x15, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x48,
	0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x0e, 0x0a, 0x06, 0x4c, 0x49, 0x4e,
	0x4b, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x42, 0x87, 0x01, 0x0a, 0x23, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x42, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x65,
	0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescOnce sync.Once
	file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescData = file_google_devtools_issuetracker_v1_issuetracker_proto_rawDesc
)

func file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescGZIP() []byte {
	file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescOnce.Do(func() {
		file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescData)
	})
	return file_google_devtools_issuetracker_v1_issuetracker_proto_rawDescData
}

var file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_google_devtools_issuetracker_v1_issuetracker_proto_goTypes = []any{
	(EditSignificance)(0),                   // 0: google.devtools.issuetracker.v1.EditSignificance
	(IssueRelationshipType)(0),              // 1: google.devtools.issuetracker.v1.IssueRelationshipType
	(EntityStatus_Status)(0),                // 2: google.devtools.issuetracker.v1.EntityStatus.Status
	(EntityStatus_Reason)(0),                // 3: google.devtools.issuetracker.v1.EntityStatus.Reason
	(AccessLimit_AccessLevel)(0),            // 4: google.devtools.issuetracker.v1.AccessLimit.AccessLevel
	(CustomField_Type)(0),                   // 5: google.devtools.issuetracker.v1.CustomField.Type
	(FieldId_StandardField)(0),              // 6: google.devtools.issuetracker.v1.FieldId.StandardField
	(Issue_Type)(0),                         // 7: google.devtools.issuetracker.v1.Issue.Type
	(Issue_Status)(0),                       // 8: google.devtools.issuetracker.v1.Issue.Status
	(Issue_Priority)(0),                     // 9: google.devtools.issuetracker.v1.Issue.Priority
	(Issue_Severity)(0),                     // 10: google.devtools.issuetracker.v1.Issue.Severity
	(IssueAccessLimit_AccessLevel)(0),       // 11: google.devtools.issuetracker.v1.IssueAccessLimit.AccessLevel
	(GerritChange_State)(0),                 // 12: google.devtools.issuetracker.v1.GerritChange.State
	(*EntityStatus)(nil),                    // 13: google.devtools.issuetracker.v1.EntityStatus
	(*Component)(nil),                       // 14: google.devtools.issuetracker.v1.Component
	(*AccessLimit)(nil),                     // 15: google.devtools.issuetracker.v1.AccessLimit
	(*CustomField)(nil),                     // 16: google.devtools.issuetracker.v1.CustomField
	(*FieldId)(nil),                         // 17: google.devtools.issuetracker.v1.FieldId
	(*CustomFieldValue)(nil),                // 18: google.devtools.issuetracker.v1.CustomFieldValue
	(*Issue)(nil),                           // 19: google.devtools.issuetracker.v1.Issue
	(*IssueUserData)(nil),                   // 20: google.devtools.issuetracker.v1.IssueUserData
	(*IssueAccessLimit)(nil),                // 21: google.devtools.issuetracker.v1.IssueAccessLimit
	(*IssueState)(nil),                      // 22: google.devtools.issuetracker.v1.IssueState
	(*IssueUpdate)(nil),                     // 23: google.devtools.issuetracker.v1.IssueUpdate
	(*StatusUpdate)(nil),                    // 24: google.devtools.issuetracker.v1.StatusUpdate
	(*IssueComment)(nil),                    // 25: google.devtools.issuetracker.v1.IssueComment
	(*FieldUpdate)(nil),                     // 26: google.devtools.issuetracker.v1.FieldUpdate
	(*SingleValueUpdate)(nil),               // 27: google.devtools.issuetracker.v1.SingleValueUpdate
	(*CollectionUpdate)(nil),                // 28: google.devtools.issuetracker.v1.CollectionUpdate
	(*AttachmentDataRef)(nil),               // 29: google.devtools.issuetracker.v1.AttachmentDataRef
	(*Attachment)(nil),                      // 30: google.devtools.issuetracker.v1.Attachment
	(*IssueRelationship)(nil),               // 31: google.devtools.issuetracker.v1.IssueRelationship
	(*HotlistEntry)(nil),                    // 32: google.devtools.issuetracker.v1.HotlistEntry
	(*User)(nil),                            // 33: google.devtools.issuetracker.v1.User
	(*Hyperlink)(nil),                       // 34: google.devtools.issuetracker.v1.Hyperlink
	(*IssueReference)(nil),                  // 35: google.devtools.issuetracker.v1.IssueReference
	(*RelatedLink)(nil),                     // 36: google.devtools.issuetracker.v1.RelatedLink
	(*GerritChange)(nil),                    // 37: google.devtools.issuetracker.v1.GerritChange
	(*CustomFieldValue_RepeatedString)(nil), // 38: google.devtools.issuetracker.v1.CustomFieldValue.RepeatedString
	(*CustomFieldValue_RepeatedDate)(nil),   // 39: google.devtools.issuetracker.v1.CustomFieldValue.RepeatedDate
	(*CustomFieldValue_RepeatedDouble)(nil), // 40: google.devtools.issuetracker.v1.CustomFieldValue.RepeatedDouble
	(*Issue_SourceIssues)(nil),              // 41: google.devtools.issuetracker.v1.Issue.SourceIssues
	(*Issue_UserActivityStats)(nil),         // 42: google.devtools.issuetracker.v1.Issue.UserActivityStats
	nil,                                     // 43: google.devtools.issuetracker.v1.Issue.AncestorsEntry
	(*date.Date)(nil),                       // 44: google.type.Date
	(*timestamppb.Timestamp)(nil),           // 45: google.protobuf.Timestamp
	(*anypb.Any)(nil),                       // 46: google.protobuf.Any
}
var file_google_devtools_issuetracker_v1_issuetracker_proto_depIdxs = []int32{
	2,  // 0: google.devtools.issuetracker.v1.EntityStatus.status:type_name -> google.devtools.issuetracker.v1.EntityStatus.Status
	3,  // 1: google.devtools.issuetracker.v1.EntityStatus.reason:type_name -> google.devtools.issuetracker.v1.EntityStatus.Reason
	15, // 2: google.devtools.issuetracker.v1.Component.access_limit:type_name -> google.devtools.issuetracker.v1.AccessLimit
	4,  // 3: google.devtools.issuetracker.v1.AccessLimit.access_level:type_name -> google.devtools.issuetracker.v1.AccessLimit.AccessLevel
	5,  // 4: google.devtools.issuetracker.v1.CustomField.type:type_name -> google.devtools.issuetracker.v1.CustomField.Type
	18, // 5: google.devtools.issuetracker.v1.CustomField.typed_default_value:type_name -> google.devtools.issuetracker.v1.CustomFieldValue
	6,  // 6: google.devtools.issuetracker.v1.FieldId.standard_field:type_name -> google.devtools.issuetracker.v1.FieldId.StandardField
	44, // 7: google.devtools.issuetracker.v1.CustomFieldValue.date_value:type_name -> google.type.Date
	38, // 8: google.devtools.issuetracker.v1.CustomFieldValue.repeated_text_value:type_name -> google.devtools.issuetracker.v1.CustomFieldValue.RepeatedString
	39, // 9: google.devtools.issuetracker.v1.CustomFieldValue.repeated_date_value:type_name -> google.devtools.issuetracker.v1.CustomFieldValue.RepeatedDate
	38, // 10: google.devtools.issuetracker.v1.CustomFieldValue.repeated_enum_value:type_name -> google.devtools.issuetracker.v1.CustomFieldValue.RepeatedString
	40, // 11: google.devtools.issuetracker.v1.CustomFieldValue.repeated_numeric_value:type_name -> google.devtools.issuetracker.v1.CustomFieldValue.RepeatedDouble
	22, // 12: google.devtools.issuetracker.v1.Issue.issue_state:type_name -> google.devtools.issuetracker.v1.IssueState
	25, // 13: google.devtools.issuetracker.v1.Issue.issue_comment:type_name -> google.devtools.issuetracker.v1.IssueComment
	30, // 14: google.devtools.issuetracker.v1.Issue.attachments:type_name -> google.devtools.issuetracker.v1.Attachment
	25, // 15: google.devtools.issuetracker.v1.Issue.description:type_name -> google.devtools.issuetracker.v1.IssueComment
	24, // 16: google.devtools.issuetracker.v1.Issue.status_update:type_name -> google.devtools.issuetracker.v1.StatusUpdate
	45, // 17: google.devtools.issuetracker.v1.Issue.created_time:type_name -> google.protobuf.Timestamp
	45, // 18: google.devtools.issuetracker.v1.Issue.modified_time:type_name -> google.protobuf.Timestamp
	45, // 19: google.devtools.issuetracker.v1.Issue.major_modified_time:type_name -> google.protobuf.Timestamp
	45, // 20: google.devtools.issuetracker.v1.Issue.minor_modified_time:type_name -> google.protobuf.Timestamp
	33, // 21: google.devtools.issuetracker.v1.Issue.last_modifier:type_name -> google.devtools.issuetracker.v1.User
	45, // 22: google.devtools.issuetracker.v1.Issue.resolved_time:type_name -> google.protobuf.Timestamp
	45, // 23: google.devtools.issuetracker.v1.Issue.verified_time:type_name -> google.protobuf.Timestamp
	20, // 24: google.devtools.issuetracker.v1.Issue.user_data:type_name -> google.devtools.issuetracker.v1.IssueUserData
	16, // 25: google.devtools.issuetracker.v1.Issue.custom_fields:type_name -> google.devtools.issuetracker.v1.CustomField
	17, // 26: google.devtools.issuetracker.v1.Issue.visible_fields:type_name -> google.devtools.issuetracker.v1.FieldId
	33, // 27: google.devtools.issuetracker.v1.Issue.escalation_owner:type_name -> google.devtools.issuetracker.v1.User
	43, // 28: google.devtools.issuetracker.v1.Issue.ancestors:type_name -> google.devtools.issuetracker.v1.Issue.AncestorsEntry
	36, // 29: google.devtools.issuetracker.v1.Issue.related_links:type_name -> google.devtools.issuetracker.v1.RelatedLink
	42, // 30: google.devtools.issuetracker.v1.Issue.user_activity_stats:type_name -> google.devtools.issuetracker.v1.Issue.UserActivityStats
	11, // 31: google.devtools.issuetracker.v1.IssueAccessLimit.access_level:type_name -> google.devtools.issuetracker.v1.IssueAccessLimit.AccessLevel
	7,  // 32: google.devtools.issuetracker.v1.IssueState.type:type_name -> google.devtools.issuetracker.v1.Issue.Type
	8,  // 33: google.devtools.issuetracker.v1.IssueState.status:type_name -> google.devtools.issuetracker.v1.Issue.Status
	9,  // 34: google.devtools.issuetracker.v1.IssueState.priority:type_name -> google.devtools.issuetracker.v1.Issue.Priority
	10, // 35: google.devtools.issuetracker.v1.IssueState.severity:type_name -> google.devtools.issuetracker.v1.Issue.Severity
	33, // 36: google.devtools.issuetracker.v1.IssueState.reporter:type_name -> google.devtools.issuetracker.v1.User
	33, // 37: google.devtools.issuetracker.v1.IssueState.assignee:type_name -> google.devtools.issuetracker.v1.User
	33, // 38: google.devtools.issuetracker.v1.IssueState.verifier:type_name -> google.devtools.issuetracker.v1.User
	33, // 39: google.devtools.issuetracker.v1.IssueState.ccs:type_name -> google.devtools.issuetracker.v1.User
	33, // 40: google.devtools.issuetracker.v1.IssueState.collaborators:type_name -> google.devtools.issuetracker.v1.User
	18, // 41: google.devtools.issuetracker.v1.IssueState.custom_fields:type_name -> google.devtools.issuetracker.v1.CustomFieldValue
	37, // 42: google.devtools.issuetracker.v1.IssueState.gerrit_changes:type_name -> google.devtools.issuetracker.v1.GerritChange
	13, // 43: google.devtools.issuetracker.v1.IssueState.entity_status:type_name -> google.devtools.issuetracker.v1.EntityStatus
	21, // 44: google.devtools.issuetracker.v1.IssueState.access_limit:type_name -> google.devtools.issuetracker.v1.IssueAccessLimit
	33, // 45: google.devtools.issuetracker.v1.IssueUpdate.author:type_name -> google.devtools.issuetracker.v1.User
	45, // 46: google.devtools.issuetracker.v1.IssueUpdate.timestamp:type_name -> google.protobuf.Timestamp
	24, // 47: google.devtools.issuetracker.v1.IssueUpdate.status_update:type_name -> google.devtools.issuetracker.v1.StatusUpdate
	26, // 48: google.devtools.issuetracker.v1.IssueUpdate.field_updates:type_name -> google.devtools.issuetracker.v1.FieldUpdate
	33, // 49: google.devtools.issuetracker.v1.StatusUpdate.author:type_name -> google.devtools.issuetracker.v1.User
	45, // 50: google.devtools.issuetracker.v1.StatusUpdate.update_time:type_name -> google.protobuf.Timestamp
	13, // 51: google.devtools.issuetracker.v1.StatusUpdate.entity_status:type_name -> google.devtools.issuetracker.v1.EntityStatus
	27, // 52: google.devtools.issuetracker.v1.FieldUpdate.single_value_update:type_name -> google.devtools.issuetracker.v1.SingleValueUpdate
	28, // 53: google.devtools.issuetracker.v1.FieldUpdate.collection_update:type_name -> google.devtools.issuetracker.v1.CollectionUpdate
	46, // 54: google.devtools.issuetracker.v1.SingleValueUpdate.old_value:type_name -> google.protobuf.Any
	46, // 55: google.devtools.issuetracker.v1.SingleValueUpdate.new_value:type_name -> google.protobuf.Any
	46, // 56: google.devtools.issuetracker.v1.CollectionUpdate.added_values:type_name -> google.protobuf.Any
	46, // 57: google.devtools.issuetracker.v1.CollectionUpdate.removed_values:type_name -> google.protobuf.Any
	29, // 58: google.devtools.issuetracker.v1.Attachment.attachment_data_ref:type_name -> google.devtools.issuetracker.v1.AttachmentDataRef
	13, // 59: google.devtools.issuetracker.v1.Attachment.entity_status:type_name -> google.devtools.issuetracker.v1.EntityStatus
	19, // 60: google.devtools.issuetracker.v1.IssueRelationship.target_issue:type_name -> google.devtools.issuetracker.v1.Issue
	19, // 61: google.devtools.issuetracker.v1.HotlistEntry.issue:type_name -> google.devtools.issuetracker.v1.Issue
	34, // 62: google.devtools.issuetracker.v1.RelatedLink.hyperlink:type_name -> google.devtools.issuetracker.v1.Hyperlink
	35, // 63: google.devtools.issuetracker.v1.RelatedLink.issue_reference:type_name -> google.devtools.issuetracker.v1.IssueReference
	12, // 64: google.devtools.issuetracker.v1.GerritChange.state:type_name -> google.devtools.issuetracker.v1.GerritChange.State
	44, // 65: google.devtools.issuetracker.v1.CustomFieldValue.RepeatedDate.values:type_name -> google.type.Date
	41, // 66: google.devtools.issuetracker.v1.Issue.AncestorsEntry.value:type_name -> google.devtools.issuetracker.v1.Issue.SourceIssues
	67, // [67:67] is the sub-list for method output_type
	67, // [67:67] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_google_devtools_issuetracker_v1_issuetracker_proto_init() }
func file_google_devtools_issuetracker_v1_issuetracker_proto_init() {
	if File_google_devtools_issuetracker_v1_issuetracker_proto != nil {
		return
	}
	file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[4].OneofWrappers = []any{
		(*FieldId_CustomFieldId)(nil),
		(*FieldId_StandardField_)(nil),
	}
	file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[5].OneofWrappers = []any{
		(*CustomFieldValue_TextValue)(nil),
		(*CustomFieldValue_DateValue)(nil),
		(*CustomFieldValue_EnumValue)(nil),
		(*CustomFieldValue_NumericValue)(nil),
		(*CustomFieldValue_RepeatedTextValue)(nil),
		(*CustomFieldValue_RepeatedDateValue)(nil),
		(*CustomFieldValue_RepeatedEnumValue)(nil),
		(*CustomFieldValue_RepeatedNumericValue)(nil),
	}
	file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[13].OneofWrappers = []any{
		(*FieldUpdate_SingleValueUpdate)(nil),
		(*FieldUpdate_CollectionUpdate)(nil),
	}
	file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[21].OneofWrappers = []any{}
	file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[22].OneofWrappers = []any{}
	file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes[23].OneofWrappers = []any{
		(*RelatedLink_Hyperlink)(nil),
		(*RelatedLink_IssueReference)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_devtools_issuetracker_v1_issuetracker_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_devtools_issuetracker_v1_issuetracker_proto_goTypes,
		DependencyIndexes: file_google_devtools_issuetracker_v1_issuetracker_proto_depIdxs,
		EnumInfos:         file_google_devtools_issuetracker_v1_issuetracker_proto_enumTypes,
		MessageInfos:      file_google_devtools_issuetracker_v1_issuetracker_proto_msgTypes,
	}.Build()
	File_google_devtools_issuetracker_v1_issuetracker_proto = out.File
	file_google_devtools_issuetracker_v1_issuetracker_proto_rawDesc = nil
	file_google_devtools_issuetracker_v1_issuetracker_proto_goTypes = nil
	file_google_devtools_issuetracker_v1_issuetracker_proto_depIdxs = nil
}
