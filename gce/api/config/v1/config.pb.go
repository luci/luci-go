// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/gce/api/config/v1/config.proto

package config

import (
	_ "go.chromium.org/luci/common/proto"
	dayofweek "google.golang.org/genproto/googleapis/type/dayofweek"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A network access config type.
// GCE's default and only value is 1:1 NAT.
type AccessConfigType int32

const (
	// 1:1 network address translation.
	AccessConfigType_ONE_TO_ONE_NAT AccessConfigType = 0
)

// Enum value maps for AccessConfigType.
var (
	AccessConfigType_name = map[int32]string{
		0: "ONE_TO_ONE_NAT",
	}
	AccessConfigType_value = map[string]int32{
		"ONE_TO_ONE_NAT": 0,
	}
)

func (x AccessConfigType) Enum() *AccessConfigType {
	p := new(AccessConfigType)
	*p = x
	return p
}

func (x AccessConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[0].Descriptor()
}

func (AccessConfigType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[0]
}

func (x AccessConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessConfigType.Descriptor instead.
func (AccessConfigType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{0}
}

// A disk interface.
// GCE's default is "SCSI".
type DiskInterface int32

const (
	DiskInterface_SCSI DiskInterface = 0
	DiskInterface_NVME DiskInterface = 1
)

// Enum value maps for DiskInterface.
var (
	DiskInterface_name = map[int32]string{
		0: "SCSI",
		1: "NVME",
	}
	DiskInterface_value = map[string]int32{
		"SCSI": 0,
		"NVME": 1,
	}
)

func (x DiskInterface) Enum() *DiskInterface {
	p := new(DiskInterface)
	*p = x
	return p
}

func (x DiskInterface) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskInterface) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[1].Descriptor()
}

func (DiskInterface) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[1]
}

func (x DiskInterface) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskInterface.Descriptor instead.
func (DiskInterface) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{1}
}

// Defines the way in which nodes are selected.
type NodeAffinityOperator int32

const (
	NodeAffinityOperator_OPERATOR_UNSPECIFIED NodeAffinityOperator = 0
	// Requires Compute Engine to seek for matched nodes.
	NodeAffinityOperator_IN NodeAffinityOperator = 1
	// Requires Compute Engine to avoid certain nodes.
	NodeAffinityOperator_NOT_IN NodeAffinityOperator = 2
)

// Enum value maps for NodeAffinityOperator.
var (
	NodeAffinityOperator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "IN",
		2: "NOT_IN",
	}
	NodeAffinityOperator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED": 0,
		"IN":                   1,
		"NOT_IN":               2,
	}
)

func (x NodeAffinityOperator) Enum() *NodeAffinityOperator {
	p := new(NodeAffinityOperator)
	*p = x
	return p
}

func (x NodeAffinityOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeAffinityOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[2].Descriptor()
}

func (NodeAffinityOperator) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[2]
}

func (x NodeAffinityOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeAffinityOperator.Descriptor instead.
func (NodeAffinityOperator) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{2}
}

// GCPChannel is the version of the cloud API to use stable, beta, or alpha.
type GCPChannel int32

const (
	GCPChannel_GCP_CHANNEL_UNSPECIFIED GCPChannel = 0
	GCPChannel_GCP_CHANNEL_STABLE      GCPChannel = 1
	GCPChannel_GCP_CHANNEL_BETA        GCPChannel = 2
	GCPChannel_GCP_CHANNEL_ALPHA       GCPChannel = 3
)

// Enum value maps for GCPChannel.
var (
	GCPChannel_name = map[int32]string{
		0: "GCP_CHANNEL_UNSPECIFIED",
		1: "GCP_CHANNEL_STABLE",
		2: "GCP_CHANNEL_BETA",
		3: "GCP_CHANNEL_ALPHA",
	}
	GCPChannel_value = map[string]int32{
		"GCP_CHANNEL_UNSPECIFIED": 0,
		"GCP_CHANNEL_STABLE":      1,
		"GCP_CHANNEL_BETA":        2,
		"GCP_CHANNEL_ALPHA":       3,
	}
)

func (x GCPChannel) Enum() *GCPChannel {
	p := new(GCPChannel)
	*p = x
	return p
}

func (x GCPChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GCPChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[3].Descriptor()
}

func (GCPChannel) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[3]
}

func (x GCPChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GCPChannel.Descriptor instead.
func (GCPChannel) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{3}
}

// PerformanceMonitoringUnit tracks the types of performance monitoring units to attach to a given instance.
type PerformanceMonitoringUnit int32

const (
	PerformanceMonitoringUnit_PERFORMANCE_MONITORING_UNIT_UNSPECIFIED PerformanceMonitoringUnit = 0 // This is not a mistake! The underlying cloud API expects the string "PERFORMANCE_MONITORING_UNIT_UNSPECIFIED".
	PerformanceMonitoringUnit_ARCHITECTURAL                           PerformanceMonitoringUnit = 1
	PerformanceMonitoringUnit_ENHANCED                                PerformanceMonitoringUnit = 2
	PerformanceMonitoringUnit_STANDARD                                PerformanceMonitoringUnit = 3
)

// Enum value maps for PerformanceMonitoringUnit.
var (
	PerformanceMonitoringUnit_name = map[int32]string{
		0: "PERFORMANCE_MONITORING_UNIT_UNSPECIFIED",
		1: "ARCHITECTURAL",
		2: "ENHANCED",
		3: "STANDARD",
	}
	PerformanceMonitoringUnit_value = map[string]int32{
		"PERFORMANCE_MONITORING_UNIT_UNSPECIFIED": 0,
		"ARCHITECTURAL": 1,
		"ENHANCED":      2,
		"STANDARD":      3,
	}
)

func (x PerformanceMonitoringUnit) Enum() *PerformanceMonitoringUnit {
	p := new(PerformanceMonitoringUnit)
	*p = x
	return p
}

func (x PerformanceMonitoringUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformanceMonitoringUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[4].Descriptor()
}

func (PerformanceMonitoringUnit) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes[4]
}

func (x PerformanceMonitoringUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformanceMonitoringUnit.Descriptor instead.
func (PerformanceMonitoringUnit) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{4}
}

// A description of a service account.
type ServiceAccount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The email address of this service account.
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	// The scopes available for this service account.
	Scope         []string `protobuf:"bytes,2,rep,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceAccount) Reset() {
	*x = ServiceAccount{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccount) ProtoMessage() {}

func (x *ServiceAccount) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccount.ProtoReflect.Descriptor instead.
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ServiceAccount) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

// A description of a network access config.
type AccessConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of config this is.
	Type          AccessConfigType `protobuf:"varint,1,opt,name=type,proto3,enum=config.AccessConfigType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessConfig) Reset() {
	*x = AccessConfig{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessConfig) ProtoMessage() {}

func (x *AccessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessConfig.ProtoReflect.Descriptor instead.
func (*AccessConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *AccessConfig) GetType() AccessConfigType {
	if x != nil {
		return x.Type
	}
	return AccessConfigType_ONE_TO_ONE_NAT
}

// A description of a network interface.
type NetworkInterface struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The access configurations for this interface.
	// Required to enable external internet access.
	AccessConfig []*AccessConfig `protobuf:"bytes,1,rep,name=access_config,json=accessConfig,proto3" json:"access_config,omitempty"`
	// The name of a network to use for this interface.
	// https://cloud.google.com/compute/docs/reference/rest/v1/networks/list.
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	// The name of a network to use for this interface.
	// https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks/list.
	// Example: regions/us-west2/subnetworks/cloudbots-network-us-west2.
	Subnetwork    string `protobuf:"bytes,3,opt,name=subnetwork,proto3" json:"subnetwork,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkInterface) GetAccessConfig() []*AccessConfig {
	if x != nil {
		return x.AccessConfig
	}
	return nil
}

func (x *NetworkInterface) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *NetworkInterface) GetSubnetwork() string {
	if x != nil {
		return x.Subnetwork
	}
	return ""
}

// A description of a disk.
// https://cloud.google.com/compute/docs/reference/rest/v1/disks.
type Disk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of an image to use to create this disk.
	// https://cloud.google.com/compute/docs/reference/rest/v1/images/list.
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// The size of this disk in GiB.
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// The name of a disk type to use for this disk.
	// https://cloud.google.com/compute/docs/reference/rest/v1/diskTypes/list.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The disk interface to use for attaching this disk.
	Interface     DiskInterface `protobuf:"varint,4,opt,name=interface,proto3,enum=config.DiskInterface" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *Disk) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Disk) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Disk) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Disk) GetInterface() DiskInterface {
	if x != nil {
		return x.Interface
	}
	return DiskInterface_SCSI
}

// A description of instance metadata.
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Metadata:
	//
	//	*Metadata_FromText
	//	*Metadata_FromFile
	Metadata      isMetadata_Metadata `protobuf_oneof:"metadata"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *Metadata) GetMetadata() isMetadata_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Metadata) GetFromText() string {
	if x != nil {
		if x, ok := x.Metadata.(*Metadata_FromText); ok {
			return x.FromText
		}
	}
	return ""
}

func (x *Metadata) GetFromFile() string {
	if x != nil {
		if x, ok := x.Metadata.(*Metadata_FromFile); ok {
			return x.FromFile
		}
	}
	return ""
}

type isMetadata_Metadata interface {
	isMetadata_Metadata()
}

type Metadata_FromText struct {
	// A string of the form "key:value" to use as one item of metadata.
	FromText string `protobuf:"bytes,1,opt,name=from_text,json=fromText,proto3,oneof"`
}

type Metadata_FromFile struct {
	// A string of the form "key:filename".
	// The contents of the file are used as the value for one item of metadata.
	FromFile string `protobuf:"bytes,2,opt,name=from_file,json=fromFile,proto3,oneof"`
}

func (*Metadata_FromText) isMetadata_Metadata() {}

func (*Metadata_FromFile) isMetadata_Metadata() {}

// A description of nodes onto which an instance may be scheduled.
type NodeAffinity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Corresponds to the label key of Node resource.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Defines the operation of node selection.
	Operator NodeAffinityOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=config.NodeAffinityOperator" json:"operator,omitempty"`
	// Corresponds to the label values of Node resource.
	Values        []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeAffinity) Reset() {
	*x = NodeAffinity{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAffinity) ProtoMessage() {}

func (x *NodeAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAffinity.ProtoReflect.Descriptor instead.
func (*NodeAffinity) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *NodeAffinity) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NodeAffinity) GetOperator() NodeAffinityOperator {
	if x != nil {
		return x.Operator
	}
	return NodeAffinityOperator_OPERATOR_UNSPECIFIED
}

func (x *NodeAffinity) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A description of scheduling options for an instance.
type Scheduling struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A set of node affinity and anti-affinity configurations.
	// https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity
	NodeAffinity  []*NodeAffinity `protobuf:"bytes,1,rep,name=node_affinity,json=nodeAffinity,proto3" json:"node_affinity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scheduling) Reset() {
	*x = Scheduling{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scheduling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduling) ProtoMessage() {}

func (x *Scheduling) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduling.ProtoReflect.Descriptor instead.
func (*Scheduling) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{6}
}

func (x *Scheduling) GetNodeAffinity() []*NodeAffinity {
	if x != nil {
		return x.NodeAffinity
	}
	return nil
}

// A description of a VM.
// https://cloud.google.com/compute/docs/reference/rest/v1/instances.
type VM struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The disks to attach to this VM.
	Disk []*Disk `protobuf:"bytes,1,rep,name=disk,proto3" json:"disk,omitempty"`
	// The name of a machine type to use for this VM.
	// https://cloud.google.com/compute/docs/reference/rest/v1/machineTypes/list.
	MachineType string `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	// The metadata to attach to this VM.
	Metadata []*Metadata `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// The minimum CPU platform to use for this VM.
	// https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
	MinCpuPlatform string `protobuf:"bytes,4,opt,name=min_cpu_platform,json=minCpuPlatform,proto3" json:"min_cpu_platform,omitempty"`
	// The network interfaces to configure for this VM.
	NetworkInterface []*NetworkInterface `protobuf:"bytes,5,rep,name=network_interface,json=networkInterface,proto3" json:"network_interface,omitempty"`
	// The name of a GCP project to create this VM in.
	Project string `protobuf:"bytes,6,opt,name=project,proto3" json:"project,omitempty"`
	// The service accounts to make available to this VM.
	ServiceAccount []*ServiceAccount `protobuf:"bytes,7,rep,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// The tags to attach to this VM.
	Tag []string `protobuf:"bytes,8,rep,name=tag,proto3" json:"tag,omitempty"`
	// The name of a zone to create this VM in.
	// https://cloud.google.com/compute/docs/reference/rest/v1/zones/list.
	Zone string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone,omitempty"`
	// The scheduling options for this VM.
	Scheduling *Scheduling `protobuf:"bytes,10,opt,name=scheduling,proto3" json:"scheduling,omitempty"`
	// The labels to attach to this VM.
	Label map[string]string `protobuf:"bytes,11,rep,name=label,proto3" json:"label,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Whether to disable integrity monitoring for this VM.
	DisableIntegrityMonitoring bool `protobuf:"varint,12,opt,name=disable_integrity_monitoring,json=disableIntegrityMonitoring,proto3" json:"disable_integrity_monitoring,omitempty"`
	// Whether to enable secure boot for this VM.
	EnableSecureBoot bool `protobuf:"varint,13,opt,name=enable_secure_boot,json=enableSecureBoot,proto3" json:"enable_secure_boot,omitempty"`
	// Whether to disable vTPM for this VM.
	DisableVtpm bool `protobuf:"varint,14,opt,name=disable_vtpm,json=disableVtpm,proto3" json:"disable_vtpm,omitempty"`
	// Whether to enable Confidential Compute for this VM.
	EnableConfidentialCompute bool `protobuf:"varint,15,opt,name=enable_confidential_compute,json=enableConfidentialCompute,proto3" json:"enable_confidential_compute,omitempty"`
	// Force_send_fields is the list of all fields to force send in the GCP API.
	ForceSendFields []string `protobuf:"bytes,16,rep,name=force_send_fields,json=forceSendFields,proto3" json:"force_send_fields,omitempty"`
	// These are the fields associated with force_send_fields that are specifically null.
	NullFields []string `protobuf:"bytes,17,rep,name=null_fields,json=nullFields,proto3" json:"null_fields,omitempty"`
	// gcp_channel of the GCP api to use, e.g. stable or alpha.
	GcpChannel GCPChannel `protobuf:"varint,18,opt,name=gcp_channel,json=gcpChannel,proto3,enum=config.GCPChannel" json:"gcp_channel,omitempty"`
	// The performance monitoring unit is the type of performance monitoring unit.
	PerformanceMonitoringUnit PerformanceMonitoringUnit `protobuf:"varint,19,opt,name=performance_monitoring_unit,json=performanceMonitoringUnit,proto3,enum=config.PerformanceMonitoringUnit" json:"performance_monitoring_unit,omitempty"`
	// Ensure VMs are terminated if under maintenance.
	TerminateOnMaintenance bool `protobuf:"varint,20,opt,name=terminate_on_maintenance,json=terminateOnMaintenance,proto3" json:"terminate_on_maintenance,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *VM) Reset() {
	*x = VM{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VM) ProtoMessage() {}

func (x *VM) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VM.ProtoReflect.Descriptor instead.
func (*VM) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{7}
}

func (x *VM) GetDisk() []*Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *VM) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *VM) GetMetadata() []*Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VM) GetMinCpuPlatform() string {
	if x != nil {
		return x.MinCpuPlatform
	}
	return ""
}

func (x *VM) GetNetworkInterface() []*NetworkInterface {
	if x != nil {
		return x.NetworkInterface
	}
	return nil
}

func (x *VM) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *VM) GetServiceAccount() []*ServiceAccount {
	if x != nil {
		return x.ServiceAccount
	}
	return nil
}

func (x *VM) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *VM) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *VM) GetScheduling() *Scheduling {
	if x != nil {
		return x.Scheduling
	}
	return nil
}

func (x *VM) GetLabel() map[string]string {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *VM) GetDisableIntegrityMonitoring() bool {
	if x != nil {
		return x.DisableIntegrityMonitoring
	}
	return false
}

func (x *VM) GetEnableSecureBoot() bool {
	if x != nil {
		return x.EnableSecureBoot
	}
	return false
}

func (x *VM) GetDisableVtpm() bool {
	if x != nil {
		return x.DisableVtpm
	}
	return false
}

func (x *VM) GetEnableConfidentialCompute() bool {
	if x != nil {
		return x.EnableConfidentialCompute
	}
	return false
}

func (x *VM) GetForceSendFields() []string {
	if x != nil {
		return x.ForceSendFields
	}
	return nil
}

func (x *VM) GetNullFields() []string {
	if x != nil {
		return x.NullFields
	}
	return nil
}

func (x *VM) GetGcpChannel() GCPChannel {
	if x != nil {
		return x.GcpChannel
	}
	return GCPChannel_GCP_CHANNEL_UNSPECIFIED
}

func (x *VM) GetPerformanceMonitoringUnit() PerformanceMonitoringUnit {
	if x != nil {
		return x.PerformanceMonitoringUnit
	}
	return PerformanceMonitoringUnit_PERFORMANCE_MONITORING_UNIT_UNSPECIFIED
}

func (x *VM) GetTerminateOnMaintenance() bool {
	if x != nil {
		return x.TerminateOnMaintenance
	}
	return false
}

// A length of time.
type TimePeriod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Time:
	//
	//	*TimePeriod_Duration
	//	*TimePeriod_Seconds
	Time          isTimePeriod_Time `protobuf_oneof:"time"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimePeriod) Reset() {
	*x = TimePeriod{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePeriod) ProtoMessage() {}

func (x *TimePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePeriod.ProtoReflect.Descriptor instead.
func (*TimePeriod) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{8}
}

func (x *TimePeriod) GetTime() isTimePeriod_Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TimePeriod) GetDuration() string {
	if x != nil {
		if x, ok := x.Time.(*TimePeriod_Duration); ok {
			return x.Duration
		}
	}
	return ""
}

func (x *TimePeriod) GetSeconds() int64 {
	if x != nil {
		if x, ok := x.Time.(*TimePeriod_Seconds); ok {
			return x.Seconds
		}
	}
	return 0
}

type isTimePeriod_Time interface {
	isTimePeriod_Time()
}

type TimePeriod_Duration struct {
	// The length of time in <int><unit> form.
	// Valid units are "s", "m", "h", "d", and "mo", meaning
	// "seconds", "minutes", "hours", "days", "months" respectively.
	// A "day" is shorthand for 24 hours.
	// A "month" is shorthand for 30 days.
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type TimePeriod_Seconds struct {
	// The length of time in seconds.
	Seconds int64 `protobuf:"varint,2,opt,name=seconds,proto3,oneof"`
}

func (*TimePeriod_Duration) isTimePeriod_Time() {}

func (*TimePeriod_Seconds) isTimePeriod_Time() {}

// A time of day.
type TimeOfDay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The day of the week the time applies to.
	Day dayofweek.DayOfWeek `protobuf:"varint,1,opt,name=day,proto3,enum=google.type.DayOfWeek" json:"day,omitempty"`
	// The location the time should be interpreted in.
	// https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// The time in 24-hour <hour>:<minute>.
	Time          string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeOfDay) Reset() {
	*x = TimeOfDay{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeOfDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOfDay) ProtoMessage() {}

func (x *TimeOfDay) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeOfDay.ProtoReflect.Descriptor instead.
func (*TimeOfDay) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{9}
}

func (x *TimeOfDay) GetDay() dayofweek.DayOfWeek {
	if x != nil {
		return x.Day
	}
	return dayofweek.DayOfWeek(0)
}

func (x *TimeOfDay) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *TimeOfDay) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// An amount of VMs for particular days of the week.
type Schedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The length of time the amount is in effect.
	// With start, this creates a half-open interval.
	// During [start, start+length) the amount will apply.
	Length *TimePeriod `protobuf:"bytes,2,opt,name=length,proto3" json:"length,omitempty"`
	// The start times when this amount goes into effect.
	Start *TimeOfDay `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// The minimum amount of VMs allowed.
	Min int32 `protobuf:"varint,4,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum amount of VMs allowed.
	Max           int32 `protobuf:"varint,5,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{10}
}

func (x *Schedule) GetLength() *TimePeriod {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *Schedule) GetStart() *TimeOfDay {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Schedule) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Schedule) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// An amount of VMs.
type Amount struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount of VMs to have at a particular time.
	Change []*Schedule `protobuf:"bytes,2,rep,name=change,proto3" json:"change,omitempty"`
	// The minimum amount of VMs allowed, and the amount of VMs to initialize to.
	Min int32 `protobuf:"varint,3,opt,name=min,proto3" json:"min,omitempty"`
	// The maximum amount of VMs allowed.
	Max           int32 `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Amount) Reset() {
	*x = Amount{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{11}
}

func (x *Amount) GetChange() []*Schedule {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *Amount) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Amount) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

// A config for one type of VM.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount of these VMs.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The attributes of these VMs.
	Attributes *VM `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// The lifetime of these VMs.
	// At the end of their lifetime, each VM is deleted and replaced. But it
	// won't happen immediately becasuse of scheduling reasons. The delay varies
	// based on the specified lifetime.
	Lifetime *TimePeriod `protobuf:"bytes,3,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// The prefix to use when naming these VMs.
	Prefix string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The hostname of the Swarming server these VMs should connect to.
	Swarming string `protobuf:"bytes,6,opt,name=swarming,proto3" json:"swarming,omitempty"`
	// The timeout of these VMs.
	// If no Swarming bot has connected by the timeout,
	// the VM is deleted and replaced.
	Timeout *TimePeriod `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Chrome Infra Auth groups considered to own this config.
	Owner []string `protobuf:"bytes,9,rep,name=owner,proto3" json:"owner,omitempty"`
	// Set of VMs to be created.
	// Each VM represent a DUT.
	// Optional. Updated dynamically via RPC.
	// TODO(b/318715067): Remove once Device Manager is ready.
	Duts map[string]*emptypb.Empty `protobuf:"bytes,10,rep,name=duts,proto3" json:"duts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Should only be set by the server. The revision of this config.
	Revision string `protobuf:"bytes,5,opt,name=revision,proto3" json:"revision,omitempty"`
	// Should only be set by the server. The current amount of VMs the server is
	// trying to create.
	CurrentAmount int32 `protobuf:"varint,8,opt,name=current_amount,json=currentAmount,proto3" json:"current_amount,omitempty"`
	// The Swarming pools are assosiated with prefix.
	// Any prefix is expected to be mapped to one Swarming pool.
	SwarmingPools []string `protobuf:"bytes,11,rep,name=swarming_pools,json=swarmingPools,proto3" json:"swarming_pools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{12}
}

func (x *Config) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Config) GetAttributes() *VM {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Config) GetLifetime() *TimePeriod {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

func (x *Config) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Config) GetSwarming() string {
	if x != nil {
		return x.Swarming
	}
	return ""
}

func (x *Config) GetTimeout() *TimePeriod {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Config) GetOwner() []string {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Config) GetDuts() map[string]*emptypb.Empty {
	if x != nil {
		return x.Duts
	}
	return nil
}

func (x *Config) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *Config) GetCurrentAmount() int32 {
	if x != nil {
		return x.CurrentAmount
	}
	return 0
}

func (x *Config) GetSwarmingPools() []string {
	if x != nil {
		return x.SwarmingPools
	}
	return nil
}

// A config for several types of VMs.
type Configs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The configs for different types of VMs.
	Vms           []*Config `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Configs) Reset() {
	*x = Configs{}
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configs) ProtoMessage() {}

func (x *Configs) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configs.ProtoReflect.Descriptor instead.
func (*Configs) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP(), []int{13}
}

func (x *Configs) GetVms() []*Config {
	if x != nil {
		return x.Vms
	}
	return nil
}

var File_go_chromium_org_luci_gce_api_config_v1_config_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDesc = string([]byte{
	0x0a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x79, 0x6f, 0x66,
	0x77, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x79,
	0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x54, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x72, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x39, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x22, 0xf6, 0x07, 0x0a,
	0x02, 0x56, 0x4d, 0x12, 0x20, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x70,
	0x75, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x43, 0x70, 0x75, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x45, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x4d, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x1c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x6f, 0x6f,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x74, 0x70, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x74, 0x70, 0x6d, 0x12, 0x3e, 0x0a, 0x1b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x75, 0x6c, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x67, 0x63, 0x70,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x43, 0x50, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x0a, 0x67, 0x63, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x61,
	0x0a, 0x1b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x19, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x6e, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x12, 0x28, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a,
	0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x61, 0x78, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x5c, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xed, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x4d, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x08, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x04, 0x64, 0x75, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x75, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x1a, 0x4f, 0x0a, 0x09, 0x44, 0x75, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x20, 0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x76, 0x6d, 0x73, 0x2a, 0x26, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4e, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x10, 0x00, 0x2a, 0x23, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x43, 0x53, 0x49, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x56, 0x4d, 0x45, 0x10, 0x01,
	0x2a, 0x44, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f,
	0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0x6e, 0x0a, 0x0a, 0x47, 0x43, 0x50, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x43, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x43, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x43, 0x50,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x42, 0x45, 0x54, 0x41, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x47, 0x43, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x10, 0x03, 0x2a, 0x77, 0x0a, 0x19, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x03, 0x42,
	0x72, 0xa2, 0xfe, 0x23, 0x3f, 0x0a, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x70, 0x70, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x67, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x3a, 0x76, 0x6d, 0x73,
	0x2e, 0x63, 0x66, 0x67, 0x5a, 0x2d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x63, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescData []byte
)

func file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDesc), len(file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDescData
}

var file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_go_chromium_org_luci_gce_api_config_v1_config_proto_goTypes = []any{
	(AccessConfigType)(0),          // 0: config.AccessConfigType
	(DiskInterface)(0),             // 1: config.DiskInterface
	(NodeAffinityOperator)(0),      // 2: config.NodeAffinityOperator
	(GCPChannel)(0),                // 3: config.GCPChannel
	(PerformanceMonitoringUnit)(0), // 4: config.PerformanceMonitoringUnit
	(*ServiceAccount)(nil),         // 5: config.ServiceAccount
	(*AccessConfig)(nil),           // 6: config.AccessConfig
	(*NetworkInterface)(nil),       // 7: config.NetworkInterface
	(*Disk)(nil),                   // 8: config.Disk
	(*Metadata)(nil),               // 9: config.Metadata
	(*NodeAffinity)(nil),           // 10: config.NodeAffinity
	(*Scheduling)(nil),             // 11: config.Scheduling
	(*VM)(nil),                     // 12: config.VM
	(*TimePeriod)(nil),             // 13: config.TimePeriod
	(*TimeOfDay)(nil),              // 14: config.TimeOfDay
	(*Schedule)(nil),               // 15: config.Schedule
	(*Amount)(nil),                 // 16: config.Amount
	(*Config)(nil),                 // 17: config.Config
	(*Configs)(nil),                // 18: config.Configs
	nil,                            // 19: config.VM.LabelEntry
	nil,                            // 20: config.Config.DutsEntry
	(dayofweek.DayOfWeek)(0),       // 21: google.type.DayOfWeek
	(*emptypb.Empty)(nil),          // 22: google.protobuf.Empty
}
var file_go_chromium_org_luci_gce_api_config_v1_config_proto_depIdxs = []int32{
	0,  // 0: config.AccessConfig.type:type_name -> config.AccessConfigType
	6,  // 1: config.NetworkInterface.access_config:type_name -> config.AccessConfig
	1,  // 2: config.Disk.interface:type_name -> config.DiskInterface
	2,  // 3: config.NodeAffinity.operator:type_name -> config.NodeAffinityOperator
	10, // 4: config.Scheduling.node_affinity:type_name -> config.NodeAffinity
	8,  // 5: config.VM.disk:type_name -> config.Disk
	9,  // 6: config.VM.metadata:type_name -> config.Metadata
	7,  // 7: config.VM.network_interface:type_name -> config.NetworkInterface
	5,  // 8: config.VM.service_account:type_name -> config.ServiceAccount
	11, // 9: config.VM.scheduling:type_name -> config.Scheduling
	19, // 10: config.VM.label:type_name -> config.VM.LabelEntry
	3,  // 11: config.VM.gcp_channel:type_name -> config.GCPChannel
	4,  // 12: config.VM.performance_monitoring_unit:type_name -> config.PerformanceMonitoringUnit
	21, // 13: config.TimeOfDay.day:type_name -> google.type.DayOfWeek
	13, // 14: config.Schedule.length:type_name -> config.TimePeriod
	14, // 15: config.Schedule.start:type_name -> config.TimeOfDay
	15, // 16: config.Amount.change:type_name -> config.Schedule
	16, // 17: config.Config.amount:type_name -> config.Amount
	12, // 18: config.Config.attributes:type_name -> config.VM
	13, // 19: config.Config.lifetime:type_name -> config.TimePeriod
	13, // 20: config.Config.timeout:type_name -> config.TimePeriod
	20, // 21: config.Config.duts:type_name -> config.Config.DutsEntry
	17, // 22: config.Configs.vms:type_name -> config.Config
	22, // 23: config.Config.DutsEntry.value:type_name -> google.protobuf.Empty
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_gce_api_config_v1_config_proto_init() }
func file_go_chromium_org_luci_gce_api_config_v1_config_proto_init() {
	if File_go_chromium_org_luci_gce_api_config_v1_config_proto != nil {
		return
	}
	file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[4].OneofWrappers = []any{
		(*Metadata_FromText)(nil),
		(*Metadata_FromFile)(nil),
	}
	file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes[8].OneofWrappers = []any{
		(*TimePeriod_Duration)(nil),
		(*TimePeriod_Seconds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDesc), len(file_go_chromium_org_luci_gce_api_config_v1_config_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_gce_api_config_v1_config_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_gce_api_config_v1_config_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_gce_api_config_v1_config_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_gce_api_config_v1_config_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_gce_api_config_v1_config_proto = out.File
	file_go_chromium_org_luci_gce_api_config_v1_config_proto_goTypes = nil
	file_go_chromium_org_luci_gce_api_config_v1_config_proto_depIdxs = nil
}
