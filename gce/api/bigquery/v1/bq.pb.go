// Copyright 2024 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/gce/api/bigquery/v1/bq.proto

package bigquery

import (
	v1 "go.chromium.org/luci/gce/api/config/v1"
	v11 "go.chromium.org/luci/gce/api/quotas/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configured count of a prefix.
type ConfiguredCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Project       string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfiguredCount) Reset() {
	*x = ConfiguredCount{}
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfiguredCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfiguredCount) ProtoMessage() {}

func (x *ConfiguredCount) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfiguredCount.ProtoReflect.Descriptor instead.
func (*ConfiguredCount) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP(), []int{0}
}

func (x *ConfiguredCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConfiguredCount) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Created count of a prefix.
type CreatedCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Project       string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Zone          string                 `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatedCount) Reset() {
	*x = CreatedCount{}
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatedCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedCount) ProtoMessage() {}

func (x *CreatedCount) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedCount.ProtoReflect.Descriptor instead.
func (*CreatedCount) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP(), []int{1}
}

func (x *CreatedCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CreatedCount) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreatedCount) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

// Connected count of a prefix.
type ConnectedCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int64                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Project       string                 `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Server        string                 `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	Zone          string                 `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectedCount) Reset() {
	*x = ConnectedCount{}
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectedCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedCount) ProtoMessage() {}

func (x *ConnectedCount) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedCount.ProtoReflect.Descriptor instead.
func (*ConnectedCount) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectedCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConnectedCount) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ConnectedCount) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *ConnectedCount) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

// The BigQuery table row for instance count.
type InstanceCountRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ingest time of the row.
	SnapshotTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// The prefix for this count.
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// The time this count was computed.
	Computed *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=computed,proto3" json:"computed,omitempty"`
	// The configured instance count of the prefix.
	ConfiguredCount []*ConfiguredCount `protobuf:"bytes,4,rep,name=configured_count,json=configuredCount,proto3" json:"configured_count,omitempty"`
	// The created instance count of the prefix.
	CreatedCount []*CreatedCount `protobuf:"bytes,5,rep,name=created_count,json=createdCount,proto3" json:"created_count,omitempty"`
	// The connected instance count of the prefix.
	ConnectedCount []*ConnectedCount `protobuf:"bytes,6,rep,name=connected_count,json=connectedCount,proto3" json:"connected_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *InstanceCountRow) Reset() {
	*x = InstanceCountRow{}
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceCountRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceCountRow) ProtoMessage() {}

func (x *InstanceCountRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceCountRow.ProtoReflect.Descriptor instead.
func (*InstanceCountRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP(), []int{3}
}

func (x *InstanceCountRow) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *InstanceCountRow) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *InstanceCountRow) GetComputed() *timestamppb.Timestamp {
	if x != nil {
		return x.Computed
	}
	return nil
}

func (x *InstanceCountRow) GetConfiguredCount() []*ConfiguredCount {
	if x != nil {
		return x.ConfiguredCount
	}
	return nil
}

func (x *InstanceCountRow) GetCreatedCount() []*CreatedCount {
	if x != nil {
		return x.CreatedCount
	}
	return nil
}

func (x *InstanceCountRow) GetConnectedCount() []*ConnectedCount {
	if x != nil {
		return x.ConnectedCount
	}
	return nil
}

// The BigQuery table row for a Config.
type ConfigRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ingest time of the row.
	SnapshotTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// The prefix config.
	Config        *v1.Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigRow) Reset() {
	*x = ConfigRow{}
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRow) ProtoMessage() {}

func (x *ConfigRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRow.ProtoReflect.Descriptor instead.
func (*ConfigRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigRow) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *ConfigRow) GetConfig() *v1.Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// The BigQuery table row for a machine type.
type MachineTypeRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ingest time of the row.
	SnapshotTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// Machine type name, e.g. n2-starndard-4.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// CPU type, e.g. "n2".
	CpuType string `protobuf:"bytes,3,opt,name=cpu_type,json=cpuType,proto3" json:"cpu_type,omitempty"`
	// The count of CPU.
	CpuCount float32 `protobuf:"fixed32,4,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	// Memory size in GB.
	MemoryGb float32 `protobuf:"fixed32,5,opt,name=memory_gb,json=memoryGb,proto3" json:"memory_gb,omitempty"`
	// Allowed count of disks.
	Disks         []int64 `protobuf:"varint,6,rep,packed,name=disks,proto3" json:"disks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MachineTypeRow) Reset() {
	*x = MachineTypeRow{}
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MachineTypeRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineTypeRow) ProtoMessage() {}

func (x *MachineTypeRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineTypeRow.ProtoReflect.Descriptor instead.
func (*MachineTypeRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP(), []int{5}
}

func (x *MachineTypeRow) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *MachineTypeRow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MachineTypeRow) GetCpuType() string {
	if x != nil {
		return x.CpuType
	}
	return ""
}

func (x *MachineTypeRow) GetCpuCount() float32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *MachineTypeRow) GetMemoryGb() float32 {
	if x != nil {
		return x.MemoryGb
	}
	return 0
}

func (x *MachineTypeRow) GetDisks() []int64 {
	if x != nil {
		return x.Disks
	}
	return nil
}

// The BigQuery table row for an AssignedQuota.
type AssignedQuotaRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Ingest time of the row.
	SnapshotTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// The assigned quota.
	AssignedQuota *v11.AssignedQuota `protobuf:"bytes,2,opt,name=assigned_quota,json=assignedQuota,proto3" json:"assigned_quota,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignedQuotaRow) Reset() {
	*x = AssignedQuotaRow{}
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignedQuotaRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignedQuotaRow) ProtoMessage() {}

func (x *AssignedQuotaRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignedQuotaRow.ProtoReflect.Descriptor instead.
func (*AssignedQuotaRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP(), []int{6}
}

func (x *AssignedQuotaRow) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *AssignedQuotaRow) GetAssignedQuota() *v11.AssignedQuota {
	if x != nil {
		return x.AssignedQuota
	}
	return nil
}

var File_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDesc = string([]byte{
	0x0a, 0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x71, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67, 0x63, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x52, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22,
	0x6c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xe9, 0x02,
	0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x36, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xd0, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x70, 0x75, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x62, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x52, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x67,
	0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f,
	0x76, 0x31, 0x3b, 0x62, 0x69, 0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescData []byte
)

func file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDesc), len(file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDescData
}

var file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_goTypes = []any{
	(*ConfiguredCount)(nil),       // 0: bigquery.ConfiguredCount
	(*CreatedCount)(nil),          // 1: bigquery.CreatedCount
	(*ConnectedCount)(nil),        // 2: bigquery.ConnectedCount
	(*InstanceCountRow)(nil),      // 3: bigquery.InstanceCountRow
	(*ConfigRow)(nil),             // 4: bigquery.ConfigRow
	(*MachineTypeRow)(nil),        // 5: bigquery.MachineTypeRow
	(*AssignedQuotaRow)(nil),      // 6: bigquery.AssignedQuotaRow
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
	(*v1.Config)(nil),             // 8: config.Config
	(*v11.AssignedQuota)(nil),     // 9: quotas.AssignedQuota
}
var file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_depIdxs = []int32{
	7,  // 0: bigquery.InstanceCountRow.snapshot_time:type_name -> google.protobuf.Timestamp
	7,  // 1: bigquery.InstanceCountRow.computed:type_name -> google.protobuf.Timestamp
	0,  // 2: bigquery.InstanceCountRow.configured_count:type_name -> bigquery.ConfiguredCount
	1,  // 3: bigquery.InstanceCountRow.created_count:type_name -> bigquery.CreatedCount
	2,  // 4: bigquery.InstanceCountRow.connected_count:type_name -> bigquery.ConnectedCount
	7,  // 5: bigquery.ConfigRow.snapshot_time:type_name -> google.protobuf.Timestamp
	8,  // 6: bigquery.ConfigRow.config:type_name -> config.Config
	7,  // 7: bigquery.MachineTypeRow.snapshot_time:type_name -> google.protobuf.Timestamp
	7,  // 8: bigquery.AssignedQuotaRow.snapshot_time:type_name -> google.protobuf.Timestamp
	9,  // 9: bigquery.AssignedQuotaRow.assigned_quota:type_name -> quotas.AssignedQuota
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_init() }
func file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_init() {
	if File_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDesc), len(file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto = out.File
	file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_goTypes = nil
	file_go_chromium_org_luci_gce_api_bigquery_v1_bq_proto_depIdxs = nil
}
