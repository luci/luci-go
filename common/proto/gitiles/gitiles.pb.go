// Copyright 2017 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/common/proto/gitiles/gitiles.proto

package gitiles

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	git "go.chromium.org/luci/common/proto/git"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List copied from
// https://github.com/google/gitiles/blob/65edbe49f2b3882a5979f602383ef0c7b2b8ee0c/java/com/google/gitiles/ArchiveFormat.java
type ArchiveRequest_Format int32

const (
	ArchiveRequest_Invalid ArchiveRequest_Format = 0
	ArchiveRequest_GZIP    ArchiveRequest_Format = 1
	ArchiveRequest_TAR     ArchiveRequest_Format = 2
	ArchiveRequest_BZIP2   ArchiveRequest_Format = 3
	ArchiveRequest_XZ      ArchiveRequest_Format = 4
)

// Enum value maps for ArchiveRequest_Format.
var (
	ArchiveRequest_Format_name = map[int32]string{
		0: "Invalid",
		1: "GZIP",
		2: "TAR",
		3: "BZIP2",
		4: "XZ",
	}
	ArchiveRequest_Format_value = map[string]int32{
		"Invalid": 0,
		"GZIP":    1,
		"TAR":     2,
		"BZIP2":   3,
		"XZ":      4,
	}
)

func (x ArchiveRequest_Format) Enum() *ArchiveRequest_Format {
	p := new(ArchiveRequest_Format)
	*p = x
	return p
}

func (x ArchiveRequest_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchiveRequest_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_enumTypes[0].Descriptor()
}

func (ArchiveRequest_Format) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_enumTypes[0]
}

func (x ArchiveRequest_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArchiveRequest_Format.Descriptor instead.
func (ArchiveRequest_Format) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{4, 0}
}

type DownloadFileRequest_Format int32

const (
	DownloadFileRequest_FORMAT_INVALID DownloadFileRequest_Format = 0
	DownloadFileRequest_TEXT           DownloadFileRequest_Format = 1
	DownloadFileRequest_JSON           DownloadFileRequest_Format = 2
)

// Enum value maps for DownloadFileRequest_Format.
var (
	DownloadFileRequest_Format_name = map[int32]string{
		0: "FORMAT_INVALID",
		1: "TEXT",
		2: "JSON",
	}
	DownloadFileRequest_Format_value = map[string]int32{
		"FORMAT_INVALID": 0,
		"TEXT":           1,
		"JSON":           2,
	}
)

func (x DownloadFileRequest_Format) Enum() *DownloadFileRequest_Format {
	p := new(DownloadFileRequest_Format)
	*p = x
	return p
}

func (x DownloadFileRequest_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadFileRequest_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_enumTypes[1].Descriptor()
}

func (DownloadFileRequest_Format) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_enumTypes[1]
}

func (x DownloadFileRequest_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadFileRequest_Format.Descriptor instead.
func (DownloadFileRequest_Format) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{6, 0}
}

// LogRequest is request message for Gitiles.Log rpc.
type LogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The commit where to start the listing from.
	// The value can be:
	//   - a git revision as 40-char string or its prefix so long as its unique in repo.
	//   - a ref such as "refs/heads/branch"
	//   - a ref defined as n-th parent of R in the form "R~n".
	//     For example, "main~2" or "deadbeef~1".
	//
	// Required.
	Committish string `protobuf:"bytes,3,opt,name=committish,proto3" json:"committish,omitempty"`
	// If specified, only commits not reachable from this commit (inclusive)
	// will be returned.
	//
	// In git's notation, this is
	//
	//	 $ git log ^exclude_ancestors_of committish
	//	OR
	//	 $ git log exclude_ancestors_of..committish
	//
	// https://git-scm.com/docs/gitrevisions#gitrevisions-Theememtwo-dotRangeNotation
	//
	// For example, given this repo
	//
	//	base -> A -> B -> C == refs/heads/main
	//	   \
	//	    X -> Y -> Z  == refs/heads/release
	//
	// calling Log(committish='refs/heads/release',
	//
	//	exclude_ancestors_of='refs/heads/main')
	//
	// will return ['Z', Y', 'X'].
	ExcludeAncestorsOf string `protobuf:"bytes,2,opt,name=exclude_ancestors_of,json=excludeAncestorsOf,proto3" json:"exclude_ancestors_of,omitempty"`
	// If true, include tree diff in commits.
	TreeDiff bool `protobuf:"varint,4,opt,name=tree_diff,json=treeDiff,proto3" json:"tree_diff,omitempty"`
	// If set to a non-empty value, the log will be for the given path
	Path string `protobuf:"bytes,12,opt,name=path,proto3" json:"path,omitempty"`
	// Value of next_page_token in LogResponse to continue.
	PageToken string `protobuf:"bytes,10,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// If > 0, number of commits to retrieve.
	PageSize      int32 `protobuf:"varint,11,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{0}
}

func (x *LogRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *LogRequest) GetCommittish() string {
	if x != nil {
		return x.Committish
	}
	return ""
}

func (x *LogRequest) GetExcludeAncestorsOf() string {
	if x != nil {
		return x.ExcludeAncestorsOf
	}
	return ""
}

func (x *LogRequest) GetTreeDiff() bool {
	if x != nil {
		return x.TreeDiff
	}
	return false
}

func (x *LogRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *LogRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *LogRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// LogRequest is response message for Gitiles.Log rpc.
type LogResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Retrieved commits.
	Log []*git.Commit `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
	// A page token for next LogRequest to fetch next page of commits.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogResponse) Reset() {
	*x = LogResponse{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogResponse) ProtoMessage() {}

func (x *LogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogResponse.ProtoReflect.Descriptor instead.
func (*LogResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{1}
}

func (x *LogResponse) GetLog() []*git.Commit {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *LogResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// RefsRequest is a request message of Gitiles.Refs RPC.
type RefsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Limits which refs to resolve to only those matching {refsPath}/*.
	//
	// Must be "refs" or start with "refs/".
	// Must not include glob '*'.
	// Use "refs/heads" to retrieve all branches.
	//
	// To fetch **all** refs in a repo, specify just "refs" but beware of two
	// caveats:
	//   - refs returned include a ref for each patchset for each Gerrit change
	//     associated with the repo.
	//   - returned map will contain special "HEAD" ref whose value in resulting map
	//     will be name of the actual ref to which "HEAD" points, which is typically
	//     "refs/heads/main".
	//
	// Thus, if you are looking for all tags and all branches of repo, it's
	// recommended to issue two Refs calls limited to "refs/tags" and "refs/heads"
	// instead of one call for "refs".
	//
	// Since Gerrit allows per-ref ACLs, it is possible that some refs matching
	// refPrefix would not be present in results because current user isn't granted
	// read permission on them.
	RefsPath      string `protobuf:"bytes,2,opt,name=refs_path,json=refsPath,proto3" json:"refs_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefsRequest) Reset() {
	*x = RefsRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefsRequest) ProtoMessage() {}

func (x *RefsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefsRequest.ProtoReflect.Descriptor instead.
func (*RefsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{2}
}

func (x *RefsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *RefsRequest) GetRefsPath() string {
	if x != nil {
		return x.RefsPath
	}
	return ""
}

// RefsResponse is a response message of Gitiles.Refs RPC.
type RefsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// revisions maps a ref to a revision.
	// Git branches have keys start with "refs/heads/".
	Revisions     map[string]string `protobuf:"bytes,2,rep,name=revisions,proto3" json:"revisions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefsResponse) Reset() {
	*x = RefsResponse{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefsResponse) ProtoMessage() {}

func (x *RefsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefsResponse.ProtoReflect.Descriptor instead.
func (*RefsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{3}
}

func (x *RefsResponse) GetRevisions() map[string]string {
	if x != nil {
		return x.Revisions
	}
	return nil
}

// ArchiveRequest is a request message of the Gitiles.Archive RPC.
type ArchiveRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The ref at which to generate the project archive for.
	//
	// viz refs/for/branch or just branch
	Ref string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	// Format of the returned archive.
	Format ArchiveRequest_Format `protobuf:"varint,3,opt,name=format,proto3,enum=gitiles.ArchiveRequest_Format" json:"format,omitempty"`
	// POSIX style path relative to the project root.
	// Optional. If not specified, it means to get the entire project archive.
	Path          string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRequest) Reset() {
	*x = ArchiveRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRequest) ProtoMessage() {}

func (x *ArchiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{4}
}

func (x *ArchiveRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ArchiveRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *ArchiveRequest) GetFormat() ArchiveRequest_Format {
	if x != nil {
		return x.Format
	}
	return ArchiveRequest_Invalid
}

func (x *ArchiveRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ArchiveResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Suggested name of the returned archive.
	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Contents of the archive streamed from gitiles.
	//
	// The underlying server RPC streams back the contents. This API simplifies
	// the RPC to a non-streaming response.
	Contents      []byte `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveResponse) Reset() {
	*x = ArchiveResponse{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveResponse) ProtoMessage() {}

func (x *ArchiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveResponse.ProtoReflect.Descriptor instead.
func (*ArchiveResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{5}
}

func (x *ArchiveResponse) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *ArchiveResponse) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

type DownloadFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The commit where to start the listing from.
	// The value can be:
	//   - a git revision as 40-char string or its prefix so long as its unique in repo.
	//   - a ref such as "refs/heads/branch"
	//   - a ref defined as n-th parent of R in the form "R~n".
	//     For example, "main~2" or "deadbeef~1".
	//
	// Required.
	Committish string `protobuf:"bytes,2,opt,name=committish,proto3" json:"committish,omitempty"`
	// Path relative to the project root to the file to download.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Format to download file in (default is TEXT).
	Format        DownloadFileRequest_Format `protobuf:"varint,4,opt,name=format,proto3,enum=gitiles.DownloadFileRequest_Format" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileRequest) Reset() {
	*x = DownloadFileRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileRequest) ProtoMessage() {}

func (x *DownloadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileRequest.ProtoReflect.Descriptor instead.
func (*DownloadFileRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{6}
}

func (x *DownloadFileRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DownloadFileRequest) GetCommittish() string {
	if x != nil {
		return x.Committish
	}
	return ""
}

func (x *DownloadFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DownloadFileRequest) GetFormat() DownloadFileRequest_Format {
	if x != nil {
		return x.Format
	}
	return DownloadFileRequest_FORMAT_INVALID
}

type DownloadFileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Decoded contents of the downloaded file.
	//
	// The underlying server RPC streams back the contents. This API simplifies
	// the RPC to a non-streaming response.
	Contents      string `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileResponse) Reset() {
	*x = DownloadFileResponse{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileResponse) ProtoMessage() {}

func (x *DownloadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileResponse.ProtoReflect.Descriptor instead.
func (*DownloadFileResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{7}
}

func (x *DownloadFileResponse) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type DownloadDiffRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The git revision to get the diff at.
	// The value can be:
	//   - a git revision as 40-char string or its prefix so long as its unique in repo.
	//   - a ref such as "refs/heads/branch"
	//   - a ref defined as n-th parent of R in the form "R~n".
	//     For example, "main~2" or "deadbeef~1".
	//
	// Required.
	Committish string `protobuf:"bytes,2,opt,name=committish,proto3" json:"committish,omitempty"`
	// The git revision to compute the diff against.
	// The value can be:
	//   - a git revision as 40-char string or its prefix so long as its unique in repo.
	//   - a ref such as "refs/heads/branch"
	//   - a ref defined as n-th parent of R in the form "R~n".
	//     For example, "main~2" or "deadbeef~1".
	//
	// Optional. If not specified, the diff will be against the parent of committish.
	Base string `protobuf:"bytes,4,opt,name=base,proto3" json:"base,omitempty"`
	// Path relative to the project root to the file to limit the diff to.
	// Optional.
	Path          string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadDiffRequest) Reset() {
	*x = DownloadDiffRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadDiffRequest) ProtoMessage() {}

func (x *DownloadDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadDiffRequest.ProtoReflect.Descriptor instead.
func (*DownloadDiffRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{8}
}

func (x *DownloadDiffRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DownloadDiffRequest) GetCommittish() string {
	if x != nil {
		return x.Committish
	}
	return ""
}

func (x *DownloadDiffRequest) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *DownloadDiffRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DownloadDiffResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Decoded contents of the diff.
	Contents      string `protobuf:"bytes,1,opt,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadDiffResponse) Reset() {
	*x = DownloadDiffResponse{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadDiffResponse) ProtoMessage() {}

func (x *DownloadDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadDiffResponse.ProtoReflect.Descriptor instead.
func (*DownloadDiffResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{9}
}

func (x *DownloadDiffResponse) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type GetProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	// Required.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{10}
}

func (x *GetProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Project struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The URL to clone the project.
	CloneUrl      string `protobuf:"bytes,2,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{11}
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

type ProjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectsRequest) Reset() {
	*x = ProjectsRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsRequest) ProtoMessage() {}

func (x *ProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsRequest.ProtoReflect.Descriptor instead.
func (*ProjectsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{12}
}

type ProjectsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of available Gitiles projects
	Projects      []string `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectsResponse) Reset() {
	*x = ProjectsResponse{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectsResponse) ProtoMessage() {}

func (x *ProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectsResponse.ProtoReflect.Descriptor instead.
func (*ProjectsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{13}
}

func (x *ProjectsResponse) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type ListFilesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gitiles project, e.g. "chromium/src" part in
	// https://chromium.googlesource.com/chromium/src/+/main
	// Required.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The git revision to list files at.
	// The value can be:
	//   - a git revision as 40-char string or its prefix so long as its unique in repo.
	//   - a ref such as "refs/heads/branch"
	//   - a ref defined as n-th parent of R in the form "R~n".
	//     For example, "main~2" or "deadbeef~1".
	//
	// Required.
	Committish string `protobuf:"bytes,2,opt,name=committish,proto3" json:"committish,omitempty"`
	// Path relative to the project root to limit the list to. Only direct
	// children will be returned -- the request does not recursively process
	// child directories.
	// Optional.
	Path          string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{14}
}

func (x *ListFilesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListFilesRequest) GetCommittish() string {
	if x != nil {
		return x.Committish
	}
	return ""
}

func (x *ListFilesRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ListFilesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of files.
	Files         []*git.File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP(), []int{15}
}

func (x *ListFilesResponse) GetFiles() []*git.File {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_go_chromium_org_luci_common_proto_gitiles_gitiles_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDesc = string([]byte{
	0x0a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x1a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x12,
	0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x4f,
	0x66, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x44, 0x69, 0x66, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x54,
	0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x03, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x44, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x72,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01,
	0x0a, 0x0e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3b, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x52,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x5a, 0x49, 0x50, 0x32, 0x10, 0x03, 0x12, 0x06, 0x0a,
	0x02, 0x58, 0x5a, 0x10, 0x04, 0x22, 0x49, 0x0a, 0x0f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xd2, 0x01, 0x0a, 0x13, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69,
	0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x30, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x32, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x13, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x32, 0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x11, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e,
	0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x60,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x34, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x32, 0x99, 0x04, 0x0a, 0x07, 0x47, 0x69, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x13, 0x2e, 0x67, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x04, 0x52, 0x65, 0x66, 0x73, 0x12, 0x14,
	0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x07, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e,
	0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1c, 0x2e, 0x67,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x69, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x66,
	0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescData []byte
)

func file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDesc), len(file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDescData
}

var file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_goTypes = []any{
	(ArchiveRequest_Format)(0),      // 0: gitiles.ArchiveRequest.Format
	(DownloadFileRequest_Format)(0), // 1: gitiles.DownloadFileRequest.Format
	(*LogRequest)(nil),              // 2: gitiles.LogRequest
	(*LogResponse)(nil),             // 3: gitiles.LogResponse
	(*RefsRequest)(nil),             // 4: gitiles.RefsRequest
	(*RefsResponse)(nil),            // 5: gitiles.RefsResponse
	(*ArchiveRequest)(nil),          // 6: gitiles.ArchiveRequest
	(*ArchiveResponse)(nil),         // 7: gitiles.ArchiveResponse
	(*DownloadFileRequest)(nil),     // 8: gitiles.DownloadFileRequest
	(*DownloadFileResponse)(nil),    // 9: gitiles.DownloadFileResponse
	(*DownloadDiffRequest)(nil),     // 10: gitiles.DownloadDiffRequest
	(*DownloadDiffResponse)(nil),    // 11: gitiles.DownloadDiffResponse
	(*GetProjectRequest)(nil),       // 12: gitiles.GetProjectRequest
	(*Project)(nil),                 // 13: gitiles.Project
	(*ProjectsRequest)(nil),         // 14: gitiles.ProjectsRequest
	(*ProjectsResponse)(nil),        // 15: gitiles.ProjectsResponse
	(*ListFilesRequest)(nil),        // 16: gitiles.ListFilesRequest
	(*ListFilesResponse)(nil),       // 17: gitiles.ListFilesResponse
	nil,                             // 18: gitiles.RefsResponse.RevisionsEntry
	(*git.Commit)(nil),              // 19: git.Commit
	(*git.File)(nil),                // 20: git.File
}
var file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_depIdxs = []int32{
	19, // 0: gitiles.LogResponse.log:type_name -> git.Commit
	18, // 1: gitiles.RefsResponse.revisions:type_name -> gitiles.RefsResponse.RevisionsEntry
	0,  // 2: gitiles.ArchiveRequest.format:type_name -> gitiles.ArchiveRequest.Format
	1,  // 3: gitiles.DownloadFileRequest.format:type_name -> gitiles.DownloadFileRequest.Format
	20, // 4: gitiles.ListFilesResponse.files:type_name -> git.File
	2,  // 5: gitiles.Gitiles.Log:input_type -> gitiles.LogRequest
	4,  // 6: gitiles.Gitiles.Refs:input_type -> gitiles.RefsRequest
	6,  // 7: gitiles.Gitiles.Archive:input_type -> gitiles.ArchiveRequest
	8,  // 8: gitiles.Gitiles.DownloadFile:input_type -> gitiles.DownloadFileRequest
	10, // 9: gitiles.Gitiles.DownloadDiff:input_type -> gitiles.DownloadDiffRequest
	12, // 10: gitiles.Gitiles.GetProject:input_type -> gitiles.GetProjectRequest
	14, // 11: gitiles.Gitiles.Projects:input_type -> gitiles.ProjectsRequest
	16, // 12: gitiles.Gitiles.ListFiles:input_type -> gitiles.ListFilesRequest
	3,  // 13: gitiles.Gitiles.Log:output_type -> gitiles.LogResponse
	5,  // 14: gitiles.Gitiles.Refs:output_type -> gitiles.RefsResponse
	7,  // 15: gitiles.Gitiles.Archive:output_type -> gitiles.ArchiveResponse
	9,  // 16: gitiles.Gitiles.DownloadFile:output_type -> gitiles.DownloadFileResponse
	11, // 17: gitiles.Gitiles.DownloadDiff:output_type -> gitiles.DownloadDiffResponse
	13, // 18: gitiles.Gitiles.GetProject:output_type -> gitiles.Project
	15, // 19: gitiles.Gitiles.Projects:output_type -> gitiles.ProjectsResponse
	17, // 20: gitiles.Gitiles.ListFiles:output_type -> gitiles.ListFilesResponse
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_init() }
func file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_init() {
	if File_go_chromium_org_luci_common_proto_gitiles_gitiles_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDesc), len(file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_common_proto_gitiles_gitiles_proto = out.File
	file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_goTypes = nil
	file_go_chromium_org_luci_common_proto_gitiles_gitiles_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GitilesClient is the client API for Gitiles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitilesClient interface {
	// Log retrieves commit log.
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// Refs retrieves repo refs.
	Refs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (*RefsResponse, error)
	// Archive retrieves archived content bundle under the provided path in a
	// repo or the entire repo if the path is not provided.
	//
	// Note: for a single file, use DownloadFile to obtain the plain text file.
	Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error)
	// DownloadFile retrieves a file from the project.
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	// DownloadDiff retrieves a diff of a revision from the project.
	DownloadDiff(ctx context.Context, in *DownloadDiffRequest, opts ...grpc.CallOption) (*DownloadDiffResponse, error)
	// GetProject retrieves a project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// Projects retrieves list of available Gitiles projects.
	Projects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsResponse, error)
	// ListFiles retrieves a list of files at the given revision.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
}
type gitilesPRPCClient struct {
	client *prpc.Client
}

func NewGitilesPRPCClient(client *prpc.Client) GitilesClient {
	return &gitilesPRPCClient{client}
}

func (c *gitilesPRPCClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) Refs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (*RefsResponse, error) {
	out := new(RefsResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "Refs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error) {
	out := new(ArchiveResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) DownloadDiff(ctx context.Context, in *DownloadDiffRequest, opts ...grpc.CallOption) (*DownloadDiffResponse, error) {
	out := new(DownloadDiffResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "DownloadDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.client.Call(ctx, "gitiles.Gitiles", "GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) Projects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsResponse, error) {
	out := new(ProjectsResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "Projects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesPRPCClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.client.Call(ctx, "gitiles.Gitiles", "ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gitilesClient struct {
	cc grpc.ClientConnInterface
}

func NewGitilesClient(cc grpc.ClientConnInterface) GitilesClient {
	return &gitilesClient{cc}
}

func (c *gitilesClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) Refs(ctx context.Context, in *RefsRequest, opts ...grpc.CallOption) (*RefsResponse, error) {
	out := new(RefsResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/Refs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) Archive(ctx context.Context, in *ArchiveRequest, opts ...grpc.CallOption) (*ArchiveResponse, error) {
	out := new(ArchiveResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/Archive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) DownloadDiff(ctx context.Context, in *DownloadDiffRequest, opts ...grpc.CallOption) (*DownloadDiffResponse, error) {
	out := new(DownloadDiffResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/DownloadDiff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) Projects(ctx context.Context, in *ProjectsRequest, opts ...grpc.CallOption) (*ProjectsResponse, error) {
	out := new(ProjectsResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/Projects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitilesClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/gitiles.Gitiles/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitilesServer is the server API for Gitiles service.
type GitilesServer interface {
	// Log retrieves commit log.
	Log(context.Context, *LogRequest) (*LogResponse, error)
	// Refs retrieves repo refs.
	Refs(context.Context, *RefsRequest) (*RefsResponse, error)
	// Archive retrieves archived content bundle under the provided path in a
	// repo or the entire repo if the path is not provided.
	//
	// Note: for a single file, use DownloadFile to obtain the plain text file.
	Archive(context.Context, *ArchiveRequest) (*ArchiveResponse, error)
	// DownloadFile retrieves a file from the project.
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	// DownloadDiff retrieves a diff of a revision from the project.
	DownloadDiff(context.Context, *DownloadDiffRequest) (*DownloadDiffResponse, error)
	// GetProject retrieves a project.
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	// Projects retrieves list of available Gitiles projects.
	Projects(context.Context, *ProjectsRequest) (*ProjectsResponse, error)
	// ListFiles retrieves a list of files at the given revision.
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
}

// UnimplementedGitilesServer can be embedded to have forward compatible implementations.
type UnimplementedGitilesServer struct {
}

func (*UnimplementedGitilesServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (*UnimplementedGitilesServer) Refs(context.Context, *RefsRequest) (*RefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refs not implemented")
}
func (*UnimplementedGitilesServer) Archive(context.Context, *ArchiveRequest) (*ArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Archive not implemented")
}
func (*UnimplementedGitilesServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (*UnimplementedGitilesServer) DownloadDiff(context.Context, *DownloadDiffRequest) (*DownloadDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadDiff not implemented")
}
func (*UnimplementedGitilesServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedGitilesServer) Projects(context.Context, *ProjectsRequest) (*ProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Projects not implemented")
}
func (*UnimplementedGitilesServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}

func RegisterGitilesServer(s prpc.Registrar, srv GitilesServer) {
	s.RegisterService(&_Gitiles_serviceDesc, srv)
}

func _Gitiles_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_Refs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).Refs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/Refs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).Refs(ctx, req.(*RefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_Archive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).Archive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/Archive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).Archive(ctx, req.(*ArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_DownloadDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).DownloadDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/DownloadDiff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).DownloadDiff(ctx, req.(*DownloadDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_Projects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).Projects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/Projects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).Projects(ctx, req.(*ProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gitiles_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitilesServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gitiles.Gitiles/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitilesServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gitiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitiles.Gitiles",
	HandlerType: (*GitilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _Gitiles_Log_Handler,
		},
		{
			MethodName: "Refs",
			Handler:    _Gitiles_Refs_Handler,
		},
		{
			MethodName: "Archive",
			Handler:    _Gitiles_Archive_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _Gitiles_DownloadFile_Handler,
		},
		{
			MethodName: "DownloadDiff",
			Handler:    _Gitiles_DownloadDiff_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Gitiles_GetProject_Handler,
		},
		{
			MethodName: "Projects",
			Handler:    _Gitiles_Projects_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Gitiles_ListFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/common/proto/gitiles/gitiles.proto",
}
