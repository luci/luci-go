// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: go.chromium.org/luci/common/proto/gerrit/gerrit.proto

package gerritpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gerrit_ListProjects_FullMethodName          = "/gerrit.Gerrit/ListProjects"
	Gerrit_GetRefInfo_FullMethodName            = "/gerrit.Gerrit/GetRefInfo"
	Gerrit_ListFileOwners_FullMethodName        = "/gerrit.Gerrit/ListFileOwners"
	Gerrit_ListAccountEmails_FullMethodName     = "/gerrit.Gerrit/ListAccountEmails"
	Gerrit_ListChanges_FullMethodName           = "/gerrit.Gerrit/ListChanges"
	Gerrit_GetChange_FullMethodName             = "/gerrit.Gerrit/GetChange"
	Gerrit_GetMergeable_FullMethodName          = "/gerrit.Gerrit/GetMergeable"
	Gerrit_ListFiles_FullMethodName             = "/gerrit.Gerrit/ListFiles"
	Gerrit_GetRelatedChanges_FullMethodName     = "/gerrit.Gerrit/GetRelatedChanges"
	Gerrit_GetPureRevert_FullMethodName         = "/gerrit.Gerrit/GetPureRevert"
	Gerrit_GetMetaDiff_FullMethodName           = "/gerrit.Gerrit/GetMetaDiff"
	Gerrit_CreateChange_FullMethodName          = "/gerrit.Gerrit/CreateChange"
	Gerrit_ChangeEditFileContent_FullMethodName = "/gerrit.Gerrit/ChangeEditFileContent"
	Gerrit_DeleteEditFileContent_FullMethodName = "/gerrit.Gerrit/DeleteEditFileContent"
	Gerrit_ChangeEditPublish_FullMethodName     = "/gerrit.Gerrit/ChangeEditPublish"
	Gerrit_AddReviewer_FullMethodName           = "/gerrit.Gerrit/AddReviewer"
	Gerrit_DeleteReviewer_FullMethodName        = "/gerrit.Gerrit/DeleteReviewer"
	Gerrit_SetReview_FullMethodName             = "/gerrit.Gerrit/SetReview"
	Gerrit_AddToAttentionSet_FullMethodName     = "/gerrit.Gerrit/AddToAttentionSet"
	Gerrit_SubmitChange_FullMethodName          = "/gerrit.Gerrit/SubmitChange"
	Gerrit_RevertChange_FullMethodName          = "/gerrit.Gerrit/RevertChange"
	Gerrit_AbandonChange_FullMethodName         = "/gerrit.Gerrit/AbandonChange"
	Gerrit_SubmitRevision_FullMethodName        = "/gerrit.Gerrit/SubmitRevision"
)

// GerritClient is the client API for Gerrit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GerritClient interface {
	// Lists the projects on a Gerrit host
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#list-projects
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Retrieve information about a ref of a project.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-branch
	GetRefInfo(ctx context.Context, in *RefInfoRequest, opts ...grpc.CallOption) (*RefInfo, error)
	// Lists the code owners for a file/folder in a branch
	//
	// https://chromium-review.googlesource.com/plugins/code-owners/Documentation/rest-api.html#list-code-owners-for-path-in-branch
	ListFileOwners(ctx context.Context, in *ListFileOwnersRequest, opts ...grpc.CallOption) (*ListOwnersResponse, error)
	// Returns the email addresses linked in the given Gerrit account.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-accounts.html#list-account-emails
	ListAccountEmails(ctx context.Context, in *ListAccountEmailsRequest, opts ...grpc.CallOption) (*ListAccountEmailsResponse, error)
	// Lists changes that match a query.
	//
	// TODO(tandrii): recommend a paging query.
	//
	// Note, although the Gerrit API supports multiple queries, for which
	// it can return multiple lists of changes, this is not a foreseen use-case
	// so this API just includes one query with one returned list of changes.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-changes
	ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ListChangesResponse, error)
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Gets Mergeable status for a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-mergeable
	GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error)
	// Lists the files that were modified, added or deleted in a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Retrieves related changes of a revision.
	//
	// Related changes are changes that either depend on, or are dependencies of
	// the revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-related-changes
	GetRelatedChanges(ctx context.Context, in *GetRelatedChangesRequest, opts ...grpc.CallOption) (*GetRelatedChangesResponse, error)
	// Check if the given change is a pure revert of the change it references in
	// revertOf. See also ChangeInfo.revert_of.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-pure-revert
	GetPureRevert(ctx context.Context, in *GetPureRevertRequest, opts ...grpc.CallOption) (*PureRevertInfo, error)
	// Retrieves the difference between two historical states of a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-meta-diff
	GetMetaDiff(ctx context.Context, in *GetMetaDiffRequest, opts ...grpc.CallOption) (*MetaDiff, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
	DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Add a reviewer to a change
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#add-reviewer
	AddReviewer(ctx context.Context, in *AddReviewerRequest, opts ...grpc.CallOption) (*AddReviewerResult, error)
	// Deletes a reviewer from a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-reviewer
	DeleteReviewer(ctx context.Context, in *DeleteReviewerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error)
	// Adds a single user to the attention set of a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#add-to-attention-set
	AddToAttentionSet(ctx context.Context, in *AttentionSetRequest, opts ...grpc.CallOption) (*AccountInfo, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Revert a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revert-change
	RevertChange(ctx context.Context, in *RevertChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Submit a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-revision
	SubmitRevision(ctx context.Context, in *SubmitRevisionRequest, opts ...grpc.CallOption) (*SubmitInfo, error)
}

type gerritClient struct {
	cc grpc.ClientConnInterface
}

func NewGerritClient(cc grpc.ClientConnInterface) GerritClient {
	return &gerritClient{cc}
}

func (c *gerritClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, Gerrit_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetRefInfo(ctx context.Context, in *RefInfoRequest, opts ...grpc.CallOption) (*RefInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefInfo)
	err := c.cc.Invoke(ctx, Gerrit_GetRefInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ListFileOwners(ctx context.Context, in *ListFileOwnersRequest, opts ...grpc.CallOption) (*ListOwnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOwnersResponse)
	err := c.cc.Invoke(ctx, Gerrit_ListFileOwners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ListAccountEmails(ctx context.Context, in *ListAccountEmailsRequest, opts ...grpc.CallOption) (*ListAccountEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountEmailsResponse)
	err := c.cc.Invoke(ctx, Gerrit_ListAccountEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ListChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChangesResponse)
	err := c.cc.Invoke(ctx, Gerrit_ListChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, Gerrit_GetChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MergeableInfo)
	err := c.cc.Invoke(ctx, Gerrit_GetMergeable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, Gerrit_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetRelatedChanges(ctx context.Context, in *GetRelatedChangesRequest, opts ...grpc.CallOption) (*GetRelatedChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelatedChangesResponse)
	err := c.cc.Invoke(ctx, Gerrit_GetRelatedChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetPureRevert(ctx context.Context, in *GetPureRevertRequest, opts ...grpc.CallOption) (*PureRevertInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PureRevertInfo)
	err := c.cc.Invoke(ctx, Gerrit_GetPureRevert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetMetaDiff(ctx context.Context, in *GetMetaDiffRequest, opts ...grpc.CallOption) (*MetaDiff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MetaDiff)
	err := c.cc.Invoke(ctx, Gerrit_GetMetaDiff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, Gerrit_CreateChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gerrit_ChangeEditFileContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gerrit_DeleteEditFileContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gerrit_ChangeEditPublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) AddReviewer(ctx context.Context, in *AddReviewerRequest, opts ...grpc.CallOption) (*AddReviewerResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReviewerResult)
	err := c.cc.Invoke(ctx, Gerrit_AddReviewer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) DeleteReviewer(ctx context.Context, in *DeleteReviewerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Gerrit_DeleteReviewer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewResult)
	err := c.cc.Invoke(ctx, Gerrit_SetReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) AddToAttentionSet(ctx context.Context, in *AttentionSetRequest, opts ...grpc.CallOption) (*AccountInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, Gerrit_AddToAttentionSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, Gerrit_SubmitChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) RevertChange(ctx context.Context, in *RevertChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, Gerrit_RevertChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, Gerrit_AbandonChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SubmitRevision(ctx context.Context, in *SubmitRevisionRequest, opts ...grpc.CallOption) (*SubmitInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitInfo)
	err := c.cc.Invoke(ctx, Gerrit_SubmitRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GerritServer is the server API for Gerrit service.
// All implementations must embed UnimplementedGerritServer
// for forward compatibility.
type GerritServer interface {
	// Lists the projects on a Gerrit host
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#list-projects
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Retrieve information about a ref of a project.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-branch
	GetRefInfo(context.Context, *RefInfoRequest) (*RefInfo, error)
	// Lists the code owners for a file/folder in a branch
	//
	// https://chromium-review.googlesource.com/plugins/code-owners/Documentation/rest-api.html#list-code-owners-for-path-in-branch
	ListFileOwners(context.Context, *ListFileOwnersRequest) (*ListOwnersResponse, error)
	// Returns the email addresses linked in the given Gerrit account.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-accounts.html#list-account-emails
	ListAccountEmails(context.Context, *ListAccountEmailsRequest) (*ListAccountEmailsResponse, error)
	// Lists changes that match a query.
	//
	// TODO(tandrii): recommend a paging query.
	//
	// Note, although the Gerrit API supports multiple queries, for which
	// it can return multiple lists of changes, this is not a foreseen use-case
	// so this API just includes one query with one returned list of changes.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-changes
	ListChanges(context.Context, *ListChangesRequest) (*ListChangesResponse, error)
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(context.Context, *GetChangeRequest) (*ChangeInfo, error)
	// Gets Mergeable status for a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-mergeable
	GetMergeable(context.Context, *GetMergeableRequest) (*MergeableInfo, error)
	// Lists the files that were modified, added or deleted in a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Retrieves related changes of a revision.
	//
	// Related changes are changes that either depend on, or are dependencies of
	// the revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-related-changes
	GetRelatedChanges(context.Context, *GetRelatedChangesRequest) (*GetRelatedChangesResponse, error)
	// Check if the given change is a pure revert of the change it references in
	// revertOf. See also ChangeInfo.revert_of.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-pure-revert
	GetPureRevert(context.Context, *GetPureRevertRequest) (*PureRevertInfo, error)
	// Retrieves the difference between two historical states of a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-meta-diff
	GetMetaDiff(context.Context, *GetMetaDiffRequest) (*MetaDiff, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(context.Context, *CreateChangeRequest) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(context.Context, *ChangeEditFileContentRequest) (*emptypb.Empty, error)
	// Delete a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
	DeleteEditFileContent(context.Context, *DeleteEditFileContentRequest) (*emptypb.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(context.Context, *ChangeEditPublishRequest) (*emptypb.Empty, error)
	// Add a reviewer to a change
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#add-reviewer
	AddReviewer(context.Context, *AddReviewerRequest) (*AddReviewerResult, error)
	// Deletes a reviewer from a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-reviewer
	DeleteReviewer(context.Context, *DeleteReviewerRequest) (*emptypb.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(context.Context, *SetReviewRequest) (*ReviewResult, error)
	// Adds a single user to the attention set of a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#add-to-attention-set
	AddToAttentionSet(context.Context, *AttentionSetRequest) (*AccountInfo, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(context.Context, *SubmitChangeRequest) (*ChangeInfo, error)
	// Revert a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revert-change
	RevertChange(context.Context, *RevertChangeRequest) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(context.Context, *AbandonChangeRequest) (*ChangeInfo, error)
	// Submit a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-revision
	SubmitRevision(context.Context, *SubmitRevisionRequest) (*SubmitInfo, error)
	mustEmbedUnimplementedGerritServer()
}

// UnimplementedGerritServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGerritServer struct{}

func (UnimplementedGerritServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedGerritServer) GetRefInfo(context.Context, *RefInfoRequest) (*RefInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefInfo not implemented")
}
func (UnimplementedGerritServer) ListFileOwners(context.Context, *ListFileOwnersRequest) (*ListOwnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileOwners not implemented")
}
func (UnimplementedGerritServer) ListAccountEmails(context.Context, *ListAccountEmailsRequest) (*ListAccountEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountEmails not implemented")
}
func (UnimplementedGerritServer) ListChanges(context.Context, *ListChangesRequest) (*ListChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChanges not implemented")
}
func (UnimplementedGerritServer) GetChange(context.Context, *GetChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChange not implemented")
}
func (UnimplementedGerritServer) GetMergeable(context.Context, *GetMergeableRequest) (*MergeableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergeable not implemented")
}
func (UnimplementedGerritServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedGerritServer) GetRelatedChanges(context.Context, *GetRelatedChangesRequest) (*GetRelatedChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedChanges not implemented")
}
func (UnimplementedGerritServer) GetPureRevert(context.Context, *GetPureRevertRequest) (*PureRevertInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPureRevert not implemented")
}
func (UnimplementedGerritServer) GetMetaDiff(context.Context, *GetMetaDiffRequest) (*MetaDiff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaDiff not implemented")
}
func (UnimplementedGerritServer) CreateChange(context.Context, *CreateChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChange not implemented")
}
func (UnimplementedGerritServer) ChangeEditFileContent(context.Context, *ChangeEditFileContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEditFileContent not implemented")
}
func (UnimplementedGerritServer) DeleteEditFileContent(context.Context, *DeleteEditFileContentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEditFileContent not implemented")
}
func (UnimplementedGerritServer) ChangeEditPublish(context.Context, *ChangeEditPublishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEditPublish not implemented")
}
func (UnimplementedGerritServer) AddReviewer(context.Context, *AddReviewerRequest) (*AddReviewerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReviewer not implemented")
}
func (UnimplementedGerritServer) DeleteReviewer(context.Context, *DeleteReviewerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReviewer not implemented")
}
func (UnimplementedGerritServer) SetReview(context.Context, *SetReviewRequest) (*ReviewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReview not implemented")
}
func (UnimplementedGerritServer) AddToAttentionSet(context.Context, *AttentionSetRequest) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToAttentionSet not implemented")
}
func (UnimplementedGerritServer) SubmitChange(context.Context, *SubmitChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitChange not implemented")
}
func (UnimplementedGerritServer) RevertChange(context.Context, *RevertChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertChange not implemented")
}
func (UnimplementedGerritServer) AbandonChange(context.Context, *AbandonChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonChange not implemented")
}
func (UnimplementedGerritServer) SubmitRevision(context.Context, *SubmitRevisionRequest) (*SubmitInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRevision not implemented")
}
func (UnimplementedGerritServer) mustEmbedUnimplementedGerritServer() {}
func (UnimplementedGerritServer) testEmbeddedByValue()                {}

// UnsafeGerritServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GerritServer will
// result in compilation errors.
type UnsafeGerritServer interface {
	mustEmbedUnimplementedGerritServer()
}

func RegisterGerritServer(s grpc.ServiceRegistrar, srv GerritServer) {
	// If the following call pancis, it indicates UnimplementedGerritServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gerrit_ServiceDesc, srv)
}

func _Gerrit_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetRefInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetRefInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_GetRefInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetRefInfo(ctx, req.(*RefInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ListFileOwners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileOwnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListFileOwners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_ListFileOwners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListFileOwners(ctx, req.(*ListFileOwnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ListAccountEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListAccountEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_ListAccountEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListAccountEmails(ctx, req.(*ListAccountEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ListChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_ListChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListChanges(ctx, req.(*ListChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_GetChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetMergeable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergeableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetMergeable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_GetMergeable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetMergeable(ctx, req.(*GetMergeableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetRelatedChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetRelatedChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_GetRelatedChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetRelatedChanges(ctx, req.(*GetRelatedChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetPureRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPureRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetPureRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_GetPureRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetPureRevert(ctx, req.(*GetPureRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetMetaDiff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetMetaDiff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_GetMetaDiff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetMetaDiff(ctx, req.(*GetMetaDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_CreateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).CreateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_CreateChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).CreateChange(ctx, req.(*CreateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_ChangeEditFileContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditFileContent(ctx, req.(*ChangeEditFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_DeleteEditFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEditFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).DeleteEditFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_DeleteEditFileContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).DeleteEditFileContent(ctx, req.(*DeleteEditFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_ChangeEditPublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditPublish(ctx, req.(*ChangeEditPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_AddReviewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).AddReviewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_AddReviewer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).AddReviewer(ctx, req.(*AddReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_DeleteReviewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).DeleteReviewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_DeleteReviewer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).DeleteReviewer(ctx, req.(*DeleteReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_SetReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SetReview(ctx, req.(*SetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_AddToAttentionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttentionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).AddToAttentionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_AddToAttentionSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).AddToAttentionSet(ctx, req.(*AttentionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SubmitChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SubmitChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_SubmitChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SubmitChange(ctx, req.(*SubmitChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_RevertChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).RevertChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_RevertChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).RevertChange(ctx, req.(*RevertChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_AbandonChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).AbandonChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_AbandonChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).AbandonChange(ctx, req.(*AbandonChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SubmitRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SubmitRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gerrit_SubmitRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SubmitRevision(ctx, req.(*SubmitRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gerrit_ServiceDesc is the grpc.ServiceDesc for Gerrit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gerrit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gerrit.Gerrit",
	HandlerType: (*GerritServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _Gerrit_ListProjects_Handler,
		},
		{
			MethodName: "GetRefInfo",
			Handler:    _Gerrit_GetRefInfo_Handler,
		},
		{
			MethodName: "ListFileOwners",
			Handler:    _Gerrit_ListFileOwners_Handler,
		},
		{
			MethodName: "ListAccountEmails",
			Handler:    _Gerrit_ListAccountEmails_Handler,
		},
		{
			MethodName: "ListChanges",
			Handler:    _Gerrit_ListChanges_Handler,
		},
		{
			MethodName: "GetChange",
			Handler:    _Gerrit_GetChange_Handler,
		},
		{
			MethodName: "GetMergeable",
			Handler:    _Gerrit_GetMergeable_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Gerrit_ListFiles_Handler,
		},
		{
			MethodName: "GetRelatedChanges",
			Handler:    _Gerrit_GetRelatedChanges_Handler,
		},
		{
			MethodName: "GetPureRevert",
			Handler:    _Gerrit_GetPureRevert_Handler,
		},
		{
			MethodName: "GetMetaDiff",
			Handler:    _Gerrit_GetMetaDiff_Handler,
		},
		{
			MethodName: "CreateChange",
			Handler:    _Gerrit_CreateChange_Handler,
		},
		{
			MethodName: "ChangeEditFileContent",
			Handler:    _Gerrit_ChangeEditFileContent_Handler,
		},
		{
			MethodName: "DeleteEditFileContent",
			Handler:    _Gerrit_DeleteEditFileContent_Handler,
		},
		{
			MethodName: "ChangeEditPublish",
			Handler:    _Gerrit_ChangeEditPublish_Handler,
		},
		{
			MethodName: "AddReviewer",
			Handler:    _Gerrit_AddReviewer_Handler,
		},
		{
			MethodName: "DeleteReviewer",
			Handler:    _Gerrit_DeleteReviewer_Handler,
		},
		{
			MethodName: "SetReview",
			Handler:    _Gerrit_SetReview_Handler,
		},
		{
			MethodName: "AddToAttentionSet",
			Handler:    _Gerrit_AddToAttentionSet_Handler,
		},
		{
			MethodName: "SubmitChange",
			Handler:    _Gerrit_SubmitChange_Handler,
		},
		{
			MethodName: "RevertChange",
			Handler:    _Gerrit_RevertChange_Handler,
		},
		{
			MethodName: "AbandonChange",
			Handler:    _Gerrit_AbandonChange_Handler,
		},
		{
			MethodName: "SubmitRevision",
			Handler:    _Gerrit_SubmitRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/common/proto/gerrit/gerrit.proto",
}
