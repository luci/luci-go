// Copyright 2016 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tsmon

import (
	"context"
	"os"
	"testing"

	"go.chromium.org/luci/common/testing/ftt"
	"go.chromium.org/luci/common/testing/truth/assert"
	"go.chromium.org/luci/common/testing/truth/should"
	"go.chromium.org/luci/common/tsmon/target"
)

// newTestingFlags returns new Flags that are appropriate for testing. These
// stub out relevant system-local information so that system specifics don't
// affect things.
func newTestingFlags() Flags {
	fl := NewFlags()
	fl.ConfigFile = "" // Stub out so we don't load local system config.
	fl.Endpoint = "file://fake/path"
	fl.Target.SysInfo = &target.SysInfo{
		Hostname: "host-sys",
		Region:   "region-sys",
	}
	return fl
}

func TestInitializeFromFlags(t *testing.T) {
	t.Parallel()

	ftt.Run("Initialize tsmon", t, func(t *ftt.Test) {
		c := WithState(context.Background(), NewState())

		tsmonFlags := newTestingFlags()
		tsmonFlags.Target.TargetType = target.DeviceType
		tsmonFlags.Flush = FlushManual

		t.Run("with autogenerated hostnames", func(t *ftt.Test) {
			tsmonFlags.Target.AutoGenHostname = true
			err := InitializeFromFlags(c, &tsmonFlags)
			assert.Loosely(t, err, should.BeNil)
			defer Shutdown(c)

			s := GetState(c).Store()
			assert.Loosely(t, s.DefaultTarget(), should.HaveType[*target.NetworkDevice])
			target := s.DefaultTarget().(*target.NetworkDevice)
			assert.Loosely(t, target.Hostname, should.Equal("autogen:host-sys"))
			assert.Loosely(t, target.Metro, should.Equal("region-sys"))
		})

		t.Run("with predefined autogenerated hostnames (Device)", func(t *ftt.Test) {
			tsmonFlags.Target.AutoGenHostname = true
			tsmonFlags.Target.DeviceHostname = "test-m5"
			err := InitializeFromFlags(c, &tsmonFlags)
			assert.Loosely(t, err, should.BeNil)
			defer Shutdown(c)

			s := GetState(c).Store()
			assert.Loosely(t, s.DefaultTarget(), should.HaveType[*target.NetworkDevice])
			target := s.DefaultTarget().(*target.NetworkDevice)
			assert.Loosely(t, target.Hostname, should.Equal("autogen:test-m5"))
			assert.Loosely(t, target.Metro, should.Equal("region-sys"))
		})

		t.Run("with predefined autogenerated hostnames (Task)", func(t *ftt.Test) {
			tsmonFlags.Target.AutoGenHostname = true
			tsmonFlags.Target.TaskHostname = "test-m5"
			tsmonFlags.Target.TargetType = target.TaskType
			tsmonFlags.Target.TaskServiceName = "test-service"
			tsmonFlags.Target.TaskJobName = "test-job"
			err := InitializeFromFlags(c, &tsmonFlags)
			assert.Loosely(t, err, should.BeNil)
			defer Shutdown(c)

			s := GetState(c).Store()
			assert.Loosely(t, s.DefaultTarget(), should.HaveType[*target.Task])
			target := s.DefaultTarget().(*target.Task)
			assert.Loosely(t, target.HostName, should.Equal("autogen:test-m5"))
			assert.Loosely(t, target.DataCenter, should.Equal("region-sys"))
		})

		t.Run("with static hostnames", func(t *ftt.Test) {
			err := InitializeFromFlags(c, &tsmonFlags)
			assert.Loosely(t, err, should.BeNil)
			defer Shutdown(c)

			s := GetState(c).Store()
			assert.Loosely(t, s.DefaultTarget(), should.HaveType[*target.NetworkDevice])
			target := s.DefaultTarget().(*target.NetworkDevice)
			assert.Loosely(t, target.Hostname, should.Equal("host-sys"))
			assert.Loosely(t, target.Metro, should.Equal("region-sys"))
		})

		t.Run("with predefined static hostnames (Device)", func(t *ftt.Test) {
			tsmonFlags.Target.DeviceHostname = "host-flag"
			tsmonFlags.Target.DeviceRegion = "region-flag"
			err := InitializeFromFlags(c, &tsmonFlags)
			assert.Loosely(t, err, should.BeNil)
			defer Shutdown(c)

			s := GetState(c).Store()
			assert.Loosely(t, s.DefaultTarget(), should.HaveType[*target.NetworkDevice])
			target := s.DefaultTarget().(*target.NetworkDevice)
			assert.Loosely(t, target.Hostname, should.Equal("host-flag"))
			assert.Loosely(t, target.Metro, should.Equal("region-flag"))
		})

		t.Run("with predefined static hostnames (Task)", func(t *ftt.Test) {
			tsmonFlags.Target.TaskHostname = "host-flag"
			tsmonFlags.Target.TaskRegion = "region-flag"
			tsmonFlags.Target.TargetType = target.TaskType
			tsmonFlags.Target.TaskServiceName = "test-service"
			tsmonFlags.Target.TaskJobName = "test-job"
			err := InitializeFromFlags(c, &tsmonFlags)
			assert.Loosely(t, err, should.BeNil)
			defer Shutdown(c)

			s := GetState(c).Store()
			assert.Loosely(t, s.DefaultTarget(), should.HaveType[*target.Task])
			target := s.DefaultTarget().(*target.Task)
			assert.Loosely(t, target.HostName, should.Equal("host-flag"))
			assert.Loosely(t, target.DataCenter, should.Equal("region-flag"))
		})

		t.Run("with region in config and hostname in a flag", func(t *ftt.Test) {
			tf, err := os.CreateTemp("", "config_test")
			if err != nil {
				t.Fail()
			}
			defer tf.Close()
			defer os.Remove(tf.Name())

			tf.WriteString(`
			{"endpoint":         "foo",
			 "credentials":      "bar",
			 "autogen_hostname": true,
			 "hostname":         "host-config",
			 "region":           "region-config"
			}`)
			tf.Sync()
			tsmonFlags.ConfigFile = tf.Name()
			tsmonFlags.Target.DeviceHostname = "host-flag"
			err = InitializeFromFlags(c, &tsmonFlags)
			assert.Loosely(t, err, should.BeNil)
			defer Shutdown(c)

			s := GetState(c).Store()
			assert.Loosely(t, s.DefaultTarget(), should.HaveType[*target.NetworkDevice])
			target := s.DefaultTarget().(*target.NetworkDevice)
			assert.Loosely(t, target.Hostname, should.Equal("autogen:host-flag"))
			assert.Loosely(t, target.Metro, should.Equal("region-config"))
		})
	})
}
