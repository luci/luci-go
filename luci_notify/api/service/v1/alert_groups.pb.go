// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/luci_notify/api/service/v1/alert_groups.proto

package lucinotifypb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A group of alerts that are managed together.
type AlertGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the alert group.
	// Format: rotations/{rotation}/alertGroups/{alert_group_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The human-readable name of the alert group.
	// Must not be empty.
	// Must not exceed 1024 bytes.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// A message describing the status of the alert group.
	// Must not exceed 1MB.
	StatusMessage string `protobuf:"bytes,3,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// The keys of the alerts in this group.
	// These correspond to the {key} part of an alert's name: alerts/{key}.
	AlertKeys []string `protobuf:"bytes,4,rep,name=alert_keys,json=alertKeys,proto3" json:"alert_keys,omitempty"`
	// The buganizer bug ID of bugs associated with this alert group.
	Bugs []int64 `protobuf:"varint,5,rep,packed,name=bugs,proto3" json:"bugs,omitempty"`
	// The time the alert group was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The identity of the user who last updated the alert group.
	UpdatedBy string `protobuf:"bytes,7,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// A checksum of the alert group's state.
	// Used for optimistic concurrency control.
	Etag          string `protobuf:"bytes,8,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlertGroup) Reset() {
	*x = AlertGroup{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlertGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertGroup) ProtoMessage() {}

func (x *AlertGroup) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertGroup.ProtoReflect.Descriptor instead.
func (*AlertGroup) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP(), []int{0}
}

func (x *AlertGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlertGroup) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AlertGroup) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *AlertGroup) GetAlertKeys() []string {
	if x != nil {
		return x.AlertKeys
	}
	return nil
}

func (x *AlertGroup) GetBugs() []int64 {
	if x != nil {
		return x.Bugs
	}
	return nil
}

func (x *AlertGroup) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *AlertGroup) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *AlertGroup) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type GetAlertGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the alert group to retrieve.
	// Format: rotations/{rotation}/alertGroups/{alert_group_id}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlertGroupRequest) Reset() {
	*x = GetAlertGroupRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlertGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlertGroupRequest) ProtoMessage() {}

func (x *GetAlertGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlertGroupRequest.ProtoReflect.Descriptor instead.
func (*GetAlertGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP(), []int{1}
}

func (x *GetAlertGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListAlertGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of alert groups.
	// Format: rotations/{rotation}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of alert groups to return. The service may return fewer
	// than this value.
	// If unspecified, at most 100 alert groups will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListAlertGroups` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListAlertGroups` must
	// match the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlertGroupsRequest) Reset() {
	*x = ListAlertGroupsRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlertGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertGroupsRequest) ProtoMessage() {}

func (x *ListAlertGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListAlertGroupsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP(), []int{2}
}

func (x *ListAlertGroupsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListAlertGroupsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAlertGroupsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListAlertGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The alert groups.
	AlertGroups []*AlertGroup `protobuf:"bytes,1,rep,name=alert_groups,json=alertGroups,proto3" json:"alert_groups,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlertGroupsResponse) Reset() {
	*x = ListAlertGroupsResponse{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlertGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlertGroupsResponse) ProtoMessage() {}

func (x *ListAlertGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlertGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListAlertGroupsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP(), []int{3}
}

func (x *ListAlertGroupsResponse) GetAlertGroups() []*AlertGroup {
	if x != nil {
		return x.AlertGroups
	}
	return nil
}

func (x *ListAlertGroupsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateAlertGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent resource where this alert group will be created.
	// Format: rotations/{rotation}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The ID to use for the alert group, which will become the final component of
	// the alert group's resource name.
	AlertGroupId string `protobuf:"bytes,2,opt,name=alert_group_id,json=alertGroupId,proto3" json:"alert_group_id,omitempty"`
	// The alert group to create.
	// The `name` field must be empty.
	AlertGroup    *AlertGroup `protobuf:"bytes,3,opt,name=alert_group,json=alertGroup,proto3" json:"alert_group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAlertGroupRequest) Reset() {
	*x = CreateAlertGroupRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAlertGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAlertGroupRequest) ProtoMessage() {}

func (x *CreateAlertGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAlertGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateAlertGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAlertGroupRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateAlertGroupRequest) GetAlertGroupId() string {
	if x != nil {
		return x.AlertGroupId
	}
	return ""
}

func (x *CreateAlertGroupRequest) GetAlertGroup() *AlertGroup {
	if x != nil {
		return x.AlertGroup
	}
	return nil
}

type UpdateAlertGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The alert group to update.
	// The alert group's `name` field is used to identify the alert group to be
	// updated.
	AlertGroup *AlertGroup `protobuf:"bytes,1,opt,name=alert_group,json=alertGroup,proto3" json:"alert_group,omitempty"`
	// The list of fields to be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlertGroupRequest) Reset() {
	*x = UpdateAlertGroupRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlertGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertGroupRequest) ProtoMessage() {}

func (x *UpdateAlertGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAlertGroupRequest) GetAlertGroup() *AlertGroup {
	if x != nil {
		return x.AlertGroup
	}
	return nil
}

func (x *UpdateAlertGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteAlertGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the alert group to delete.
	// Format: rotations/{rotation}/alertGroups/{alert_group_id}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAlertGroupRequest) Reset() {
	*x = DeleteAlertGroupRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAlertGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAlertGroupRequest) ProtoMessage() {}

func (x *DeleteAlertGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAlertGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteAlertGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteAlertGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDesc = "" +
	"\n" +
	"Bgo.chromium.org/luci/luci_notify/api/service/v1/alert_groups.proto\x12\x0eluci.notify.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x97\x02\n" +
	"\n" +
	"AlertGroup\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12%\n" +
	"\x0estatus_message\x18\x03 \x01(\tR\rstatusMessage\x12\x1d\n" +
	"\n" +
	"alert_keys\x18\x04 \x03(\tR\talertKeys\x12\x12\n" +
	"\x04bugs\x18\x05 \x03(\x03R\x04bugs\x12@\n" +
	"\vupdate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"updateTime\x12\"\n" +
	"\n" +
	"updated_by\x18\a \x01(\tB\x03\xe0A\x03R\tupdatedBy\x12\x12\n" +
	"\x04etag\x18\b \x01(\tR\x04etag\"/\n" +
	"\x14GetAlertGroupRequest\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\x02R\x04name\"q\n" +
	"\x16ListAlertGroupsRequest\x12\x1b\n" +
	"\x06parent\x18\x01 \x01(\tB\x03\xe0A\x02R\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\x80\x01\n" +
	"\x17ListAlertGroupsResponse\x12=\n" +
	"\falert_groups\x18\x01 \x03(\v2\x1a.luci.notify.v1.AlertGroupR\valertGroups\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xa3\x01\n" +
	"\x17CreateAlertGroupRequest\x12\x1b\n" +
	"\x06parent\x18\x01 \x01(\tB\x03\xe0A\x02R\x06parent\x12)\n" +
	"\x0ealert_group_id\x18\x02 \x01(\tB\x03\xe0A\x02R\falertGroupId\x12@\n" +
	"\valert_group\x18\x03 \x01(\v2\x1a.luci.notify.v1.AlertGroupB\x03\xe0A\x02R\n" +
	"alertGroup\"\x98\x01\n" +
	"\x17UpdateAlertGroupRequest\x12@\n" +
	"\valert_group\x18\x01 \x01(\v2\x1a.luci.notify.v1.AlertGroupB\x03\xe0A\x02R\n" +
	"alertGroup\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"2\n" +
	"\x17DeleteAlertGroupRequest\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tB\x03\xe0A\x02R\x04name2\xd5\x03\n" +
	"\vAlertGroups\x12S\n" +
	"\rGetAlertGroup\x12$.luci.notify.v1.GetAlertGroupRequest\x1a\x1a.luci.notify.v1.AlertGroup\"\x00\x12d\n" +
	"\x0fListAlertGroups\x12&.luci.notify.v1.ListAlertGroupsRequest\x1a'.luci.notify.v1.ListAlertGroupsResponse\"\x00\x12Y\n" +
	"\x10CreateAlertGroup\x12'.luci.notify.v1.CreateAlertGroupRequest\x1a\x1a.luci.notify.v1.AlertGroup\"\x00\x12Y\n" +
	"\x10UpdateAlertGroup\x12'.luci.notify.v1.UpdateAlertGroupRequest\x1a\x1a.luci.notify.v1.AlertGroup\"\x00\x12U\n" +
	"\x10DeleteAlertGroup\x12'.luci.notify.v1.DeleteAlertGroupRequest\x1a\x16.google.protobuf.Empty\"\x00B>Z<go.chromium.org/luci/luci_notify/api/service/v1;lucinotifypbb\x06proto3"

var (
	file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescData []byte
)

func file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDescData
}

var file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_goTypes = []any{
	(*AlertGroup)(nil),              // 0: luci.notify.v1.AlertGroup
	(*GetAlertGroupRequest)(nil),    // 1: luci.notify.v1.GetAlertGroupRequest
	(*ListAlertGroupsRequest)(nil),  // 2: luci.notify.v1.ListAlertGroupsRequest
	(*ListAlertGroupsResponse)(nil), // 3: luci.notify.v1.ListAlertGroupsResponse
	(*CreateAlertGroupRequest)(nil), // 4: luci.notify.v1.CreateAlertGroupRequest
	(*UpdateAlertGroupRequest)(nil), // 5: luci.notify.v1.UpdateAlertGroupRequest
	(*DeleteAlertGroupRequest)(nil), // 6: luci.notify.v1.DeleteAlertGroupRequest
	(*timestamppb.Timestamp)(nil),   // 7: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),   // 8: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),           // 9: google.protobuf.Empty
}
var file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_depIdxs = []int32{
	7,  // 0: luci.notify.v1.AlertGroup.update_time:type_name -> google.protobuf.Timestamp
	0,  // 1: luci.notify.v1.ListAlertGroupsResponse.alert_groups:type_name -> luci.notify.v1.AlertGroup
	0,  // 2: luci.notify.v1.CreateAlertGroupRequest.alert_group:type_name -> luci.notify.v1.AlertGroup
	0,  // 3: luci.notify.v1.UpdateAlertGroupRequest.alert_group:type_name -> luci.notify.v1.AlertGroup
	8,  // 4: luci.notify.v1.UpdateAlertGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 5: luci.notify.v1.AlertGroups.GetAlertGroup:input_type -> luci.notify.v1.GetAlertGroupRequest
	2,  // 6: luci.notify.v1.AlertGroups.ListAlertGroups:input_type -> luci.notify.v1.ListAlertGroupsRequest
	4,  // 7: luci.notify.v1.AlertGroups.CreateAlertGroup:input_type -> luci.notify.v1.CreateAlertGroupRequest
	5,  // 8: luci.notify.v1.AlertGroups.UpdateAlertGroup:input_type -> luci.notify.v1.UpdateAlertGroupRequest
	6,  // 9: luci.notify.v1.AlertGroups.DeleteAlertGroup:input_type -> luci.notify.v1.DeleteAlertGroupRequest
	0,  // 10: luci.notify.v1.AlertGroups.GetAlertGroup:output_type -> luci.notify.v1.AlertGroup
	3,  // 11: luci.notify.v1.AlertGroups.ListAlertGroups:output_type -> luci.notify.v1.ListAlertGroupsResponse
	0,  // 12: luci.notify.v1.AlertGroups.CreateAlertGroup:output_type -> luci.notify.v1.AlertGroup
	0,  // 13: luci.notify.v1.AlertGroups.UpdateAlertGroup:output_type -> luci.notify.v1.AlertGroup
	9,  // 14: luci.notify.v1.AlertGroups.DeleteAlertGroup:output_type -> google.protobuf.Empty
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_init() }
func file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_init() {
	if File_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto = out.File
	file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_goTypes = nil
	file_go_chromium_org_luci_luci_notify_api_service_v1_alert_groups_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlertGroupsClient is the client API for AlertGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertGroupsClient interface {
	// Gets an alert group.
	GetAlertGroup(ctx context.Context, in *GetAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error)
	// Lists alert groups.
	ListAlertGroups(ctx context.Context, in *ListAlertGroupsRequest, opts ...grpc.CallOption) (*ListAlertGroupsResponse, error)
	// Creates an alert group.
	CreateAlertGroup(ctx context.Context, in *CreateAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error)
	// Updates an alert group.
	UpdateAlertGroup(ctx context.Context, in *UpdateAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error)
	// Deletes an alert group.
	DeleteAlertGroup(ctx context.Context, in *DeleteAlertGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}
type alertGroupsPRPCClient struct {
	client *prpc.Client
}

func NewAlertGroupsPRPCClient(client *prpc.Client) AlertGroupsClient {
	return &alertGroupsPRPCClient{client}
}

func (c *alertGroupsPRPCClient) GetAlertGroup(ctx context.Context, in *GetAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error) {
	out := new(AlertGroup)
	err := c.client.Call(ctx, "luci.notify.v1.AlertGroups", "GetAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsPRPCClient) ListAlertGroups(ctx context.Context, in *ListAlertGroupsRequest, opts ...grpc.CallOption) (*ListAlertGroupsResponse, error) {
	out := new(ListAlertGroupsResponse)
	err := c.client.Call(ctx, "luci.notify.v1.AlertGroups", "ListAlertGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsPRPCClient) CreateAlertGroup(ctx context.Context, in *CreateAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error) {
	out := new(AlertGroup)
	err := c.client.Call(ctx, "luci.notify.v1.AlertGroups", "CreateAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsPRPCClient) UpdateAlertGroup(ctx context.Context, in *UpdateAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error) {
	out := new(AlertGroup)
	err := c.client.Call(ctx, "luci.notify.v1.AlertGroups", "UpdateAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsPRPCClient) DeleteAlertGroup(ctx context.Context, in *DeleteAlertGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.client.Call(ctx, "luci.notify.v1.AlertGroups", "DeleteAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type alertGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertGroupsClient(cc grpc.ClientConnInterface) AlertGroupsClient {
	return &alertGroupsClient{cc}
}

func (c *alertGroupsClient) GetAlertGroup(ctx context.Context, in *GetAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error) {
	out := new(AlertGroup)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.AlertGroups/GetAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsClient) ListAlertGroups(ctx context.Context, in *ListAlertGroupsRequest, opts ...grpc.CallOption) (*ListAlertGroupsResponse, error) {
	out := new(ListAlertGroupsResponse)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.AlertGroups/ListAlertGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsClient) CreateAlertGroup(ctx context.Context, in *CreateAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error) {
	out := new(AlertGroup)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.AlertGroups/CreateAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsClient) UpdateAlertGroup(ctx context.Context, in *UpdateAlertGroupRequest, opts ...grpc.CallOption) (*AlertGroup, error) {
	out := new(AlertGroup)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.AlertGroups/UpdateAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertGroupsClient) DeleteAlertGroup(ctx context.Context, in *DeleteAlertGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.AlertGroups/DeleteAlertGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertGroupsServer is the server API for AlertGroups service.
type AlertGroupsServer interface {
	// Gets an alert group.
	GetAlertGroup(context.Context, *GetAlertGroupRequest) (*AlertGroup, error)
	// Lists alert groups.
	ListAlertGroups(context.Context, *ListAlertGroupsRequest) (*ListAlertGroupsResponse, error)
	// Creates an alert group.
	CreateAlertGroup(context.Context, *CreateAlertGroupRequest) (*AlertGroup, error)
	// Updates an alert group.
	UpdateAlertGroup(context.Context, *UpdateAlertGroupRequest) (*AlertGroup, error)
	// Deletes an alert group.
	DeleteAlertGroup(context.Context, *DeleteAlertGroupRequest) (*emptypb.Empty, error)
}

// UnimplementedAlertGroupsServer can be embedded to have forward compatible implementations.
type UnimplementedAlertGroupsServer struct {
}

func (*UnimplementedAlertGroupsServer) GetAlertGroup(context.Context, *GetAlertGroupRequest) (*AlertGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlertGroup not implemented")
}
func (*UnimplementedAlertGroupsServer) ListAlertGroups(context.Context, *ListAlertGroupsRequest) (*ListAlertGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertGroups not implemented")
}
func (*UnimplementedAlertGroupsServer) CreateAlertGroup(context.Context, *CreateAlertGroupRequest) (*AlertGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlertGroup not implemented")
}
func (*UnimplementedAlertGroupsServer) UpdateAlertGroup(context.Context, *UpdateAlertGroupRequest) (*AlertGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertGroup not implemented")
}
func (*UnimplementedAlertGroupsServer) DeleteAlertGroup(context.Context, *DeleteAlertGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertGroup not implemented")
}

func RegisterAlertGroupsServer(s prpc.Registrar, srv AlertGroupsServer) {
	s.RegisterService(&_AlertGroups_serviceDesc, srv)
}

func _AlertGroups_GetAlertGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertGroupsServer).GetAlertGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.AlertGroups/GetAlertGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertGroupsServer).GetAlertGroup(ctx, req.(*GetAlertGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertGroups_ListAlertGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertGroupsServer).ListAlertGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.AlertGroups/ListAlertGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertGroupsServer).ListAlertGroups(ctx, req.(*ListAlertGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertGroups_CreateAlertGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertGroupsServer).CreateAlertGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.AlertGroups/CreateAlertGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertGroupsServer).CreateAlertGroup(ctx, req.(*CreateAlertGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertGroups_UpdateAlertGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertGroupsServer).UpdateAlertGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.AlertGroups/UpdateAlertGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertGroupsServer).UpdateAlertGroup(ctx, req.(*UpdateAlertGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertGroups_DeleteAlertGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertGroupsServer).DeleteAlertGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.AlertGroups/DeleteAlertGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertGroupsServer).DeleteAlertGroup(ctx, req.(*DeleteAlertGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertGroups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.notify.v1.AlertGroups",
	HandlerType: (*AlertGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlertGroup",
			Handler:    _AlertGroups_GetAlertGroup_Handler,
		},
		{
			MethodName: "ListAlertGroups",
			Handler:    _AlertGroups_ListAlertGroups_Handler,
		},
		{
			MethodName: "CreateAlertGroup",
			Handler:    _AlertGroups_CreateAlertGroup_Handler,
		},
		{
			MethodName: "UpdateAlertGroup",
			Handler:    _AlertGroups_UpdateAlertGroup_Handler,
		},
		{
			MethodName: "DeleteAlertGroup",
			Handler:    _AlertGroups_DeleteAlertGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/luci_notify/api/service/v1/alert_groups.proto",
}
