// Code generated by MockGen. DO NOT EDIT.
// Source: rpc.pb.go

package lucinotifypb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTreeCloserClient is a mock of TreeCloserClient interface.
type MockTreeCloserClient struct {
	ctrl     *gomock.Controller
	recorder *MockTreeCloserClientMockRecorder
}

// MockTreeCloserClientMockRecorder is the mock recorder for MockTreeCloserClient.
type MockTreeCloserClientMockRecorder struct {
	mock *MockTreeCloserClient
}

// NewMockTreeCloserClient creates a new mock instance.
func NewMockTreeCloserClient(ctrl *gomock.Controller) *MockTreeCloserClient {
	mock := &MockTreeCloserClient{ctrl: ctrl}
	mock.recorder = &MockTreeCloserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreeCloserClient) EXPECT() *MockTreeCloserClientMockRecorder {
	return m.recorder
}

// CheckTreeCloser mocks base method.
func (m *MockTreeCloserClient) CheckTreeCloser(ctx context.Context, in *CheckTreeCloserRequest, opts ...grpc.CallOption) (*CheckTreeCloserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckTreeCloser", varargs...)
	ret0, _ := ret[0].(*CheckTreeCloserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTreeCloser indicates an expected call of CheckTreeCloser.
func (mr *MockTreeCloserClientMockRecorder) CheckTreeCloser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTreeCloser", reflect.TypeOf((*MockTreeCloserClient)(nil).CheckTreeCloser), varargs...)
}

// NotifyCulpritRevert mocks base method.
func (m *MockTreeCloserClient) NotifyCulpritRevert(ctx context.Context, in *NotifyCulpritRevertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotifyCulpritRevert", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyCulpritRevert indicates an expected call of NotifyCulpritRevert.
func (mr *MockTreeCloserClientMockRecorder) NotifyCulpritRevert(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCulpritRevert", reflect.TypeOf((*MockTreeCloserClient)(nil).NotifyCulpritRevert), varargs...)
}

// MockTreeCloserServer is a mock of TreeCloserServer interface.
type MockTreeCloserServer struct {
	ctrl     *gomock.Controller
	recorder *MockTreeCloserServerMockRecorder
}

// MockTreeCloserServerMockRecorder is the mock recorder for MockTreeCloserServer.
type MockTreeCloserServerMockRecorder struct {
	mock *MockTreeCloserServer
}

// NewMockTreeCloserServer creates a new mock instance.
func NewMockTreeCloserServer(ctrl *gomock.Controller) *MockTreeCloserServer {
	mock := &MockTreeCloserServer{ctrl: ctrl}
	mock.recorder = &MockTreeCloserServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTreeCloserServer) EXPECT() *MockTreeCloserServerMockRecorder {
	return m.recorder
}

// CheckTreeCloser mocks base method.
func (m *MockTreeCloserServer) CheckTreeCloser(arg0 context.Context, arg1 *CheckTreeCloserRequest) (*CheckTreeCloserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTreeCloser", arg0, arg1)
	ret0, _ := ret[0].(*CheckTreeCloserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTreeCloser indicates an expected call of CheckTreeCloser.
func (mr *MockTreeCloserServerMockRecorder) CheckTreeCloser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTreeCloser", reflect.TypeOf((*MockTreeCloserServer)(nil).CheckTreeCloser), arg0, arg1)
}

// NotifyCulpritRevert mocks base method.
func (m *MockTreeCloserServer) NotifyCulpritRevert(arg0 context.Context, arg1 *NotifyCulpritRevertRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCulpritRevert", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotifyCulpritRevert indicates an expected call of NotifyCulpritRevert.
func (mr *MockTreeCloserServerMockRecorder) NotifyCulpritRevert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCulpritRevert", reflect.TypeOf((*MockTreeCloserServer)(nil).NotifyCulpritRevert), arg0, arg1)
}
