// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/luci_notify/api/service/v1/alerts.proto

package lucinotifypb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchGetAlertsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource names of the alerts to get.
	//
	// Currently by convention the keys match the keys in sheriff-o-matic, but
	// this is not a requirement.
	//
	// Format: alerts/{key}
	Names         []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetAlertsRequest) Reset() {
	*x = BatchGetAlertsRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetAlertsRequest) ProtoMessage() {}

func (x *BatchGetAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetAlertsRequest.ProtoReflect.Descriptor instead.
func (*BatchGetAlertsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescGZIP(), []int{0}
}

func (x *BatchGetAlertsRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// The Status of a tree for an interval of time.
type Alert struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of this alert.
	// Format: alerts/{key}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The buganizer bug ID of the bug associated with this alert.
	// 0 means the alert is not associated with any bug.
	Bug int64 `protobuf:"varint,3,opt,name=bug,proto3" json:"bug,omitempty"`
	// The build id of the builder corresponding to the alert that this alert should be ignored until after completion.
	// In other words, if the latest_failing_build_id (currently in SOM alerts) == silence_until, this alert should be considered 'silenced'.
	SilenceUntil int64 `protobuf:"varint,4,opt,name=silence_until,json=silenceUntil,proto3" json:"silence_until,omitempty"`
	// The Gerrit CL number associated with this alert.
	// 0 means the alert is not associated with any CL.
	GerritCl int64 `protobuf:"varint,7,opt,name=gerrit_cl,json=gerritCl,proto3" json:"gerrit_cl,omitempty"`
	// The time the alert was last modified.
	//
	// This is automatically set by the server and cannot be modified explicitly
	// through RPC.
	ModifyTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update and delete requests to ensure the
	// client has an up-to-date value before proceeding.
	// Note that these etags are weak - they are only computed based on mutable
	// fields.  Other fields in the alert may be auto-updated but they will not
	// affect the etag value.
	// The etag field is optional on update requests, if not provided
	// the update will succeed.  If provided, the update will only succeed if
	// the etag is an exact match.
	Etag          string `protobuf:"bytes,6,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Alert) Reset() {
	*x = Alert{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescGZIP(), []int{1}
}

func (x *Alert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Alert) GetBug() int64 {
	if x != nil {
		return x.Bug
	}
	return 0
}

func (x *Alert) GetSilenceUntil() int64 {
	if x != nil {
		return x.SilenceUntil
	}
	return 0
}

func (x *Alert) GetGerritCl() int64 {
	if x != nil {
		return x.GerritCl
	}
	return 0
}

func (x *Alert) GetModifyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *Alert) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type BatchGetAlertsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Alerts requested.
	// The order matches the order of names in the request.
	Alerts        []*Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetAlertsResponse) Reset() {
	*x = BatchGetAlertsResponse{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetAlertsResponse) ProtoMessage() {}

func (x *BatchGetAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetAlertsResponse.ProtoReflect.Descriptor instead.
func (*BatchGetAlertsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescGZIP(), []int{2}
}

func (x *BatchGetAlertsResponse) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

type UpdateAlertRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The alert to update.
	Alert         *Alert `protobuf:"bytes,1,opt,name=alert,proto3" json:"alert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlertRequest) Reset() {
	*x = UpdateAlertRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlertRequest) ProtoMessage() {}

func (x *UpdateAlertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlertRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlertRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateAlertRequest) GetAlert() *Alert {
	if x != nil {
		return x.Alert
	}
	return nil
}

type BatchUpdateAlertsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The request messages specifying the alerts to update.
	// A maximum of 1000 alerts can be modified in a batch.
	Requests      []*UpdateAlertRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateAlertsRequest) Reset() {
	*x = BatchUpdateAlertsRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateAlertsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateAlertsRequest) ProtoMessage() {}

func (x *BatchUpdateAlertsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateAlertsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateAlertsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescGZIP(), []int{4}
}

func (x *BatchUpdateAlertsRequest) GetRequests() []*UpdateAlertRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BatchUpdateAlertsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Alerts updated.
	// The order matches the order of names in the request.
	Alerts        []*Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateAlertsResponse) Reset() {
	*x = BatchUpdateAlertsResponse{}
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateAlertsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateAlertsResponse) ProtoMessage() {}

func (x *BatchUpdateAlertsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateAlertsResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateAlertsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescGZIP(), []int{5}
}

func (x *BatchUpdateAlertsResponse) GetAlerts() []*Alert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

var File_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDesc = string([]byte{
	0x0a, 0x3c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2d, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0xcd, 0x01, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x05, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x6c, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x6c, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22,
	0x47, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x22, 0x5a, 0x0a, 0x18, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x32, 0xd7, 0x01, 0x0a, 0x06, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x61,
	0x0a, 0x0e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x11, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x6c, 0x75, 0x63, 0x69, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescData []byte
)

func file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDescData
}

var file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_goTypes = []any{
	(*BatchGetAlertsRequest)(nil),     // 0: luci.notify.v1.BatchGetAlertsRequest
	(*Alert)(nil),                     // 1: luci.notify.v1.Alert
	(*BatchGetAlertsResponse)(nil),    // 2: luci.notify.v1.BatchGetAlertsResponse
	(*UpdateAlertRequest)(nil),        // 3: luci.notify.v1.UpdateAlertRequest
	(*BatchUpdateAlertsRequest)(nil),  // 4: luci.notify.v1.BatchUpdateAlertsRequest
	(*BatchUpdateAlertsResponse)(nil), // 5: luci.notify.v1.BatchUpdateAlertsResponse
	(*timestamppb.Timestamp)(nil),     // 6: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_depIdxs = []int32{
	6, // 0: luci.notify.v1.Alert.modify_time:type_name -> google.protobuf.Timestamp
	1, // 1: luci.notify.v1.BatchGetAlertsResponse.alerts:type_name -> luci.notify.v1.Alert
	1, // 2: luci.notify.v1.UpdateAlertRequest.alert:type_name -> luci.notify.v1.Alert
	3, // 3: luci.notify.v1.BatchUpdateAlertsRequest.requests:type_name -> luci.notify.v1.UpdateAlertRequest
	1, // 4: luci.notify.v1.BatchUpdateAlertsResponse.alerts:type_name -> luci.notify.v1.Alert
	0, // 5: luci.notify.v1.Alerts.BatchGetAlerts:input_type -> luci.notify.v1.BatchGetAlertsRequest
	4, // 6: luci.notify.v1.Alerts.BatchUpdateAlerts:input_type -> luci.notify.v1.BatchUpdateAlertsRequest
	2, // 7: luci.notify.v1.Alerts.BatchGetAlerts:output_type -> luci.notify.v1.BatchGetAlertsResponse
	5, // 8: luci.notify.v1.Alerts.BatchUpdateAlerts:output_type -> luci.notify.v1.BatchUpdateAlertsResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_init() }
func file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_init() {
	if File_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto = out.File
	file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_goTypes = nil
	file_go_chromium_org_luci_luci_notify_api_service_v1_alerts_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlertsClient is the client API for Alerts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertsClient interface {
	// BatchGetAlerts allows getting a number of alerts by resource name.
	// If no alert exists by the given name an empty alert will be returned.
	BatchGetAlerts(ctx context.Context, in *BatchGetAlertsRequest, opts ...grpc.CallOption) (*BatchGetAlertsResponse, error)
	// BatchUpdateAlerts allows updating the mutable data on a batch of alerts.
	BatchUpdateAlerts(ctx context.Context, in *BatchUpdateAlertsRequest, opts ...grpc.CallOption) (*BatchUpdateAlertsResponse, error)
}
type alertsPRPCClient struct {
	client *prpc.Client
}

func NewAlertsPRPCClient(client *prpc.Client) AlertsClient {
	return &alertsPRPCClient{client}
}

func (c *alertsPRPCClient) BatchGetAlerts(ctx context.Context, in *BatchGetAlertsRequest, opts ...grpc.CallOption) (*BatchGetAlertsResponse, error) {
	out := new(BatchGetAlertsResponse)
	err := c.client.Call(ctx, "luci.notify.v1.Alerts", "BatchGetAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsPRPCClient) BatchUpdateAlerts(ctx context.Context, in *BatchUpdateAlertsRequest, opts ...grpc.CallOption) (*BatchUpdateAlertsResponse, error) {
	out := new(BatchUpdateAlertsResponse)
	err := c.client.Call(ctx, "luci.notify.v1.Alerts", "BatchUpdateAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type alertsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertsClient(cc grpc.ClientConnInterface) AlertsClient {
	return &alertsClient{cc}
}

func (c *alertsClient) BatchGetAlerts(ctx context.Context, in *BatchGetAlertsRequest, opts ...grpc.CallOption) (*BatchGetAlertsResponse, error) {
	out := new(BatchGetAlertsResponse)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.Alerts/BatchGetAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertsClient) BatchUpdateAlerts(ctx context.Context, in *BatchUpdateAlertsRequest, opts ...grpc.CallOption) (*BatchUpdateAlertsResponse, error) {
	out := new(BatchUpdateAlertsResponse)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.Alerts/BatchUpdateAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertsServer is the server API for Alerts service.
type AlertsServer interface {
	// BatchGetAlerts allows getting a number of alerts by resource name.
	// If no alert exists by the given name an empty alert will be returned.
	BatchGetAlerts(context.Context, *BatchGetAlertsRequest) (*BatchGetAlertsResponse, error)
	// BatchUpdateAlerts allows updating the mutable data on a batch of alerts.
	BatchUpdateAlerts(context.Context, *BatchUpdateAlertsRequest) (*BatchUpdateAlertsResponse, error)
}

// UnimplementedAlertsServer can be embedded to have forward compatible implementations.
type UnimplementedAlertsServer struct {
}

func (*UnimplementedAlertsServer) BatchGetAlerts(context.Context, *BatchGetAlertsRequest) (*BatchGetAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetAlerts not implemented")
}
func (*UnimplementedAlertsServer) BatchUpdateAlerts(context.Context, *BatchUpdateAlertsRequest) (*BatchUpdateAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateAlerts not implemented")
}

func RegisterAlertsServer(s prpc.Registrar, srv AlertsServer) {
	s.RegisterService(&_Alerts_serviceDesc, srv)
}

func _Alerts_BatchGetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServer).BatchGetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.Alerts/BatchGetAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServer).BatchGetAlerts(ctx, req.(*BatchGetAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alerts_BatchUpdateAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertsServer).BatchUpdateAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.Alerts/BatchUpdateAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertsServer).BatchUpdateAlerts(ctx, req.(*BatchUpdateAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Alerts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.notify.v1.Alerts",
	HandlerType: (*AlertsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchGetAlerts",
			Handler:    _Alerts_BatchGetAlerts_Handler,
		},
		{
			MethodName: "BatchUpdateAlerts",
			Handler:    _Alerts_BatchUpdateAlerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/luci_notify/api/service/v1/alerts.proto",
}
