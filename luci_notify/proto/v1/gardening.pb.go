// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/luci_notify/proto/v1/gardening.proto

package notifypb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryGardenedBuildersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the gardening rotation to retrieve builders for.
	// E.g. 'gardeningRotations/chromium.gpu'.
	// Format: gardeningRotations/{GARDENING_ROTATION_ID}.
	GardeningRotation string `protobuf:"bytes,1,opt,name=gardening_rotation,json=gardeningRotation,proto3" json:"gardening_rotation,omitempty"`
	// The maximum number of gardened builders to return. The service may
	// return fewer than this value (e.g. to avoid hitting response size limits).
	// If unspecified, at most 1000 builders will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `QueryGardeningRotationRequest` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `QueryGardenedBuildersRequest`
	// must match the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryGardenedBuildersRequest) Reset() {
	*x = QueryGardenedBuildersRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryGardenedBuildersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGardenedBuildersRequest) ProtoMessage() {}

func (x *QueryGardenedBuildersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGardenedBuildersRequest.ProtoReflect.Descriptor instead.
func (*QueryGardenedBuildersRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescGZIP(), []int{0}
}

func (x *QueryGardenedBuildersRequest) GetGardeningRotation() string {
	if x != nil {
		return x.GardeningRotation
	}
	return ""
}

func (x *QueryGardenedBuildersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryGardenedBuildersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryGardenedBuildersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The gardened builders which are part of the rotation.
	Builders []*GardenedBuilder `protobuf:"bytes,1,rep,name=builders,proto3" json:"builders,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryGardenedBuildersResponse) Reset() {
	*x = QueryGardenedBuildersResponse{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryGardenedBuildersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryGardenedBuildersResponse) ProtoMessage() {}

func (x *QueryGardenedBuildersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryGardenedBuildersResponse.ProtoReflect.Descriptor instead.
func (*QueryGardenedBuildersResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescGZIP(), []int{1}
}

func (x *QueryGardenedBuildersResponse) GetBuilders() []*GardenedBuilder {
	if x != nil {
		return x.Builders
	}
	return nil
}

func (x *QueryGardenedBuildersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type BatchUpdateTriageStateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The requests specifying the triage states to update.
	// A maximum of 100 triage states can be modified in a batch.
	Requests      []*UpdateTriageStateRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateTriageStateRequest) Reset() {
	*x = BatchUpdateTriageStateRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateTriageStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateTriageStateRequest) ProtoMessage() {}

func (x *BatchUpdateTriageStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateTriageStateRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateTriageStateRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescGZIP(), []int{2}
}

func (x *BatchUpdateTriageStateRequest) GetRequests() []*UpdateTriageStateRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BatchUpdateTriageStateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated triage states.
	TriageStates  []*TriageState `protobuf:"bytes,1,rep,name=triage_states,json=triageStates,proto3" json:"triage_states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateTriageStateResponse) Reset() {
	*x = BatchUpdateTriageStateResponse{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateTriageStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateTriageStateResponse) ProtoMessage() {}

func (x *BatchUpdateTriageStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateTriageStateResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateTriageStateResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescGZIP(), []int{3}
}

func (x *BatchUpdateTriageStateResponse) GetTriageStates() []*TriageState {
	if x != nil {
		return x.TriageStates
	}
	return nil
}

type UpdateTriageStateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The triage state to update.
	//
	// The triage states's `name` field is used to identify the triage state to update.
	// Format: project/{PROJECT}/buckets/{BUCKET}/builder/{BUILDER}/gardening/steps/{STEP_ID}/triage.
	//
	// Set the `etag` on the TriageState to conditionally update the resource conditioned on the
	// resource not having been updated since it was last read.
	TriageState *TriageState `protobuf:"bytes,1,opt,name=triage_state,json=triageState,proto3" json:"triage_state,omitempty"`
	// The list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTriageStateRequest) Reset() {
	*x = UpdateTriageStateRequest{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTriageStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTriageStateRequest) ProtoMessage() {}

func (x *UpdateTriageStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTriageStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateTriageStateRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTriageStateRequest) GetTriageState() *TriageState {
	if x != nil {
		return x.TriageState
	}
	return nil
}

func (x *UpdateTriageStateRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

var File_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDesc = string([]byte{
	0x0a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x65, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89,
	0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x61, 0x72,
	0x64, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x65, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x1e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x74, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x32, 0xfa, 0x01, 0x0a, 0x09,
	0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x74, 0x0a, 0x15, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescData []byte
)

func file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDescData
}

var file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_goTypes = []any{
	(*QueryGardenedBuildersRequest)(nil),   // 0: luci.notify.v1.QueryGardenedBuildersRequest
	(*QueryGardenedBuildersResponse)(nil),  // 1: luci.notify.v1.QueryGardenedBuildersResponse
	(*BatchUpdateTriageStateRequest)(nil),  // 2: luci.notify.v1.BatchUpdateTriageStateRequest
	(*BatchUpdateTriageStateResponse)(nil), // 3: luci.notify.v1.BatchUpdateTriageStateResponse
	(*UpdateTriageStateRequest)(nil),       // 4: luci.notify.v1.UpdateTriageStateRequest
	(*GardenedBuilder)(nil),                // 5: luci.notify.v1.GardenedBuilder
	(*TriageState)(nil),                    // 6: luci.notify.v1.TriageState
	(*fieldmaskpb.FieldMask)(nil),          // 7: google.protobuf.FieldMask
}
var file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_depIdxs = []int32{
	5, // 0: luci.notify.v1.QueryGardenedBuildersResponse.builders:type_name -> luci.notify.v1.GardenedBuilder
	4, // 1: luci.notify.v1.BatchUpdateTriageStateRequest.requests:type_name -> luci.notify.v1.UpdateTriageStateRequest
	6, // 2: luci.notify.v1.BatchUpdateTriageStateResponse.triage_states:type_name -> luci.notify.v1.TriageState
	6, // 3: luci.notify.v1.UpdateTriageStateRequest.triage_state:type_name -> luci.notify.v1.TriageState
	7, // 4: luci.notify.v1.UpdateTriageStateRequest.update_mask:type_name -> google.protobuf.FieldMask
	0, // 5: luci.notify.v1.Gardening.QueryGardenedBuilders:input_type -> luci.notify.v1.QueryGardenedBuildersRequest
	2, // 6: luci.notify.v1.Gardening.BatchUpdateTriageState:input_type -> luci.notify.v1.BatchUpdateTriageStateRequest
	1, // 7: luci.notify.v1.Gardening.QueryGardenedBuilders:output_type -> luci.notify.v1.QueryGardenedBuildersResponse
	3, // 8: luci.notify.v1.Gardening.BatchUpdateTriageState:output_type -> luci.notify.v1.BatchUpdateTriageStateResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_init() }
func file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_init() {
	if File_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto != nil {
		return
	}
	file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_init()
	file_go_chromium_org_luci_luci_notify_proto_v1_triage_state_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto = out.File
	file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_goTypes = nil
	file_go_chromium_org_luci_luci_notify_proto_v1_gardening_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GardeningClient is the client API for Gardening service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GardeningClient interface {
	// Retrieves builders in the given gardening rotation.
	QueryGardenedBuilders(ctx context.Context, in *QueryGardenedBuildersRequest, opts ...grpc.CallOption) (*QueryGardenedBuildersResponse, error)
	// Updates step and/or test triage state(s).
	BatchUpdateTriageState(ctx context.Context, in *BatchUpdateTriageStateRequest, opts ...grpc.CallOption) (*BatchUpdateTriageStateResponse, error)
}
type gardeningPRPCClient struct {
	client *prpc.Client
}

func NewGardeningPRPCClient(client *prpc.Client) GardeningClient {
	return &gardeningPRPCClient{client}
}

func (c *gardeningPRPCClient) QueryGardenedBuilders(ctx context.Context, in *QueryGardenedBuildersRequest, opts ...grpc.CallOption) (*QueryGardenedBuildersResponse, error) {
	out := new(QueryGardenedBuildersResponse)
	err := c.client.Call(ctx, "luci.notify.v1.Gardening", "QueryGardenedBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardeningPRPCClient) BatchUpdateTriageState(ctx context.Context, in *BatchUpdateTriageStateRequest, opts ...grpc.CallOption) (*BatchUpdateTriageStateResponse, error) {
	out := new(BatchUpdateTriageStateResponse)
	err := c.client.Call(ctx, "luci.notify.v1.Gardening", "BatchUpdateTriageState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gardeningClient struct {
	cc grpc.ClientConnInterface
}

func NewGardeningClient(cc grpc.ClientConnInterface) GardeningClient {
	return &gardeningClient{cc}
}

func (c *gardeningClient) QueryGardenedBuilders(ctx context.Context, in *QueryGardenedBuildersRequest, opts ...grpc.CallOption) (*QueryGardenedBuildersResponse, error) {
	out := new(QueryGardenedBuildersResponse)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.Gardening/QueryGardenedBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gardeningClient) BatchUpdateTriageState(ctx context.Context, in *BatchUpdateTriageStateRequest, opts ...grpc.CallOption) (*BatchUpdateTriageStateResponse, error) {
	out := new(BatchUpdateTriageStateResponse)
	err := c.cc.Invoke(ctx, "/luci.notify.v1.Gardening/BatchUpdateTriageState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GardeningServer is the server API for Gardening service.
type GardeningServer interface {
	// Retrieves builders in the given gardening rotation.
	QueryGardenedBuilders(context.Context, *QueryGardenedBuildersRequest) (*QueryGardenedBuildersResponse, error)
	// Updates step and/or test triage state(s).
	BatchUpdateTriageState(context.Context, *BatchUpdateTriageStateRequest) (*BatchUpdateTriageStateResponse, error)
}

// UnimplementedGardeningServer can be embedded to have forward compatible implementations.
type UnimplementedGardeningServer struct {
}

func (*UnimplementedGardeningServer) QueryGardenedBuilders(context.Context, *QueryGardenedBuildersRequest) (*QueryGardenedBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGardenedBuilders not implemented")
}
func (*UnimplementedGardeningServer) BatchUpdateTriageState(context.Context, *BatchUpdateTriageStateRequest) (*BatchUpdateTriageStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateTriageState not implemented")
}

func RegisterGardeningServer(s prpc.Registrar, srv GardeningServer) {
	s.RegisterService(&_Gardening_serviceDesc, srv)
}

func _Gardening_QueryGardenedBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGardenedBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardeningServer).QueryGardenedBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.Gardening/QueryGardenedBuilders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardeningServer).QueryGardenedBuilders(ctx, req.(*QueryGardenedBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gardening_BatchUpdateTriageState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateTriageStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GardeningServer).BatchUpdateTriageState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.notify.v1.Gardening/BatchUpdateTriageState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GardeningServer).BatchUpdateTriageState(ctx, req.(*BatchUpdateTriageStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gardening_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.notify.v1.Gardening",
	HandlerType: (*GardeningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryGardenedBuilders",
			Handler:    _Gardening_QueryGardenedBuilders_Handler,
		},
		{
			MethodName: "BatchUpdateTriageState",
			Handler:    _Gardening_BatchUpdateTriageState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/luci_notify/proto/v1/gardening.proto",
}
