// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/luci_notify/proto/v1/gardened_builder.proto

package notifypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BuildStatus captures the status of a build.
type BuildStatus int32

const (
	// A build or step must not have this status.
	BuildStatus_BUILD_STATUS_UNSPECIFIED BuildStatus = 0
	// A build was scheduled, but did not start yet.
	BuildStatus_BUILD_STATUS_SCHEDULED BuildStatus = 1
	// A build has started.
	BuildStatus_BUILD_STATUS_STARTED BuildStatus = 2
	// A build/step ended successfully.
	BuildStatus_BUILD_STATUS_SUCCESS BuildStatus = 12
	// A build/step ended unsuccessfully due to its Build.Input,
	// e.g. tests failed, and NOT due to a build infrastructure failure.
	BuildStatus_BUILD_STATUS_FAILURE BuildStatus = 20
	// A build ended unsuccessfully due to a failure independent of the
	// input, e.g. swarming failed, not enough capacity or the recipe was unable
	// to read the patch from gerrit.
	BuildStatus_BUILD_STATUS_INFRA_FAILURE BuildStatus = 36
	// A build was cancelled explicitly, e.g. via an RPC.
	BuildStatus_BUILD_STATUS_CANCELED BuildStatus = 68
)

// Enum value maps for BuildStatus.
var (
	BuildStatus_name = map[int32]string{
		0:  "BUILD_STATUS_UNSPECIFIED",
		1:  "BUILD_STATUS_SCHEDULED",
		2:  "BUILD_STATUS_STARTED",
		12: "BUILD_STATUS_SUCCESS",
		20: "BUILD_STATUS_FAILURE",
		36: "BUILD_STATUS_INFRA_FAILURE",
		68: "BUILD_STATUS_CANCELED",
	}
	BuildStatus_value = map[string]int32{
		"BUILD_STATUS_UNSPECIFIED":   0,
		"BUILD_STATUS_SCHEDULED":     1,
		"BUILD_STATUS_STARTED":       2,
		"BUILD_STATUS_SUCCESS":       12,
		"BUILD_STATUS_FAILURE":       20,
		"BUILD_STATUS_INFRA_FAILURE": 36,
		"BUILD_STATUS_CANCELED":      68,
	}
)

func (x BuildStatus) Enum() *BuildStatus {
	p := new(BuildStatus)
	*p = x
	return p
}

func (x BuildStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[0].Descriptor()
}

func (BuildStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[0]
}

func (x BuildStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildStatus.Descriptor instead.
func (BuildStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{0}
}

type RegressionStatus int32

const (
	// This value should not be used.
	RegressionStatus_REGRESSION_STATUS_UNSPECIFIED RegressionStatus = 0
	// There has been one occurrence of the failure so far.
	RegressionStatus_REGRESSION_STATUS_NEW RegressionStatus = 1
	// There are two or more occurrences of the failure and the regression appears
	// consistent.
	RegressionStatus_REGRESSION_STATUS_CONSISTENT RegressionStatus = 2
	// The regression has been resolved.
	RegressionStatus_REGRESSION_STATUS_RESOLVED RegressionStatus = 3
)

// Enum value maps for RegressionStatus.
var (
	RegressionStatus_name = map[int32]string{
		0: "REGRESSION_STATUS_UNSPECIFIED",
		1: "REGRESSION_STATUS_NEW",
		2: "REGRESSION_STATUS_CONSISTENT",
		3: "REGRESSION_STATUS_RESOLVED",
	}
	RegressionStatus_value = map[string]int32{
		"REGRESSION_STATUS_UNSPECIFIED": 0,
		"REGRESSION_STATUS_NEW":         1,
		"REGRESSION_STATUS_CONSISTENT":  2,
		"REGRESSION_STATUS_RESOLVED":    3,
	}
)

func (x RegressionStatus) Enum() *RegressionStatus {
	p := new(RegressionStatus)
	*p = x
	return p
}

func (x RegressionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegressionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[1].Descriptor()
}

func (RegressionStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[1]
}

func (x RegressionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegressionStatus.Descriptor instead.
func (RegressionStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{1}
}

// StepStatus captures the status of a step.
type GardenedBuilderStep_StepStatus int32

const (
	// A build or step must not have this status.
	GardenedBuilderStep_STEP_STATUS_UNSPECIFIED GardenedBuilderStep_StepStatus = 0
	// The build is still running and there is no data available
	// for the step yet.
	GardenedBuilderStep_PENDING GardenedBuilderStep_StepStatus = 1
	// The step was not run in the build, but the build succeeded.
	// This is best treated as a type of success, as some steps
	// only show up to report a failure.
	GardenedBuilderStep_NOT_RUN_BUILD_SUCCESS GardenedBuilderStep_StepStatus = 2
	// The step was not run in the build, and the build failed,
	// infra failed or was cancelled. In this case, it is ambiguous
	// if the step did not run because of the earlier failure or
	// the cancellation or if the step only shows up on failures and
	// the failure did not occur.
	GardenedBuilderStep_NOT_RUN_BUILD_NON_SUCCESS GardenedBuilderStep_StepStatus = 3
	// The step succeeded.
	GardenedBuilderStep_SUCCESS GardenedBuilderStep_StepStatus = 4
	// The step failed.
	GardenedBuilderStep_FAILURE GardenedBuilderStep_StepStatus = 5
	// The step encountered an infrastructure failure.
	GardenedBuilderStep_INFRA_FAILURE GardenedBuilderStep_StepStatus = 6
	// The step was canceled.
	GardenedBuilderStep_CANCELED GardenedBuilderStep_StepStatus = 7
)

// Enum value maps for GardenedBuilderStep_StepStatus.
var (
	GardenedBuilderStep_StepStatus_name = map[int32]string{
		0: "STEP_STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "NOT_RUN_BUILD_SUCCESS",
		3: "NOT_RUN_BUILD_NON_SUCCESS",
		4: "SUCCESS",
		5: "FAILURE",
		6: "INFRA_FAILURE",
		7: "CANCELED",
	}
	GardenedBuilderStep_StepStatus_value = map[string]int32{
		"STEP_STATUS_UNSPECIFIED":   0,
		"PENDING":                   1,
		"NOT_RUN_BUILD_SUCCESS":     2,
		"NOT_RUN_BUILD_NON_SUCCESS": 3,
		"SUCCESS":                   4,
		"FAILURE":                   5,
		"INFRA_FAILURE":             6,
		"CANCELED":                  7,
	}
)

func (x GardenedBuilderStep_StepStatus) Enum() *GardenedBuilderStep_StepStatus {
	p := new(GardenedBuilderStep_StepStatus)
	*p = x
	return p
}

func (x GardenedBuilderStep_StepStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GardenedBuilderStep_StepStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[2].Descriptor()
}

func (GardenedBuilderStep_StepStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[2]
}

func (x GardenedBuilderStep_StepStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GardenedBuilderStep_StepStatus.Descriptor instead.
func (GardenedBuilderStep_StepStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{4, 0}
}

// Status of a test verdict.
type GardenedTest_TestStatus int32

const (
	// This status should not be used.
	GardenedTest_TEST_STATUS_UNSPECIFIED GardenedTest_TestStatus = 0
	// The build is still running and there is no data available
	// for the test yet.
	GardenedTest_PENDING GardenedTest_TestStatus = 1
	// There is no result for the test in the build.
	GardenedTest_NOT_RUN GardenedTest_TestStatus = 2
	// The test verdict in the build was expected.
	// This is considered a passing state for the purposes of regression
	// analysis.
	GardenedTest_EXPECTED GardenedTest_TestStatus = 3
	// The test verdict in the build was flaky.
	// This is considered a passing state for the purposes of regression
	// analysis.
	GardenedTest_FLAKY GardenedTest_TestStatus = 4
	// The test verdict in the build was exonerated.
	// This is considered a passing state for the purposes of regression
	// analysis.
	GardenedTest_EXONERATED GardenedTest_TestStatus = 5
	// The test verdict in the build was unexpected.
	// This is considered a failing state for the purposes of regression
	// analysis.
	GardenedTest_UNEXPECTED GardenedTest_TestStatus = 6
	// The test verdict in the build was unexpectedly skipped.
	// This is considered a failing state for the purposes of regression
	// analysis.
	GardenedTest_UNEXPECTEDLY_SKIPPED GardenedTest_TestStatus = 7
)

// Enum value maps for GardenedTest_TestStatus.
var (
	GardenedTest_TestStatus_name = map[int32]string{
		0: "TEST_STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "NOT_RUN",
		3: "EXPECTED",
		4: "FLAKY",
		5: "EXONERATED",
		6: "UNEXPECTED",
		7: "UNEXPECTEDLY_SKIPPED",
	}
	GardenedTest_TestStatus_value = map[string]int32{
		"TEST_STATUS_UNSPECIFIED": 0,
		"PENDING":                 1,
		"NOT_RUN":                 2,
		"EXPECTED":                3,
		"FLAKY":                   4,
		"EXONERATED":              5,
		"UNEXPECTED":              6,
		"UNEXPECTEDLY_SKIPPED":    7,
	}
)

func (x GardenedTest_TestStatus) Enum() *GardenedTest_TestStatus {
	p := new(GardenedTest_TestStatus)
	*p = x
	return p
}

func (x GardenedTest_TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GardenedTest_TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[3].Descriptor()
}

func (GardenedTest_TestStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes[3]
}

func (x GardenedTest_TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GardenedTest_TestStatus.Descriptor instead.
func (GardenedTest_TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{5, 0}
}

// GardenedBuilder represents information needed to monitor a buildbucket Builder
// and return it to passing if it is failing.
type GardenedBuilder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource name of the builder.
	// Format: project/{PROJECT}/buckets/{BUCKET}/builder/{BUILDER}/gardening.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Builder identifier.
	BuilderId *BuilderID `protobuf:"bytes,2,opt,name=builder_id,json=builderId,proto3" json:"builder_id,omitempty"`
	// Recent results for the builder.
	// Up to the last 100 commit positions.
	LatestResults []*BuildSummary `protobuf:"bytes,3,rep,name=latest_results,json=latestResults,proto3" json:"latest_results,omitempty"`
	// Up to 10 further builds after the latest_results. This may include running builds.
	FurtherResults []*BuildSummary `protobuf:"bytes,4,rep,name=further_results,json=furtherResults,proto3" json:"further_results,omitempty"`
	// Steps on the builder which are failing, or
	// were recently failing. I.E. "interesting" steps.
	// This is limited to 40 items.
	Steps         []*GardenedBuilderStep `protobuf:"bytes,5,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GardenedBuilder) Reset() {
	*x = GardenedBuilder{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GardenedBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GardenedBuilder) ProtoMessage() {}

func (x *GardenedBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GardenedBuilder.ProtoReflect.Descriptor instead.
func (*GardenedBuilder) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{0}
}

func (x *GardenedBuilder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GardenedBuilder) GetBuilderId() *BuilderID {
	if x != nil {
		return x.BuilderId
	}
	return nil
}

func (x *GardenedBuilder) GetLatestResults() []*BuildSummary {
	if x != nil {
		return x.LatestResults
	}
	return nil
}

func (x *GardenedBuilder) GetFurtherResults() []*BuildSummary {
	if x != nil {
		return x.FurtherResults
	}
	return nil
}

func (x *GardenedBuilder) GetSteps() []*GardenedBuilderStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

// BuildSummary captures the status of a build.
type BuildSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The build the result was obtained for.
	Build *BuildRef `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
	// The status of the build or step.
	Status BuildStatus `protobuf:"varint,2,opt,name=status,proto3,enum=luci.notify.v1.BuildStatus" json:"status,omitempty"`
	// The build creation time.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// The build summary markdown.
	SummaryMarkdown string `protobuf:"bytes,4,opt,name=summary_markdown,json=summaryMarkdown,proto3" json:"summary_markdown,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BuildSummary) Reset() {
	*x = BuildSummary{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildSummary) ProtoMessage() {}

func (x *BuildSummary) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildSummary.ProtoReflect.Descriptor instead.
func (*BuildSummary) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{1}
}

func (x *BuildSummary) GetBuild() *BuildRef {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *BuildSummary) GetStatus() BuildStatus {
	if x != nil {
		return x.Status
	}
	return BuildStatus_BUILD_STATUS_UNSPECIFIED
}

func (x *BuildSummary) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *BuildSummary) GetSummaryMarkdown() string {
	if x != nil {
		return x.SummaryMarkdown
	}
	return ""
}

// BuildRef represents a reference to a build.
type BuildRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The buildbucket build identifier.
	BuildbucketBuildId int64 `protobuf:"varint,1,opt,name=buildbucket_build_id,json=buildbucketBuildId,proto3" json:"buildbucket_build_id,omitempty"`
	// The version of sources included in the build.
	// May be empty if unavailable.
	CommitPosition int64 `protobuf:"varint,2,opt,name=commit_position,json=commitPosition,proto3" json:"commit_position,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BuildRef) Reset() {
	*x = BuildRef{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRef) ProtoMessage() {}

func (x *BuildRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRef.ProtoReflect.Descriptor instead.
func (*BuildRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{2}
}

func (x *BuildRef) GetBuildbucketBuildId() int64 {
	if x != nil {
		return x.BuildbucketBuildId
	}
	return 0
}

func (x *BuildRef) GetCommitPosition() int64 {
	if x != nil {
		return x.CommitPosition
	}
	return 0
}

// BuilderID identifies a builder.
type BuilderID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project of the builder. E.g. "chromium".
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The build bucket, e.g. "try". Unique within project.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The builder name, e.g. "linux-rel". Unique within bucket.
	Builder       string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuilderID) Reset() {
	*x = BuilderID{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuilderID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuilderID) ProtoMessage() {}

func (x *BuilderID) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuilderID.ProtoReflect.Descriptor instead.
func (*BuilderID) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{3}
}

func (x *BuilderID) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BuilderID) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *BuilderID) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

// GardenedBuilderStep represents information needed to monitor a buildbucket Builder step
// and return it to passing if it is failing.
type GardenedBuilderStep struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The step identifier.
	// Pipe character ("|") is reserved to separate parent and child step names.
	// For example, value "a|b" indicates step "b" under step "a".
	//
	// Pseudosteps (fake steps generated by the server) will start with the prefix
	// "$pseudostep-". The following psudosteps currently exist:
	//   - "$pseudostep-build-failure": for build failures not explained
	//     by a step.
	//   - "$pseudostep-tests": for test failures not under an actual step.
	StepId string `protobuf:"bytes,1,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	// User-editable triage state.
	TriageState *TriageState `protobuf:"bytes,2,opt,name=triage_state,json=triageState,proto3" json:"triage_state,omitempty"`
	// Describes information about the last time the step started failing.
	// Includes whether the failure is consistent (or resolved), the blamelist, etc.
	LastRegression *Regression `protobuf:"bytes,3,opt,name=last_regression,json=lastRegression,proto3" json:"last_regression,omitempty"`
	// The last build with a (non-pending) result for this step.
	// At present, this is the same as the last completed (or cancelled) build
	// although if we ever started ingesting builds prior to completion this
	// could include running builds which already have a result for this step.
	//
	// Use in conjunction with triage_state.snooze.snoozed_buildbucket_build_id
	// to identify when a snooze has expired.
	LastBuild *BuildRef `protobuf:"bytes,4,opt,name=last_build,json=lastBuild,proto3" json:"last_build,omitempty"`
	// Recent builds for the step, comprising up to the last 100 commit positions.
	// This may include running builds.
	// Matches 1:1 with the list on the parent GardenedBuilder.
	// Build IDs and commit positions can be found on the parent.
	LatestResults []GardenedBuilderStep_StepStatus `protobuf:"varint,5,rep,packed,name=latest_results,json=latestResults,proto3,enum=luci.notify.v1.GardenedBuilderStep_StepStatus" json:"latest_results,omitempty"`
	// Up to 10 further builds of running data after the latest_results.
	// This may include running builds.
	// Matches 1:1 with the list on the parent GardenedBuilder.
	// Build IDs and commit positions can be found on the parent.
	FurtherResults []GardenedBuilderStep_StepStatus `protobuf:"varint,6,rep,packed,name=further_results,json=furtherResults,proto3,enum=luci.notify.v1.GardenedBuilderStep_StepStatus" json:"further_results,omitempty"`
	// Failing or recently failing tests that are part of the step. This list is
	// limited to 40 items.
	Tests         []*GardenedTest `protobuf:"bytes,7,rep,name=tests,proto3" json:"tests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GardenedBuilderStep) Reset() {
	*x = GardenedBuilderStep{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GardenedBuilderStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GardenedBuilderStep) ProtoMessage() {}

func (x *GardenedBuilderStep) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GardenedBuilderStep.ProtoReflect.Descriptor instead.
func (*GardenedBuilderStep) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{4}
}

func (x *GardenedBuilderStep) GetStepId() string {
	if x != nil {
		return x.StepId
	}
	return ""
}

func (x *GardenedBuilderStep) GetTriageState() *TriageState {
	if x != nil {
		return x.TriageState
	}
	return nil
}

func (x *GardenedBuilderStep) GetLastRegression() *Regression {
	if x != nil {
		return x.LastRegression
	}
	return nil
}

func (x *GardenedBuilderStep) GetLastBuild() *BuildRef {
	if x != nil {
		return x.LastBuild
	}
	return nil
}

func (x *GardenedBuilderStep) GetLatestResults() []GardenedBuilderStep_StepStatus {
	if x != nil {
		return x.LatestResults
	}
	return nil
}

func (x *GardenedBuilderStep) GetFurtherResults() []GardenedBuilderStep_StepStatus {
	if x != nil {
		return x.FurtherResults
	}
	return nil
}

func (x *GardenedBuilderStep) GetTests() []*GardenedTest {
	if x != nil {
		return x.Tests
	}
	return nil
}

type GardenedTest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the test.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The test variant hash.
	VariantHash string `protobuf:"bytes,2,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// User-editable triage state.
	TriageState *TriageState `protobuf:"bytes,3,opt,name=triage_state,json=triageState,proto3" json:"triage_state,omitempty"`
	// Describes information about the last time the step started failing.
	// Includes whether the failure is consistent (or resolved), the blamelist, etc.
	LastRegression *Regression `protobuf:"bytes,4,opt,name=last_regression,json=lastRegression,proto3" json:"last_regression,omitempty"`
	// The last build with a (non-pending) result for this test.
	// This is the same as the last completed (or cancelled) build.
	//
	// Use in conjunction with triage_state.snooze.snoozed_buildbucket_build_id
	// to identify when a snooze has expired.
	LastBuild *BuildRef `protobuf:"bytes,5,opt,name=last_build,json=lastBuild,proto3" json:"last_build,omitempty"`
	// Recent results for the test, comprising up to the last 100 commit positions.
	// This may include running builds.
	// Matches 1:1 with the list on the parent GardenedBuilder.
	// Build ID and commit positions corresponding to each status can be
	// found on the parent.
	LatestResults []GardenedTest_TestStatus `protobuf:"varint,6,rep,packed,name=latest_results,json=latestResults,proto3,enum=luci.notify.v1.GardenedTest_TestStatus" json:"latest_results,omitempty"`
	// Up to 10 further results of the test after the latest_results.
	// This may include running builds.
	// Matches 1:1 with the list on the parent GardenedBuilder.
	// Build ID and commit positions corresponding to each status can be
	// found on the parent.
	FurtherResults []GardenedTest_TestStatus `protobuf:"varint,7,rep,packed,name=further_results,json=furtherResults,proto3,enum=luci.notify.v1.GardenedTest_TestStatus" json:"further_results,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GardenedTest) Reset() {
	*x = GardenedTest{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GardenedTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GardenedTest) ProtoMessage() {}

func (x *GardenedTest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GardenedTest.ProtoReflect.Descriptor instead.
func (*GardenedTest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{5}
}

func (x *GardenedTest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *GardenedTest) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *GardenedTest) GetTriageState() *TriageState {
	if x != nil {
		return x.TriageState
	}
	return nil
}

func (x *GardenedTest) GetLastRegression() *Regression {
	if x != nil {
		return x.LastRegression
	}
	return nil
}

func (x *GardenedTest) GetLastBuild() *BuildRef {
	if x != nil {
		return x.LastBuild
	}
	return nil
}

func (x *GardenedTest) GetLatestResults() []GardenedTest_TestStatus {
	if x != nil {
		return x.LatestResults
	}
	return nil
}

func (x *GardenedTest) GetFurtherResults() []GardenedTest_TestStatus {
	if x != nil {
		return x.FurtherResults
	}
	return nil
}

// Regression contains information about a time a step or test encountered
// a sequence of one or more failures.
//
// A sequence of failures is only broken by a pass. There are also ignored
// states, which capture cases where a build does not produce a result for
// a step/test. As the name suggests, these states are ignored and do not
// break a run of failures.
//
// Passing, failing and ignored states are defined as follows:
// - Steps (see StepStatus):
//   - Passing: SUCCESS, NOT_RUN_BUILD_SUCCESS.
//   - Failing: FAILURE, INFRA_FAILURE
//   - Ignored: NOT_RUN_BUILD_NON_SUCCESS, CANCELED
//
// - Tests (see TestStatus):
//   - Passing: Expected, Flaky, Exonerated
//   - Failing: Unexpected, Unexpectedly Skipped.
//   - Ignored: Not run, Pending.
//
// A sequence typically starts when a step or test transitions from a
// passing state to a failing state. A sequence may also start if the step
// or test fails and that is the first non-ignored result for the step or test.
type Regression struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier the last regression (unique only within
	// the context of the containing step or test).
	// Use in conjunction with triage_state.bug_regression_id to identify stale
	// bug associations.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the alert is new, consistent or resolved.
	// The following invariants hold:
	// If first_resolved_build is set, the state will be RESOLVED.
	// Otherwise, if total_failing_builds >= 2, the state will be CONSISTENT.
	// Otherwise, the state will be NEW.
	Status RegressionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=luci.notify.v1.RegressionStatus" json:"status,omitempty"`
	// The last build the step passed on prior to the first failure covered by
	// this alert. This may not be set if, e.g. the builder was failing since
	// its inception.
	// For the purposes of this field, a step passes on a build it passed on
	// or a build that passes, even if it did not contain the step.
	LastPassingBuild *BuildRef `protobuf:"bytes,3,opt,name=last_passing_build,json=lastPassingBuild,proto3" json:"last_passing_build,omitempty"`
	// The first failing build. Note this may
	// not be the build immediately consecutive to the last passing build, as
	// there may be intervening canceled builds.
	FirstFailingBuild *BuildRef `protobuf:"bytes,4,opt,name=first_failing_build,json=firstFailingBuild,proto3" json:"first_failing_build,omitempty"`
	// The last failing build. This may be the same as the first failing build.
	LastFailingBuild *BuildRef `protobuf:"bytes,5,opt,name=last_failing_build,json=lastFailingBuild,proto3" json:"last_failing_build,omitempty"`
	// The total number of failing builds between the first and last failing
	// build. This is different to the number of builds between the first and
	// last failing build as it excludes builds with an ignored result
	// for this step/test. See Regression message for details of what statuses
	// are ignored.
	TotalBuildsWithFailures int64 `protobuf:"varint,6,opt,name=total_builds_with_failures,json=totalBuildsWithFailures,proto3" json:"total_builds_with_failures,omitempty"`
	// The first build in which the issue was resolved. Set for resolved alerts only.
	FirstResolvedBuild *BuildRef `protobuf:"bytes,7,opt,name=first_resolved_build,json=firstResolvedBuild,proto3" json:"first_resolved_build,omitempty"`
	// The start time of the last build with a passing or failing result for this step/test.
	// See comments on `Regression` message for definition of passing and failing.
	// Supports verification of fixes.
	LastActualResultBuildStartTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_actual_result_build_start_time,json=lastActualResultBuildStartTime,proto3" json:"last_actual_result_build_start_time,omitempty"`
	// Whether the last passing or failing result (i.e. non-ignored result)
	// for this step/test was a passing result.
	// See comments on `Regression` message for definition of passing and failing.
	// Supports verification of fixes.
	WasLastActualResultPass bool `protobuf:"varint,9,opt,name=was_last_actual_result_pass,json=wasLastActualResultPass,proto3" json:"was_last_actual_result_pass,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Regression) Reset() {
	*x = Regression{}
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Regression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regression) ProtoMessage() {}

func (x *Regression) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regression.ProtoReflect.Descriptor instead.
func (*Regression) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP(), []int{6}
}

func (x *Regression) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Regression) GetStatus() RegressionStatus {
	if x != nil {
		return x.Status
	}
	return RegressionStatus_REGRESSION_STATUS_UNSPECIFIED
}

func (x *Regression) GetLastPassingBuild() *BuildRef {
	if x != nil {
		return x.LastPassingBuild
	}
	return nil
}

func (x *Regression) GetFirstFailingBuild() *BuildRef {
	if x != nil {
		return x.FirstFailingBuild
	}
	return nil
}

func (x *Regression) GetLastFailingBuild() *BuildRef {
	if x != nil {
		return x.LastFailingBuild
	}
	return nil
}

func (x *Regression) GetTotalBuildsWithFailures() int64 {
	if x != nil {
		return x.TotalBuildsWithFailures
	}
	return 0
}

func (x *Regression) GetFirstResolvedBuild() *BuildRef {
	if x != nil {
		return x.FirstResolvedBuild
	}
	return nil
}

func (x *Regression) GetLastActualResultBuildStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActualResultBuildStartTime
	}
	return nil
}

func (x *Regression) GetWasLastActualResultPass() bool {
	if x != nil {
		return x.WasLastActualResultPass
	}
	return false
}

var File_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDesc = string([]byte{
	0x0a, 0x40, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x72, 0x64,
	0x65, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0e, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0c, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x52, 0x65, 0x66, 0x52, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x65, 0x0a, 0x08,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x9c, 0x05, 0x0a,
	0x13, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70,
	0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0xab, 0x01,
	0x0a, 0x0a, 0x53, 0x74, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55,
	0x4e, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e,
	0x46, 0x52, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x22, 0xd7, 0x04, 0x0a, 0x0c,
	0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x69, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x66,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x53, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x66, 0x75,
	0x72, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x41, 0x4b, 0x59, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x58, 0x4f, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x4c, 0x59, 0x5f, 0x53, 0x4b, 0x49, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x07, 0x22, 0xef, 0x04, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x13, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x66, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x66, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x14, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52,
	0x65, 0x66, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x6c, 0x0a, 0x23, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1b, 0x77, 0x61, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17,
	0x77, 0x61, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x50, 0x61, 0x73, 0x73, 0x2a, 0xd0, 0x01, 0x0a, 0x0b, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x14, 0x12,
	0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x46, 0x52, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x24, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x44, 0x2a, 0x92, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x1d, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x42,
	0x34, 0x5a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescData []byte
)

func file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDescData
}

var file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_goTypes = []any{
	(BuildStatus)(0),                    // 0: luci.notify.v1.BuildStatus
	(RegressionStatus)(0),               // 1: luci.notify.v1.RegressionStatus
	(GardenedBuilderStep_StepStatus)(0), // 2: luci.notify.v1.GardenedBuilderStep.StepStatus
	(GardenedTest_TestStatus)(0),        // 3: luci.notify.v1.GardenedTest.TestStatus
	(*GardenedBuilder)(nil),             // 4: luci.notify.v1.GardenedBuilder
	(*BuildSummary)(nil),                // 5: luci.notify.v1.BuildSummary
	(*BuildRef)(nil),                    // 6: luci.notify.v1.BuildRef
	(*BuilderID)(nil),                   // 7: luci.notify.v1.BuilderID
	(*GardenedBuilderStep)(nil),         // 8: luci.notify.v1.GardenedBuilderStep
	(*GardenedTest)(nil),                // 9: luci.notify.v1.GardenedTest
	(*Regression)(nil),                  // 10: luci.notify.v1.Regression
	(*timestamppb.Timestamp)(nil),       // 11: google.protobuf.Timestamp
	(*TriageState)(nil),                 // 12: luci.notify.v1.TriageState
}
var file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_depIdxs = []int32{
	7,  // 0: luci.notify.v1.GardenedBuilder.builder_id:type_name -> luci.notify.v1.BuilderID
	5,  // 1: luci.notify.v1.GardenedBuilder.latest_results:type_name -> luci.notify.v1.BuildSummary
	5,  // 2: luci.notify.v1.GardenedBuilder.further_results:type_name -> luci.notify.v1.BuildSummary
	8,  // 3: luci.notify.v1.GardenedBuilder.steps:type_name -> luci.notify.v1.GardenedBuilderStep
	6,  // 4: luci.notify.v1.BuildSummary.build:type_name -> luci.notify.v1.BuildRef
	0,  // 5: luci.notify.v1.BuildSummary.status:type_name -> luci.notify.v1.BuildStatus
	11, // 6: luci.notify.v1.BuildSummary.creation_time:type_name -> google.protobuf.Timestamp
	12, // 7: luci.notify.v1.GardenedBuilderStep.triage_state:type_name -> luci.notify.v1.TriageState
	10, // 8: luci.notify.v1.GardenedBuilderStep.last_regression:type_name -> luci.notify.v1.Regression
	6,  // 9: luci.notify.v1.GardenedBuilderStep.last_build:type_name -> luci.notify.v1.BuildRef
	2,  // 10: luci.notify.v1.GardenedBuilderStep.latest_results:type_name -> luci.notify.v1.GardenedBuilderStep.StepStatus
	2,  // 11: luci.notify.v1.GardenedBuilderStep.further_results:type_name -> luci.notify.v1.GardenedBuilderStep.StepStatus
	9,  // 12: luci.notify.v1.GardenedBuilderStep.tests:type_name -> luci.notify.v1.GardenedTest
	12, // 13: luci.notify.v1.GardenedTest.triage_state:type_name -> luci.notify.v1.TriageState
	10, // 14: luci.notify.v1.GardenedTest.last_regression:type_name -> luci.notify.v1.Regression
	6,  // 15: luci.notify.v1.GardenedTest.last_build:type_name -> luci.notify.v1.BuildRef
	3,  // 16: luci.notify.v1.GardenedTest.latest_results:type_name -> luci.notify.v1.GardenedTest.TestStatus
	3,  // 17: luci.notify.v1.GardenedTest.further_results:type_name -> luci.notify.v1.GardenedTest.TestStatus
	1,  // 18: luci.notify.v1.Regression.status:type_name -> luci.notify.v1.RegressionStatus
	6,  // 19: luci.notify.v1.Regression.last_passing_build:type_name -> luci.notify.v1.BuildRef
	6,  // 20: luci.notify.v1.Regression.first_failing_build:type_name -> luci.notify.v1.BuildRef
	6,  // 21: luci.notify.v1.Regression.last_failing_build:type_name -> luci.notify.v1.BuildRef
	6,  // 22: luci.notify.v1.Regression.first_resolved_build:type_name -> luci.notify.v1.BuildRef
	11, // 23: luci.notify.v1.Regression.last_actual_result_build_start_time:type_name -> google.protobuf.Timestamp
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_init() }
func file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_init() {
	if File_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto != nil {
		return
	}
	file_go_chromium_org_luci_luci_notify_proto_v1_triage_state_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDesc), len(file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto = out.File
	file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_goTypes = nil
	file_go_chromium_org_luci_luci_notify_proto_v1_gardened_builder_proto_depIdxs = nil
}
