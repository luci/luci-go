// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

package taskdefs;

option go_package = "go.chromium.org/luci/buildbucket/appengine/tasks/defs;taskdefs";

import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/buildbucket/proto/project_config.proto";
import "go.chromium.org/luci/buildbucket/proto/builder_common.proto";

// A task to cancel a Swarming task in Go.
message CancelSwarmingTaskGo {
  // Hostname (e.g. "chromium-swarm.appspot.com") where the task should be
  // cancelled.
  string hostname = 1;
  // Swarming task ID to cancel.
  string task_id = 2;
  // LUCI realm the task belongs to.
  string realm = 3;
}

// A task to create a Swarming task.
message CreateSwarmingBuildTask {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;
}

// A task to create a backend task
message CreateBackendBuildTask {
  int64 build_id = 1;

  // The request ID to be sent to TaskBackend RunTask for idempotency.
  string request_id = 2;

  // Timestamp of when the task was sent to TaskBackend.
  // This is useful to find out when the task creation should expire.
  // Only used for builder with the max_concurrent_builds feature enabled.
  google.protobuf.Timestamp DequeueTime = 3;
}

// A task to create a Swarming task.
message SyncSwarmingBuildTask {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;
  // Generation indicates how many times this build has been put back into the
  // swarming sync queue.
  int64 generation = 2;
}

// A task to export a build to BigQuery.
message ExportBigQueryGo {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;
}

// A task to finalize an invocation in ResultDB.
message FinalizeResultDBGo {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;
}

// A task to send a build notification when a build status changes.
message NotifyPubSubGo {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;

  // An external topic which a build notification should be sent to.
  // If nil or empty, will send to the internal `builds_v2` topic.
  buildbucket.BuildbucketCfg.Topic topic = 2;

  // Whether to use the global or build-specific callback Pub/Sub topic.
  bool callback = 3;
}

// A task to cancel a build.
//
// Besides canceling the build, the task also enqueues CancelBuildTask tasks for
// each of the build's children that cannot outlive it.
message CancelBuildTask {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;
}

// NotifyPubSubGoProxy tasks dispatch NotifyPubSubGo tasks to send builds_v2
// notifications.
message NotifyPubSubGoProxy {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;

  // The project that the build belongs to.
  string project = 2;
}

// SyncBuildsWithBackendTasks finds builds that have exceeded their next sync
// time, then updates the builds. The builds should belong to the same project
// and run on the same backend.
message SyncBuildsWithBackendTasks {
  // Target of the backend.
  string backend = 1;

  // LUCI project .
  string project = 2;
}

// A cloud task to cancel a backend task
message CancelBackendTask {
  // LUCI project the task belongs to.
  string project = 1;

  // Target for the backend.
  string target = 2;

  // Task ID.
  string task_id = 3;
}

// CheckBuildLiveness is a task to check if any build updates are received for
// the given build during the give time period.
message CheckBuildLiveness {
  // ID of a build in the datastore. See model.Build.
  int64 build_id = 1;

  // The maximum amount of seconds for not hearing any build heartbeats before
  // failing the build.
  uint32 heartbeat_timeout = 2;
}

// PushPendingBuildTask checks if the build should be pushed to
// the builder's pending_build queue or
// if the build should be immediately triggered.
message PushPendingBuildTask {
  // ID of the build just being created.
  int64 build_id = 1;

  // ID of the builder the build belongs to.
  buildbucket.v2.BuilderID builder_id = 2;
}

// PopPendingBuildTask pops builds from
// the builder's pending_build queue and send them to task backend.
message PopPendingBuildTask {
  // ID of the build just being ended.
  int64 build_id = 1;

  // ID of the builder to trigger pending builds.
  buildbucket.v2.BuilderID builder_id = 2;
}

// A task to create backend tasks in a batch.
message BatchCreateBackendBuildTasks {
  message Request {
    int64 build_id = 1;

    // The request ID to be sent to TaskBackend RunTask for idempotency.
    string request_id = 2;
  }

  repeated Request requests = 1;

  int32 retries = 2;

  // Timestamp of when the tasks were sent to TaskBackend.
  // This is useful to find out when the task creation should expire.
  // Only used for builder with the max_concurrent_builds feature enabled.
  google.protobuf.Timestamp dequeue_time = 3;

  // Prefix of the deduplication_keys when
  // * enqueueing CreateBackendBuildTasks non-transactionally.
  // * enqueueing a retry of BatchCreateBackendBuildTasks non-transactionally.
  string deduplication_key_prefix = 4;
}
