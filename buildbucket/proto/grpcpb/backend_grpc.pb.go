// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: go.chromium.org/luci/buildbucket/proto/backend.proto

package buildbucketgrpcpb

import . "go.chromium.org/luci/buildbucket/proto"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskBackend_RunTask_FullMethodName         = "/buildbucket.v2.TaskBackend/RunTask"
	TaskBackend_FetchTasks_FullMethodName      = "/buildbucket.v2.TaskBackend/FetchTasks"
	TaskBackend_CancelTasks_FullMethodName     = "/buildbucket.v2.TaskBackend/CancelTasks"
	TaskBackend_ValidateConfigs_FullMethodName = "/buildbucket.v2.TaskBackend/ValidateConfigs"
)

// TaskBackendClient is the client API for TaskBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Services can implement TaskBackend in order for Buildbucket to run Builds
// on them and track the tasks.
//
// Besides implementing all the RPCs below, we also expect the backends to send
// UpdateBuildTask messages to Buildbucket via Pub/Sub.
//
// So that Buildbucket is able to
//   - get task updates from these backends via the UpdateBuildTask messages,
//   - periodically fetch tasks it has not heard from for a while,
//   - give commands about tasks which it has previously issued (e.g. CancelTasks).
//
// Simple backends that opt out of backend task syncing/tracking with Buildbucket
// should use `TaskBackendLite` instead.
type TaskBackendClient interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// The RunTaskResponse should contain the created task.
	// And the implementation of this RPC should be idempotent.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error)
	// Buildbucket will call FetchTasks when it needs to understand the current
	// status of tasks.
	//
	// This will happen at a regular, unspecified, interval when
	// UpdateBuild/UpdateBuildTask haven't been called recently.
	//
	// Once the build is in a terminal state, FetchTasks SHOULD return
	// the same response every time.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	FetchTasks(ctx context.Context, in *FetchTasksRequest, opts ...grpc.CallOption) (*FetchTasksResponse, error)
	// Buildbucket will call this if it was requested to cancel some build(s).
	// The backend SHOULD implement cancelation as best as it can, but
	// simple backends may choose to ignore this (because the next call
	// to UpdateBuild will indicate that the build is Canceled, and so the
	// agent would quit).
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error)
	// Buildbucket will call this when it is asked to validate project
	// configuration i.e. the Builder.backend.config_json field.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	ValidateConfigs(ctx context.Context, in *ValidateConfigsRequest, opts ...grpc.CallOption) (*ValidateConfigsResponse, error)
}

type taskBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskBackendClient(cc grpc.ClientConnInterface) TaskBackendClient {
	return &taskBackendClient{cc}
}

func (c *taskBackendClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunTaskResponse)
	err := c.cc.Invoke(ctx, TaskBackend_RunTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendClient) FetchTasks(ctx context.Context, in *FetchTasksRequest, opts ...grpc.CallOption) (*FetchTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchTasksResponse)
	err := c.cc.Invoke(ctx, TaskBackend_FetchTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendClient) CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTasksResponse)
	err := c.cc.Invoke(ctx, TaskBackend_CancelTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendClient) ValidateConfigs(ctx context.Context, in *ValidateConfigsRequest, opts ...grpc.CallOption) (*ValidateConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateConfigsResponse)
	err := c.cc.Invoke(ctx, TaskBackend_ValidateConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskBackendServer is the server API for TaskBackend service.
// All implementations must embed UnimplementedTaskBackendServer
// for forward compatibility.
//
// Services can implement TaskBackend in order for Buildbucket to run Builds
// on them and track the tasks.
//
// Besides implementing all the RPCs below, we also expect the backends to send
// UpdateBuildTask messages to Buildbucket via Pub/Sub.
//
// So that Buildbucket is able to
//   - get task updates from these backends via the UpdateBuildTask messages,
//   - periodically fetch tasks it has not heard from for a while,
//   - give commands about tasks which it has previously issued (e.g. CancelTasks).
//
// Simple backends that opt out of backend task syncing/tracking with Buildbucket
// should use `TaskBackendLite` instead.
type TaskBackendServer interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// The RunTaskResponse should contain the created task.
	// And the implementation of this RPC should be idempotent.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error)
	// Buildbucket will call FetchTasks when it needs to understand the current
	// status of tasks.
	//
	// This will happen at a regular, unspecified, interval when
	// UpdateBuild/UpdateBuildTask haven't been called recently.
	//
	// Once the build is in a terminal state, FetchTasks SHOULD return
	// the same response every time.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	FetchTasks(context.Context, *FetchTasksRequest) (*FetchTasksResponse, error)
	// Buildbucket will call this if it was requested to cancel some build(s).
	// The backend SHOULD implement cancelation as best as it can, but
	// simple backends may choose to ignore this (because the next call
	// to UpdateBuild will indicate that the build is Canceled, and so the
	// agent would quit).
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error)
	// Buildbucket will call this when it is asked to validate project
	// configuration i.e. the Builder.backend.config_json field.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	ValidateConfigs(context.Context, *ValidateConfigsRequest) (*ValidateConfigsResponse, error)
	mustEmbedUnimplementedTaskBackendServer()
}

// UnimplementedTaskBackendServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskBackendServer struct{}

func (UnimplementedTaskBackendServer) RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (UnimplementedTaskBackendServer) FetchTasks(context.Context, *FetchTasksRequest) (*FetchTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTasks not implemented")
}
func (UnimplementedTaskBackendServer) CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTasks not implemented")
}
func (UnimplementedTaskBackendServer) ValidateConfigs(context.Context, *ValidateConfigsRequest) (*ValidateConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfigs not implemented")
}
func (UnimplementedTaskBackendServer) mustEmbedUnimplementedTaskBackendServer() {}
func (UnimplementedTaskBackendServer) testEmbeddedByValue()                     {}

// UnsafeTaskBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskBackendServer will
// result in compilation errors.
type UnsafeTaskBackendServer interface {
	mustEmbedUnimplementedTaskBackendServer()
}

func RegisterTaskBackendServer(s grpc.ServiceRegistrar, srv TaskBackendServer) {
	// If the following call pancis, it indicates UnimplementedTaskBackendServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskBackend_ServiceDesc, srv)
}

func _TaskBackend_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskBackend_RunTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).RunTask(ctx, req.(*RunTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskBackend_FetchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).FetchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskBackend_FetchTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).FetchTasks(ctx, req.(*FetchTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskBackend_CancelTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).CancelTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskBackend_CancelTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).CancelTasks(ctx, req.(*CancelTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskBackend_ValidateConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).ValidateConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskBackend_ValidateConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).ValidateConfigs(ctx, req.(*ValidateConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskBackend_ServiceDesc is the grpc.ServiceDesc for TaskBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buildbucket.v2.TaskBackend",
	HandlerType: (*TaskBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTask",
			Handler:    _TaskBackend_RunTask_Handler,
		},
		{
			MethodName: "FetchTasks",
			Handler:    _TaskBackend_FetchTasks_Handler,
		},
		{
			MethodName: "CancelTasks",
			Handler:    _TaskBackend_CancelTasks_Handler,
		},
		{
			MethodName: "ValidateConfigs",
			Handler:    _TaskBackend_ValidateConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/buildbucket/proto/backend.proto",
}

const (
	TaskBackendLite_RunTask_FullMethodName = "/buildbucket.v2.TaskBackendLite/RunTask"
)

// TaskBackendLiteClient is the client API for TaskBackendLite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Services can implement TaskBackendLite in order for Buildbucket to run Builds
// on them.
//
// This is for the simple use cases where the backends don't have tasks or don't
// need Buildbucket to track tasks.
//
// For example, some Buildbucket v1 users only want to pull builds from
// Buildbucket to execute and update Buildbucket about the
// final state of the builds.
//
// Note: Because Buildbucket cannot track the underlying tasks, the following
// service degradation occurs:
// TODO(crbug.com/1502975): Update this docstring after we implement the proposed
// improvement.
//   - if the underlying task fails, BB will not know about this until the
//     execution deadline, at which point the build will be marked as infra_failure
//   - there is no way to get to the real underlying task via the BB API
//     (you would have to go to the backend and somehow look for the build id)
//
// Backends that opt in backend task syncing/tracking with Buildbucket
// should use `TaskBackend` instead.
type TaskBackendLiteClient interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// This should return a dummy or empty task.
	//
	// While idempotency is not required, it's still nice to have if possible.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error)
}

type taskBackendLiteClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskBackendLiteClient(cc grpc.ClientConnInterface) TaskBackendLiteClient {
	return &taskBackendLiteClient{cc}
}

func (c *taskBackendLiteClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunTaskResponse)
	err := c.cc.Invoke(ctx, TaskBackendLite_RunTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskBackendLiteServer is the server API for TaskBackendLite service.
// All implementations must embed UnimplementedTaskBackendLiteServer
// for forward compatibility.
//
// Services can implement TaskBackendLite in order for Buildbucket to run Builds
// on them.
//
// This is for the simple use cases where the backends don't have tasks or don't
// need Buildbucket to track tasks.
//
// For example, some Buildbucket v1 users only want to pull builds from
// Buildbucket to execute and update Buildbucket about the
// final state of the builds.
//
// Note: Because Buildbucket cannot track the underlying tasks, the following
// service degradation occurs:
// TODO(crbug.com/1502975): Update this docstring after we implement the proposed
// improvement.
//   - if the underlying task fails, BB will not know about this until the
//     execution deadline, at which point the build will be marked as infra_failure
//   - there is no way to get to the real underlying task via the BB API
//     (you would have to go to the backend and somehow look for the build id)
//
// Backends that opt in backend task syncing/tracking with Buildbucket
// should use `TaskBackend` instead.
type TaskBackendLiteServer interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// This should return a dummy or empty task.
	//
	// While idempotency is not required, it's still nice to have if possible.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error)
	mustEmbedUnimplementedTaskBackendLiteServer()
}

// UnimplementedTaskBackendLiteServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskBackendLiteServer struct{}

func (UnimplementedTaskBackendLiteServer) RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (UnimplementedTaskBackendLiteServer) mustEmbedUnimplementedTaskBackendLiteServer() {}
func (UnimplementedTaskBackendLiteServer) testEmbeddedByValue()                         {}

// UnsafeTaskBackendLiteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskBackendLiteServer will
// result in compilation errors.
type UnsafeTaskBackendLiteServer interface {
	mustEmbedUnimplementedTaskBackendLiteServer()
}

func RegisterTaskBackendLiteServer(s grpc.ServiceRegistrar, srv TaskBackendLiteServer) {
	// If the following call pancis, it indicates UnimplementedTaskBackendLiteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskBackendLite_ServiceDesc, srv)
}

func _TaskBackendLite_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendLiteServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskBackendLite_RunTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendLiteServer).RunTask(ctx, req.(*RunTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskBackendLite_ServiceDesc is the grpc.ServiceDesc for TaskBackendLite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskBackendLite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buildbucket.v2.TaskBackendLite",
	HandlerType: (*TaskBackendLiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTask",
			Handler:    _TaskBackendLite_RunTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/buildbucket/proto/backend.proto",
}
