// Copyright 2020 The Swarming Authors. All rights reserved.
// Use of this source code is governed by the Apache v2.0 license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: go.chromium.org/luci/buildbucket/proto/builder_service.proto

package buildbucketgrpcpb

import . "go.chromium.org/luci/buildbucket/proto"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Builders_GetBuilder_FullMethodName       = "/buildbucket.v2.Builders/GetBuilder"
	Builders_ListBuilders_FullMethodName     = "/buildbucket.v2.Builders/ListBuilders"
	Builders_SetBuilderHealth_FullMethodName = "/buildbucket.v2.Builders/SetBuilderHealth"
)

// BuildersClient is the client API for Builders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Provides preconfigured builders.
type BuildersClient interface {
	// Looks up one builder.
	GetBuilder(ctx context.Context, in *GetBuilderRequest, opts ...grpc.CallOption) (*BuilderItem, error)
	// Lists all builders of a project or a bucket.
	ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error)
	// SetBuilderHealth allows a Builder's health to be set.
	SetBuilderHealth(ctx context.Context, in *SetBuilderHealthRequest, opts ...grpc.CallOption) (*SetBuilderHealthResponse, error)
}

type buildersClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildersClient(cc grpc.ClientConnInterface) BuildersClient {
	return &buildersClient{cc}
}

func (c *buildersClient) GetBuilder(ctx context.Context, in *GetBuilderRequest, opts ...grpc.CallOption) (*BuilderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuilderItem)
	err := c.cc.Invoke(ctx, Builders_GetBuilder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildersClient) ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBuildersResponse)
	err := c.cc.Invoke(ctx, Builders_ListBuilders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildersClient) SetBuilderHealth(ctx context.Context, in *SetBuilderHealthRequest, opts ...grpc.CallOption) (*SetBuilderHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBuilderHealthResponse)
	err := c.cc.Invoke(ctx, Builders_SetBuilderHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildersServer is the server API for Builders service.
// All implementations must embed UnimplementedBuildersServer
// for forward compatibility.
//
// Provides preconfigured builders.
type BuildersServer interface {
	// Looks up one builder.
	GetBuilder(context.Context, *GetBuilderRequest) (*BuilderItem, error)
	// Lists all builders of a project or a bucket.
	ListBuilders(context.Context, *ListBuildersRequest) (*ListBuildersResponse, error)
	// SetBuilderHealth allows a Builder's health to be set.
	SetBuilderHealth(context.Context, *SetBuilderHealthRequest) (*SetBuilderHealthResponse, error)
	mustEmbedUnimplementedBuildersServer()
}

// UnimplementedBuildersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBuildersServer struct{}

func (UnimplementedBuildersServer) GetBuilder(context.Context, *GetBuilderRequest) (*BuilderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuilder not implemented")
}
func (UnimplementedBuildersServer) ListBuilders(context.Context, *ListBuildersRequest) (*ListBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuilders not implemented")
}
func (UnimplementedBuildersServer) SetBuilderHealth(context.Context, *SetBuilderHealthRequest) (*SetBuilderHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBuilderHealth not implemented")
}
func (UnimplementedBuildersServer) mustEmbedUnimplementedBuildersServer() {}
func (UnimplementedBuildersServer) testEmbeddedByValue()                  {}

// UnsafeBuildersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildersServer will
// result in compilation errors.
type UnsafeBuildersServer interface {
	mustEmbedUnimplementedBuildersServer()
}

func RegisterBuildersServer(s grpc.ServiceRegistrar, srv BuildersServer) {
	// If the following call pancis, it indicates UnimplementedBuildersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Builders_ServiceDesc, srv)
}

func _Builders_GetBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuilderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildersServer).GetBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Builders_GetBuilder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildersServer).GetBuilder(ctx, req.(*GetBuilderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builders_ListBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildersServer).ListBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Builders_ListBuilders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildersServer).ListBuilders(ctx, req.(*ListBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builders_SetBuilderHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBuilderHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildersServer).SetBuilderHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Builders_SetBuilderHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildersServer).SetBuilderHealth(ctx, req.(*SetBuilderHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Builders_ServiceDesc is the grpc.ServiceDesc for Builders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Builders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buildbucket.v2.Builders",
	HandlerType: (*BuildersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBuilder",
			Handler:    _Builders_GetBuilder_Handler,
		},
		{
			MethodName: "ListBuilders",
			Handler:    _Builders_ListBuilders_Handler,
		},
		{
			MethodName: "SetBuilderHealth",
			Handler:    _Builders_SetBuilderHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/buildbucket/proto/builder_service.proto",
}
