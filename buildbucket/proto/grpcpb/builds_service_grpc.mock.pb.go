// Code generated by MockGen. DO NOT EDIT.
// Source: grpcpb/builds_service_grpc.pb.go

package buildbucketgrpcpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	. "go.chromium.org/luci/buildbucket/proto"
	grpc "google.golang.org/grpc"
)

// MockBuildsClient is a mock of BuildsClient interface.
type MockBuildsClient struct {
	ctrl     *gomock.Controller
	recorder *MockBuildsClientMockRecorder
}

// MockBuildsClientMockRecorder is the mock recorder for MockBuildsClient.
type MockBuildsClientMockRecorder struct {
	mock *MockBuildsClient
}

// NewMockBuildsClient creates a new mock instance.
func NewMockBuildsClient(ctrl *gomock.Controller) *MockBuildsClient {
	mock := &MockBuildsClient{ctrl: ctrl}
	mock.recorder = &MockBuildsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildsClient) EXPECT() *MockBuildsClientMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockBuildsClient) Batch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Batch", varargs...)
	ret0, _ := ret[0].(*BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batch indicates an expected call of Batch.
func (mr *MockBuildsClientMockRecorder) Batch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockBuildsClient)(nil).Batch), varargs...)
}

// CancelBuild mocks base method.
func (m *MockBuildsClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild.
func (mr *MockBuildsClientMockRecorder) CancelBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockBuildsClient)(nil).CancelBuild), varargs...)
}

// CreateBuild mocks base method.
func (m *MockBuildsClient) CreateBuild(ctx context.Context, in *CreateBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild.
func (mr *MockBuildsClientMockRecorder) CreateBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockBuildsClient)(nil).CreateBuild), varargs...)
}

// CustomMetricPreview mocks base method.
func (m *MockBuildsClient) CustomMetricPreview(ctx context.Context, in *CustomMetricPreviewRequest, opts ...grpc.CallOption) (*CustomMetricPreviewResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CustomMetricPreview", varargs...)
	ret0, _ := ret[0].(*CustomMetricPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomMetricPreview indicates an expected call of CustomMetricPreview.
func (mr *MockBuildsClientMockRecorder) CustomMetricPreview(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomMetricPreview", reflect.TypeOf((*MockBuildsClient)(nil).CustomMetricPreview), varargs...)
}

// GetBuild mocks base method.
func (m *MockBuildsClient) GetBuild(ctx context.Context, in *GetBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockBuildsClientMockRecorder) GetBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockBuildsClient)(nil).GetBuild), varargs...)
}

// GetBuildStatus mocks base method.
func (m *MockBuildsClient) GetBuildStatus(ctx context.Context, in *GetBuildStatusRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuildStatus", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildStatus indicates an expected call of GetBuildStatus.
func (mr *MockBuildsClientMockRecorder) GetBuildStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildStatus", reflect.TypeOf((*MockBuildsClient)(nil).GetBuildStatus), varargs...)
}

// ScheduleBuild mocks base method.
func (m *MockBuildsClient) ScheduleBuild(ctx context.Context, in *ScheduleBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleBuild indicates an expected call of ScheduleBuild.
func (mr *MockBuildsClientMockRecorder) ScheduleBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBuild", reflect.TypeOf((*MockBuildsClient)(nil).ScheduleBuild), varargs...)
}

// SearchBuilds mocks base method.
func (m *MockBuildsClient) SearchBuilds(ctx context.Context, in *SearchBuildsRequest, opts ...grpc.CallOption) (*SearchBuildsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchBuilds", varargs...)
	ret0, _ := ret[0].(*SearchBuildsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBuilds indicates an expected call of SearchBuilds.
func (mr *MockBuildsClientMockRecorder) SearchBuilds(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBuilds", reflect.TypeOf((*MockBuildsClient)(nil).SearchBuilds), varargs...)
}

// StartBuild mocks base method.
func (m *MockBuildsClient) StartBuild(ctx context.Context, in *StartBuildRequest, opts ...grpc.CallOption) (*StartBuildResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBuild", varargs...)
	ret0, _ := ret[0].(*StartBuildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuild indicates an expected call of StartBuild.
func (mr *MockBuildsClientMockRecorder) StartBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockBuildsClient)(nil).StartBuild), varargs...)
}

// SynthesizeBuild mocks base method.
func (m *MockBuildsClient) SynthesizeBuild(ctx context.Context, in *SynthesizeBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynthesizeBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynthesizeBuild indicates an expected call of SynthesizeBuild.
func (mr *MockBuildsClientMockRecorder) SynthesizeBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeBuild", reflect.TypeOf((*MockBuildsClient)(nil).SynthesizeBuild), varargs...)
}

// UpdateBuild mocks base method.
func (m *MockBuildsClient) UpdateBuild(ctx context.Context, in *UpdateBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBuild", varargs...)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuild indicates an expected call of UpdateBuild.
func (mr *MockBuildsClientMockRecorder) UpdateBuild(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuild", reflect.TypeOf((*MockBuildsClient)(nil).UpdateBuild), varargs...)
}

// MockBuildsServer is a mock of BuildsServer interface.
type MockBuildsServer struct {
	ctrl     *gomock.Controller
	recorder *MockBuildsServerMockRecorder
}

// MockBuildsServerMockRecorder is the mock recorder for MockBuildsServer.
type MockBuildsServerMockRecorder struct {
	mock *MockBuildsServer
}

// NewMockBuildsServer creates a new mock instance.
func NewMockBuildsServer(ctrl *gomock.Controller) *MockBuildsServer {
	mock := &MockBuildsServer{ctrl: ctrl}
	mock.recorder = &MockBuildsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildsServer) EXPECT() *MockBuildsServerMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockBuildsServer) Batch(arg0 context.Context, arg1 *BatchRequest) (*BatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch", arg0, arg1)
	ret0, _ := ret[0].(*BatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Batch indicates an expected call of Batch.
func (mr *MockBuildsServerMockRecorder) Batch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockBuildsServer)(nil).Batch), arg0, arg1)
}

// CancelBuild mocks base method.
func (m *MockBuildsServer) CancelBuild(arg0 context.Context, arg1 *CancelBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBuild indicates an expected call of CancelBuild.
func (mr *MockBuildsServerMockRecorder) CancelBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBuild", reflect.TypeOf((*MockBuildsServer)(nil).CancelBuild), arg0, arg1)
}

// CreateBuild mocks base method.
func (m *MockBuildsServer) CreateBuild(arg0 context.Context, arg1 *CreateBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild.
func (mr *MockBuildsServerMockRecorder) CreateBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockBuildsServer)(nil).CreateBuild), arg0, arg1)
}

// CustomMetricPreview mocks base method.
func (m *MockBuildsServer) CustomMetricPreview(arg0 context.Context, arg1 *CustomMetricPreviewRequest) (*CustomMetricPreviewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomMetricPreview", arg0, arg1)
	ret0, _ := ret[0].(*CustomMetricPreviewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomMetricPreview indicates an expected call of CustomMetricPreview.
func (mr *MockBuildsServerMockRecorder) CustomMetricPreview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomMetricPreview", reflect.TypeOf((*MockBuildsServer)(nil).CustomMetricPreview), arg0, arg1)
}

// GetBuild mocks base method.
func (m *MockBuildsServer) GetBuild(arg0 context.Context, arg1 *GetBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockBuildsServerMockRecorder) GetBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockBuildsServer)(nil).GetBuild), arg0, arg1)
}

// GetBuildStatus mocks base method.
func (m *MockBuildsServer) GetBuildStatus(arg0 context.Context, arg1 *GetBuildStatusRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildStatus", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildStatus indicates an expected call of GetBuildStatus.
func (mr *MockBuildsServerMockRecorder) GetBuildStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildStatus", reflect.TypeOf((*MockBuildsServer)(nil).GetBuildStatus), arg0, arg1)
}

// ScheduleBuild mocks base method.
func (m *MockBuildsServer) ScheduleBuild(arg0 context.Context, arg1 *ScheduleBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleBuild indicates an expected call of ScheduleBuild.
func (mr *MockBuildsServerMockRecorder) ScheduleBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleBuild", reflect.TypeOf((*MockBuildsServer)(nil).ScheduleBuild), arg0, arg1)
}

// SearchBuilds mocks base method.
func (m *MockBuildsServer) SearchBuilds(arg0 context.Context, arg1 *SearchBuildsRequest) (*SearchBuildsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBuilds", arg0, arg1)
	ret0, _ := ret[0].(*SearchBuildsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBuilds indicates an expected call of SearchBuilds.
func (mr *MockBuildsServerMockRecorder) SearchBuilds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBuilds", reflect.TypeOf((*MockBuildsServer)(nil).SearchBuilds), arg0, arg1)
}

// StartBuild mocks base method.
func (m *MockBuildsServer) StartBuild(arg0 context.Context, arg1 *StartBuildRequest) (*StartBuildResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBuild", arg0, arg1)
	ret0, _ := ret[0].(*StartBuildResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuild indicates an expected call of StartBuild.
func (mr *MockBuildsServerMockRecorder) StartBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockBuildsServer)(nil).StartBuild), arg0, arg1)
}

// SynthesizeBuild mocks base method.
func (m *MockBuildsServer) SynthesizeBuild(arg0 context.Context, arg1 *SynthesizeBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SynthesizeBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynthesizeBuild indicates an expected call of SynthesizeBuild.
func (mr *MockBuildsServerMockRecorder) SynthesizeBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeBuild", reflect.TypeOf((*MockBuildsServer)(nil).SynthesizeBuild), arg0, arg1)
}

// UpdateBuild mocks base method.
func (m *MockBuildsServer) UpdateBuild(arg0 context.Context, arg1 *UpdateBuildRequest) (*Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuild", arg0, arg1)
	ret0, _ := ret[0].(*Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuild indicates an expected call of UpdateBuild.
func (mr *MockBuildsServerMockRecorder) UpdateBuild(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuild", reflect.TypeOf((*MockBuildsServer)(nil).UpdateBuild), arg0, arg1)
}

// mustEmbedUnimplementedBuildsServer mocks base method.
func (m *MockBuildsServer) mustEmbedUnimplementedBuildsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBuildsServer")
}

// mustEmbedUnimplementedBuildsServer indicates an expected call of mustEmbedUnimplementedBuildsServer.
func (mr *MockBuildsServerMockRecorder) mustEmbedUnimplementedBuildsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBuildsServer", reflect.TypeOf((*MockBuildsServer)(nil).mustEmbedUnimplementedBuildsServer))
}

// MockUnsafeBuildsServer is a mock of UnsafeBuildsServer interface.
type MockUnsafeBuildsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBuildsServerMockRecorder
}

// MockUnsafeBuildsServerMockRecorder is the mock recorder for MockUnsafeBuildsServer.
type MockUnsafeBuildsServerMockRecorder struct {
	mock *MockUnsafeBuildsServer
}

// NewMockUnsafeBuildsServer creates a new mock instance.
func NewMockUnsafeBuildsServer(ctrl *gomock.Controller) *MockUnsafeBuildsServer {
	mock := &MockUnsafeBuildsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBuildsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBuildsServer) EXPECT() *MockUnsafeBuildsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBuildsServer mocks base method.
func (m *MockUnsafeBuildsServer) mustEmbedUnimplementedBuildsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBuildsServer")
}

// mustEmbedUnimplementedBuildsServer indicates an expected call of mustEmbedUnimplementedBuildsServer.
func (mr *MockUnsafeBuildsServerMockRecorder) mustEmbedUnimplementedBuildsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBuildsServer", reflect.TypeOf((*MockUnsafeBuildsServer)(nil).mustEmbedUnimplementedBuildsServer))
}
