// Code generated by MockGen. DO NOT EDIT.
// Source: grpcpb/builder_service_grpc.pb.go

package buildbucketgrpcpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	. "go.chromium.org/luci/buildbucket/proto"
	grpc "google.golang.org/grpc"
)

// MockBuildersClient is a mock of BuildersClient interface.
type MockBuildersClient struct {
	ctrl     *gomock.Controller
	recorder *MockBuildersClientMockRecorder
}

// MockBuildersClientMockRecorder is the mock recorder for MockBuildersClient.
type MockBuildersClientMockRecorder struct {
	mock *MockBuildersClient
}

// NewMockBuildersClient creates a new mock instance.
func NewMockBuildersClient(ctrl *gomock.Controller) *MockBuildersClient {
	mock := &MockBuildersClient{ctrl: ctrl}
	mock.recorder = &MockBuildersClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildersClient) EXPECT() *MockBuildersClientMockRecorder {
	return m.recorder
}

// GetBuilder mocks base method.
func (m *MockBuildersClient) GetBuilder(ctx context.Context, in *GetBuilderRequest, opts ...grpc.CallOption) (*BuilderItem, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuilder", varargs...)
	ret0, _ := ret[0].(*BuilderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuilder indicates an expected call of GetBuilder.
func (mr *MockBuildersClientMockRecorder) GetBuilder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuilder", reflect.TypeOf((*MockBuildersClient)(nil).GetBuilder), varargs...)
}

// ListBuilders mocks base method.
func (m *MockBuildersClient) ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBuilders", varargs...)
	ret0, _ := ret[0].(*ListBuildersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilders indicates an expected call of ListBuilders.
func (mr *MockBuildersClientMockRecorder) ListBuilders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilders", reflect.TypeOf((*MockBuildersClient)(nil).ListBuilders), varargs...)
}

// SetBuilderHealth mocks base method.
func (m *MockBuildersClient) SetBuilderHealth(ctx context.Context, in *SetBuilderHealthRequest, opts ...grpc.CallOption) (*SetBuilderHealthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetBuilderHealth", varargs...)
	ret0, _ := ret[0].(*SetBuilderHealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBuilderHealth indicates an expected call of SetBuilderHealth.
func (mr *MockBuildersClientMockRecorder) SetBuilderHealth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuilderHealth", reflect.TypeOf((*MockBuildersClient)(nil).SetBuilderHealth), varargs...)
}

// MockBuildersServer is a mock of BuildersServer interface.
type MockBuildersServer struct {
	ctrl     *gomock.Controller
	recorder *MockBuildersServerMockRecorder
}

// MockBuildersServerMockRecorder is the mock recorder for MockBuildersServer.
type MockBuildersServerMockRecorder struct {
	mock *MockBuildersServer
}

// NewMockBuildersServer creates a new mock instance.
func NewMockBuildersServer(ctrl *gomock.Controller) *MockBuildersServer {
	mock := &MockBuildersServer{ctrl: ctrl}
	mock.recorder = &MockBuildersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildersServer) EXPECT() *MockBuildersServerMockRecorder {
	return m.recorder
}

// GetBuilder mocks base method.
func (m *MockBuildersServer) GetBuilder(arg0 context.Context, arg1 *GetBuilderRequest) (*BuilderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuilder", arg0, arg1)
	ret0, _ := ret[0].(*BuilderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuilder indicates an expected call of GetBuilder.
func (mr *MockBuildersServerMockRecorder) GetBuilder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuilder", reflect.TypeOf((*MockBuildersServer)(nil).GetBuilder), arg0, arg1)
}

// ListBuilders mocks base method.
func (m *MockBuildersServer) ListBuilders(arg0 context.Context, arg1 *ListBuildersRequest) (*ListBuildersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBuilders", arg0, arg1)
	ret0, _ := ret[0].(*ListBuildersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBuilders indicates an expected call of ListBuilders.
func (mr *MockBuildersServerMockRecorder) ListBuilders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBuilders", reflect.TypeOf((*MockBuildersServer)(nil).ListBuilders), arg0, arg1)
}

// SetBuilderHealth mocks base method.
func (m *MockBuildersServer) SetBuilderHealth(arg0 context.Context, arg1 *SetBuilderHealthRequest) (*SetBuilderHealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBuilderHealth", arg0, arg1)
	ret0, _ := ret[0].(*SetBuilderHealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetBuilderHealth indicates an expected call of SetBuilderHealth.
func (mr *MockBuildersServerMockRecorder) SetBuilderHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBuilderHealth", reflect.TypeOf((*MockBuildersServer)(nil).SetBuilderHealth), arg0, arg1)
}

// mustEmbedUnimplementedBuildersServer mocks base method.
func (m *MockBuildersServer) mustEmbedUnimplementedBuildersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBuildersServer")
}

// mustEmbedUnimplementedBuildersServer indicates an expected call of mustEmbedUnimplementedBuildersServer.
func (mr *MockBuildersServerMockRecorder) mustEmbedUnimplementedBuildersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBuildersServer", reflect.TypeOf((*MockBuildersServer)(nil).mustEmbedUnimplementedBuildersServer))
}

// MockUnsafeBuildersServer is a mock of UnsafeBuildersServer interface.
type MockUnsafeBuildersServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBuildersServerMockRecorder
}

// MockUnsafeBuildersServerMockRecorder is the mock recorder for MockUnsafeBuildersServer.
type MockUnsafeBuildersServerMockRecorder struct {
	mock *MockUnsafeBuildersServer
}

// NewMockUnsafeBuildersServer creates a new mock instance.
func NewMockUnsafeBuildersServer(ctrl *gomock.Controller) *MockUnsafeBuildersServer {
	mock := &MockUnsafeBuildersServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBuildersServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBuildersServer) EXPECT() *MockUnsafeBuildersServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBuildersServer mocks base method.
func (m *MockUnsafeBuildersServer) mustEmbedUnimplementedBuildersServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBuildersServer")
}

// mustEmbedUnimplementedBuildersServer indicates an expected call of mustEmbedUnimplementedBuildersServer.
func (mr *MockUnsafeBuildersServerMockRecorder) mustEmbedUnimplementedBuildersServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBuildersServer", reflect.TypeOf((*MockUnsafeBuildersServer)(nil).mustEmbedUnimplementedBuildersServer))
}
