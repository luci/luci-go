// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/buildbucket/proto/backend.proto

package buildbucketpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunTaskRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A string supplied by the builder configuration which will be interpreted
	// by this backend. This should be used to encapsulate the connection
	// information needed to target the specific backend host.
	//
	// For example, a backend might accept a target of
	// 'swarming://chromium-swarm.appspot.com' to indicate "swarming"
	// protocol and which Swarming instance it should issue the task on.
	//
	// In this example, we use 'swarming://' to allow for the possibility
	// of a single backend handling multiple different protocols.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// A REGISTER_TASK token that the backend can use to register the backend task
	// to Buildbucket via the RegisterBuildTask RPC.
	// DEPRECATED: The StartBuildToken in RunTaskRequest.Secrets will be used.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/buildbucket/proto/backend.proto.
	RegisterBackendTaskToken string `protobuf:"bytes,2,opt,name=register_backend_task_token,json=registerBackendTaskToken,proto3" json:"register_backend_task_token,omitempty"`
	// The LUCI Realm that the created task should be associated with.
	Realm string `protobuf:"bytes,3,opt,name=realm,proto3" json:"realm,omitempty"`
	// The backend must run the agent with the given command line arguments
	// (see `agent_args`) for full functionality.
	Agent *RunTaskRequest_AgentExecutable `protobuf:"bytes,4,opt,name=agent,proto3" json:"agent,omitempty"`
	// An opaque argv[1:] to be passed to the agent.
	//
	// Must contain build-id and hostname.
	// i.e.
	//
	//	`-build-id=<build id>`
	//	`-host=cr-buildbucket@appspot.com`
	//
	// Named caches set for this Build must be mounted all under some directory
	// and that root directory must be passed by appending a CLI argument:
	//
	//	`-cache-base=/path/to/cache/base`.
	//
	// Additionally, the Backend must arrange for the agent to know the backend
	// task id. This must exactly match the task id used by UpdateBuildTask,
	// and the agent will use it to make UpdateBuild calls. The backend must
	// supply the task id to the agent by appending a CLI argument:
	//
	//	`-task-id=<task id>`
	//
	// Also see `secrets` for one more potential CLI argument.
	//
	// For full functionality, the Backend must run the agent with this
	// list of arguments. The agent knows how to execute the Build as defined
	// by Buildbucket.
	//
	// Implementation note; I'd like to fix crbug.com/1219018 at the same time
	// that we implement this. Otherwise we will continue to have the
	// command-line-length issues that we do today, but they may get worse from
	// e.g. -task-id and -cache-base.
	AgentArgs []string `protobuf:"bytes,5,rep,name=agent_args,json=agentArgs,proto3" json:"agent_args,omitempty"`
	// Secrets contains key material for clients to call StartBuild or UpdateBuild.
	// This should be added to the BuildbucketAgentContext file for use in the agent.
	// Alternatively (but not suggested), this can be passed via LUCI_CONTEXT['secrets']
	// to the agent. There should be no CLI support for secrets in the agent.
	Secrets *BuildSecrets `protobuf:"bytes,6,opt,name=secrets,proto3" json:"secrets,omitempty"`
	// The hostname of the buildbucket service to send RPCs back to.
	//
	// e.g. `cr-buildbucket.appspot.com`.
	BuildbucketHost string `protobuf:"bytes,7,opt,name=buildbucket_host,json=buildbucketHost,proto3" json:"buildbucket_host,omitempty"`
	// The id of the build that this request is for.
	//
	// For backends which are NOT using the agent, they can use this build_id to
	// directly service the build (e.g. by calling UpdateBuild).
	//
	// It's possible for multiple RunTaskRequests to be issued for the same
	// build_id; See `request_id` for how this could happen.
	BuildId string `protobuf:"bytes,8,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Dimensions are key/value pairs which describe the type of "bot" which
	// can process this build. The specific values depend on the Backend.
	//
	// These also detail how long the Backend should wait for each of these
	// before dropping them as a requirement.
	//
	// NOTE: These do not include Swarming's "special" named cache dimensions.
	// see `caches` for that information.
	Dimensions []*RequestedDimension `protobuf:"bytes,9,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Start deadline is the absolute timestamp of when this Build must start
	// by before Buildbucket marks it as INFRA_FAILURE.
	StartDeadline *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=start_deadline,json=startDeadline,proto3" json:"start_deadline,omitempty"`
	// Execution timeout is the amount of time after the Build starts that
	// the Backend should allow it to run before beginning the graceful shutdown
	// process (described in LUCI_CONTEXT['deadline']).
	//
	// Builds which run for longer than this will be marked as INFRA_FAILURE.
	ExecutionTimeout *durationpb.Duration `protobuf:"bytes,11,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	// The amount of time on either `execution_timeout` or on a `cancel` event
	// that the agent should be given to shut down.
	//
	// See LUCI_CONTEXT['deadline'].
	//
	// Buildbucket may mark the build as INFRA_FAILURE if it fails to terminate
	// this much time after being canceled, or after hitting execution_timeout.
	GracePeriod *durationpb.Duration `protobuf:"bytes,12,opt,name=grace_period,json=gracePeriod,proto3" json:"grace_period,omitempty"`
	// Describes the list of cache ids, their paths (relative to the task root)
	// and how long the Backend should wait for a bot with a warm cache to
	// become available.
	Caches []*CacheEntry `protobuf:"bytes,13,rep,name=caches,proto3" json:"caches,omitempty"`
	// Additional backend-specific settings. For Swarming this would include:
	//   - priority
	//   - wait_for_capacity
	//   - containment
	BackendConfig *structpb.Struct `protobuf:"bytes,14,opt,name=backend_config,json=backendConfig,proto3" json:"backend_config,omitempty"`
	// Experiments are provided in order to allow Backends to roll out new
	// features or behaviors triggered on experiments.
	//
	// This will be the full set of experiments selected for this Build
	// (as they might appear in Build.input.experiments).
	Experiments []string `protobuf:"bytes,15,rep,name=experiments,proto3" json:"experiments,omitempty"`
	// Buildbucket will provide a request id (formatted as a UUID), which the
	// TaskBackend SHOULD use to deduplicate the RunTaskRequest within a 10
	// minute window.
	//
	// If the backend does NOT deduplicate the requests, it will put extra
	// burden on the backend (because some useless tasks will be scheduled).
	// However proper deduplication can be difficult to properly implement,
	// so it may be worth the tradeoff for simple backends to just accept
	// the possibility of occasional duplicated, useless, work.
	RequestId string `protobuf:"bytes,16,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The pubsub topic that the backend will use to send
	// UpdateBuildTask messages to buildbucket. It is set by buildbucket using
	// service_config and the current buildbucket host.
	PubsubTopic   string `protobuf:"bytes,17,opt,name=pubsub_topic,json=pubsubTopic,proto3" json:"pubsub_topic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTaskRequest) Reset() {
	*x = RunTaskRequest{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTaskRequest) ProtoMessage() {}

func (x *RunTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTaskRequest.ProtoReflect.Descriptor instead.
func (*RunTaskRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{0}
}

func (x *RunTaskRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/buildbucket/proto/backend.proto.
func (x *RunTaskRequest) GetRegisterBackendTaskToken() string {
	if x != nil {
		return x.RegisterBackendTaskToken
	}
	return ""
}

func (x *RunTaskRequest) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *RunTaskRequest) GetAgent() *RunTaskRequest_AgentExecutable {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *RunTaskRequest) GetAgentArgs() []string {
	if x != nil {
		return x.AgentArgs
	}
	return nil
}

func (x *RunTaskRequest) GetSecrets() *BuildSecrets {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *RunTaskRequest) GetBuildbucketHost() string {
	if x != nil {
		return x.BuildbucketHost
	}
	return ""
}

func (x *RunTaskRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *RunTaskRequest) GetDimensions() []*RequestedDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *RunTaskRequest) GetStartDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDeadline
	}
	return nil
}

func (x *RunTaskRequest) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

func (x *RunTaskRequest) GetGracePeriod() *durationpb.Duration {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

func (x *RunTaskRequest) GetCaches() []*CacheEntry {
	if x != nil {
		return x.Caches
	}
	return nil
}

func (x *RunTaskRequest) GetBackendConfig() *structpb.Struct {
	if x != nil {
		return x.BackendConfig
	}
	return nil
}

func (x *RunTaskRequest) GetExperiments() []string {
	if x != nil {
		return x.Experiments
	}
	return nil
}

func (x *RunTaskRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RunTaskRequest) GetPubsubTopic() string {
	if x != nil {
		return x.PubsubTopic
	}
	return ""
}

type RunTaskResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The backend task created by RunTask.
	Task          *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTaskResponse) Reset() {
	*x = RunTaskResponse{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTaskResponse) ProtoMessage() {}

func (x *RunTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTaskResponse.ProtoReflect.Descriptor instead.
func (*RunTaskResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{1}
}

func (x *RunTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type FetchTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of TaskID will never be more than 1000.
	TaskIds       []*TaskID `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTasksRequest) Reset() {
	*x = FetchTasksRequest{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTasksRequest) ProtoMessage() {}

func (x *FetchTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTasksRequest.ProtoReflect.Descriptor instead.
func (*FetchTasksRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{2}
}

func (x *FetchTasksRequest) GetTaskIds() []*TaskID {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type FetchTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// These should represent the current state of the requested tasks.
	Responses     []*FetchTasksResponse_Response `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTasksResponse) Reset() {
	*x = FetchTasksResponse{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTasksResponse) ProtoMessage() {}

func (x *FetchTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTasksResponse.ProtoReflect.Descriptor instead.
func (*FetchTasksResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{3}
}

func (x *FetchTasksResponse) GetResponses() []*FetchTasksResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

type CancelTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of TaskID will never be more than 500.
	TaskIds       []*TaskID `protobuf:"bytes,1,rep,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTasksRequest) Reset() {
	*x = CancelTasksRequest{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTasksRequest) ProtoMessage() {}

func (x *CancelTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTasksRequest.ProtoReflect.Descriptor instead.
func (*CancelTasksRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{4}
}

func (x *CancelTasksRequest) GetTaskIds() []*TaskID {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

type CancelTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// These represent the current state of the tasks.
	//
	// If they're not indicated as canceled, Buildbucket will continue
	// to call FetchTasks, or wait until the TaskBackend calls UpdateBuildTask.
	// In other words, cancellation may be sync OR async (and this is up to
	// the specific backend).
	//
	// The TaskBackend SHOULD only indicate a Task is in the canceled when that
	// task has actually stopped execution. For example, if cancelation entails
	// leaving a note for the bot to do the cancelation, ideally these Task
	// objects should only contain the canceled status once the bot has actually
	// terminated (not just when the 'please cancel' note was written).
	// TODO(b/355013317): Deprecate tasks after all TaskBackend implementation
	// migrate to use responses.
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// These should represent the current state of the requested tasks.
	Responses     []*CancelTasksResponse_Response `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTasksResponse) Reset() {
	*x = CancelTasksResponse{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTasksResponse) ProtoMessage() {}

func (x *CancelTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTasksResponse.ProtoReflect.Descriptor instead.
func (*CancelTasksResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{5}
}

func (x *CancelTasksResponse) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *CancelTasksResponse) GetResponses() []*CancelTasksResponse_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

type ValidateConfigsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of all unique target+config_jsons that Buildbucket is requesting
	// validation for.
	Configs       []*ValidateConfigsRequest_ConfigContext `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateConfigsRequest) Reset() {
	*x = ValidateConfigsRequest{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConfigsRequest) ProtoMessage() {}

func (x *ValidateConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConfigsRequest.ProtoReflect.Descriptor instead.
func (*ValidateConfigsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{6}
}

func (x *ValidateConfigsRequest) GetConfigs() []*ValidateConfigsRequest_ConfigContext {
	if x != nil {
		return x.Configs
	}
	return nil
}

type ValidateConfigsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Must be sorted by `index`, and multiple ErrorDetails for the same index
	// should be assumed to be in an order which makes sense to the backend.
	ConfigErrors  []*ValidateConfigsResponse_ErrorDetail `protobuf:"bytes,1,rep,name=config_errors,json=configErrors,proto3" json:"config_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateConfigsResponse) Reset() {
	*x = ValidateConfigsResponse{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConfigsResponse) ProtoMessage() {}

func (x *ValidateConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConfigsResponse.ProtoReflect.Descriptor instead.
func (*ValidateConfigsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{7}
}

func (x *ValidateConfigsResponse) GetConfigErrors() []*ValidateConfigsResponse_ErrorDetail {
	if x != nil {
		return x.ConfigErrors
	}
	return nil
}

type RunTaskRequest_AgentExecutable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mapping of cipd "${platform}" values to the direct download URL
	// and sha256+size of the agent binary.
	//
	// ${platform} has the form $OS-$ARCH.
	//
	// $OS values:
	//   - mac
	//   - windows
	//   - linux
	//
	// $ARCH values:
	//   - amd64
	//   - arm64
	//   - i386
	//
	// The urls will be guaranteed to be valid until at least
	// start_deadline+execution_timeout.
	Source        map[string]*RunTaskRequest_AgentExecutable_AgentSource `protobuf:"bytes,1,rep,name=source,proto3" json:"source,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTaskRequest_AgentExecutable) Reset() {
	*x = RunTaskRequest_AgentExecutable{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTaskRequest_AgentExecutable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTaskRequest_AgentExecutable) ProtoMessage() {}

func (x *RunTaskRequest_AgentExecutable) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTaskRequest_AgentExecutable.ProtoReflect.Descriptor instead.
func (*RunTaskRequest_AgentExecutable) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RunTaskRequest_AgentExecutable) GetSource() map[string]*RunTaskRequest_AgentExecutable_AgentSource {
	if x != nil {
		return x.Source
	}
	return nil
}

type RunTaskRequest_AgentExecutable_AgentSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sha256        string                 `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`                         // required
	SizeBytes     int64                  `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"` // required
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`                               // required
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunTaskRequest_AgentExecutable_AgentSource) Reset() {
	*x = RunTaskRequest_AgentExecutable_AgentSource{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunTaskRequest_AgentExecutable_AgentSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTaskRequest_AgentExecutable_AgentSource) ProtoMessage() {}

func (x *RunTaskRequest_AgentExecutable_AgentSource) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTaskRequest_AgentExecutable_AgentSource.ProtoReflect.Descriptor instead.
func (*RunTaskRequest_AgentExecutable_AgentSource) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *RunTaskRequest_AgentExecutable_AgentSource) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *RunTaskRequest_AgentExecutable_AgentSource) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *RunTaskRequest_AgentExecutable_AgentSource) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type FetchTasksResponse_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*FetchTasksResponse_Response_Task
	//	*FetchTasksResponse_Response_Error
	Response      isFetchTasksResponse_Response_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchTasksResponse_Response) Reset() {
	*x = FetchTasksResponse_Response{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchTasksResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTasksResponse_Response) ProtoMessage() {}

func (x *FetchTasksResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTasksResponse_Response.ProtoReflect.Descriptor instead.
func (*FetchTasksResponse_Response) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FetchTasksResponse_Response) GetResponse() isFetchTasksResponse_Response_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *FetchTasksResponse_Response) GetTask() *Task {
	if x != nil {
		if x, ok := x.Response.(*FetchTasksResponse_Response_Task); ok {
			return x.Task
		}
	}
	return nil
}

func (x *FetchTasksResponse_Response) GetError() *status.Status {
	if x != nil {
		if x, ok := x.Response.(*FetchTasksResponse_Response_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isFetchTasksResponse_Response_Response interface {
	isFetchTasksResponse_Response_Response()
}

type FetchTasksResponse_Response_Task struct {
	// The backend task.
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3,oneof"`
}

type FetchTasksResponse_Response_Error struct {
	// Error code and details of the unsuccessful RPC.
	Error *status.Status `protobuf:"bytes,100,opt,name=error,proto3,oneof"`
}

func (*FetchTasksResponse_Response_Task) isFetchTasksResponse_Response_Response() {}

func (*FetchTasksResponse_Response_Error) isFetchTasksResponse_Response_Response() {}

type CancelTasksResponse_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*CancelTasksResponse_Response_Task
	//	*CancelTasksResponse_Response_Error
	Response      isCancelTasksResponse_Response_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTasksResponse_Response) Reset() {
	*x = CancelTasksResponse_Response{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTasksResponse_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTasksResponse_Response) ProtoMessage() {}

func (x *CancelTasksResponse_Response) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTasksResponse_Response.ProtoReflect.Descriptor instead.
func (*CancelTasksResponse_Response) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CancelTasksResponse_Response) GetResponse() isCancelTasksResponse_Response_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CancelTasksResponse_Response) GetTask() *Task {
	if x != nil {
		if x, ok := x.Response.(*CancelTasksResponse_Response_Task); ok {
			return x.Task
		}
	}
	return nil
}

func (x *CancelTasksResponse_Response) GetError() *status.Status {
	if x != nil {
		if x, ok := x.Response.(*CancelTasksResponse_Response_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isCancelTasksResponse_Response_Response interface {
	isCancelTasksResponse_Response_Response()
}

type CancelTasksResponse_Response_Task struct {
	// The backend task.
	Task *Task `protobuf:"bytes,1,opt,name=task,proto3,oneof"`
}

type CancelTasksResponse_Response_Error struct {
	// Error code and details of the unsuccessful cancel.
	Error *status.Status `protobuf:"bytes,100,opt,name=error,proto3,oneof"`
}

func (*CancelTasksResponse_Response_Task) isCancelTasksResponse_Response_Response() {}

func (*CancelTasksResponse_Response_Error) isCancelTasksResponse_Response_Response() {}

type ValidateConfigsRequest_ConfigContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	ConfigJson    *structpb.Struct       `protobuf:"bytes,2,opt,name=config_json,json=configJson,proto3" json:"config_json,omitempty"` // guaranteed to be valid JSON
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateConfigsRequest_ConfigContext) Reset() {
	*x = ValidateConfigsRequest_ConfigContext{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateConfigsRequest_ConfigContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConfigsRequest_ConfigContext) ProtoMessage() {}

func (x *ValidateConfigsRequest_ConfigContext) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConfigsRequest_ConfigContext.ProtoReflect.Descriptor instead.
func (*ValidateConfigsRequest_ConfigContext) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ValidateConfigsRequest_ConfigContext) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ValidateConfigsRequest_ConfigContext) GetConfigJson() *structpb.Struct {
	if x != nil {
		return x.ConfigJson
	}
	return nil
}

type ValidateConfigsResponse_ErrorDetail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The 0-based index in the ValidateConfigsRequest.configs list.
	//
	// Note: `config_errors` can contain multiple ErrorDetail messages with
	// the same `index` value, to indicate multiple errors on the same item.
	Index         int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateConfigsResponse_ErrorDetail) Reset() {
	*x = ValidateConfigsResponse_ErrorDetail{}
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateConfigsResponse_ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateConfigsResponse_ErrorDetail) ProtoMessage() {}

func (x *ValidateConfigsResponse_ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateConfigsResponse_ErrorDetail.ProtoReflect.Descriptor instead.
func (*ValidateConfigsResponse_ErrorDetail) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ValidateConfigsResponse_ErrorDetail) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ValidateConfigsResponse_ErrorDetail) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_go_chromium_org_luci_buildbucket_proto_backend_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDesc = string([]byte{
	0x0a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x09,
	0x0a, 0x0e, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x18, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x12, 0x44, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75,
	0x62, 0x73, 0x75, 0x62, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0xb4, 0x02, 0x0a, 0x0f, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52,
	0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x1a, 0x56, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x75, 0x0a, 0x0b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3b, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x46, 0x0a,
	0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0x6e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x08, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73,
	0x22, 0xfd, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x1a, 0x6e, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcb, 0x01, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x61, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xae,
	0x01, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32,
	0xf2, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x4c, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x0a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x21, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64,
	0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x26, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0x5f, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescData []byte
)

func file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDesc), len(file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDescData
}

var file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_go_chromium_org_luci_buildbucket_proto_backend_proto_goTypes = []any{
	(*RunTaskRequest)(nil),                             // 0: buildbucket.v2.RunTaskRequest
	(*RunTaskResponse)(nil),                            // 1: buildbucket.v2.RunTaskResponse
	(*FetchTasksRequest)(nil),                          // 2: buildbucket.v2.FetchTasksRequest
	(*FetchTasksResponse)(nil),                         // 3: buildbucket.v2.FetchTasksResponse
	(*CancelTasksRequest)(nil),                         // 4: buildbucket.v2.CancelTasksRequest
	(*CancelTasksResponse)(nil),                        // 5: buildbucket.v2.CancelTasksResponse
	(*ValidateConfigsRequest)(nil),                     // 6: buildbucket.v2.ValidateConfigsRequest
	(*ValidateConfigsResponse)(nil),                    // 7: buildbucket.v2.ValidateConfigsResponse
	(*RunTaskRequest_AgentExecutable)(nil),             // 8: buildbucket.v2.RunTaskRequest.AgentExecutable
	(*RunTaskRequest_AgentExecutable_AgentSource)(nil), // 9: buildbucket.v2.RunTaskRequest.AgentExecutable.AgentSource
	nil,                                  // 10: buildbucket.v2.RunTaskRequest.AgentExecutable.SourceEntry
	(*FetchTasksResponse_Response)(nil),  // 11: buildbucket.v2.FetchTasksResponse.Response
	(*CancelTasksResponse_Response)(nil), // 12: buildbucket.v2.CancelTasksResponse.Response
	(*ValidateConfigsRequest_ConfigContext)(nil), // 13: buildbucket.v2.ValidateConfigsRequest.ConfigContext
	(*ValidateConfigsResponse_ErrorDetail)(nil),  // 14: buildbucket.v2.ValidateConfigsResponse.ErrorDetail
	(*BuildSecrets)(nil),                         // 15: buildbucket.v2.BuildSecrets
	(*RequestedDimension)(nil),                   // 16: buildbucket.v2.RequestedDimension
	(*timestamppb.Timestamp)(nil),                // 17: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                  // 18: google.protobuf.Duration
	(*CacheEntry)(nil),                           // 19: buildbucket.v2.CacheEntry
	(*structpb.Struct)(nil),                      // 20: google.protobuf.Struct
	(*Task)(nil),                                 // 21: buildbucket.v2.Task
	(*TaskID)(nil),                               // 22: buildbucket.v2.TaskID
	(*status.Status)(nil),                        // 23: google.rpc.Status
}
var file_go_chromium_org_luci_buildbucket_proto_backend_proto_depIdxs = []int32{
	8,  // 0: buildbucket.v2.RunTaskRequest.agent:type_name -> buildbucket.v2.RunTaskRequest.AgentExecutable
	15, // 1: buildbucket.v2.RunTaskRequest.secrets:type_name -> buildbucket.v2.BuildSecrets
	16, // 2: buildbucket.v2.RunTaskRequest.dimensions:type_name -> buildbucket.v2.RequestedDimension
	17, // 3: buildbucket.v2.RunTaskRequest.start_deadline:type_name -> google.protobuf.Timestamp
	18, // 4: buildbucket.v2.RunTaskRequest.execution_timeout:type_name -> google.protobuf.Duration
	18, // 5: buildbucket.v2.RunTaskRequest.grace_period:type_name -> google.protobuf.Duration
	19, // 6: buildbucket.v2.RunTaskRequest.caches:type_name -> buildbucket.v2.CacheEntry
	20, // 7: buildbucket.v2.RunTaskRequest.backend_config:type_name -> google.protobuf.Struct
	21, // 8: buildbucket.v2.RunTaskResponse.task:type_name -> buildbucket.v2.Task
	22, // 9: buildbucket.v2.FetchTasksRequest.task_ids:type_name -> buildbucket.v2.TaskID
	11, // 10: buildbucket.v2.FetchTasksResponse.responses:type_name -> buildbucket.v2.FetchTasksResponse.Response
	22, // 11: buildbucket.v2.CancelTasksRequest.task_ids:type_name -> buildbucket.v2.TaskID
	21, // 12: buildbucket.v2.CancelTasksResponse.tasks:type_name -> buildbucket.v2.Task
	12, // 13: buildbucket.v2.CancelTasksResponse.responses:type_name -> buildbucket.v2.CancelTasksResponse.Response
	13, // 14: buildbucket.v2.ValidateConfigsRequest.configs:type_name -> buildbucket.v2.ValidateConfigsRequest.ConfigContext
	14, // 15: buildbucket.v2.ValidateConfigsResponse.config_errors:type_name -> buildbucket.v2.ValidateConfigsResponse.ErrorDetail
	10, // 16: buildbucket.v2.RunTaskRequest.AgentExecutable.source:type_name -> buildbucket.v2.RunTaskRequest.AgentExecutable.SourceEntry
	9,  // 17: buildbucket.v2.RunTaskRequest.AgentExecutable.SourceEntry.value:type_name -> buildbucket.v2.RunTaskRequest.AgentExecutable.AgentSource
	21, // 18: buildbucket.v2.FetchTasksResponse.Response.task:type_name -> buildbucket.v2.Task
	23, // 19: buildbucket.v2.FetchTasksResponse.Response.error:type_name -> google.rpc.Status
	21, // 20: buildbucket.v2.CancelTasksResponse.Response.task:type_name -> buildbucket.v2.Task
	23, // 21: buildbucket.v2.CancelTasksResponse.Response.error:type_name -> google.rpc.Status
	20, // 22: buildbucket.v2.ValidateConfigsRequest.ConfigContext.config_json:type_name -> google.protobuf.Struct
	0,  // 23: buildbucket.v2.TaskBackend.RunTask:input_type -> buildbucket.v2.RunTaskRequest
	2,  // 24: buildbucket.v2.TaskBackend.FetchTasks:input_type -> buildbucket.v2.FetchTasksRequest
	4,  // 25: buildbucket.v2.TaskBackend.CancelTasks:input_type -> buildbucket.v2.CancelTasksRequest
	6,  // 26: buildbucket.v2.TaskBackend.ValidateConfigs:input_type -> buildbucket.v2.ValidateConfigsRequest
	0,  // 27: buildbucket.v2.TaskBackendLite.RunTask:input_type -> buildbucket.v2.RunTaskRequest
	1,  // 28: buildbucket.v2.TaskBackend.RunTask:output_type -> buildbucket.v2.RunTaskResponse
	3,  // 29: buildbucket.v2.TaskBackend.FetchTasks:output_type -> buildbucket.v2.FetchTasksResponse
	5,  // 30: buildbucket.v2.TaskBackend.CancelTasks:output_type -> buildbucket.v2.CancelTasksResponse
	7,  // 31: buildbucket.v2.TaskBackend.ValidateConfigs:output_type -> buildbucket.v2.ValidateConfigsResponse
	1,  // 32: buildbucket.v2.TaskBackendLite.RunTask:output_type -> buildbucket.v2.RunTaskResponse
	28, // [28:33] is the sub-list for method output_type
	23, // [23:28] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_buildbucket_proto_backend_proto_init() }
func file_go_chromium_org_luci_buildbucket_proto_backend_proto_init() {
	if File_go_chromium_org_luci_buildbucket_proto_backend_proto != nil {
		return
	}
	file_go_chromium_org_luci_buildbucket_proto_common_proto_init()
	file_go_chromium_org_luci_buildbucket_proto_launcher_proto_init()
	file_go_chromium_org_luci_buildbucket_proto_task_proto_init()
	file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[11].OneofWrappers = []any{
		(*FetchTasksResponse_Response_Task)(nil),
		(*FetchTasksResponse_Response_Error)(nil),
	}
	file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes[12].OneofWrappers = []any{
		(*CancelTasksResponse_Response_Task)(nil),
		(*CancelTasksResponse_Response_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDesc), len(file_go_chromium_org_luci_buildbucket_proto_backend_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_go_chromium_org_luci_buildbucket_proto_backend_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_buildbucket_proto_backend_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_buildbucket_proto_backend_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_buildbucket_proto_backend_proto = out.File
	file_go_chromium_org_luci_buildbucket_proto_backend_proto_goTypes = nil
	file_go_chromium_org_luci_buildbucket_proto_backend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TaskBackendClient is the client API for TaskBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskBackendClient interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// The RunTaskResponse should contain the created task.
	// And the implementation of this RPC should be idempotent.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error)
	// Buildbucket will call FetchTasks when it needs to understand the current
	// status of tasks.
	//
	// This will happen at a regular, unspecified, interval when
	// UpdateBuild/UpdateBuildTask haven't been called recently.
	//
	// Once the build is in a terminal state, FetchTasks SHOULD return
	// the same response every time.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	FetchTasks(ctx context.Context, in *FetchTasksRequest, opts ...grpc.CallOption) (*FetchTasksResponse, error)
	// Buildbucket will call this if it was requested to cancel some build(s).
	// The backend SHOULD implement cancelation as best as it can, but
	// simple backends may choose to ignore this (because the next call
	// to UpdateBuild will indicate that the build is Canceled, and so the
	// agent would quit).
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error)
	// Buildbucket will call this when it is asked to validate project
	// configuration i.e. the Builder.backend.config_json field.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	ValidateConfigs(ctx context.Context, in *ValidateConfigsRequest, opts ...grpc.CallOption) (*ValidateConfigsResponse, error)
}
type taskBackendPRPCClient struct {
	client *prpc.Client
}

func NewTaskBackendPRPCClient(client *prpc.Client) TaskBackendClient {
	return &taskBackendPRPCClient{client}
}

func (c *taskBackendPRPCClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	out := new(RunTaskResponse)
	err := c.client.Call(ctx, "buildbucket.v2.TaskBackend", "RunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendPRPCClient) FetchTasks(ctx context.Context, in *FetchTasksRequest, opts ...grpc.CallOption) (*FetchTasksResponse, error) {
	out := new(FetchTasksResponse)
	err := c.client.Call(ctx, "buildbucket.v2.TaskBackend", "FetchTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendPRPCClient) CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error) {
	out := new(CancelTasksResponse)
	err := c.client.Call(ctx, "buildbucket.v2.TaskBackend", "CancelTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendPRPCClient) ValidateConfigs(ctx context.Context, in *ValidateConfigsRequest, opts ...grpc.CallOption) (*ValidateConfigsResponse, error) {
	out := new(ValidateConfigsResponse)
	err := c.client.Call(ctx, "buildbucket.v2.TaskBackend", "ValidateConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type taskBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskBackendClient(cc grpc.ClientConnInterface) TaskBackendClient {
	return &taskBackendClient{cc}
}

func (c *taskBackendClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	out := new(RunTaskResponse)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.TaskBackend/RunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendClient) FetchTasks(ctx context.Context, in *FetchTasksRequest, opts ...grpc.CallOption) (*FetchTasksResponse, error) {
	out := new(FetchTasksResponse)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.TaskBackend/FetchTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendClient) CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error) {
	out := new(CancelTasksResponse)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.TaskBackend/CancelTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskBackendClient) ValidateConfigs(ctx context.Context, in *ValidateConfigsRequest, opts ...grpc.CallOption) (*ValidateConfigsResponse, error) {
	out := new(ValidateConfigsResponse)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.TaskBackend/ValidateConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskBackendServer is the server API for TaskBackend service.
type TaskBackendServer interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// The RunTaskResponse should contain the created task.
	// And the implementation of this RPC should be idempotent.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error)
	// Buildbucket will call FetchTasks when it needs to understand the current
	// status of tasks.
	//
	// This will happen at a regular, unspecified, interval when
	// UpdateBuild/UpdateBuildTask haven't been called recently.
	//
	// Once the build is in a terminal state, FetchTasks SHOULD return
	// the same response every time.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	FetchTasks(context.Context, *FetchTasksRequest) (*FetchTasksResponse, error)
	// Buildbucket will call this if it was requested to cancel some build(s).
	// The backend SHOULD implement cancelation as best as it can, but
	// simple backends may choose to ignore this (because the next call
	// to UpdateBuild will indicate that the build is Canceled, and so the
	// agent would quit).
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error)
	// Buildbucket will call this when it is asked to validate project
	// configuration i.e. the Builder.backend.config_json field.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	ValidateConfigs(context.Context, *ValidateConfigsRequest) (*ValidateConfigsResponse, error)
}

// UnimplementedTaskBackendServer can be embedded to have forward compatible implementations.
type UnimplementedTaskBackendServer struct {
}

func (*UnimplementedTaskBackendServer) RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (*UnimplementedTaskBackendServer) FetchTasks(context.Context, *FetchTasksRequest) (*FetchTasksResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FetchTasks not implemented")
}
func (*UnimplementedTaskBackendServer) CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelTasks not implemented")
}
func (*UnimplementedTaskBackendServer) ValidateConfigs(context.Context, *ValidateConfigsRequest) (*ValidateConfigsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateConfigs not implemented")
}

func RegisterTaskBackendServer(s prpc.Registrar, srv TaskBackendServer) {
	s.RegisterService(&_TaskBackend_serviceDesc, srv)
}

func _TaskBackend_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.TaskBackend/RunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).RunTask(ctx, req.(*RunTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskBackend_FetchTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).FetchTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.TaskBackend/FetchTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).FetchTasks(ctx, req.(*FetchTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskBackend_CancelTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).CancelTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.TaskBackend/CancelTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).CancelTasks(ctx, req.(*CancelTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskBackend_ValidateConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendServer).ValidateConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.TaskBackend/ValidateConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendServer).ValidateConfigs(ctx, req.(*ValidateConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskBackend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildbucket.v2.TaskBackend",
	HandlerType: (*TaskBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTask",
			Handler:    _TaskBackend_RunTask_Handler,
		},
		{
			MethodName: "FetchTasks",
			Handler:    _TaskBackend_FetchTasks_Handler,
		},
		{
			MethodName: "CancelTasks",
			Handler:    _TaskBackend_CancelTasks_Handler,
		},
		{
			MethodName: "ValidateConfigs",
			Handler:    _TaskBackend_ValidateConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/buildbucket/proto/backend.proto",
}

// TaskBackendLiteClient is the client API for TaskBackendLite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskBackendLiteClient interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// This should return a dummy or empty task.
	//
	// While idempotency is not required, it's still nice to have if possible.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error)
}
type taskBackendLitePRPCClient struct {
	client *prpc.Client
}

func NewTaskBackendLitePRPCClient(client *prpc.Client) TaskBackendLiteClient {
	return &taskBackendLitePRPCClient{client}
}

func (c *taskBackendLitePRPCClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	out := new(RunTaskResponse)
	err := c.client.Call(ctx, "buildbucket.v2.TaskBackendLite", "RunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type taskBackendLiteClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskBackendLiteClient(cc grpc.ClientConnInterface) TaskBackendLiteClient {
	return &taskBackendLiteClient{cc}
}

func (c *taskBackendLiteClient) RunTask(ctx context.Context, in *RunTaskRequest, opts ...grpc.CallOption) (*RunTaskResponse, error) {
	out := new(RunTaskResponse)
	err := c.cc.Invoke(ctx, "/buildbucket.v2.TaskBackendLite/RunTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskBackendLiteServer is the server API for TaskBackendLite service.
type TaskBackendLiteServer interface {
	// RunTask instructs the backend to run a task (which contains payload for
	// executing a Buildbucket Build).
	//
	// This should return a dummy or empty task.
	//
	// While idempotency is not required, it's still nice to have if possible.
	//
	// Buildbucket will invoke this RPC with the Project-scoped identity.
	RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error)
}

// UnimplementedTaskBackendLiteServer can be embedded to have forward compatible implementations.
type UnimplementedTaskBackendLiteServer struct {
}

func (*UnimplementedTaskBackendLiteServer) RunTask(context.Context, *RunTaskRequest) (*RunTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RunTask not implemented")
}

func RegisterTaskBackendLiteServer(s prpc.Registrar, srv TaskBackendLiteServer) {
	s.RegisterService(&_TaskBackendLite_serviceDesc, srv)
}

func _TaskBackendLite_RunTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskBackendLiteServer).RunTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buildbucket.v2.TaskBackendLite/RunTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskBackendLiteServer).RunTask(ctx, req.(*RunTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskBackendLite_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildbucket.v2.TaskBackendLite",
	HandlerType: (*TaskBackendLiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunTask",
			Handler:    _TaskBackendLite_RunTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/buildbucket/proto/backend.proto",
}
