// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: go.chromium.org/luci/auth_service/api/rpcpb/allowlists.proto

package rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Allowlists_ListAllowlists_FullMethodName = "/auth.service.Allowlists/ListAllowlists"
	Allowlists_GetAllowlist_FullMethodName   = "/auth.service.Allowlists/GetAllowlist"
)

// AllowlistsClient is the client API for Allowlists service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Allowlists service contains methods to examine allowlists for services.
type AllowlistsClient interface {
	// ListAllowlists returns all the allowlists currently stored in LUCI Auth
	// service datastore. The allowlists will be returned in alphabetical order
	// based on their ID.
	ListAllowlists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllowlistsResponse, error)
	// GetAllowlist returns Allowlist information for a requested Allowlist.
	GetAllowlist(ctx context.Context, in *GetAllowlistRequest, opts ...grpc.CallOption) (*Allowlist, error)
}

type allowlistsClient struct {
	cc grpc.ClientConnInterface
}

func NewAllowlistsClient(cc grpc.ClientConnInterface) AllowlistsClient {
	return &allowlistsClient{cc}
}

func (c *allowlistsClient) ListAllowlists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAllowlistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllowlistsResponse)
	err := c.cc.Invoke(ctx, Allowlists_ListAllowlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowlistsClient) GetAllowlist(ctx context.Context, in *GetAllowlistRequest, opts ...grpc.CallOption) (*Allowlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Allowlist)
	err := c.cc.Invoke(ctx, Allowlists_GetAllowlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllowlistsServer is the server API for Allowlists service.
// All implementations must embed UnimplementedAllowlistsServer
// for forward compatibility.
//
// Allowlists service contains methods to examine allowlists for services.
type AllowlistsServer interface {
	// ListAllowlists returns all the allowlists currently stored in LUCI Auth
	// service datastore. The allowlists will be returned in alphabetical order
	// based on their ID.
	ListAllowlists(context.Context, *emptypb.Empty) (*ListAllowlistsResponse, error)
	// GetAllowlist returns Allowlist information for a requested Allowlist.
	GetAllowlist(context.Context, *GetAllowlistRequest) (*Allowlist, error)
	mustEmbedUnimplementedAllowlistsServer()
}

// UnimplementedAllowlistsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAllowlistsServer struct{}

func (UnimplementedAllowlistsServer) ListAllowlists(context.Context, *emptypb.Empty) (*ListAllowlistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllowlists not implemented")
}
func (UnimplementedAllowlistsServer) GetAllowlist(context.Context, *GetAllowlistRequest) (*Allowlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowlist not implemented")
}
func (UnimplementedAllowlistsServer) mustEmbedUnimplementedAllowlistsServer() {}
func (UnimplementedAllowlistsServer) testEmbeddedByValue()                    {}

// UnsafeAllowlistsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllowlistsServer will
// result in compilation errors.
type UnsafeAllowlistsServer interface {
	mustEmbedUnimplementedAllowlistsServer()
}

func RegisterAllowlistsServer(s grpc.ServiceRegistrar, srv AllowlistsServer) {
	// If the following call pancis, it indicates UnimplementedAllowlistsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Allowlists_ServiceDesc, srv)
}

func _Allowlists_ListAllowlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowlistsServer).ListAllowlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Allowlists_ListAllowlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowlistsServer).ListAllowlists(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Allowlists_GetAllowlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllowlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowlistsServer).GetAllowlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Allowlists_GetAllowlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowlistsServer).GetAllowlist(ctx, req.(*GetAllowlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Allowlists_ServiceDesc is the grpc.ServiceDesc for Allowlists service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Allowlists_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.service.Allowlists",
	HandlerType: (*AllowlistsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllowlists",
			Handler:    _Allowlists_ListAllowlists_Handler,
		},
		{
			MethodName: "GetAllowlist",
			Handler:    _Allowlists_GetAllowlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/auth_service/api/rpcpb/allowlists.proto",
}
