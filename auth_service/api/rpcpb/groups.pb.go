// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: go.chromium.org/luci/auth_service/api/rpcpb/groups.proto

package rpcpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PrincipalKind denotes the type of principal of a specific entity.
type PrincipalKind int32

const (
	PrincipalKind_PRINCIPAL_KIND_UNSPECIFIED PrincipalKind = 0
	// A single individual identity, e.g. "user:someone@example.com".
	PrincipalKind_IDENTITY PrincipalKind = 1
	// A group name, e.g. "some-group".
	PrincipalKind_GROUP PrincipalKind = 2
	// An identity glob, e.g. "user*@example.com".
	PrincipalKind_GLOB PrincipalKind = 3
)

// Enum value maps for PrincipalKind.
var (
	PrincipalKind_name = map[int32]string{
		0: "PRINCIPAL_KIND_UNSPECIFIED",
		1: "IDENTITY",
		2: "GROUP",
		3: "GLOB",
	}
	PrincipalKind_value = map[string]int32{
		"PRINCIPAL_KIND_UNSPECIFIED": 0,
		"IDENTITY":                   1,
		"GROUP":                      2,
		"GLOB":                       3,
	}
)

func (x PrincipalKind) Enum() *PrincipalKind {
	p := new(PrincipalKind)
	*p = x
	return p
}

func (x PrincipalKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrincipalKind) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_enumTypes[0].Descriptor()
}

func (PrincipalKind) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_enumTypes[0]
}

func (x PrincipalKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrincipalKind.Descriptor instead.
func (PrincipalKind) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{0}
}

type ListGroupsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Setting this flag will ensure the returned groups will be from a fresh
	// snapshot of all groups. Otherwise, a cached result may be returned.
	Fresh         bool `protobuf:"varint,1,opt,name=fresh,proto3" json:"fresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupsRequest) Reset() {
	*x = ListGroupsRequest{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsRequest) ProtoMessage() {}

func (x *ListGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{0}
}

func (x *ListGroupsRequest) GetFresh() bool {
	if x != nil {
		return x.Fresh
	}
	return false
}

// ListGroupsResponse is all the groups listed in LUCI Auth Service.
type ListGroupsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of all groups. In order to keep the response lightweight, each
	// AuthGroup will contain only metadata, i.e. the membership list fields will
	// be left empty.
	Groups        []*AuthGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupsResponse) Reset() {
	*x = ListGroupsResponse{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsResponse) ProtoMessage() {}

func (x *ListGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{1}
}

func (x *ListGroupsResponse) GetGroups() []*AuthGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// GetGroupRequest is to specify an individual group.
type GetGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // e.g: "administrators"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupRequest) Reset() {
	*x = GetGroupRequest{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupRequest) ProtoMessage() {}

func (x *GetGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupRequest.ProtoReflect.Descriptor instead.
func (*GetGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{2}
}

func (x *GetGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CreateGroupRequest requests the creation of a new group.
type CreateGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Details of the group to create. Not all fields will be written to the new
	// group: if the request specifies fields that should be automatically
	// generated (e.g. created/modified timestamps), these will be ignored.
	Group         *AuthGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateGroupRequest) Reset() {
	*x = CreateGroupRequest{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupRequest) ProtoMessage() {}

func (x *CreateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGroupRequest) GetGroup() *AuthGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

// UpdateGroupRequest requests an update to an existing group.
type UpdateGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Details of the group to update. The group's 'name' field is used to
	// identify the group to update.
	Group *AuthGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	// The list of fields to be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateGroupRequest) Reset() {
	*x = UpdateGroupRequest{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupRequest) ProtoMessage() {}

func (x *UpdateGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateGroupRequest) GetGroup() *AuthGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *UpdateGroupRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// DeleteGroupRequest requests the deletion of a group.
type DeleteGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the group to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The current etag of the group.
	// If an etag is provided and does not match the current etag of the group,
	// deletion will be blocked and an ABORTED error will be returned.
	Etag          string `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteGroupRequest) Reset() {
	*x = DeleteGroupRequest{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupRequest) ProtoMessage() {}

func (x *DeleteGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteGroupRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// AuthGroup defines an individual group.
type AuthGroup struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // e.g: "auth-service-access"
	Members     []string               `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`                      // e.g: ["user:t@example.com"]
	Globs       []string               `protobuf:"bytes,3,rep,name=globs,proto3" json:"globs,omitempty"`                          // e.g: ["user:*@example.com"
	Nested      []string               `protobuf:"bytes,4,rep,name=nested,proto3" json:"nested,omitempty"`                        // e.g: ["another-group-0", "another-group-1"]
	Description string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`              // e.g: "This group is used for ..."
	Owners      string                 `protobuf:"bytes,6,opt,name=owners,proto3" json:"owners,omitempty"`                        // e.g: "administrators"
	CreatedTs   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_ts,json=createdTs,proto3" json:"created_ts,omitempty"` // e.g: "1972-01-01T10:00:20.021Z"
	CreatedBy   string                 `protobuf:"bytes,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"` // e.g: "user:test@example.com"
	// Output only. Whether the caller can modify this group.
	CallerCanModify bool `protobuf:"varint,9,opt,name=caller_can_modify,json=callerCanModify,proto3" json:"caller_can_modify,omitempty"`
	// Output only. Whether the caller can view member emails.
	CallerCanViewMembers bool `protobuf:"varint,10,opt,name=caller_can_view_members,json=callerCanViewMembers,proto3" json:"caller_can_view_members,omitempty"`
	// Number of member emails redacted, if any.
	NumRedacted int32 `protobuf:"varint,11,opt,name=num_redacted,json=numRedacted,proto3" json:"num_redacted,omitempty"`
	// An opaque string that indicates the version of the group being edited.
	// This will be sent to the client in responses, and should be sent back
	// to the server for update and delete requests in order to protect against
	// concurrent modification errors. See https://google.aip.dev/154.
	// Technically this is a "weak etag", meaning that if two AuthGroups have the
	// same etag, they are not guaranteed to be byte-for-byte identical. This is
	// because under the hood we generate it based on the last-modified time
	// (though this should not be relied on as it may change in future).
	Etag          string `protobuf:"bytes,99,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthGroup) Reset() {
	*x = AuthGroup{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthGroup) ProtoMessage() {}

func (x *AuthGroup) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthGroup.ProtoReflect.Descriptor instead.
func (*AuthGroup) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{6}
}

func (x *AuthGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthGroup) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *AuthGroup) GetGlobs() []string {
	if x != nil {
		return x.Globs
	}
	return nil
}

func (x *AuthGroup) GetNested() []string {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *AuthGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AuthGroup) GetOwners() string {
	if x != nil {
		return x.Owners
	}
	return ""
}

func (x *AuthGroup) GetCreatedTs() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTs
	}
	return nil
}

func (x *AuthGroup) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *AuthGroup) GetCallerCanModify() bool {
	if x != nil {
		return x.CallerCanModify
	}
	return false
}

func (x *AuthGroup) GetCallerCanViewMembers() bool {
	if x != nil {
		return x.CallerCanViewMembers
	}
	return false
}

func (x *AuthGroup) GetNumRedacted() int32 {
	if x != nil {
		return x.NumRedacted
	}
	return 0
}

func (x *AuthGroup) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// GetSubgraphRequest contains the Principal that is the basis of the search
// for inclusion and is the root of the output subgraph.
type GetSubgraphRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Principal     *Principal             `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubgraphRequest) Reset() {
	*x = GetSubgraphRequest{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubgraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubgraphRequest) ProtoMessage() {}

func (x *GetSubgraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubgraphRequest.ProtoReflect.Descriptor instead.
func (*GetSubgraphRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{7}
}

func (x *GetSubgraphRequest) GetPrincipal() *Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

// The Subgraph returned by GetSubgraph RPC.
//
// The node representing a principal passed to GetSubgraph is always the
// first in the list.
type Subgraph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*Node                `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subgraph) Reset() {
	*x = Subgraph{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subgraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subgraph) ProtoMessage() {}

func (x *Subgraph) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subgraph.ProtoReflect.Descriptor instead.
func (*Subgraph) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{8}
}

func (x *Subgraph) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Principal is an entity that can be found in the Subgraph. A Principal can
// represent a group, identity, or glob. See PrincipalKind for clarification on
// how each Principal kind is represented.
type Principal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          PrincipalKind          `protobuf:"varint,1,opt,name=kind,proto3,enum=auth.service.PrincipalKind" json:"kind,omitempty"` // e.g. IDENTITY, GROUP, GLOB
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                  // e.g. "user*@example.com", "some-group", "user:m0@example.com"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Principal) Reset() {
	*x = Principal{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Principal) ProtoMessage() {}

func (x *Principal) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Principal.ProtoReflect.Descriptor instead.
func (*Principal) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{9}
}

func (x *Principal) GetKind() PrincipalKind {
	if x != nil {
		return x.Kind
	}
	return PrincipalKind_PRINCIPAL_KIND_UNSPECIFIED
}

func (x *Principal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Each Node is a representation of a Principal.
// Each subgraph will only contain one Node per principal; in other words,
// a principal uniquely identifies a Node.
type Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The principal represented by this node.
	Principal *Principal `protobuf:"bytes,1,opt,name=principal,proto3" json:"principal,omitempty"`
	// Nodes that directly include this principal.
	//
	// Each item is an index of a Node in Subgraph's `nodes` list.
	IncludedBy    []int32 `protobuf:"varint,2,rep,packed,name=included_by,json=includedBy,proto3" json:"included_by,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP(), []int{10}
}

func (x *Node) GetPrincipal() *Principal {
	if x != nil {
		return x.Principal
	}
	return nil
}

func (x *Node) GetIncludedBy() []int32 {
	if x != nil {
		return x.IncludedBy
	}
	return nil
}

var File_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDesc = string([]byte{
	0x0a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70, 0x63, 0x70, 0x62, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x22, 0x45, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x25, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x85, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x41, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x9f, 0x03, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x3a, 0x0a, 0x17, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x64,
	0x61, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x63, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x22, 0x34, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x09,
	0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5e,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x42, 0x79, 0x2a, 0x52,
	0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x4e, 0x43, 0x49, 0x50, 0x41, 0x4c, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4c, 0x4f, 0x42,
	0x10, 0x03, 0x32, 0x8f, 0x04, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4f, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x20,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x70,
	0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescData []byte
)

func file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDesc), len(file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDescData
}

var file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_goTypes = []any{
	(PrincipalKind)(0),            // 0: auth.service.PrincipalKind
	(*ListGroupsRequest)(nil),     // 1: auth.service.ListGroupsRequest
	(*ListGroupsResponse)(nil),    // 2: auth.service.ListGroupsResponse
	(*GetGroupRequest)(nil),       // 3: auth.service.GetGroupRequest
	(*CreateGroupRequest)(nil),    // 4: auth.service.CreateGroupRequest
	(*UpdateGroupRequest)(nil),    // 5: auth.service.UpdateGroupRequest
	(*DeleteGroupRequest)(nil),    // 6: auth.service.DeleteGroupRequest
	(*AuthGroup)(nil),             // 7: auth.service.AuthGroup
	(*GetSubgraphRequest)(nil),    // 8: auth.service.GetSubgraphRequest
	(*Subgraph)(nil),              // 9: auth.service.Subgraph
	(*Principal)(nil),             // 10: auth.service.Principal
	(*Node)(nil),                  // 11: auth.service.Node
	(*fieldmaskpb.FieldMask)(nil), // 12: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 14: google.protobuf.Empty
}
var file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_depIdxs = []int32{
	7,  // 0: auth.service.ListGroupsResponse.groups:type_name -> auth.service.AuthGroup
	7,  // 1: auth.service.CreateGroupRequest.group:type_name -> auth.service.AuthGroup
	7,  // 2: auth.service.UpdateGroupRequest.group:type_name -> auth.service.AuthGroup
	12, // 3: auth.service.UpdateGroupRequest.update_mask:type_name -> google.protobuf.FieldMask
	13, // 4: auth.service.AuthGroup.created_ts:type_name -> google.protobuf.Timestamp
	10, // 5: auth.service.GetSubgraphRequest.principal:type_name -> auth.service.Principal
	11, // 6: auth.service.Subgraph.nodes:type_name -> auth.service.Node
	0,  // 7: auth.service.Principal.kind:type_name -> auth.service.PrincipalKind
	10, // 8: auth.service.Node.principal:type_name -> auth.service.Principal
	1,  // 9: auth.service.Groups.ListGroups:input_type -> auth.service.ListGroupsRequest
	3,  // 10: auth.service.Groups.GetGroup:input_type -> auth.service.GetGroupRequest
	4,  // 11: auth.service.Groups.CreateGroup:input_type -> auth.service.CreateGroupRequest
	5,  // 12: auth.service.Groups.UpdateGroup:input_type -> auth.service.UpdateGroupRequest
	6,  // 13: auth.service.Groups.DeleteGroup:input_type -> auth.service.DeleteGroupRequest
	8,  // 14: auth.service.Groups.GetSubgraph:input_type -> auth.service.GetSubgraphRequest
	3,  // 15: auth.service.Groups.GetExpandedGroup:input_type -> auth.service.GetGroupRequest
	2,  // 16: auth.service.Groups.ListGroups:output_type -> auth.service.ListGroupsResponse
	7,  // 17: auth.service.Groups.GetGroup:output_type -> auth.service.AuthGroup
	7,  // 18: auth.service.Groups.CreateGroup:output_type -> auth.service.AuthGroup
	7,  // 19: auth.service.Groups.UpdateGroup:output_type -> auth.service.AuthGroup
	14, // 20: auth.service.Groups.DeleteGroup:output_type -> google.protobuf.Empty
	9,  // 21: auth.service.Groups.GetSubgraph:output_type -> auth.service.Subgraph
	7,  // 22: auth.service.Groups.GetExpandedGroup:output_type -> auth.service.AuthGroup
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_init() }
func file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_init() {
	if File_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDesc), len(file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto = out.File
	file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_goTypes = nil
	file_go_chromium_org_luci_auth_service_api_rpcpb_groups_proto_depIdxs = nil
}
