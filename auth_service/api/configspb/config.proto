// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package auth.configs;

import "go.chromium.org/luci/server/auth/service/protocol/components/auth/proto/realms.proto";

option go_package = "go.chromium.org/luci/auth_service/api/configspb";

// Auth Service configuration that applies specifically to the service, not to
// any linked services.
//
// Provided via 'settings.cfg' config file.
message SettingsCfg {
  // Enable ts_mon based monitoring.
  bool enable_ts_monitoring = 1;

  // If set, store the latest AuthDB snapshot in Google Storage.
  //
  // Should have format "<bucket>/<prefix>".
  //
  // Auth service will take ownership of two objects there:
  //   1. latest.json: JSON-serialized AuthDBRevision proto.
  //   2. latest.db: binary-serialized SignedAuthDB with actual AuthDB data.
  //
  // When AuthDB changes, Auth service updates latest.db, then latest.json, and
  // finally sends a PubSub notification.
  //
  // Consumers can either poll latest.json for changes, or they can setup
  // a PubSub subscription via /auth_service/api/v1/authdb/subscription/ to get
  // notified.
  //
  // Requires at least one AuthDB change (e.g. a group update) for the files
  // to appear after setting or changing auth_db_gs_path.
  //
  // When changing or removing auth_db_gs_path, files at the old location are
  // not automatically cleaned up.
  string auth_db_gs_path = 2;

  // Whether exporting to BQ is enabled.
  bool enable_bq_export = 3;

  // URL for an integrated UI for Auth Service.
  string integrated_ui_url = 4;
}

// Configuration of groups imported from external sources.
//
// Provided via 'imports.cfg' config file.
message GroupImporterConfig {
  reserved 1, 2;

  // Accept a tarball upload from some external service.
  //
  // The tarball is pushed to the service (via PUT to
  // /auth_service/api/v1/importer/ingest_tarball/<name>).
  message TarballUploadEntry {
    // Identifies this particular entry. Used in push API requests.
    string name = 1;
    // A service account email that is allowed to do this push.
    repeated string authorized_uploader = 2;
    // Email domain to append to imported identities.
    string domain = 3;
    // List of group systems expected to be found in the archive. They act as
    // prefixes to group names, e.g. 'ldap'. Each system corresponds to
    // a subdirectory in the tarball. Each tarball may have groups from multiple
    // external systems, but groups from some external system must not be split
    // between multiple tarballs. When importer sees <group system name>/* in
    // a tarball, it modifies group list from that system on the auth_service to
    // match group list in the tarball _exactly_. For example it removes groups
    // that are on the server, but no longer present in the tarball.
    repeated string systems = 4;
    // List of groups to import from the tarball (as filenames relative to
    // tarball root, e.g. 'ldap/some-group'). If empty, imports all groups in
    // the tarball.
    repeated string groups = 5;
  }
  repeated TarballUploadEntry tarball_upload = 3;
}

// IP allowlists config: a set of named IP allowlists.
message IPAllowlistConfig {
  reserved 2; // used to be 'assignments', no longer used.

  message IPAllowlist {
    // Name of the IP allowlist.
    string name = 1;
    // List of subnets.
    repeated string subnets = 2;
    // Names of other IPAllowlist entities to include.
    repeated string includes = 3;
  }

  // A set of named subnets.
  repeated IPAllowlist ip_allowlists = 1;
}

// Legacy config, this is maintained to support clients still utilizing
// https://crsrc.org/i/luci/client/utils/oauth.py;l=419;drc=173496da114efb94dceedb58e588b9c58dabc5e9
//
// Global config. Includes OAuth client_id allowlist and token server URL.
//
// Provided via 'oauth.cfg' config file.
message OAuthConfig {
  // ClientID returned by /auth/api/v1/server/oauth_config endpoint to clients.
  string primary_client_id = 1;
  // Client secret (that's not really a secret, since it is visible) returned
  // by /auth/api/v1/server/oauth_config endpoint to clients. Corresponding
  // callback URL must be localhost or urn:ietf:wg:oauth:2.0:oob.
  string primary_client_secret = 2;
  // Allowlist of all accepted client_ids (in addition to the primary one).
  repeated string client_ids = 3;
  // URL of a token server to use to generate delegation tokens.
  string token_server_url = 4;
}

// Provided via 'permissions.cfg' config file.
// Defines the list of roles and their respective permissions.
message PermissionsConfig {
  // Defines a role that includes given permissions and other roles.
  // The role should not have been defined before. To include this role into another
  // role, you can specify this role by name.
  message Role {
    // Identifier for a role, will have the form <prefix><project>.<noun>
    //  examples:
    //    "role/exampleproject.reader"
    //    "role/exampleproject.owner"
    //
    // Prefixes:
    //  "role/" -- role names defined in Auth service code.
    //  "customRole/" -- role names that can be defined in user-supplied realms.cfg.
    //  "role/luci.internal." -- interally used roles that are forbidden in realms.cfg.
    string name = 1;

    // List of permissions associated with this role, same permission may not be
    // declared more than once per role.
    // Permissions should be of the form: <service>.<subject>.<verb>
    repeated components.auth.realms.Permission permissions = 2;

    // List of other roles to include in this role, includes all the permissions
    // that the included role contains. The referenced role should be defined already.
    repeated string includes = 3;
  }

  // Representation of all defined roles.
  repeated Role role = 1;

  // Defines attributes that can be referenced in certain conditions.
  repeated string attribute = 2;
}
