// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/internal/bugs/proto/bug_management_state.proto

package bugspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Automatic bug-management state for a single failure association rule.
type BugManagementState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the association of the rule to the bug has been notified.
	// This is set to true whenever LUCI Analysis comments on a bug for any reason.
	// This is set to false whenever the bug associated with a rule changes.
	RuleAssociationNotified bool `protobuf:"varint,1,opt,name=rule_association_notified,json=ruleAssociationNotified,proto3" json:"rule_association_notified,omitempty"`
	// A mapping from bug management policy identifier to policy state.
	PolicyState   map[string]*BugManagementState_PolicyState `protobuf:"bytes,2,rep,name=policy_state,json=policyState,proto3" json:"policy_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BugManagementState) Reset() {
	*x = BugManagementState{}
	mi := &file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementState) ProtoMessage() {}

func (x *BugManagementState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementState.ProtoReflect.Descriptor instead.
func (*BugManagementState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescGZIP(), []int{0}
}

func (x *BugManagementState) GetRuleAssociationNotified() bool {
	if x != nil {
		return x.RuleAssociationNotified
	}
	return false
}

func (x *BugManagementState) GetPolicyState() map[string]*BugManagementState_PolicyState {
	if x != nil {
		return x.PolicyState
	}
	return nil
}

type BugManagementState_PolicyState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the given policy is active for the rule.
	// Updated on every bug-filing run as follows:
	// - Set to true if the policy activation criteria was met.
	// - Set to false if the policy deactivation criteria was met.
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// The last time the policy was made active.
	// Allows detecting if policy is made active for the first time (as a
	// zero last_activation_time indicates the policy was never active).
	// Allows UI to filter to showing policies that were at least once active.
	// Allows UI to sort which policy was most recently active.
	// Allows UI to show when a policy last activated.
	LastActivationTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_activation_time,json=lastActivationTime,proto3" json:"last_activation_time,omitempty"`
	// The last time the policy was made inactive.
	// Allows UI to show when a policy last deactivated.
	LastDeactivationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_deactivation_time,json=lastDeactivationTime,proto3" json:"last_deactivation_time,omitempty"`
	// Whether the policy's activation was ever notified to the bug.
	// This is set to true whenever the policy state becomes active and the
	// the activation was notified to the bug.
	// This is set to false whenever the bug associated with a rule changes.
	ActivationNotified bool `protobuf:"varint,4,opt,name=activation_notified,json=activationNotified,proto3" json:"activation_notified,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BugManagementState_PolicyState) Reset() {
	*x = BugManagementState_PolicyState{}
	mi := &file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementState_PolicyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementState_PolicyState) ProtoMessage() {}

func (x *BugManagementState_PolicyState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementState_PolicyState.ProtoReflect.Descriptor instead.
func (*BugManagementState_PolicyState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BugManagementState_PolicyState) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BugManagementState_PolicyState) GetLastActivationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivationTime
	}
	return nil
}

func (x *BugManagementState_PolicyState) GetLastDeactivationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeactivationTime
	}
	return nil
}

func (x *BugManagementState_PolicyState) GetActivationNotified() bool {
	if x != nil {
		return x.ActivationNotified
	}
	return false
}

var File_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDesc = string([]byte{
	0x0a, 0x4c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x75, 0x67, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62, 0x75, 0x67, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x04, 0x0a,
	0x12, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x75, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x63, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x62,
	0x75, 0x67, 0x73, 0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0x7b, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x62, 0x75, 0x67, 0x73, 0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xfb, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4c,
	0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42,
	0x3a, 0x5a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x75, 0x67, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x62, 0x75, 0x67, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDesc), len(file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_goTypes = []any{
	(*BugManagementState)(nil),             // 0: luci.analysis.internal.bugs.BugManagementState
	nil,                                    // 1: luci.analysis.internal.bugs.BugManagementState.PolicyStateEntry
	(*BugManagementState_PolicyState)(nil), // 2: luci.analysis.internal.bugs.BugManagementState.PolicyState
	(*timestamppb.Timestamp)(nil),          // 3: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_depIdxs = []int32{
	1, // 0: luci.analysis.internal.bugs.BugManagementState.policy_state:type_name -> luci.analysis.internal.bugs.BugManagementState.PolicyStateEntry
	2, // 1: luci.analysis.internal.bugs.BugManagementState.PolicyStateEntry.value:type_name -> luci.analysis.internal.bugs.BugManagementState.PolicyState
	3, // 2: luci.analysis.internal.bugs.BugManagementState.PolicyState.last_activation_time:type_name -> google.protobuf.Timestamp
	3, // 3: luci.analysis.internal.bugs.BugManagementState.PolicyState.last_deactivation_time:type_name -> google.protobuf.Timestamp
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_init() }
func file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_init() {
	if File_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDesc), len(file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto = out.File
	file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_internal_bugs_proto_bug_management_state_proto_depIdxs = nil
}
