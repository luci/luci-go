// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/internal/changepoints/proto/spanner.proto

package changepointspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SegmentState int32

const (
	SegmentState_SEGMENT_STATE_UNSPECIFIED SegmentState = 0
	// Both the start and end commit positions of the segment are the result
	// of analysis on the current input buffer.
	SegmentState_ACTIVE SegmentState = 1
	// The end commit position of the segment is the result of analysis on the
	// current input buffer, but the start commit position is the result of
	// past analysis.
	SegmentState_FINALIZING SegmentState = 2
	// Both the start and end commit positions of the segment are the result
	// of past analysis.
	SegmentState_FINALIZED SegmentState = 3
)

// Enum value maps for SegmentState.
var (
	SegmentState_name = map[int32]string{
		0: "SEGMENT_STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "FINALIZING",
		3: "FINALIZED",
	}
	SegmentState_value = map[string]int32{
		"SEGMENT_STATE_UNSPECIFIED": 0,
		"ACTIVE":                    1,
		"FINALIZING":                2,
		"FINALIZED":                 3,
	}
)

func (x SegmentState) Enum() *SegmentState {
	p := new(SegmentState)
	*p = x
	return p
}

func (x SegmentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentState) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes[0].Descriptor()
}

func (SegmentState) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes[0]
}

func (x SegmentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentState.Descriptor instead.
func (SegmentState) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{0}
}

// Segments is used to store the finalized segments in Spanner.
type Segments struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Segments, in ascending commit position order (oldest segment first).
	Segments      []*Segment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segments) Reset() {
	*x = Segments{}
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segments) ProtoMessage() {}

func (x *Segments) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segments.ProtoReflect.Descriptor instead.
func (*Segments) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{0}
}

func (x *Segments) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Segment stores the finalized parts of finalizing and finalized segments
// in Spanner.
// Finalized segments will be stored in full.
// Only the finalized part of a finalizing segment will be stored.
// The unfinalized parts of segments can be computed from the input buffer.
type Segment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The state of the segment.
	// Only finalizing or finalized segments will be stored in spanner.
	State SegmentState `protobuf:"varint,1,opt,name=state,proto3,enum=luci.analysis.internal.changepoints.SegmentState" json:"state,omitempty"`
	// If set, means the start of the segment is as a result of a change point
	// being identified.
	// If unset, means the segment started because this was the first result in
	// the known history of the test.
	HasStartChangepoint bool `protobuf:"varint,2,opt,name=has_start_changepoint,json=hasStartChangepoint,proto3" json:"has_start_changepoint,omitempty"`
	// The earliest commit position included in the segment.
	StartPosition int64 `protobuf:"varint,3,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The earliest hour a run with the given start_position was recorded.
	StartHour *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// The end commit position of the segment.
	// If set, the invariant end_position >= start_position holds.
	EndPosition int64 `protobuf:"varint,5,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	// The latest hour a run with the last commit position in the segment
	// was recorded.
	EndHour *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	// The lower bound of the change point position at the start of the segment
	// in a 99% two-tailed confidence interval. Inclusive.
	// Only set if has_start_changepoint is set. If set, the invariant
	// previous_segment.start_position <= start_position_lower_bound_99th <= start_position_upper_bound_99th
	// holds.
	StartPositionLowerBound_99Th int64 `protobuf:"varint,7,opt,name=start_position_lower_bound_99th,json=startPositionLowerBound99th,proto3" json:"start_position_lower_bound_99th,omitempty"`
	// The upper bound of the change point position at the start of the segment
	// in a 99% two-tailed confidence interval. Inclusive.
	// Only set if has_start_changepoint is set. If set, the invariant
	// start_position_lower_bound_99th <= start_position_upper_bound_99th <= end_position
	// holds.
	StartPositionUpperBound_99Th int64 `protobuf:"varint,8,opt,name=start_position_upper_bound_99th,json=startPositionUpperBound99th,proto3" json:"start_position_upper_bound_99th,omitempty"`
	// The hour the most recent run with an unexpected test result
	// was produced. *Only* captures the most recent hour for runs
	// that are no longer in the input buffer. Used to set
	// has_recent_unexpected_results on the output.
	MostRecentUnexpectedResultHour *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=most_recent_unexpected_result_hour,json=mostRecentUnexpectedResultHour,proto3" json:"most_recent_unexpected_result_hour,omitempty"`
	// Finalized counts for the segment. Note that this should
	// *only* capture counts for runs that are no longer in
	// the input buffer.
	// Counts for runs in the input buffer can be obtained from the input
	// buffer.
	FinalizedCounts *Counts `protobuf:"bytes,10,opt,name=finalized_counts,json=finalizedCounts,proto3" json:"finalized_counts,omitempty"`
	// Serialized representation of model.PositionDistribution,
	// the distribution of possible changepoint start positions.
	//
	// Only in the serialized representation, after the first
	// position only position deltas are stored, i.e.
	// start_position_distribution[0] = StartPositionDistribution[0],
	// start_position_distribution[1] =
	//
	//	StartPositionDistribution[1] - StartPositionDistribution[0],
	//
	// start_position_distribution[2] =
	//
	//	StartPositionDistribution[2] - StartPositionDistribution[1], etc.
	//
	// Proto varint encodings are shorter for small integers, and more
	// importantly, ZStd compresses small integers very well.
	//
	// Only set if has_start_changepoint is set.
	StartPositionDistribution []int64 `protobuf:"varint,11,rep,packed,name=start_position_distribution,json=startPositionDistribution,proto3" json:"start_position_distribution,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{1}
}

func (x *Segment) GetState() SegmentState {
	if x != nil {
		return x.State
	}
	return SegmentState_SEGMENT_STATE_UNSPECIFIED
}

func (x *Segment) GetHasStartChangepoint() bool {
	if x != nil {
		return x.HasStartChangepoint
	}
	return false
}

func (x *Segment) GetStartPosition() int64 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *Segment) GetStartHour() *timestamppb.Timestamp {
	if x != nil {
		return x.StartHour
	}
	return nil
}

func (x *Segment) GetEndPosition() int64 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *Segment) GetEndHour() *timestamppb.Timestamp {
	if x != nil {
		return x.EndHour
	}
	return nil
}

func (x *Segment) GetStartPositionLowerBound_99Th() int64 {
	if x != nil {
		return x.StartPositionLowerBound_99Th
	}
	return 0
}

func (x *Segment) GetStartPositionUpperBound_99Th() int64 {
	if x != nil {
		return x.StartPositionUpperBound_99Th
	}
	return 0
}

func (x *Segment) GetMostRecentUnexpectedResultHour() *timestamppb.Timestamp {
	if x != nil {
		return x.MostRecentUnexpectedResultHour
	}
	return nil
}

func (x *Segment) GetFinalizedCounts() *Counts {
	if x != nil {
		return x.FinalizedCounts
	}
	return nil
}

func (x *Segment) GetStartPositionDistribution() []int64 {
	if x != nil {
		return x.StartPositionDistribution
	}
	return nil
}

// All exclude the effect of skipped test results.
// Next ID: 19
type Counts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of unexpected non-skipped test results.
	UnexpectedResults int64 `protobuf:"varint,1,opt,name=unexpected_results,json=unexpectedResults,proto3" json:"unexpected_results,omitempty"`
	// The total number of non-skipped test results.
	TotalResults int64 `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	// The number of expected passed test results.
	ExpectedPassedResults int64 `protobuf:"varint,10,opt,name=expected_passed_results,json=expectedPassedResults,proto3" json:"expected_passed_results,omitempty"`
	// The number of expected failed test results.
	ExpectedFailedResults int64 `protobuf:"varint,11,opt,name=expected_failed_results,json=expectedFailedResults,proto3" json:"expected_failed_results,omitempty"`
	// The number of expected crashed test results.
	ExpectedCrashedResults int64 `protobuf:"varint,12,opt,name=expected_crashed_results,json=expectedCrashedResults,proto3" json:"expected_crashed_results,omitempty"`
	// The number of expected aborted test results.
	ExpectedAbortedResults int64 `protobuf:"varint,13,opt,name=expected_aborted_results,json=expectedAbortedResults,proto3" json:"expected_aborted_results,omitempty"`
	// The number of unexpected passed test results.
	UnexpectedPassedResults int64 `protobuf:"varint,14,opt,name=unexpected_passed_results,json=unexpectedPassedResults,proto3" json:"unexpected_passed_results,omitempty"`
	// The number of unexpected failed test results.
	UnexpectedFailedResults int64 `protobuf:"varint,15,opt,name=unexpected_failed_results,json=unexpectedFailedResults,proto3" json:"unexpected_failed_results,omitempty"`
	// The number of unexpected crashed test results.
	UnexpectedCrashedResults int64 `protobuf:"varint,16,opt,name=unexpected_crashed_results,json=unexpectedCrashedResults,proto3" json:"unexpected_crashed_results,omitempty"`
	// The number of unexpected aborted test results.
	UnexpectedAbortedResults int64 `protobuf:"varint,17,opt,name=unexpected_aborted_results,json=unexpectedAbortedResults,proto3" json:"unexpected_aborted_results,omitempty"`
	// The number of test runs which had an unexpected test result but were
	// not retried.
	UnexpectedUnretriedRuns int64 `protobuf:"varint,3,opt,name=unexpected_unretried_runs,json=unexpectedUnretriedRuns,proto3" json:"unexpected_unretried_runs,omitempty"`
	// The number of test run which had an unexpected test result, were
	// retried, and still contained only unexpected test results.
	UnexpectedAfterRetryRuns int64 `protobuf:"varint,4,opt,name=unexpected_after_retry_runs,json=unexpectedAfterRetryRuns,proto3" json:"unexpected_after_retry_runs,omitempty"`
	// The number of test runs which had an unexpected test result, were
	// retried, and eventually recorded an expected test result.
	FlakyRuns int64 `protobuf:"varint,5,opt,name=flaky_runs,json=flakyRuns,proto3" json:"flaky_runs,omitempty"`
	// The total number of test runs.
	TotalRuns int64 `protobuf:"varint,6,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	// The number of source verdicts which had only unexpected test results.
	// Excludes partial_source_verdict (if any).
	UnexpectedSourceVerdicts int64 `protobuf:"varint,7,opt,name=unexpected_source_verdicts,json=unexpectedSourceVerdicts,proto3" json:"unexpected_source_verdicts,omitempty"`
	// The number of source verdicts that had both unexpected and expected
	// test results.
	// Excludes partial_source_verdict (if any).
	FlakySourceVerdicts int64 `protobuf:"varint,8,opt,name=flaky_source_verdicts,json=flakySourceVerdicts,proto3" json:"flaky_source_verdicts,omitempty"`
	// The total number of source verdicts.
	// Excludes partial_source_verdict (if any).
	TotalSourceVerdicts int64 `protobuf:"varint,9,opt,name=total_source_verdicts,json=totalSourceVerdicts,proto3" json:"total_source_verdicts,omitempty"`
	// Statistics about the last (partial) source verdict evicted from
	// the input buffer (if any).
	// As not all results at the source position may have been evicted
	// in one go, it is stored separately here in an incomplete state
	// until the segment is finalized.
	PartialSourceVerdict *PartialSourceVerdict `protobuf:"bytes,18,opt,name=partial_source_verdict,json=partialSourceVerdict,proto3" json:"partial_source_verdict,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Counts) Reset() {
	*x = Counts{}
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Counts) ProtoMessage() {}

func (x *Counts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Counts.ProtoReflect.Descriptor instead.
func (*Counts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{2}
}

func (x *Counts) GetUnexpectedResults() int64 {
	if x != nil {
		return x.UnexpectedResults
	}
	return 0
}

func (x *Counts) GetTotalResults() int64 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *Counts) GetExpectedPassedResults() int64 {
	if x != nil {
		return x.ExpectedPassedResults
	}
	return 0
}

func (x *Counts) GetExpectedFailedResults() int64 {
	if x != nil {
		return x.ExpectedFailedResults
	}
	return 0
}

func (x *Counts) GetExpectedCrashedResults() int64 {
	if x != nil {
		return x.ExpectedCrashedResults
	}
	return 0
}

func (x *Counts) GetExpectedAbortedResults() int64 {
	if x != nil {
		return x.ExpectedAbortedResults
	}
	return 0
}

func (x *Counts) GetUnexpectedPassedResults() int64 {
	if x != nil {
		return x.UnexpectedPassedResults
	}
	return 0
}

func (x *Counts) GetUnexpectedFailedResults() int64 {
	if x != nil {
		return x.UnexpectedFailedResults
	}
	return 0
}

func (x *Counts) GetUnexpectedCrashedResults() int64 {
	if x != nil {
		return x.UnexpectedCrashedResults
	}
	return 0
}

func (x *Counts) GetUnexpectedAbortedResults() int64 {
	if x != nil {
		return x.UnexpectedAbortedResults
	}
	return 0
}

func (x *Counts) GetUnexpectedUnretriedRuns() int64 {
	if x != nil {
		return x.UnexpectedUnretriedRuns
	}
	return 0
}

func (x *Counts) GetUnexpectedAfterRetryRuns() int64 {
	if x != nil {
		return x.UnexpectedAfterRetryRuns
	}
	return 0
}

func (x *Counts) GetFlakyRuns() int64 {
	if x != nil {
		return x.FlakyRuns
	}
	return 0
}

func (x *Counts) GetTotalRuns() int64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *Counts) GetUnexpectedSourceVerdicts() int64 {
	if x != nil {
		return x.UnexpectedSourceVerdicts
	}
	return 0
}

func (x *Counts) GetFlakySourceVerdicts() int64 {
	if x != nil {
		return x.FlakySourceVerdicts
	}
	return 0
}

func (x *Counts) GetTotalSourceVerdicts() int64 {
	if x != nil {
		return x.TotalSourceVerdicts
	}
	return 0
}

func (x *Counts) GetPartialSourceVerdict() *PartialSourceVerdict {
	if x != nil {
		return x.PartialSourceVerdict
	}
	return nil
}

// Store statistics about runs evicted from the input buffer in Spanner.
//
// Purpose is described in go/luci-analysis-test-variant-analysis-in-clusters.
//
// Statistics about runs not yet evicted from the input buffer are not
// stored here because they can be computed directly from the input buffer.
// This means this proto only needs to be updated in Spanner when
// runs are evicted from the input buffer (approximately every 1/100
// run ingestions), rather than on every run ingestion, reducing the
// number of writes required.
type Statistics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Statistics by partition time hour. Stored in ascending order (oldest
	// hour first).
	//
	// Retained for 11 days (as 1 + 3 + 7 days):
	//   - 1 day to support the functional requirement of calculating flakiness
	//     using data from up to the last 24 hours.
	//   - 3 days to account for the fact that some builds may be long-running
	//     and could take up to 3 days to complete, so we need flakiness as at
	//     a partition time of up to 3 days ago.
	//   - 7 days to allow time to respond to operational incidents that involve
	//     delayed or stuck ingestion tasks, without losing data.
	HourlyBuckets []*Statistics_HourBucket `protobuf:"bytes,1,rep,name=hourly_buckets,json=hourlyBuckets,proto3" json:"hourly_buckets,omitempty"`
	// Statistics about the last (partial) source verdict evicted from
	// the input buffer (if any).
	// As not all test runs at the source position may have been evicted
	// in one go, they are accumulated separately here until the source
	// verdict is complete and it can be merged into an hour bucket.
	PartialSourceVerdict *PartialSourceVerdict `protobuf:"bytes,2,opt,name=partial_source_verdict,json=partialSourceVerdict,proto3" json:"partial_source_verdict,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{3}
}

func (x *Statistics) GetHourlyBuckets() []*Statistics_HourBucket {
	if x != nil {
		return x.HourlyBuckets
	}
	return nil
}

func (x *Statistics) GetPartialSourceVerdict() *PartialSourceVerdict {
	if x != nil {
		return x.PartialSourceVerdict
	}
	return nil
}

// Statistics about a source verdict. A source verdict comprises
// all test results at a commit postiion.
type PartialSourceVerdict struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source position.
	CommitPosition int64 `protobuf:"varint,1,opt,name=commit_position,json=commitPosition,proto3" json:"commit_position,omitempty"`
	// The most recent hour at which a result was recorded for this commit
	// position.
	LastHour *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_hour,json=lastHour,proto3" json:"last_hour,omitempty"`
	// The number of unexpected test results at this commit position (so far).
	UnexpectedResults int64 `protobuf:"varint,3,opt,name=unexpected_results,json=unexpectedResults,proto3" json:"unexpected_results,omitempty"`
	// The number of test results at this commit position (so far).
	ExpectedResults int64 `protobuf:"varint,4,opt,name=expected_results,json=expectedResults,proto3" json:"expected_results,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PartialSourceVerdict) Reset() {
	*x = PartialSourceVerdict{}
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartialSourceVerdict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartialSourceVerdict) ProtoMessage() {}

func (x *PartialSourceVerdict) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartialSourceVerdict.ProtoReflect.Descriptor instead.
func (*PartialSourceVerdict) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{4}
}

func (x *PartialSourceVerdict) GetCommitPosition() int64 {
	if x != nil {
		return x.CommitPosition
	}
	return 0
}

func (x *PartialSourceVerdict) GetLastHour() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHour
	}
	return nil
}

func (x *PartialSourceVerdict) GetUnexpectedResults() int64 {
	if x != nil {
		return x.UnexpectedResults
	}
	return 0
}

func (x *PartialSourceVerdict) GetExpectedResults() int64 {
	if x != nil {
		return x.ExpectedResults
	}
	return 0
}

type Statistics_HourBucket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hour of the verdict's partition time.
	// This is the partition time, as the number of seconds since January 1, 1970 UTC
	// (i.e. as a unix timestamp), divided by 3600.
	Hour int64 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	// The number of source verdicts with only unexpected test results (excluding skips).
	UnexpectedSourceVerdicts int64 `protobuf:"varint,2,opt,name=unexpected_source_verdicts,json=unexpectedSourceVerdicts,proto3" json:"unexpected_source_verdicts,omitempty"`
	// The number of source verdicts with a mix of expected and unexpected test results
	// (excluding skips.)
	FlakySourceVerdicts int64 `protobuf:"varint,3,opt,name=flaky_source_verdicts,json=flakySourceVerdicts,proto3" json:"flaky_source_verdicts,omitempty"`
	// The total number of source verdicts.
	TotalSourceVerdicts int64 `protobuf:"varint,4,opt,name=total_source_verdicts,json=totalSourceVerdicts,proto3" json:"total_source_verdicts,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Statistics_HourBucket) Reset() {
	*x = Statistics_HourBucket{}
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statistics_HourBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics_HourBucket) ProtoMessage() {}

func (x *Statistics_HourBucket) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics_HourBucket.ProtoReflect.Descriptor instead.
func (*Statistics_HourBucket) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Statistics_HourBucket) GetHour() int64 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Statistics_HourBucket) GetUnexpectedSourceVerdicts() int64 {
	if x != nil {
		return x.UnexpectedSourceVerdicts
	}
	return 0
}

func (x *Statistics_HourBucket) GetFlakySourceVerdicts() int64 {
	if x != nil {
		return x.FlakySourceVerdicts
	}
	return 0
}

func (x *Statistics_HourBucket) GetTotalSourceVerdicts() int64 {
	if x != nil {
		return x.TotalSourceVerdicts
	}
	return 0
}

var File_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc = string([]byte{
	0x0a, 0x47, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x54, 0x0a, 0x08, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xce, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x6f, 0x75, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x39, 0x39, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x39, 0x39, 0x74, 0x68,
	0x12, 0x44, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x39,
	0x39, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x39, 0x39, 0x74, 0x68, 0x12, 0x66, 0x0a, 0x22, 0x6d, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1e,
	0x6d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x56,
	0x0a, 0x10, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x19, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x08, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75,
	0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x62, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x75, 0x6e,
	0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x62,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x17, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6c, 0x61, 0x6b,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x6c,
	0x61, 0x6b, 0x79, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x6e, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x16,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x22, 0xa9, 0x03,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x61, 0x0a, 0x0e,
	0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x0d, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x6f, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x1a, 0xc6, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x75, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68,
	0x6f, 0x75, 0x72, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x58,
	0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x03, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc), len(file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_goTypes = []any{
	(SegmentState)(0),             // 0: luci.analysis.internal.changepoints.SegmentState
	(*Segments)(nil),              // 1: luci.analysis.internal.changepoints.Segments
	(*Segment)(nil),               // 2: luci.analysis.internal.changepoints.Segment
	(*Counts)(nil),                // 3: luci.analysis.internal.changepoints.Counts
	(*Statistics)(nil),            // 4: luci.analysis.internal.changepoints.Statistics
	(*PartialSourceVerdict)(nil),  // 5: luci.analysis.internal.changepoints.PartialSourceVerdict
	(*Statistics_HourBucket)(nil), // 6: luci.analysis.internal.changepoints.Statistics.HourBucket
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_depIdxs = []int32{
	2,  // 0: luci.analysis.internal.changepoints.Segments.segments:type_name -> luci.analysis.internal.changepoints.Segment
	0,  // 1: luci.analysis.internal.changepoints.Segment.state:type_name -> luci.analysis.internal.changepoints.SegmentState
	7,  // 2: luci.analysis.internal.changepoints.Segment.start_hour:type_name -> google.protobuf.Timestamp
	7,  // 3: luci.analysis.internal.changepoints.Segment.end_hour:type_name -> google.protobuf.Timestamp
	7,  // 4: luci.analysis.internal.changepoints.Segment.most_recent_unexpected_result_hour:type_name -> google.protobuf.Timestamp
	3,  // 5: luci.analysis.internal.changepoints.Segment.finalized_counts:type_name -> luci.analysis.internal.changepoints.Counts
	5,  // 6: luci.analysis.internal.changepoints.Counts.partial_source_verdict:type_name -> luci.analysis.internal.changepoints.PartialSourceVerdict
	6,  // 7: luci.analysis.internal.changepoints.Statistics.hourly_buckets:type_name -> luci.analysis.internal.changepoints.Statistics.HourBucket
	5,  // 8: luci.analysis.internal.changepoints.Statistics.partial_source_verdict:type_name -> luci.analysis.internal.changepoints.PartialSourceVerdict
	7,  // 9: luci.analysis.internal.changepoints.PartialSourceVerdict.last_hour:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_init() }
func file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_init() {
	if File_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc), len(file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto = out.File
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_internal_changepoints_proto_spanner_proto_depIdxs = nil
}
