// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.analysis.internal.tasks;

import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/analysis/internal/ingestion/control/proto/control.proto";
import "go.chromium.org/luci/resultdb/proto/v1/notification.proto";

option go_package = "go.chromium.org/luci/analysis/internal/tasks/taskspb";

// Payload of IngestTestVerdicts task.
// Next ID: 9.
message IngestTestVerdicts {
  // The LUCI project of the invocation and build (if exists) in this ingestion task.
  string project = 6;

  // Timestamp representing the start of the data retention period
  // for the ingested test verdicts. This is the time the ingested invocation
  // was created in Spanner.
  google.protobuf.Timestamp partition_time = 1;

  // ID of this ingestion.
  // This matches to the ingestionID in the IngestionJoins spanner table.
  string ingestion_id = 7;

  // The invocation that is being ingested. Only
  // populated if the ingestion has an invocation.
  luci.analysis.internal.ingestion.control.InvocationResult invocation = 8;

  // The build that is being ingested. Only
  // populated if the ingestion has a build.
  luci.analysis.internal.ingestion.control.BuildResult build = 2;

  // Context about the presubmit run the build was a part of. Only
  // populated if the build is a presubmit run.
  luci.analysis.internal.ingestion.control.PresubmitResult presubmit_run = 3;

  // The page token value to use when calling QueryTestVariants.
  // For the first task, this should be "". For subsequent tasks,
  // this is the next_page_token value returned by the last call.
  string page_token = 4;

  // The task number of test results task. 1 for the first
  // task, 2 for the second task, and so on. Used to avoid creating
  // duplicate tasks.
  int64 task_index = 5;

  // If set, enables the ingesting results in verdict status v2 (effective)
  // order instead of verdict status v1 order. An ingestion for a build needs
  // to apply this consistently to avoid breaking page tokens / missing data.
  bool use_new_ingestion_order = 9;
}

// Payload of IngestTestResults task.
message IngestTestResults {
  // The ResultDB invocation ready for export notification that triggered
  // the ingestion of test results.
  luci.resultdb.v1.InvocationReadyForExportNotification notification = 1;

  // The page token value to use when calling ListTestResults.
  // For the first task, this should be "". For subsequent tasks,
  // this is the next_page_token value returned by the last call.
  string page_token = 2;

  // The task number of test results task. 1 for the first
  // task, 2 for the second task, and so on. Used to avoid creating
  // duplicate tasks.
  int64 task_index = 3;
}

// Payload of IngestArtifacts task.
message IngestArtifacts {
  // The ResultDB invocation finalized notification that triggered
  // the ingestion of test artifacts.
  luci.resultdb.v1.InvocationFinalizedNotification notification = 1;

  // The page token value to use when calling QueryArtifacts.
  // For the first task, this should be "". For subsequent tasks,
  // this is the next_page_token value returned by the last call.
  string page_token = 2;

  // The task number of test artifact task. 1 for the first
  // task, 2 for the second task, and so on. Used to avoid creating
  // duplicate tasks.
  int64 task_index = 3;
}

// Payload of the ReclusterChunks task.
message ReclusterChunks {
  // The number of the reclustering shard being processed by this task.
  // A shard corresponds to a project + Chunk ID keyspace fraction that
  // is being re-clustered.
  // Shards are numbered sequentially, starting at one.
  int64 shard_number = 6;

  // The LUCI Project containing test results to be re-clustered.
  string project = 1;

  // The attempt time for which this task is. This should be cross-referenced
  // with the ReclusteringRuns table to identify the reclustering parameters.
  // This is also the soft deadline for the task.
  google.protobuf.Timestamp attempt_time = 2;

  // The exclusive lower bound defining the range of Chunk IDs to
  // be re-clustered. To define the table start, use the empty string ("").
  string start_chunk_id = 3;

  // The inclusive upper bound defining the range of Chunk IDs to
  // be re-clustered. To define the table end use "ff" x 16, i.e.
  // "ffffffffffffffffffffffffffffffff".
  string end_chunk_id = 4;

  // The version of algorithms to re-cluster to. If the worker executing the
  // task is not running at least this version of algorithms, it is an error.
  int64 algorithms_version = 7;

  // The version of rules to recluster to.
  google.protobuf.Timestamp rules_version = 8;

  // The version of project configuration to recluster to.
  google.protobuf.Timestamp config_version = 9;

  // State to be passed from one execution of the task to the next.
  // To fit with autoscaling, each task aims to execute only for a short time
  // before enqueuing another task to act as its continuation.
  // Must be populated on all tasks, even on the initial task.
  ReclusterChunkState state = 5;
}

// ReclusterChunkState captures state passed from one execution of a
// ReclusterChunks task to the next.
message ReclusterChunkState {
  // The exclusive lower bound of Chunk IDs processed to date.
  string current_chunk_id = 1;

  // The next time a progress report should be made.
  google.protobuf.Timestamp next_report_due = 2;
}

// Payload of the JoinBuild task.
message JoinBuild {
  // Buildbucket build ID, unique per Buildbucket instance.
  int64 id = 1;

  // Buildbucket host, e.g. "cr-buildbucket.appspot.com".
  string host = 2;

  // The LUCI Project to which the build belongs.
  string project = 3;
}

// Payload of the UpdateBugs task. Prior to running this task,
// the cluster_summaries table should have been updated from the
// contents of the clustered_failures table.
message UpdateBugs {
  // The LUCI Project to update bugs for.
  string project = 1;

  // The reclustering attempt minute that reflects the reclustering
  // state of the failures summarized by the cluster_summaries table.
  //
  // Explanation:
  // Bug management relies upon knowing when reclustering
  // is ongoing for rules and algorithms to inhibit erroneous bug updates
  // for those rules / algorithms as cluster metrics may be invalid.
  //
  // The re-clustering progress tracked in ReclusteringRuns table tracks
  // the progress applying re-clustering to the clustered_failures
  // table (not the cluster_summaries table).
  // As there is a delay between when clustered_failures table
  // is updated and when cluster_summaries is updated, we cannot
  // use the latest reclustering run but need to read the run
  // that was current when the clustered_failures table was
  // summarized into the cluster_summaries table.
  //
  // This will be the run that was current when the BigQuery
  // job to recompute cluster_summaries table from the
  // clustered_failures table started.
  google.protobuf.Timestamp reclustering_attempt_minute = 2;

  // The time the task should be completed by to avoid overruning
  // the next bug update task.
  google.protobuf.Timestamp deadline = 3;
}

// Payload of the Backfill task.
message Backfill {
  // The day to backfill data for. E.g. 2024-03-01 00:00:00 UTC
  // to denote the day of March 1st, 2024.
  google.protobuf.Timestamp day = 1;
}

// Payload of the GroupChangepoints task.
message GroupChangepoints {
  // A timestamp that select a particular week for grouping and exporting changepoints.
  // Eg. 2024-09-08 00:00:00 UTC to denote the day of September 8th, 2024.
  //
  // A week in this context refers to the period from Sunday at 00:00:00 AM UTC (inclusive)
  // to the following Sunday at 00:00:00 AM UTC (exclusive).
  // The week field MUST be a timestamp representing the start of a week (Sunday at 00:00:00 AM UTC).
  // Providing a timestamp that does not align with the start of a week will result in an error.
  google.protobuf.Timestamp week = 1;

  // The time the task was scheduled.
  // This is used to prevent the task queue from becoming overly congested
  // when task takes unexpectedly long time to finish.
  google.protobuf.Timestamp schedule_time = 2;
}