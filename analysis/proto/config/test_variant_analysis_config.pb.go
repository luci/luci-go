// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/proto/config/test_variant_analysis_config.proto

package configpb

import (
	analyzedtestvariant "go.chromium.org/luci/analysis/proto/analyzedtestvariant"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configurations for BigQuery export.
// Deprecated, retained for config compatibility only.
// Can be deleted once chromium/chrome-m120 and all earlier
// versions have their LUCI config deleted.
type BigQueryExport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The BigQuery table the analyzed test variants should be exported to.
	//
	// LUCI Analysis will use the project-scoped service account when exporting
	// the data.
	// The project-scoped service account MUST have permissions to create the
	// table in the dataset and insert rows to the table, e.g. WRITER role.
	Table *BigQueryExport_BigQueryTable `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Use predicate to query test variants that should be exported to
	// BigQuery table.
	Predicate     *analyzedtestvariant.Predicate `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigQueryExport) Reset() {
	*x = BigQueryExport{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryExport) ProtoMessage() {}

func (x *BigQueryExport) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryExport.ProtoReflect.Descriptor instead.
func (*BigQueryExport) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescGZIP(), []int{0}
}

func (x *BigQueryExport) GetTable() *BigQueryExport_BigQueryTable {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *BigQueryExport) GetPredicate() *analyzedtestvariant.Predicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

// Configurations for UpdateTestVariant task.
// Deprecated, retained for config compatibility only.
// Can be deleted once chromium/chrome-m120 and all earlier
// versions have their LUCI config deleted.
type UpdateTestVariantTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A task will run every interval to calculate the test variant's status.
	UpdateTestVariantTaskInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=update_test_variant_task_interval,json=updateTestVariantTaskInterval,proto3" json:"update_test_variant_task_interval,omitempty"`
	// In each task, verdicts within the duration will be queried
	// and used to calculate the test variant's status.
	//
	// For example, if the duration is 24 hours, LUCI Analysis will use all
	// the verdicts from the last 24 hours to calculate the variant's status.
	TestVariantStatusUpdateDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=test_variant_status_update_duration,json=testVariantStatusUpdateDuration,proto3" json:"test_variant_status_update_duration,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateTestVariantTask) Reset() {
	*x = UpdateTestVariantTask{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTestVariantTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestVariantTask) ProtoMessage() {}

func (x *UpdateTestVariantTask) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestVariantTask.ProtoReflect.Descriptor instead.
func (*UpdateTestVariantTask) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateTestVariantTask) GetUpdateTestVariantTaskInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateTestVariantTaskInterval
	}
	return nil
}

func (x *UpdateTestVariantTask) GetTestVariantStatusUpdateDuration() *durationpb.Duration {
	if x != nil {
		return x.TestVariantStatusUpdateDuration
	}
	return nil
}

// Deprecated, retained for config compatibility only.
// Can be deleted once chromium/chrome-m120 and all earlier
// versions have their LUCI config deleted.
type TestVariantAnalysisConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configurations for UpdateTestVariant task.
	UpdateTestVariantTask *UpdateTestVariantTask `protobuf:"bytes,1,opt,name=update_test_variant_task,json=updateTestVariantTask,proto3" json:"update_test_variant_task,omitempty"`
	// Configurations for BigQuery export.
	BqExports     []*BigQueryExport `protobuf:"bytes,2,rep,name=bq_exports,json=bqExports,proto3" json:"bq_exports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVariantAnalysisConfig) Reset() {
	*x = TestVariantAnalysisConfig{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVariantAnalysisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantAnalysisConfig) ProtoMessage() {}

func (x *TestVariantAnalysisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantAnalysisConfig.ProtoReflect.Descriptor instead.
func (*TestVariantAnalysisConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescGZIP(), []int{2}
}

func (x *TestVariantAnalysisConfig) GetUpdateTestVariantTask() *UpdateTestVariantTask {
	if x != nil {
		return x.UpdateTestVariantTask
	}
	return nil
}

func (x *TestVariantAnalysisConfig) GetBqExports() []*BigQueryExport {
	if x != nil {
		return x.BqExports
	}
	return nil
}

type BigQueryExport_BigQueryTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CloudProject  string                 `protobuf:"bytes,1,opt,name=cloud_project,json=cloudProject,proto3" json:"cloud_project,omitempty"`
	Dataset       string                 `protobuf:"bytes,2,opt,name=dataset,proto3" json:"dataset,omitempty"`
	Table         string                 `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BigQueryExport_BigQueryTable) Reset() {
	*x = BigQueryExport_BigQueryTable{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BigQueryExport_BigQueryTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BigQueryExport_BigQueryTable) ProtoMessage() {}

func (x *BigQueryExport_BigQueryTable) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BigQueryExport_BigQueryTable.ProtoReflect.Descriptor instead.
func (*BigQueryExport_BigQueryTable) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BigQueryExport_BigQueryTable) GetCloudProject() string {
	if x != nil {
		return x.CloudProject
	}
	return ""
}

func (x *BigQueryExport_BigQueryTable) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

func (x *BigQueryExport_BigQueryTable) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

var File_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDesc = string([]byte{
	0x0a, 0x4d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x14, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x2f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c,
	0x02, 0x0a, 0x0e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x48, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x64, 0x0a, 0x0d, 0x42, 0x69, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xe5, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x63, 0x0a, 0x21, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x23,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1f, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x64, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x71, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x69, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x09, 0x62, 0x71, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x35,
	0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_goTypes = []any{
	(*BigQueryExport)(nil),                // 0: luci.analysis.config.BigQueryExport
	(*UpdateTestVariantTask)(nil),         // 1: luci.analysis.config.UpdateTestVariantTask
	(*TestVariantAnalysisConfig)(nil),     // 2: luci.analysis.config.TestVariantAnalysisConfig
	(*BigQueryExport_BigQueryTable)(nil),  // 3: luci.analysis.config.BigQueryExport.BigQueryTable
	(*analyzedtestvariant.Predicate)(nil), // 4: luci.analysis.analyzedtestvariant.Predicate
	(*durationpb.Duration)(nil),           // 5: google.protobuf.Duration
}
var file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_depIdxs = []int32{
	3, // 0: luci.analysis.config.BigQueryExport.table:type_name -> luci.analysis.config.BigQueryExport.BigQueryTable
	4, // 1: luci.analysis.config.BigQueryExport.predicate:type_name -> luci.analysis.analyzedtestvariant.Predicate
	5, // 2: luci.analysis.config.UpdateTestVariantTask.update_test_variant_task_interval:type_name -> google.protobuf.Duration
	5, // 3: luci.analysis.config.UpdateTestVariantTask.test_variant_status_update_duration:type_name -> google.protobuf.Duration
	1, // 4: luci.analysis.config.TestVariantAnalysisConfig.update_test_variant_task:type_name -> luci.analysis.config.UpdateTestVariantTask
	0, // 5: luci.analysis.config.TestVariantAnalysisConfig.bq_exports:type_name -> luci.analysis.config.BigQueryExport
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() {
	file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_init()
}
func file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto = out.File
	file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_config_test_variant_analysis_config_proto_depIdxs = nil
}
