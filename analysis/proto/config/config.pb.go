// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/proto/config/config.proto

package configpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config is the service-wide configuration data for LUCI Analysis.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The endpoint for Monorail APIs.
	MonorailHostname string `protobuf:"bytes,1,opt,name=monorail_hostname,json=monorailHostname,proto3" json:"monorail_hostname,omitempty"`
	// The GCS bucket that chunk contents should be archived to.
	ChunkGcsBucket string `protobuf:"bytes,2,opt,name=chunk_gcs_bucket,json=chunkGcsBucket,proto3" json:"chunk_gcs_bucket,omitempty"`
	// The number of workers to use when re-clustering. Maximum value is 1000,
	// which is the default max_concurrent_requests on the reclustering queue:
	// https://cloud.google.com/appengine/docs/standard/go111/config/queueref.
	//
	// If this is unset or zero, re-clustering is disabled.
	ReclusteringWorkers int64 `protobuf:"varint,3,opt,name=reclustering_workers,json=reclusteringWorkers,proto3" json:"reclustering_workers,omitempty"`
	// Deprecated November 2022. Setting this has no effect. Field retained
	// to maintain backwards compatibility with old configuration files.
	ReclusteringIntervalMinutes int64 `protobuf:"varint,4,opt,name=reclustering_interval_minutes,json=reclusteringIntervalMinutes,proto3" json:"reclustering_interval_minutes,omitempty"`
	// Controls whether LUCI Analysis will interact with bug-filing systems.
	// Can be used to stop LUCI Analysis auto-bug filing and updates in
	// response to a problem.
	BugUpdatesEnabled bool `protobuf:"varint,5,opt,name=bug_updates_enabled,json=bugUpdatesEnabled,proto3" json:"bug_updates_enabled,omitempty"`
	// Config related to test variant analysis.
	TestVariantAnalysis *TestVariantAnalysis `protobuf:"bytes,6,opt,name=test_variant_analysis,json=testVariantAnalysis,proto3" json:"test_variant_analysis,omitempty"`
	// Config related to ingestion.
	Ingestion *Ingestion `protobuf:"bytes,7,opt,name=ingestion,proto3" json:"ingestion,omitempty"`
	// Config to control the test verdict export.
	TestVerdictExport *TestVerdictExport `protobuf:"bytes,8,opt,name=test_verdict_export,json=testVerdictExport,proto3" json:"test_verdict_export,omitempty"`
	// Configuration related to failure clustering.
	Clustering *ClusteringSystem `protobuf:"bytes,9,opt,name=clustering,proto3" json:"clustering,omitempty"`
	// Configuration related to automatic bug management.
	BugManagement *BugManagementSystem `protobuf:"bytes,10,opt,name=bug_management,json=bugManagement,proto3" json:"bug_management,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetMonorailHostname() string {
	if x != nil {
		return x.MonorailHostname
	}
	return ""
}

func (x *Config) GetChunkGcsBucket() string {
	if x != nil {
		return x.ChunkGcsBucket
	}
	return ""
}

func (x *Config) GetReclusteringWorkers() int64 {
	if x != nil {
		return x.ReclusteringWorkers
	}
	return 0
}

func (x *Config) GetReclusteringIntervalMinutes() int64 {
	if x != nil {
		return x.ReclusteringIntervalMinutes
	}
	return 0
}

func (x *Config) GetBugUpdatesEnabled() bool {
	if x != nil {
		return x.BugUpdatesEnabled
	}
	return false
}

func (x *Config) GetTestVariantAnalysis() *TestVariantAnalysis {
	if x != nil {
		return x.TestVariantAnalysis
	}
	return nil
}

func (x *Config) GetIngestion() *Ingestion {
	if x != nil {
		return x.Ingestion
	}
	return nil
}

func (x *Config) GetTestVerdictExport() *TestVerdictExport {
	if x != nil {
		return x.TestVerdictExport
	}
	return nil
}

func (x *Config) GetClustering() *ClusteringSystem {
	if x != nil {
		return x.Clustering
	}
	return nil
}

func (x *Config) GetBugManagement() *BugManagementSystem {
	if x != nil {
		return x.BugManagement
	}
	return nil
}

// TestVariantAnalysis controls how LUCI Analysis run test variant
// analysis.
// It can be used to turn on or off test variant analysis if a problem occurs.
type TestVariantAnalysis struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether we should run test variant analysis during ingestion.
	// It should be only enabled on dev at the beginning, before we are confident
	// enough to turn it on for prod.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Controls whether we should export test variant analysis result to
	// BigQuery. To turn this on, the "enabled" flag should also be turned on.
	BigqueryExportEnabled bool `protobuf:"varint,2,opt,name=bigquery_export_enabled,json=bigqueryExportEnabled,proto3" json:"bigquery_export_enabled,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TestVariantAnalysis) Reset() {
	*x = TestVariantAnalysis{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVariantAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantAnalysis) ProtoMessage() {}

func (x *TestVariantAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantAnalysis.ProtoReflect.Descriptor instead.
func (*TestVariantAnalysis) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *TestVariantAnalysis) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *TestVariantAnalysis) GetBigqueryExportEnabled() bool {
	if x != nil {
		return x.BigqueryExportEnabled
	}
	return false
}

// ClusteringSystem controls system-level settings related to LUCI Analysis
// clustering. For project-level clustering settings, see the
// `Clustering` message instead.
type ClusteringSystem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether test variant analysis may be queried when clustering
	// failures. If set, the test_variant_branch column will be populated
	// for clustered_failures rows in BigQuery, if the failures have source
	// position data.
	QueryTestVariantAnalysisEnabled bool `protobuf:"varint,1,opt,name=query_test_variant_analysis_enabled,json=queryTestVariantAnalysisEnabled,proto3" json:"query_test_variant_analysis_enabled,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ClusteringSystem) Reset() {
	*x = ClusteringSystem{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusteringSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteringSystem) ProtoMessage() {}

func (x *ClusteringSystem) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteringSystem.ProtoReflect.Descriptor instead.
func (*ClusteringSystem) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *ClusteringSystem) GetQueryTestVariantAnalysisEnabled() bool {
	if x != nil {
		return x.QueryTestVariantAnalysisEnabled
	}
	return false
}

// Settings to control ingestion.
type Ingestion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether ingestion should be limited to allowlisted projects only.
	// By default, allowlisting is not enabled and all projects are ingested.
	ProjectAllowlistEnabled bool `protobuf:"varint,1,opt,name=project_allowlist_enabled,json=projectAllowlistEnabled,proto3" json:"project_allowlist_enabled,omitempty"`
	// The list of allowlisted LUCI projects, e.g. "chromium", "chromeos".
	// Only used if project_allowlist_enabled is set.
	ProjectAllowlist []string `protobuf:"bytes,2,rep,name=project_allowlist,json=projectAllowlist,proto3" json:"project_allowlist,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Ingestion) Reset() {
	*x = Ingestion{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ingestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingestion) ProtoMessage() {}

func (x *Ingestion) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingestion.ProtoReflect.Descriptor instead.
func (*Ingestion) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *Ingestion) GetProjectAllowlistEnabled() bool {
	if x != nil {
		return x.ProjectAllowlistEnabled
	}
	return false
}

func (x *Ingestion) GetProjectAllowlist() []string {
	if x != nil {
		return x.ProjectAllowlist
	}
	return nil
}

// TestVerdictExport contains settings to control the test verdict export.
type TestVerdictExport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Controls whether test verdicts are exported. Can be used to
	// contain damage during production incidents.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictExport) Reset() {
	*x = TestVerdictExport{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictExport) ProtoMessage() {}

func (x *TestVerdictExport) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictExport.ProtoReflect.Descriptor instead.
func (*TestVerdictExport) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *TestVerdictExport) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// BugManagementSystem controls system-level settings related to
// automatic bug management. For project-level clustering settings, see
// the `BugManagement` message instead.
type BugManagementSystem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated. No longer has any effect. Retained for textproto
	// compatibility only. Policy-based bug filing is now always enabled.
	PolicyBasedManagementEnabled bool `protobuf:"varint,1,opt,name=policy_based_management_enabled,json=policyBasedManagementEnabled,proto3" json:"policy_based_management_enabled,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *BugManagementSystem) Reset() {
	*x = BugManagementSystem{}
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementSystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementSystem) ProtoMessage() {}

func (x *BugManagementSystem) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementSystem.ProtoReflect.Descriptor instead.
func (*BugManagementSystem) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *BugManagementSystem) GetPolicyBasedManagementEnabled() bool {
	if x != nil {
		return x.PolicyBasedManagementEnabled
	}
	return false
}

var File_go_chromium_org_luci_analysis_proto_config_config_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDesc = string([]byte{
	0x0a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x97, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x67, 0x63, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x47, 0x63, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x72, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x72, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x72, 0x65, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x75, 0x67, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x75, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11, 0x74, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x46, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x0e, 0x62, 0x75, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x62, 0x75, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x13, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x69,
	0x67, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x62, 0x69, 0x67,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x60, 0x0a, 0x10, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4c, 0x0a, 0x23, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x74, 0x0a, 0x09, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x11, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x13, 0x42, 0x75, 0x67,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x45, 0x0a, 0x1f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_go_chromium_org_luci_analysis_proto_config_config_proto_goTypes = []any{
	(*Config)(nil),              // 0: luci.analysis.config.Config
	(*TestVariantAnalysis)(nil), // 1: luci.analysis.config.TestVariantAnalysis
	(*ClusteringSystem)(nil),    // 2: luci.analysis.config.ClusteringSystem
	(*Ingestion)(nil),           // 3: luci.analysis.config.Ingestion
	(*TestVerdictExport)(nil),   // 4: luci.analysis.config.TestVerdictExport
	(*BugManagementSystem)(nil), // 5: luci.analysis.config.BugManagementSystem
}
var file_go_chromium_org_luci_analysis_proto_config_config_proto_depIdxs = []int32{
	1, // 0: luci.analysis.config.Config.test_variant_analysis:type_name -> luci.analysis.config.TestVariantAnalysis
	3, // 1: luci.analysis.config.Config.ingestion:type_name -> luci.analysis.config.Ingestion
	4, // 2: luci.analysis.config.Config.test_verdict_export:type_name -> luci.analysis.config.TestVerdictExport
	2, // 3: luci.analysis.config.Config.clustering:type_name -> luci.analysis.config.ClusteringSystem
	5, // 4: luci.analysis.config.Config.bug_management:type_name -> luci.analysis.config.BugManagementSystem
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_config_config_proto_init() }
func file_go_chromium_org_luci_analysis_proto_config_config_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_config_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_config_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_config_config_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_config_config_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_config_config_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_config_config_proto = out.File
	file_go_chromium_org_luci_analysis_proto_config_config_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_config_config_proto_depIdxs = nil
}
