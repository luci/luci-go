// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: go.chromium.org/luci/analysis/proto/v1/common.proto

package analysispb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BuildStatus the result of the build in which the test verdict was produced.
// This can be used to detect if the test verdict is incomplete (e.g. because
// an infra failure or cancellation occurred), and whether the unexpected
// test verdict was also followed by a failing build.
//
// Note: All values prefixed with BUILD_STATUS_ as the names are generic
// and likely to conflict with other/future enumerations otherwise.
// See https://google.aip.dev/126.
type BuildStatus int32

const (
	// A build must not have this status.
	BuildStatus_BUILD_STATUS_UNSPECIFIED BuildStatus = 0
	// The build succeeded.
	BuildStatus_BUILD_STATUS_SUCCESS BuildStatus = 1
	// The build failed.
	BuildStatus_BUILD_STATUS_FAILURE BuildStatus = 2
	// The build encountered an infrastructure failure.
	BuildStatus_BUILD_STATUS_INFRA_FAILURE BuildStatus = 3
	// The build was canceled.
	BuildStatus_BUILD_STATUS_CANCELED BuildStatus = 4
)

// Enum value maps for BuildStatus.
var (
	BuildStatus_name = map[int32]string{
		0: "BUILD_STATUS_UNSPECIFIED",
		1: "BUILD_STATUS_SUCCESS",
		2: "BUILD_STATUS_FAILURE",
		3: "BUILD_STATUS_INFRA_FAILURE",
		4: "BUILD_STATUS_CANCELED",
	}
	BuildStatus_value = map[string]int32{
		"BUILD_STATUS_UNSPECIFIED":   0,
		"BUILD_STATUS_SUCCESS":       1,
		"BUILD_STATUS_FAILURE":       2,
		"BUILD_STATUS_INFRA_FAILURE": 3,
		"BUILD_STATUS_CANCELED":      4,
	}
)

func (x BuildStatus) Enum() *BuildStatus {
	p := new(BuildStatus)
	*p = x
	return p
}

func (x BuildStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuildStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[0].Descriptor()
}

func (BuildStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[0]
}

func (x BuildStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuildStatus.Descriptor instead.
func (BuildStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

// ExonerationReason captures a reason why a test failure was
// exonerated. Exonerated means the failure was ignored and did not
// have further impact, in terms of causing the build to fail or
// rejecting the CL being tested in a presubmit run.
//
// Based on https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/resultdb/proto/v1/test_result.proto?q=ExonerationReason&type=cs.
type ExonerationReason int32

const (
	// A test failure must not have this status.
	ExonerationReason_EXONERATION_REASON_UNSPECIFIED ExonerationReason = 0
	// Similar unexpected results were observed on a mainline branch
	// (i.e. against a build without unsubmitted changes applied).
	// (For avoidance of doubt, this includes both flakily and
	// deterministically occurring unexpected results.)
	// Applies to unexpected results in presubmit/CQ runs only.
	ExonerationReason_OCCURS_ON_MAINLINE ExonerationReason = 1
	// Similar unexpected results were observed in presubmit run(s) for other,
	// unrelated CL(s). (This is suggestive of the issue being present
	// on mainline but is not confirmed as there are possible confounding
	// factors, like how tests are run on CLs vs how tests are run on
	// mainline branches.)
	// Applies to unexpected results in presubmit/CQ runs only.
	ExonerationReason_OCCURS_ON_OTHER_CLS ExonerationReason = 2
	// The tests are not critical to the test subject (e.g. CL) passing.
	// This could be because more data is being collected to determine if
	// the tests are stable enough to be made critical (as is often the
	// case for experimental test suites).
	ExonerationReason_NOT_CRITICAL ExonerationReason = 3
	// The test result was an unexpected pass. (Note that such an exoneration is
	// not automatically created for unexpected passes, unless the option is
	// specified to ResultSink or the project manually creates one).
	ExonerationReason_UNEXPECTED_PASS ExonerationReason = 4
)

// Enum value maps for ExonerationReason.
var (
	ExonerationReason_name = map[int32]string{
		0: "EXONERATION_REASON_UNSPECIFIED",
		1: "OCCURS_ON_MAINLINE",
		2: "OCCURS_ON_OTHER_CLS",
		3: "NOT_CRITICAL",
		4: "UNEXPECTED_PASS",
	}
	ExonerationReason_value = map[string]int32{
		"EXONERATION_REASON_UNSPECIFIED": 0,
		"OCCURS_ON_MAINLINE":             1,
		"OCCURS_ON_OTHER_CLS":            2,
		"NOT_CRITICAL":                   3,
		"UNEXPECTED_PASS":                4,
	}
)

func (x ExonerationReason) Enum() *ExonerationReason {
	p := new(ExonerationReason)
	*p = x
	return p
}

func (x ExonerationReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExonerationReason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[1].Descriptor()
}

func (ExonerationReason) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[1]
}

func (x ExonerationReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExonerationReason.Descriptor instead.
func (ExonerationReason) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

// SubmittedFilter filters test verdicts based on whether they had unsubmitted
// changes.
type SubmittedFilter int32

const (
	// Default value. Include all test verdicts.
	SubmittedFilter_SUBMITTED_FILTER_UNSPECIFIED SubmittedFilter = 0
	// Only include test verdicts that don't have unsubmitted changes.
	SubmittedFilter_ONLY_SUBMITTED SubmittedFilter = 1
	// Only include test verdicts that have unsubmitted changes.
	SubmittedFilter_ONLY_UNSUBMITTED SubmittedFilter = 2
)

// Enum value maps for SubmittedFilter.
var (
	SubmittedFilter_name = map[int32]string{
		0: "SUBMITTED_FILTER_UNSPECIFIED",
		1: "ONLY_SUBMITTED",
		2: "ONLY_UNSUBMITTED",
	}
	SubmittedFilter_value = map[string]int32{
		"SUBMITTED_FILTER_UNSPECIFIED": 0,
		"ONLY_SUBMITTED":               1,
		"ONLY_UNSUBMITTED":             2,
	}
)

func (x SubmittedFilter) Enum() *SubmittedFilter {
	p := new(SubmittedFilter)
	*p = x
	return p
}

func (x SubmittedFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmittedFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[2].Descriptor()
}

func (SubmittedFilter) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[2]
}

func (x SubmittedFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmittedFilter.Descriptor instead.
func (SubmittedFilter) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

// PresubmitRunMode describes the mode of a presubmit run. Currently
// based on LUCI CV run mode enumeration at
// https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/cv/api/bigquery/v1/attempt.proto?q=QUICK_DRY_RUN&type=cs.
type PresubmitRunMode int32

const (
	// A presubmit run must not have this status.
	PresubmitRunMode_PRESUBMIT_RUN_MODE_UNSPECIFIED PresubmitRunMode = 0
	// Run all tests but do not submit.
	PresubmitRunMode_DRY_RUN PresubmitRunMode = 1
	// Run all tests and potentially submit.
	PresubmitRunMode_FULL_RUN PresubmitRunMode = 2
	// Run some tests but do not submit.
	PresubmitRunMode_QUICK_DRY_RUN PresubmitRunMode = 3
	// Runs some tests on patchset upload but do not submit.
	PresubmitRunMode_NEW_PATCHSET_RUN PresubmitRunMode = 4
)

// Enum value maps for PresubmitRunMode.
var (
	PresubmitRunMode_name = map[int32]string{
		0: "PRESUBMIT_RUN_MODE_UNSPECIFIED",
		1: "DRY_RUN",
		2: "FULL_RUN",
		3: "QUICK_DRY_RUN",
		4: "NEW_PATCHSET_RUN",
	}
	PresubmitRunMode_value = map[string]int32{
		"PRESUBMIT_RUN_MODE_UNSPECIFIED": 0,
		"DRY_RUN":                        1,
		"FULL_RUN":                       2,
		"QUICK_DRY_RUN":                  3,
		"NEW_PATCHSET_RUN":               4,
	}
)

func (x PresubmitRunMode) Enum() *PresubmitRunMode {
	p := new(PresubmitRunMode)
	*p = x
	return p
}

func (x PresubmitRunMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PresubmitRunMode) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[3].Descriptor()
}

func (PresubmitRunMode) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[3]
}

func (x PresubmitRunMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PresubmitRunMode.Descriptor instead.
func (PresubmitRunMode) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{3}
}

// PresubmitRunStatus is the ending status of a presubmit run.
//
// Note: All values prefixed with PRESUBMIT_RUN_STATUS_ as the names are
// generic and likely to conflict with other/future enumerations otherwise.
// See https://google.aip.dev/126.
//
// Based on https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/cv/internal/run/storage.proto;l=28?q=LUCI%20CV%20status%20lang:proto.
type PresubmitRunStatus int32

const (
	// A build must not have this status.
	PresubmitRunStatus_PRESUBMIT_RUN_STATUS_UNSPECIFIED PresubmitRunStatus = 0
	// The run succeeded.
	PresubmitRunStatus_PRESUBMIT_RUN_STATUS_SUCCEEDED PresubmitRunStatus = 1
	// The run failed.
	PresubmitRunStatus_PRESUBMIT_RUN_STATUS_FAILED PresubmitRunStatus = 2
	// The run was canceled.
	PresubmitRunStatus_PRESUBMIT_RUN_STATUS_CANCELED PresubmitRunStatus = 3
)

// Enum value maps for PresubmitRunStatus.
var (
	PresubmitRunStatus_name = map[int32]string{
		0: "PRESUBMIT_RUN_STATUS_UNSPECIFIED",
		1: "PRESUBMIT_RUN_STATUS_SUCCEEDED",
		2: "PRESUBMIT_RUN_STATUS_FAILED",
		3: "PRESUBMIT_RUN_STATUS_CANCELED",
	}
	PresubmitRunStatus_value = map[string]int32{
		"PRESUBMIT_RUN_STATUS_UNSPECIFIED": 0,
		"PRESUBMIT_RUN_STATUS_SUCCEEDED":   1,
		"PRESUBMIT_RUN_STATUS_FAILED":      2,
		"PRESUBMIT_RUN_STATUS_CANCELED":    3,
	}
)

func (x PresubmitRunStatus) Enum() *PresubmitRunStatus {
	p := new(PresubmitRunStatus)
	*p = x
	return p
}

func (x PresubmitRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PresubmitRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[4].Descriptor()
}

func (PresubmitRunStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[4]
}

func (x PresubmitRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PresubmitRunStatus.Descriptor instead.
func (PresubmitRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{4}
}

// Status of a test result (v2).
// It is a mirror of luci.resultdb.v1.TestResult_Status, to avoid LUCI
// Analysis RPC protos being coupled to RDB protos.
type TestResult_Status int32

const (
	// Status was not specified. Do not use.
	TestResult_STATUS_UNSPECIFIED TestResult_Status = 0
	// The test case has passed.
	TestResult_PASSED TestResult_Status = 1
	// The test case has failed.
	// Suggests that the code under test is incorrect, but it is also possible
	// that the test is incorrect or it is a flake.
	//
	// If a test failed to complete due to an error that is not the fault of
	// this test's content, use the status EXECUTION_ERRORED (for errors specific
	// to this test) or PRECLUDED (for errors at a higher-level) instead.
	//
	// If you specify this status, you must also populate the failure_reason.kind field.
	TestResult_FAILED TestResult_Status = 2
	// The test case did not, *and should not*, run to completion in this
	// configuration.
	//
	// For example:
	//   - The test is disabled in code
	//   - The test assumptions are not met (e.g. JUnit assumption failure
	//     or Tast test hardware dependency unmet)
	//   - The test was not stable enough to in presubmit right now.
	//
	// If a test was not run or not run to completion due to an error, use the
	// status EXECUTION_ERRORED (for test-level errors) or PRECLUDED
	// (for higher-level errors) instead.
	//
	// If you specify this status, you must also populate the skipped_reason field.
	TestResult_SKIPPED TestResult_Status = 3
	// The test did not run to completion, because an infrastructure error
	// precluded it from doing so.
	//
	// Infrastructure here is broadly defined, to mean "not the content
	// of this test".
	//
	// For example:
	// - The test ran, but the result file could not be parsed.
	// - A file this test depends on could not be downloaded.
	//
	// Sometimes it is ambiguous whether test content is at fault or not.
	// For example, loss of SSH connection during the test could be because
	// the test caused a kernel panic or because of a flaky ethernet adapter.
	// Judgement is required. If unsure, use EXECUTION_ERRORED status instead
	// of FAIL to avoid falsely inflating the flakiness rate of a test.
	//
	// Results with this status should be ignored when calculating the flake
	// and failure rates of the test.
	//
	// Currently, there is no dedicated 'reason' field for this status;
	// please just include a suitable description in the result `summary_html`.
	TestResult_EXECUTION_ERRORED TestResult_Status = 4
	// The test did not run to completion, because its execution is precluded
	// by an error at a higher-level. For example, a work unit-level timeout.
	//
	// If you report this status, you must report an error on the containing
	// work unit. If this restriction is changed in future to allow preclusion
	// by other sources (e.g. a class fixture failed to setup so the tests in
	// using it could not run), a preclusion reason field will be added to
	// capture this.
	//
	// Results with this status should be ignored when calculating the flake
	// and failure rates of the test.
	//
	// Currently, there is no dedicated 'reason' field for this status; please
	// include a suitable description in the result `summary_html`.
	TestResult_PRECLUDED TestResult_Status = 5
)

// Enum value maps for TestResult_Status.
var (
	TestResult_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PASSED",
		2: "FAILED",
		3: "SKIPPED",
		4: "EXECUTION_ERRORED",
		5: "PRECLUDED",
	}
	TestResult_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PASSED":             1,
		"FAILED":             2,
		"SKIPPED":            3,
		"EXECUTION_ERRORED":  4,
		"PRECLUDED":          5,
	}
)

func (x TestResult_Status) Enum() *TestResult_Status {
	p := new(TestResult_Status)
	*p = x
	return p
}

func (x TestResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[5].Descriptor()
}

func (TestResult_Status) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes[5]
}

func (x TestResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResult_Status.Descriptor instead.
func (TestResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{9, 0}
}

// A range of timestamps.
type TimeRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The oldest timestamp to include in the range.
	Earliest *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=earliest,proto3" json:"earliest,omitempty"`
	// Include only timestamps that are strictly older than this.
	Latest        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=latest,proto3" json:"latest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *TimeRange) GetEarliest() *timestamppb.Timestamp {
	if x != nil {
		return x.Earliest
	}
	return nil
}

func (x *TimeRange) GetLatest() *timestamppb.Timestamp {
	if x != nil {
		return x.Latest
	}
	return nil
}

// Identity of a test result.
type TestResultId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test results system.
	// Currently, the only valid value is "resultdb".
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// ID for the test result in the test results system.
	// For test results in ResultDB, the format is:
	// "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}"
	// Where INVOCATION_ID, URL_ESCAPED_TEST_ID and RESULT_ID are values defined
	// in ResultDB.
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResultId) Reset() {
	*x = TestResultId{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResultId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResultId) ProtoMessage() {}

func (x *TestResultId) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResultId.ProtoReflect.Descriptor instead.
func (*TestResultId) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *TestResultId) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *TestResultId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Variant represents a way of running a test case.
//
// The same test case can be executed in different ways, for example on
// different OS, GPUs, with different compile options or runtime flags.
type Variant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The definition of the variant. Each key-value pair represents a
	// parameter describing how the test was run (e.g. OS, GPU, etc.).
	Def           map[string]string `protobuf:"bytes,1,rep,name=def,proto3" json:"def,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Variant) Reset() {
	*x = Variant{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant) ProtoMessage() {}

func (x *Variant) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variant.ProtoReflect.Descriptor instead.
func (*Variant) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *Variant) GetDef() map[string]string {
	if x != nil {
		return x.Def
	}
	return nil
}

type StringPair struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Regex: ^[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*$
	// Max length: 64.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Max length: 256.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringPair) Reset() {
	*x = StringPair{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringPair) ProtoMessage() {}

func (x *StringPair) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringPair.ProtoReflect.Descriptor instead.
func (*StringPair) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *StringPair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StringPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Identity of a bug tracking component in a bug tracking system.
type BugTrackingComponent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bug tracking system corresponding to this test case, as identified
	// by the test results system.
	// Currently, the valid values are "monorail" or "buganizer".
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// The bug tracking component corresponding to this test case, as identified
	// by the test results system.
	// If the bug tracking system is monorail, this is the component as the
	// user would see it, e.g. "Infra>Test>Flakiness". For monorail, the bug
	// tracking project (e.g. "chromium") is not encoded, but assumed to be
	// specified in the project's LUCI Analysis configuration.
	Component     string `protobuf:"bytes,2,opt,name=component,proto3" json:"component,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BugTrackingComponent) Reset() {
	*x = BugTrackingComponent{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugTrackingComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugTrackingComponent) ProtoMessage() {}

func (x *BugTrackingComponent) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugTrackingComponent.ProtoReflect.Descriptor instead.
func (*BugTrackingComponent) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *BugTrackingComponent) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *BugTrackingComponent) GetComponent() string {
	if x != nil {
		return x.Component
	}
	return ""
}

// Identity of a presubmit run (also known as a "CQ Run" or "CV Run").
type PresubmitRunId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The system that was used to process the presubmit run.
	// Currently, the only valid value is "luci-cv" for LUCI Commit Verifier
	// (LUCI CV).
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// Identity of the presubmit run.
	// If the presubmit system is LUCI CV, the format of this value is:
	//
	//	"{LUCI_PROJECT}/{LUCI_CV_ID}", e.g.
	//	"infra/8988819463854-1-f94732fe20056fd1".
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PresubmitRunId) Reset() {
	*x = PresubmitRunId{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PresubmitRunId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresubmitRunId) ProtoMessage() {}

func (x *PresubmitRunId) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresubmitRunId.ProtoReflect.Descriptor instead.
func (*PresubmitRunId) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *PresubmitRunId) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *PresubmitRunId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Identity of a bug in a bug-tracking system.
type AssociatedBug struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// System is the bug tracking system of the bug. This is either
	// "monorail" or "buganizer".
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// Id is the bug tracking system-specific identity of the bug.
	// For monorail, the scheme is {project}/{numeric_id}, for
	// buganizer the scheme is {numeric_id}.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// A human-readable name for the bug. This is typically the
	// bug shortlink (e.g. "crbug.com/1234567").
	LinkText string `protobuf:"bytes,3,opt,name=link_text,json=linkText,proto3" json:"link_text,omitempty"`
	// The resolved bug URL, e.g.
	// E.g. "https://bugs.chromium.org/p/chromium/issues/detail?id=123456".
	Url           string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssociatedBug) Reset() {
	*x = AssociatedBug{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssociatedBug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedBug) ProtoMessage() {}

func (x *AssociatedBug) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedBug.ProtoReflect.Descriptor instead.
func (*AssociatedBug) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *AssociatedBug) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *AssociatedBug) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AssociatedBug) GetLinkText() string {
	if x != nil {
		return x.LinkText
	}
	return ""
}

func (x *AssociatedBug) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// ClusterId represents the identity of a cluster. The LUCI Project is
// omitted as it is assumed to be implicit from the context.
//
// This is often used in place of the resource name of the cluster
// (in the sense of https://google.aip.dev/122) as clients may need
// to access individual parts of the resource name (e.g. to determine
// the algorithm used) and it is not desirable to make clients parse
// the resource name.
type ClusterId struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm is the name of the clustering algorithm that identified
	// the cluster.
	Algorithm string `protobuf:"bytes,1,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	// Id is the cluster identifier returned by the algorithm. The underlying
	// identifier is at most 16 bytes, but is represented here as a hexadecimal
	// string of up to 32 lowercase hexadecimal characters.
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterId) Reset() {
	*x = ClusterId{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterId) ProtoMessage() {}

func (x *ClusterId) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterId.ProtoReflect.Descriptor instead.
func (*ClusterId) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{7}
}

func (x *ClusterId) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *ClusterId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Represents a range of numeric values, e.g. unexpected verdict rates.
type NumericRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The inclusive lower bound included in the range.
	LowerBound float32 `protobuf:"fixed32,1,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	// The inclusive upper bound included in the range.
	UpperBound    float32 `protobuf:"fixed32,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NumericRange) Reset() {
	*x = NumericRange{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumericRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRange) ProtoMessage() {}

func (x *NumericRange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRange.ProtoReflect.Descriptor instead.
func (*NumericRange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{8}
}

func (x *NumericRange) GetLowerBound() float32 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *NumericRange) GetUpperBound() float32 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

// Message used to namespace test status ennum values, to avoid
// naming conflicts with verdicts.
type TestResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP(), []int{9}
}

var File_go_chromium_org_luci_analysis_proto_v1_common_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDesc = "" +
	"\n" +
	"3go.chromium.org/luci/analysis/proto/v1/common.proto\x12\x10luci.analysis.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"w\n" +
	"\tTimeRange\x126\n" +
	"\bearliest\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\bearliest\x122\n" +
	"\x06latest\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x06latest\"6\n" +
	"\fTestResultId\x12\x16\n" +
	"\x06system\x18\x01 \x01(\tR\x06system\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\"w\n" +
	"\aVariant\x124\n" +
	"\x03def\x18\x01 \x03(\v2\".luci.analysis.v1.Variant.DefEntryR\x03def\x1a6\n" +
	"\bDefEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"4\n" +
	"\n" +
	"StringPair\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"L\n" +
	"\x14BugTrackingComponent\x12\x16\n" +
	"\x06system\x18\x01 \x01(\tR\x06system\x12\x1c\n" +
	"\tcomponent\x18\x02 \x01(\tR\tcomponent\"8\n" +
	"\x0ePresubmitRunId\x12\x16\n" +
	"\x06system\x18\x01 \x01(\tR\x06system\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\"p\n" +
	"\rAssociatedBug\x12\x16\n" +
	"\x06system\x18\x01 \x01(\tR\x06system\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12 \n" +
	"\tlink_text\x18\x03 \x01(\tB\x03\xe0A\x03R\blinkText\x12\x15\n" +
	"\x03url\x18\x04 \x01(\tB\x03\xe0A\x03R\x03url\"9\n" +
	"\tClusterId\x12\x1c\n" +
	"\talgorithm\x18\x01 \x01(\tR\talgorithm\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\"P\n" +
	"\fNumericRange\x12\x1f\n" +
	"\vlower_bound\x18\x01 \x01(\x02R\n" +
	"lowerBound\x12\x1f\n" +
	"\vupper_bound\x18\x02 \x01(\x02R\n" +
	"upperBound\"y\n" +
	"\n" +
	"TestResult\"k\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06PASSED\x10\x01\x12\n" +
	"\n" +
	"\x06FAILED\x10\x02\x12\v\n" +
	"\aSKIPPED\x10\x03\x12\x15\n" +
	"\x11EXECUTION_ERRORED\x10\x04\x12\r\n" +
	"\tPRECLUDED\x10\x05*\x9a\x01\n" +
	"\vBuildStatus\x12\x1c\n" +
	"\x18BUILD_STATUS_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14BUILD_STATUS_SUCCESS\x10\x01\x12\x18\n" +
	"\x14BUILD_STATUS_FAILURE\x10\x02\x12\x1e\n" +
	"\x1aBUILD_STATUS_INFRA_FAILURE\x10\x03\x12\x19\n" +
	"\x15BUILD_STATUS_CANCELED\x10\x04*\x8f\x01\n" +
	"\x11ExonerationReason\x12\"\n" +
	"\x1eEXONERATION_REASON_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12OCCURS_ON_MAINLINE\x10\x01\x12\x17\n" +
	"\x13OCCURS_ON_OTHER_CLS\x10\x02\x12\x10\n" +
	"\fNOT_CRITICAL\x10\x03\x12\x13\n" +
	"\x0fUNEXPECTED_PASS\x10\x04*]\n" +
	"\x0fSubmittedFilter\x12 \n" +
	"\x1cSUBMITTED_FILTER_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eONLY_SUBMITTED\x10\x01\x12\x14\n" +
	"\x10ONLY_UNSUBMITTED\x10\x02*z\n" +
	"\x10PresubmitRunMode\x12\"\n" +
	"\x1ePRESUBMIT_RUN_MODE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aDRY_RUN\x10\x01\x12\f\n" +
	"\bFULL_RUN\x10\x02\x12\x11\n" +
	"\rQUICK_DRY_RUN\x10\x03\x12\x14\n" +
	"\x10NEW_PATCHSET_RUN\x10\x04*\xa2\x01\n" +
	"\x12PresubmitRunStatus\x12$\n" +
	" PRESUBMIT_RUN_STATUS_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1ePRESUBMIT_RUN_STATUS_SUCCEEDED\x10\x01\x12\x1f\n" +
	"\x1bPRESUBMIT_RUN_STATUS_FAILED\x10\x02\x12!\n" +
	"\x1dPRESUBMIT_RUN_STATUS_CANCELED\x10\x03B3Z1go.chromium.org/luci/analysis/proto/v1;analysispbb\x06proto3"

var (
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_go_chromium_org_luci_analysis_proto_v1_common_proto_goTypes = []any{
	(BuildStatus)(0),              // 0: luci.analysis.v1.BuildStatus
	(ExonerationReason)(0),        // 1: luci.analysis.v1.ExonerationReason
	(SubmittedFilter)(0),          // 2: luci.analysis.v1.SubmittedFilter
	(PresubmitRunMode)(0),         // 3: luci.analysis.v1.PresubmitRunMode
	(PresubmitRunStatus)(0),       // 4: luci.analysis.v1.PresubmitRunStatus
	(TestResult_Status)(0),        // 5: luci.analysis.v1.TestResult.Status
	(*TimeRange)(nil),             // 6: luci.analysis.v1.TimeRange
	(*TestResultId)(nil),          // 7: luci.analysis.v1.TestResultId
	(*Variant)(nil),               // 8: luci.analysis.v1.Variant
	(*StringPair)(nil),            // 9: luci.analysis.v1.StringPair
	(*BugTrackingComponent)(nil),  // 10: luci.analysis.v1.BugTrackingComponent
	(*PresubmitRunId)(nil),        // 11: luci.analysis.v1.PresubmitRunId
	(*AssociatedBug)(nil),         // 12: luci.analysis.v1.AssociatedBug
	(*ClusterId)(nil),             // 13: luci.analysis.v1.ClusterId
	(*NumericRange)(nil),          // 14: luci.analysis.v1.NumericRange
	(*TestResult)(nil),            // 15: luci.analysis.v1.TestResult
	nil,                           // 16: luci.analysis.v1.Variant.DefEntry
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_proto_v1_common_proto_depIdxs = []int32{
	17, // 0: luci.analysis.v1.TimeRange.earliest:type_name -> google.protobuf.Timestamp
	17, // 1: luci.analysis.v1.TimeRange.latest:type_name -> google.protobuf.Timestamp
	16, // 2: luci.analysis.v1.Variant.def:type_name -> luci.analysis.v1.Variant.DefEntry
	3,  // [3:3] is the sub-list for method output_type
	3,  // [3:3] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_common_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_common_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_common_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_common_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_common_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_proto_v1_common_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_common_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_common_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_depIdxs = nil
}
