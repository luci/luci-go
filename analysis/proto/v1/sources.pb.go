// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/analysis/proto/v1/sources.proto

package analysispb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChangelistOwner describes the owner of a gerrit changelist.
type ChangelistOwnerKind int32

const (
	// The changelist owner is not known.
	ChangelistOwnerKind_CHANGELIST_OWNER_UNSPECIFIED ChangelistOwnerKind = 0
	// The changelist is owned by a human.
	ChangelistOwnerKind_HUMAN ChangelistOwnerKind = 1
	// The changelist is owned by automation. (E.g. autoroller or
	// automatic uprev process.)
	ChangelistOwnerKind_AUTOMATION ChangelistOwnerKind = 2
)

// Enum value maps for ChangelistOwnerKind.
var (
	ChangelistOwnerKind_name = map[int32]string{
		0: "CHANGELIST_OWNER_UNSPECIFIED",
		1: "HUMAN",
		2: "AUTOMATION",
	}
	ChangelistOwnerKind_value = map[string]int32{
		"CHANGELIST_OWNER_UNSPECIFIED": 0,
		"HUMAN":                        1,
		"AUTOMATION":                   2,
	}
)

func (x ChangelistOwnerKind) Enum() *ChangelistOwnerKind {
	p := new(ChangelistOwnerKind)
	*p = x
	return p
}

func (x ChangelistOwnerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangelistOwnerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes[0].Descriptor()
}

func (ChangelistOwnerKind) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes[0]
}

func (x ChangelistOwnerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangelistOwnerKind.Descriptor instead.
func (ChangelistOwnerKind) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{0}
}

// Specifies the source code that was tested.
type Sources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The base version of code sources checked out. Mandatory.
	// If necessary, we could add support for non-gitiles sources here in
	// future, using a oneof statement. E.g.
	//
	//	oneof system {
	//	   GitilesCommit gitiles_commit = 1;
	//	   SubversionRevision svn_revision = 4;
	//	   ...
	//	}
	GitilesCommit *GitilesCommit `protobuf:"bytes,1,opt,name=gitiles_commit,json=gitilesCommit,proto3" json:"gitiles_commit,omitempty"`
	// The changelist(s) which were applied upon the base version of sources
	// checked out. E.g. in commit queue tryjobs.
	//
	// At most 10 changelist(s) may be specified here. If there
	// are more, only include the first 10 and set is_dirty.
	Changelists []*GerritChange `protobuf:"bytes,2,rep,name=changelists,proto3" json:"changelists,omitempty"`
	// Whether there were any changes made to the sources, not described above.
	// For example, a version of a dependency was upgraded before testing (e.g.
	// in an autoroller recipe).
	//
	// Cherry-picking a changelist on top of the base checkout is not considered
	// making the sources dirty as it is reported separately above.
	IsDirty       bool `protobuf:"varint,3,opt,name=is_dirty,json=isDirty,proto3" json:"is_dirty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sources) Reset() {
	*x = Sources{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sources) ProtoMessage() {}

func (x *Sources) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sources.ProtoReflect.Descriptor instead.
func (*Sources) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{0}
}

func (x *Sources) GetGitilesCommit() *GitilesCommit {
	if x != nil {
		return x.GitilesCommit
	}
	return nil
}

func (x *Sources) GetChangelists() []*GerritChange {
	if x != nil {
		return x.Changelists
	}
	return nil
}

func (x *Sources) GetIsDirty() bool {
	if x != nil {
		return x.IsDirty
	}
	return false
}

// GitilesCommit specifies the position of the gitiles commit an invocation
// ran against, in a repository's commit log. More specifically, a ref's commit
// log.
//
// It also specifies the host/project/ref combination that the commit
// exists in, to provide context.
type GitilesCommit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the gitiles host, e.g. "chromium.googlesource.com".
	// Mandatory.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Repository name on the host, e.g. "chromium/src". Mandatory.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
	// Not the branch name, use "refs/heads/branch"
	// Mandatory.
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	// Commit SHA-1, as 40 lowercase hexadecimal characters. Mandatory.
	CommitHash string `protobuf:"bytes,4,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// Defines a total order of commits on the ref.
	// A positive, monotonically increasing integer. The recommended
	// way of obtaining this is by using the goto.google.com/git-numberer
	// Gerrit plugin. Other solutions can be used as well, so long
	// as the same scheme is used consistently for a ref.
	// Mandatory.
	Position      int64 `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitilesCommit) Reset() {
	*x = GitilesCommit{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitilesCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesCommit) ProtoMessage() {}

func (x *GitilesCommit) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesCommit.ProtoReflect.Descriptor instead.
func (*GitilesCommit) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{1}
}

func (x *GitilesCommit) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitilesCommit) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GitilesCommit) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GitilesCommit) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *GitilesCommit) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// A Gerrit patchset.
type GerritChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gerrit hostname, e.g. "chromium-review.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project, e.g. "chromium/src".
	Project string `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	// Change number, e.g. 12345.
	Change int64 `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
	// Patch set number, e.g. 1.
	Patchset int64 `protobuf:"varint,3,opt,name=patchset,proto3" json:"patchset,omitempty"`
	// The kind of owner of the changelist. Output only.
	OwnerKind     ChangelistOwnerKind `protobuf:"varint,4,opt,name=owner_kind,json=ownerKind,proto3,enum=luci.analysis.v1.ChangelistOwnerKind" json:"owner_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GerritChange) Reset() {
	*x = GerritChange{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GerritChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritChange) ProtoMessage() {}

func (x *GerritChange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritChange.ProtoReflect.Descriptor instead.
func (*GerritChange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{2}
}

func (x *GerritChange) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GerritChange) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GerritChange) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *GerritChange) GetPatchset() int64 {
	if x != nil {
		return x.Patchset
	}
	return 0
}

func (x *GerritChange) GetOwnerKind() ChangelistOwnerKind {
	if x != nil {
		return x.OwnerKind
	}
	return ChangelistOwnerKind_CHANGELIST_OWNER_UNSPECIFIED
}

// Represents a reference in a source control system.
type SourceRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source control system used.
	// Only gitiles is supported at this moment. If other systems need to be
	// supported in future (e.g. non-gitiles git, subversion, google storage
	// buckets), they can be added here
	//
	// Types that are valid to be assigned to System:
	//
	//	*SourceRef_Gitiles
	System        isSourceRef_System `protobuf_oneof:"system"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceRef) Reset() {
	*x = SourceRef{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRef) ProtoMessage() {}

func (x *SourceRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRef.ProtoReflect.Descriptor instead.
func (*SourceRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{3}
}

func (x *SourceRef) GetSystem() isSourceRef_System {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *SourceRef) GetGitiles() *GitilesRef {
	if x != nil {
		if x, ok := x.System.(*SourceRef_Gitiles); ok {
			return x.Gitiles
		}
	}
	return nil
}

type isSourceRef_System interface {
	isSourceRef_System()
}

type SourceRef_Gitiles struct {
	// A branch in gitiles repository.
	Gitiles *GitilesRef `protobuf:"bytes,1,opt,name=gitiles,proto3,oneof"`
}

func (*SourceRef_Gitiles) isSourceRef_System() {}

// Represents a branch in a gitiles repository.
type GitilesRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The gitiles host, e.g. "chromium.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The project on the gitiles host, e.g. "chromium/src".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
	// Not the branch name, use "refs/heads/branch"
	Ref           string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitilesRef) Reset() {
	*x = GitilesRef{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitilesRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesRef) ProtoMessage() {}

func (x *GitilesRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesRef.ProtoReflect.Descriptor instead.
func (*GitilesRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{4}
}

func (x *GitilesRef) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitilesRef) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GitilesRef) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

// A gerrit changelist.
type Changelist struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gerrit hostname, e.g. "chromium-review.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Change number, e.g. 12345.
	Change int64 `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
	// Patch set number, e.g. 1.
	Patchset int32 `protobuf:"varint,3,opt,name=patchset,proto3" json:"patchset,omitempty"`
	// The kind of owner of the changelist.
	OwnerKind     ChangelistOwnerKind `protobuf:"varint,4,opt,name=owner_kind,json=ownerKind,proto3,enum=luci.analysis.v1.ChangelistOwnerKind" json:"owner_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Changelist) Reset() {
	*x = Changelist{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Changelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Changelist) ProtoMessage() {}

func (x *Changelist) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Changelist.ProtoReflect.Descriptor instead.
func (*Changelist) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{5}
}

func (x *Changelist) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Changelist) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Changelist) GetPatchset() int32 {
	if x != nil {
		return x.Patchset
	}
	return 0
}

func (x *Changelist) GetOwnerKind() ChangelistOwnerKind {
	if x != nil {
		return x.OwnerKind
	}
	return ChangelistOwnerKind_CHANGELIST_OWNER_UNSPECIFIED
}

var File_go_chromium_org_luci_analysis_proto_v1_sources_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc = string([]byte{
	0x0a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x07, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0d,
	0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x69, 0x72, 0x74, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x47,
	0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x0a,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x07, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x4c, 0x0a, 0x0a, 0x47, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68, 0x73, 0x65, 0x74, 0x12, 0x44, 0x0a,
	0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x2a, 0x52, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x4f, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_goTypes = []any{
	(ChangelistOwnerKind)(0), // 0: luci.analysis.v1.ChangelistOwnerKind
	(*Sources)(nil),          // 1: luci.analysis.v1.Sources
	(*GitilesCommit)(nil),    // 2: luci.analysis.v1.GitilesCommit
	(*GerritChange)(nil),     // 3: luci.analysis.v1.GerritChange
	(*SourceRef)(nil),        // 4: luci.analysis.v1.SourceRef
	(*GitilesRef)(nil),       // 5: luci.analysis.v1.GitilesRef
	(*Changelist)(nil),       // 6: luci.analysis.v1.Changelist
}
var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_depIdxs = []int32{
	2, // 0: luci.analysis.v1.Sources.gitiles_commit:type_name -> luci.analysis.v1.GitilesCommit
	3, // 1: luci.analysis.v1.Sources.changelists:type_name -> luci.analysis.v1.GerritChange
	0, // 2: luci.analysis.v1.GerritChange.owner_kind:type_name -> luci.analysis.v1.ChangelistOwnerKind
	5, // 3: luci.analysis.v1.SourceRef.gitiles:type_name -> luci.analysis.v1.GitilesRef
	0, // 4: luci.analysis.v1.Changelist.owner_kind:type_name -> luci.analysis.v1.ChangelistOwnerKind
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_sources_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_sources_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_sources_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[3].OneofWrappers = []any{
		(*SourceRef_Gitiles)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_sources_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_sources_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_sources_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_depIdxs = nil
}
