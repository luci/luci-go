// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/analysis/proto/v1/sources.proto

package analysispb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChangelistOwner describes the owner of a gerrit changelist.
type ChangelistOwnerKind int32

const (
	// The changelist owner is not known.
	ChangelistOwnerKind_CHANGELIST_OWNER_UNSPECIFIED ChangelistOwnerKind = 0
	// The changelist is owned by a human.
	ChangelistOwnerKind_HUMAN ChangelistOwnerKind = 1
	// The changelist is owned by automation. (E.g. autoroller or
	// automatic uprev process.)
	ChangelistOwnerKind_AUTOMATION ChangelistOwnerKind = 2
)

// Enum value maps for ChangelistOwnerKind.
var (
	ChangelistOwnerKind_name = map[int32]string{
		0: "CHANGELIST_OWNER_UNSPECIFIED",
		1: "HUMAN",
		2: "AUTOMATION",
	}
	ChangelistOwnerKind_value = map[string]int32{
		"CHANGELIST_OWNER_UNSPECIFIED": 0,
		"HUMAN":                        1,
		"AUTOMATION":                   2,
	}
)

func (x ChangelistOwnerKind) Enum() *ChangelistOwnerKind {
	p := new(ChangelistOwnerKind)
	*p = x
	return p
}

func (x ChangelistOwnerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangelistOwnerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes[0].Descriptor()
}

func (ChangelistOwnerKind) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes[0]
}

func (x ChangelistOwnerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangelistOwnerKind.Descriptor instead.
func (ChangelistOwnerKind) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{0}
}

// Specifies the source code that was tested.
type Sources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The base version of code sources checked out. Mandatory.
	//
	// Types that are valid to be assigned to BaseSources:
	//
	//	*Sources_GitilesCommit
	//	*Sources_SubmittedAndroidBuild
	BaseSources isSources_BaseSources `protobuf_oneof:"base_sources"`
	// The changelist(s) which were applied upon the base version of sources
	// checked out. E.g. in commit queue tryjobs.
	//
	// At most 10 changelist(s) may be specified here. If there
	// are more, only include the first 10 and set is_dirty.
	Changelists []*GerritChange `protobuf:"bytes,2,rep,name=changelists,proto3" json:"changelists,omitempty"`
	// Whether there were any changes made to the sources, not described above.
	// For example, a version of a dependency was upgraded before testing (e.g.
	// in an autoroller recipe).
	//
	// Cherry-picking a changelist on top of the base checkout is not considered
	// making the sources dirty as it is reported separately above.
	IsDirty       bool `protobuf:"varint,3,opt,name=is_dirty,json=isDirty,proto3" json:"is_dirty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sources) Reset() {
	*x = Sources{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sources) ProtoMessage() {}

func (x *Sources) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sources.ProtoReflect.Descriptor instead.
func (*Sources) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{0}
}

func (x *Sources) GetBaseSources() isSources_BaseSources {
	if x != nil {
		return x.BaseSources
	}
	return nil
}

func (x *Sources) GetGitilesCommit() *GitilesCommit {
	if x != nil {
		if x, ok := x.BaseSources.(*Sources_GitilesCommit); ok {
			return x.GitilesCommit
		}
	}
	return nil
}

func (x *Sources) GetSubmittedAndroidBuild() *SubmittedAndroidBuild {
	if x != nil {
		if x, ok := x.BaseSources.(*Sources_SubmittedAndroidBuild); ok {
			return x.SubmittedAndroidBuild
		}
	}
	return nil
}

func (x *Sources) GetChangelists() []*GerritChange {
	if x != nil {
		return x.Changelists
	}
	return nil
}

func (x *Sources) GetIsDirty() bool {
	if x != nil {
		return x.IsDirty
	}
	return false
}

type isSources_BaseSources interface {
	isSources_BaseSources()
}

type Sources_GitilesCommit struct {
	// The base version of code sources checked out.
	GitilesCommit *GitilesCommit `protobuf:"bytes,1,opt,name=gitiles_commit,json=gitilesCommit,proto3,oneof"`
}

type Sources_SubmittedAndroidBuild struct {
	// The submitted Android Build ID that describes the base code sources tested.
	//
	// In presubmit, where the invocation is testing a pending build (a build ID
	// starting with "P"), lookup its reference build (which will be a submitted
	// build) and specify it here. Then specify the cherry-picked changes under
	// `changelists`.
	SubmittedAndroidBuild *SubmittedAndroidBuild `protobuf:"bytes,4,opt,name=submitted_android_build,json=submittedAndroidBuild,proto3,oneof"`
}

func (*Sources_GitilesCommit) isSources_BaseSources() {}

func (*Sources_SubmittedAndroidBuild) isSources_BaseSources() {}

// GitilesCommit specifies the position of the gitiles commit an invocation
// ran against, in a repository's commit log. More specifically, a ref's commit
// log.
//
// It also specifies the host/project/ref combination that the commit
// exists in, to provide context.
type GitilesCommit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the gitiles host, e.g. "chromium.googlesource.com".
	// Mandatory.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Repository name on the host, e.g. "chromium/src". Mandatory.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
	// Not the branch name, use "refs/heads/branch"
	// Mandatory.
	Ref string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	// Commit SHA-1, as 40 lowercase hexadecimal characters. Mandatory.
	CommitHash string `protobuf:"bytes,4,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// Defines a total order of commits on the ref.
	// A positive, monotonically increasing integer. The recommended
	// way of obtaining this is by using the goto.google.com/git-numberer
	// Gerrit plugin. Other solutions can be used as well, so long
	// as the same scheme is used consistently for a ref.
	// Mandatory.
	Position      int64 `protobuf:"varint,5,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitilesCommit) Reset() {
	*x = GitilesCommit{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitilesCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesCommit) ProtoMessage() {}

func (x *GitilesCommit) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesCommit.ProtoReflect.Descriptor instead.
func (*GitilesCommit) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{1}
}

func (x *GitilesCommit) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitilesCommit) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GitilesCommit) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *GitilesCommit) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *GitilesCommit) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// Specifies the build ID of a submitted Android build. A submitted build is a
// build that uses only changes that have been submitted to a branch.
type SubmittedAndroidBuild struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Android Build API data realm.
	// This is usually `prod`.
	DataRealm string `protobuf:"bytes,1,opt,name=data_realm,json=dataRealm,proto3" json:"data_realm,omitempty"`
	// The Android Build branch.
	// E.g. `git_main`.
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// The build ID of the *submitted* build.
	//
	// This must be parsed to an integer, as this will be exported to BigQuery
	// and used for sorting results in source order.
	//
	// When comparing two build IDs on the same data realm and branch, we expect:
	// - A higher number means a newer version of sources were used in a build.
	// - An equal number means the same version of sources used in a build.
	// - A smaller number means an earlier version of sources were used in a build.
	BuildId       int64 `protobuf:"varint,3,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmittedAndroidBuild) Reset() {
	*x = SubmittedAndroidBuild{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmittedAndroidBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmittedAndroidBuild) ProtoMessage() {}

func (x *SubmittedAndroidBuild) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmittedAndroidBuild.ProtoReflect.Descriptor instead.
func (*SubmittedAndroidBuild) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{2}
}

func (x *SubmittedAndroidBuild) GetDataRealm() string {
	if x != nil {
		return x.DataRealm
	}
	return ""
}

func (x *SubmittedAndroidBuild) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SubmittedAndroidBuild) GetBuildId() int64 {
	if x != nil {
		return x.BuildId
	}
	return 0
}

// A Gerrit patchset.
type GerritChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gerrit hostname, e.g. "chromium-review.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Gerrit project, e.g. "chromium/src".
	Project string `protobuf:"bytes,5,opt,name=project,proto3" json:"project,omitempty"`
	// Change number, e.g. 12345.
	Change int64 `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
	// Patch set number, e.g. 1.
	Patchset int64 `protobuf:"varint,3,opt,name=patchset,proto3" json:"patchset,omitempty"`
	// The kind of owner of the changelist. Output only.
	OwnerKind     ChangelistOwnerKind `protobuf:"varint,4,opt,name=owner_kind,json=ownerKind,proto3,enum=luci.analysis.v1.ChangelistOwnerKind" json:"owner_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GerritChange) Reset() {
	*x = GerritChange{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GerritChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GerritChange) ProtoMessage() {}

func (x *GerritChange) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GerritChange.ProtoReflect.Descriptor instead.
func (*GerritChange) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{3}
}

func (x *GerritChange) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GerritChange) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GerritChange) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *GerritChange) GetPatchset() int64 {
	if x != nil {
		return x.Patchset
	}
	return 0
}

func (x *GerritChange) GetOwnerKind() ChangelistOwnerKind {
	if x != nil {
		return x.OwnerKind
	}
	return ChangelistOwnerKind_CHANGELIST_OWNER_UNSPECIFIED
}

// Represents a reference in a source control system.
type SourceRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source control system used.
	// Only gitiles is supported at this moment. If other systems need to be
	// supported in future (e.g. non-gitiles git, subversion, google storage
	// buckets), they can be added here
	//
	// Types that are valid to be assigned to System:
	//
	//	*SourceRef_Gitiles
	//	*SourceRef_AndroidBuild
	System        isSourceRef_System `protobuf_oneof:"system"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceRef) Reset() {
	*x = SourceRef{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRef) ProtoMessage() {}

func (x *SourceRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRef.ProtoReflect.Descriptor instead.
func (*SourceRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{4}
}

func (x *SourceRef) GetSystem() isSourceRef_System {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *SourceRef) GetGitiles() *GitilesRef {
	if x != nil {
		if x, ok := x.System.(*SourceRef_Gitiles); ok {
			return x.Gitiles
		}
	}
	return nil
}

func (x *SourceRef) GetAndroidBuild() *AndroidBuildBranch {
	if x != nil {
		if x, ok := x.System.(*SourceRef_AndroidBuild); ok {
			return x.AndroidBuild
		}
	}
	return nil
}

type isSourceRef_System interface {
	isSourceRef_System()
}

type SourceRef_Gitiles struct {
	// A branch in gitiles repository.
	Gitiles *GitilesRef `protobuf:"bytes,1,opt,name=gitiles,proto3,oneof"`
}

type SourceRef_AndroidBuild struct {
	// A branch in Android Build API.
	AndroidBuild *AndroidBuildBranch `protobuf:"bytes,2,opt,name=android_build,json=androidBuild,proto3,oneof"`
}

func (*SourceRef_Gitiles) isSourceRef_System() {}

func (*SourceRef_AndroidBuild) isSourceRef_System() {}

// Represents a branch in a gitiles repository.
type GitilesRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The gitiles host, e.g. "chromium.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The project on the gitiles host, e.g. "chromium/src".
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Commit ref, e.g. "refs/heads/main" from which the commit was fetched.
	// Not the branch name, use "refs/heads/branch"
	Ref           string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitilesRef) Reset() {
	*x = GitilesRef{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitilesRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitilesRef) ProtoMessage() {}

func (x *GitilesRef) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitilesRef.ProtoReflect.Descriptor instead.
func (*GitilesRef) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{5}
}

func (x *GitilesRef) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *GitilesRef) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GitilesRef) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

// Represents a branch in Android Build API.
type AndroidBuildBranch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Android Build API data realm.
	// This is usually `prod`.
	DataRealm string `protobuf:"bytes,1,opt,name=data_realm,json=dataRealm,proto3" json:"data_realm,omitempty"`
	// The Android Build branch.
	// E.g. `git_main`.
	Branch        string `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AndroidBuildBranch) Reset() {
	*x = AndroidBuildBranch{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AndroidBuildBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndroidBuildBranch) ProtoMessage() {}

func (x *AndroidBuildBranch) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndroidBuildBranch.ProtoReflect.Descriptor instead.
func (*AndroidBuildBranch) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{6}
}

func (x *AndroidBuildBranch) GetDataRealm() string {
	if x != nil {
		return x.DataRealm
	}
	return ""
}

func (x *AndroidBuildBranch) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

// A gerrit changelist.
type Changelist struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gerrit hostname, e.g. "chromium-review.googlesource.com".
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Change number, e.g. 12345.
	Change int64 `protobuf:"varint,2,opt,name=change,proto3" json:"change,omitempty"`
	// Patch set number, e.g. 1.
	Patchset int32 `protobuf:"varint,3,opt,name=patchset,proto3" json:"patchset,omitempty"`
	// The kind of owner of the changelist.
	OwnerKind     ChangelistOwnerKind `protobuf:"varint,4,opt,name=owner_kind,json=ownerKind,proto3,enum=luci.analysis.v1.ChangelistOwnerKind" json:"owner_kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Changelist) Reset() {
	*x = Changelist{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Changelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Changelist) ProtoMessage() {}

func (x *Changelist) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Changelist.ProtoReflect.Descriptor instead.
func (*Changelist) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP(), []int{7}
}

func (x *Changelist) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Changelist) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Changelist) GetPatchset() int32 {
	if x != nil {
		return x.Patchset
	}
	return 0
}

func (x *Changelist) GetOwnerKind() ChangelistOwnerKind {
	if x != nil {
		return x.OwnerKind
	}
	return ChangelistOwnerKind_CHANGELIST_OWNER_UNSPECIFIED
}

var File_go_chromium_org_luci_analysis_proto_v1_sources_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc = "" +
	"\n" +
	"4go.chromium.org/luci/analysis/proto/v1/sources.proto\x12\x10luci.analysis.v1\x1a\x1fgoogle/api/field_behavior.proto\"\xa3\x02\n" +
	"\aSources\x12H\n" +
	"\x0egitiles_commit\x18\x01 \x01(\v2\x1f.luci.analysis.v1.GitilesCommitH\x00R\rgitilesCommit\x12a\n" +
	"\x17submitted_android_build\x18\x04 \x01(\v2'.luci.analysis.v1.SubmittedAndroidBuildH\x00R\x15submittedAndroidBuild\x12@\n" +
	"\vchangelists\x18\x02 \x03(\v2\x1e.luci.analysis.v1.GerritChangeR\vchangelists\x12\x19\n" +
	"\bis_dirty\x18\x03 \x01(\bR\aisDirtyB\x0e\n" +
	"\fbase_sources\"\x8c\x01\n" +
	"\rGitilesCommit\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x18\n" +
	"\aproject\x18\x02 \x01(\tR\aproject\x12\x10\n" +
	"\x03ref\x18\x03 \x01(\tR\x03ref\x12\x1f\n" +
	"\vcommit_hash\x18\x04 \x01(\tR\n" +
	"commitHash\x12\x1a\n" +
	"\bposition\x18\x05 \x01(\x03R\bposition\"i\n" +
	"\x15SubmittedAndroidBuild\x12\x1d\n" +
	"\n" +
	"data_realm\x18\x01 \x01(\tR\tdataRealm\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\x12\x19\n" +
	"\bbuild_id\x18\x03 \x01(\x03R\abuildId\"\xbb\x01\n" +
	"\fGerritChange\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x18\n" +
	"\aproject\x18\x05 \x01(\tR\aproject\x12\x16\n" +
	"\x06change\x18\x02 \x01(\x03R\x06change\x12\x1a\n" +
	"\bpatchset\x18\x03 \x01(\x03R\bpatchset\x12I\n" +
	"\n" +
	"owner_kind\x18\x04 \x01(\x0e2%.luci.analysis.v1.ChangelistOwnerKindB\x03\xe0A\x03R\townerKind\"\x9c\x01\n" +
	"\tSourceRef\x128\n" +
	"\agitiles\x18\x01 \x01(\v2\x1c.luci.analysis.v1.GitilesRefH\x00R\agitiles\x12K\n" +
	"\randroid_build\x18\x02 \x01(\v2$.luci.analysis.v1.AndroidBuildBranchH\x00R\fandroidBuildB\b\n" +
	"\x06system\"L\n" +
	"\n" +
	"GitilesRef\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x18\n" +
	"\aproject\x18\x02 \x01(\tR\aproject\x12\x10\n" +
	"\x03ref\x18\x03 \x01(\tR\x03ref\"K\n" +
	"\x12AndroidBuildBranch\x12\x1d\n" +
	"\n" +
	"data_realm\x18\x01 \x01(\tR\tdataRealm\x12\x16\n" +
	"\x06branch\x18\x02 \x01(\tR\x06branch\"\x9a\x01\n" +
	"\n" +
	"Changelist\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x16\n" +
	"\x06change\x18\x02 \x01(\x03R\x06change\x12\x1a\n" +
	"\bpatchset\x18\x03 \x01(\x05R\bpatchset\x12D\n" +
	"\n" +
	"owner_kind\x18\x04 \x01(\x0e2%.luci.analysis.v1.ChangelistOwnerKindR\townerKind*R\n" +
	"\x13ChangelistOwnerKind\x12 \n" +
	"\x1cCHANGELIST_OWNER_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05HUMAN\x10\x01\x12\x0e\n" +
	"\n" +
	"AUTOMATION\x10\x02B3Z1go.chromium.org/luci/analysis/proto/v1;analysispbb\x06proto3"

var (
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_goTypes = []any{
	(ChangelistOwnerKind)(0),      // 0: luci.analysis.v1.ChangelistOwnerKind
	(*Sources)(nil),               // 1: luci.analysis.v1.Sources
	(*GitilesCommit)(nil),         // 2: luci.analysis.v1.GitilesCommit
	(*SubmittedAndroidBuild)(nil), // 3: luci.analysis.v1.SubmittedAndroidBuild
	(*GerritChange)(nil),          // 4: luci.analysis.v1.GerritChange
	(*SourceRef)(nil),             // 5: luci.analysis.v1.SourceRef
	(*GitilesRef)(nil),            // 6: luci.analysis.v1.GitilesRef
	(*AndroidBuildBranch)(nil),    // 7: luci.analysis.v1.AndroidBuildBranch
	(*Changelist)(nil),            // 8: luci.analysis.v1.Changelist
}
var file_go_chromium_org_luci_analysis_proto_v1_sources_proto_depIdxs = []int32{
	2, // 0: luci.analysis.v1.Sources.gitiles_commit:type_name -> luci.analysis.v1.GitilesCommit
	3, // 1: luci.analysis.v1.Sources.submitted_android_build:type_name -> luci.analysis.v1.SubmittedAndroidBuild
	4, // 2: luci.analysis.v1.Sources.changelists:type_name -> luci.analysis.v1.GerritChange
	0, // 3: luci.analysis.v1.GerritChange.owner_kind:type_name -> luci.analysis.v1.ChangelistOwnerKind
	6, // 4: luci.analysis.v1.SourceRef.gitiles:type_name -> luci.analysis.v1.GitilesRef
	7, // 5: luci.analysis.v1.SourceRef.android_build:type_name -> luci.analysis.v1.AndroidBuildBranch
	0, // 6: luci.analysis.v1.Changelist.owner_kind:type_name -> luci.analysis.v1.ChangelistOwnerKind
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_sources_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_sources_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_sources_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[0].OneofWrappers = []any{
		(*Sources_GitilesCommit)(nil),
		(*Sources_SubmittedAndroidBuild)(nil),
	}
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes[4].OneofWrappers = []any{
		(*SourceRef_Gitiles)(nil),
		(*SourceRef_AndroidBuild)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_sources_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_sources_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_sources_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_proto_v1_sources_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_sources_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_sources_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_depIdxs = nil
}
