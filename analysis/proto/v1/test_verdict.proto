// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.analysis.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/analysis/proto/v1/sources.proto";

option go_package = "go.chromium.org/luci/analysis/proto/v1;analysispb";


// Status of a test result.
// It is a mirror of luci.resultdb.v1.TestStatus, but the right to evolve
// it independently is reserved.
enum TestResultStatus {
  // Status was not specified.
  // Not to be used in actual test results; serves as a default value for an
  // unset field.
  TEST_RESULT_STATUS_UNSPECIFIED = 0;

  // The test case has passed.
  PASS = 1;

  // The test case has failed.
  // Suggests that the code under test is incorrect, but it is also possible
  // that the test is incorrect or it is a flake.
  FAIL = 2;

  // The test case has crashed during execution.
  // The outcome is inconclusive: the code under test might or might not be
  // correct, but the test+code is incorrect.
  CRASH = 3;

  // The test case has started, but was aborted before finishing.
  // A common reason: timeout.
  ABORT = 4;

  // The test case did not execute.
  // Examples:
  // - The execution of the collection of test cases, such as a test
  //   binary, was aborted prematurely and execution of some test cases was
  //   skipped.
  // - The test harness configuration specified that the test case MUST be
  //   skipped.
  SKIP = 5;
}

// Status of a test verdict.
// It is a mirror of luci.resultdb.v1.TestVariantStatus.
enum TestVerdictStatus {
  // a test verdict must not have this status.
  // This is only used when filtering verdicts.
  TEST_VERDICT_STATUS_UNSPECIFIED = 0;

  // The test verdict has no exonerations, and all results are unexpected.
  UNEXPECTED = 10;

  // The test verdict has no exonerations, and all results are unexpectedly skipped.
  UNEXPECTEDLY_SKIPPED = 20;

  // The test verdict has no exonerations, and has both expected and unexpected
  // results.
  FLAKY = 30;

  // The test verdict has one or more test exonerations.
  EXONERATED = 40;

  // The test verdict has no exonerations, and all results are expected.
  EXPECTED = 50;
}

message TestVerdict {
  // The test verdict status.
  // References to test statuses (passed, failed, skipped, execution_errored, precluded) in
  // the enum descriptions refer to TestResult.Status values.
  // A mirror of luci.resultdb.v1.TestVerdict.Status.
  enum Status {
    STATUS_UNSPECIFIED = 0;

    // The test has failing results and no passing results.
    FAILED = 10;

    // The test has execution errored results and no
    // passing, failing or skipped results.
    EXECUTION_ERRORED = 20;

    // The test has only precluded results.
    PRECLUDED = 30;

    // The test has both passing and failing results.
    FLAKY = 40;

    // The test skipped results and no passing or
    // failing results.
    SKIPPED = 50;

    // The test has passing results and no failing results.
    PASSED = 60;
  }

  // Overrides applying to the test verdict.
  // A mirror of luci.resultdb.v1.TestVerdict.StatusOverride.
  enum StatusOverride {
    STATUS_OVERRIDE_UNSPECIFIED = 0;

    // The test verdict is not overridden.
    //
    // To confirm a test is not exonerated prefer to check it is not EXONERATED
    // rather than check it is NOT_OVERRIDDEN, as this is safe in case of
    // extensions to this enum.
    NOT_OVERRIDDEN = 1;

    // The test variant has one or more exonerations, and the
    // test verdict status was FAILED, EXECUTION_ERRORED OR PRECLUDED.
    // An exoneration absolves the subject of the invocation (e.g. CL)
    // from blame and means means the verdict is no longer blocking.
    EXONERATED = 2;
  }

  // Unique identifier of the test.
  // This has the same value as luci.resultdb.v1.TestResult.test_id.
  string test_id = 1;

  // The hash of the variant.
  string variant_hash = 2;

  // The ID of the top-level invocation that the test verdict belongs to when
  // ingested.
  string invocation_id = 3;

  // The status of the test verdict.
  TestVerdictStatus status = 4;

  // The time the verdict's invocation was created in Spanner. This
  // is the start of the test verdict's retention period.
  google.protobuf.Timestamp partition_time = 5;

  // The average duration of the PASSED test results included in the test
  // verdict.
  google.protobuf.Duration passed_avg_duration = 6;

  // The changelist(s) that were tested, if any. If there are more 10, only
  // the first 10 are returned here.
  repeated Changelist changelists = 7;
}
