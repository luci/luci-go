// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.analysis.v1;

import "google/api/field_behavior.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/analysis/proto/v1/common.proto";
import "go.chromium.org/luci/analysis/proto/v1/sources.proto";

option go_package = "go.chromium.org/luci/analysis/proto/v1;analysispb";


// Provide methods to read data for test variant branches including
// results from changepoint analysis, and test verdicts.
//
// Use of LUCI is subject to the Google [Terms of Service](https://policies.google.com/terms)
// and [Privacy Policy](https://policies.google.com/privacy).
service TestVariantBranches {
  // Retrieves the raw state of test variant branch analysis.
  // For reading test variant branch analyses from Spanner.
  // This enables us to inspect the state of a test variant branch
  // analysis in Spanner (which cannot easily inspected using SQL queries,
  // because the data is encoded).
  // This is currently only for LUCI Analysis admin users.
  rpc GetRaw(GetRawTestVariantBranchRequest) returns (
    TestVariantBranchRaw) {};

  // Retrieves the current state of segments of test variant branch analysis in batches.
  rpc BatchGet(BatchGetTestVariantBranchRequest) returns (
    BatchGetTestVariantBranchResponse) {};

  // Query queries test variant branches for a given test id and ref.
  rpc Query(QueryTestVariantBranchRequest) returns (
    QueryTestVariantBranchResponse) {};

  // Lists source verdicts for a test variant branch.
  rpc QuerySourceVerdicts(QuerySourceVerdictsRequest) returns (QuerySourceVerdictsResponse) {};

  // Query for AI analysis of the possible culprits of a test changepoint.
  // Note: to use this RPC, you must be a member of the group `googlers`.
  rpc QueryChangepointAIAnalysis(QueryChangepointAIAnalysisRequest) returns (QueryChangepointAIAnalysisResponse) {};
}

// A request message for `TestVariantBranches.Get` RPC.
message GetRawTestVariantBranchRequest {
  // The name of the test variant branch.
  // It MUST be of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
  // where:
  // PROJECT is the LUCI Project of the test variant branch analysis.
  // URL_ESCAPED_TEST_ID is the test ID, escaped with
  // https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
  // VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
  // REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
  string name = 1
    [(google.api.field_behavior) = REQUIRED];
}

// Represents changepoint analysis raw data for a particular (project, test, variant, ref) in spanner.
message TestVariantBranchRaw {
  // The name of the test variant branch.
  // Of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
  // where:
  // PROJECT is the LUCI Project of the test variant branch analysis.
  // URL_ESCAPED_TEST_ID is the test ID, escaped with
  // https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
  // VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
  // REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
  string name = 1;

  // The LUCI Project. E.g. "chromium".
  string project = 2;

  // The identity of the test.
  string test_id = 3;

  // Hash of the variant, as 16 lowercase hexadecimal characters.
  // E.g. "96c68dc946ab4068".
  string variant_hash = 4;

  // Hash of the source branch, as 16 lowercase hexadecimal characters.
  string ref_hash = 5;

  // Describes one specific way of running the test, e.g. a specific bucket,
  // builder and a test suite.
  luci.analysis.v1.Variant variant = 6;

  // The branch in source control.
  luci.analysis.v1.SourceRef ref = 7;

  // The finalized segments in the output buffer.
  //
  // Do not depend on this field. The internal protocol buffer stored in
  // Spanner is returned here for debug purposes only. We use
  // google.protobuf.Any to avoid revealing its type and having clients
  // possibly depend on it.
  //
  // If any tool needs to read this data, a wire proto (that is different
  // from the storage proto) needs to be defined and this field replaced
  // by a field of that wire type.
  google.protobuf.Any finalized_segments = 8;

  // The finalizing segment in the output buffer.
  //
  // Do not depend on this field. The internal protocol buffer stored in
  // Spanner is returned here for debug purposes only. We use
  // google.protobuf.Any to avoid revealing its type and having clients
  // possibly depend on it.
  //
  // If any tool needs to read this data, a wire proto (that is different
  // from the storage proto) needs to be defined and this field replaced
  // by a field of that wire type.
  google.protobuf.Any finalizing_segment = 9;

  // Statistics about verdicts in the output buffer.
  //
  // Do not depend on this field. The internal protocol buffer stored in
  // Spanner is returned here for debug purposes only. We use
  // google.protobuf.Any to avoid revealing its type and having clients
  // possibly depend on it.
  //
  // If any tool needs to read this data, a wire proto (that is different
  // from the storage proto) needs to be defined and this field replaced
  // by a field of that wire type.
  google.protobuf.Any statistics = 12;

  // The hot input buffer.
  InputBuffer hot_buffer = 10;

  // The cold input buffer.
  InputBuffer cold_buffer = 11;

  // Additionally we may want to return the segmentize input buffer as well
  // (maybe to show in the UI), but we will do it when we need it.
}

// InputBuffer contains the verdict history of the test variant branch.
// It is used for both the hot buffer and the cold buffer.
message InputBuffer {
  // The number of test runs in the input buffer.
  int64 length = 1;

  // Runs, sorted by source position (oldest first), and
  // then result time (oldest first).
  repeated Run runs = 2;

  // Run represents a test run at a source position.
  message Run {
    // The source position of the run.
    int64 commitPosition = 1;

    // The time that this run was produced, truncated to the nearest hour.
    google.protobuf.Timestamp hour = 2;

    message Counts {
      // Number of expectedly passed results in the run.
      int64 expected_pass_count = 1;
      // Number of expectedly failed results in the run.
      int64 expected_fail_count = 2;
      // Number of expectedly crashed results in the run.
      int64 expected_crash_count = 3;
      // Number of expectedly aborted results in the run.
      int64 expected_abort_count = 4;
      // Number of unexpectedly passed results in the run.
      int64 unexpected_pass_count = 5;
      // Number of unexpectedly failed results in the run.
      int64 unexpected_fail_count = 6;
      // Number of unexpectedly crashed results in the run.
      int64 unexpected_crash_count = 7;
      // Number of unexpectedly aborted results in the run.
      int64 unexpected_abort_count = 8;
    }
    Counts counts = 3;
  }
}


// A request message for `TestVariantBranches.BatchGet` RPC.
message BatchGetTestVariantBranchRequest {
  // The name of the test variant branch.
  // It MUST be of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
  // where:
  // PROJECT is the LUCI Project of the test variant branch analysis.
  // URL_ESCAPED_TEST_ID is the test ID, escaped with
  // https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
  // VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
  // REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
   // Maximum of 100 can be retrieved, otherwise this RPC will return error.
  repeated string names = 1
    [(google.api.field_behavior) = REQUIRED];
}

message BatchGetTestVariantBranchResponse {
  // The return list will have the same length and order as request names list.
  // If a record is not found, the corresponding element will be set to nil.
  repeated TestVariantBranch test_variant_branches = 1;
}

// A request message for `TestVariantBranches.Query` RPC.
message QueryTestVariantBranchRequest {
  // Required. The LUCI project of the test variant branch.
  string project = 1;

  // Required. The test id of test variant branches.
  string test_id = 2;

  // Required. The source ref of test variant branches.
  luci.analysis.v1.SourceRef ref = 3;

  // The maximum number of entries to return.
  //
  // The service may return fewer than this value.
  // If unspecified, at most 100 variants will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 4;

  // A page token, received from a previous call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to the next call MUST
  // match the call that provided the page token.
  string page_token = 5;
}

message QueryTestVariantBranchResponse {
  // The list of test variant branches ordered by `variant_hash` ASC.
  repeated TestVariantBranch test_variant_branch = 1;

  // This field will be set if there are more results to return.
  // To get the next page of data, send the same request again, but include this
  // token.
  string next_page_token = 2;
}

// Represents changepoint analysis for a particular (project, test, variant, ref).
message TestVariantBranch {
  // The name of the test variant branch.
  // Of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
  // where:
  // PROJECT is the LUCI Project of the test variant branch analysis.
  // URL_ESCAPED_TEST_ID is the test ID, escaped with
  // https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
  // VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
  // REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
  string name = 1;

  // The LUCI Project. E.g. "chromium".
  string project = 2;

  // The identity of the test.
  string test_id = 3;

  // Hash of the variant, as 16 lowercase hexadecimal characters.
  // E.g. "96c68dc946ab4068".
  string variant_hash = 4;

  // Hash of the source branch, as 16 lowercase hexadecimal characters.
  string ref_hash = 5;

  // key:value pairs to specify the way of running a particular test.
  // e.g. a specific bucket, builder and a test suite.
  luci.analysis.v1.Variant variant = 6;

  // The branch in source control.
  luci.analysis.v1.SourceRef ref = 7;

  // The test history represented as a set of [start source position,
  // end source position] segments, where segments have statistically
  // different failure and/or flake rates. The segments are ordered so that
  // the most recent segment appears first.
  // If a client is only interested in the current failure/flake rate, they
  // can just query the first segment.
  repeated Segment segments = 8;
}


// Represents a period in history where the test had a consistent failure and
// flake rate. Segments are separated by changepoints. Each segment captures
// information about the changepoint which started it.
// Same structure with bigquery proto here, but make a separate copy to allow it to evolve over time.
// https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/analysis/proto/bq/test_variant_branch_row.proto;l=80
//
// Next ID: 10.
message Segment {
  // If set, means the segment commenced with a changepoint.
  // If unset, means the segment began with the beginning of recorded
  // history for the segment. (All recorded history for a test variant branch
  // is deleted after 90 days of no results, so this means there were
  // no results for at least 90 days before the segment.)
  bool has_start_changepoint = 1;

  // The nominal source position at which the segment starts (inclusive).
  // Guaranteed to be strictly greater than the end_position of the
  // chronologically previous segment (if any).
  // If this segment has a starting changepoint, this is the nominal position
  // of the changepoint (when the new test behaviour started).
  // If this segment does not have a starting changepoint, this is the
  // simply the first source position in the known history of the test.
  int64 start_position = 2;

  // The lower bound of the starting changepoint position in a 99% two-tailed
  // confidence interval. Exclusive.
  // Only set if has_start_changepoint is set.
  int64 start_position_lower_bound_99th = 3;

  // The upper bound of the starting changepoint position in a 99% two-tailed
  // confidence interval. Inclusive.
  // Only set if has_start_changepoint is set.
  // When has_start_changepoint is set, the following invariant holds:
  // previous_segment.start_position <= start_position_lower_bound_99th <= start_position_upper_bound_99th <= end_position
  // where previous_segment refers to the chronologically previous segment.
  int64 start_position_upper_bound_99th = 4;

  message PositionDistribution {
    // Changepoint position cumulative distribution function (CDF) probability
    // values at which the distribution is characterised. These are values
    // between 0.0 and 1.0.
    //
    // This distribution is guaranteed to have points sufficient to allow
    // exact extraction of 99.9%, 99%, 95%, 90%, 80%, 70%, 60%, 50% two-tailed
    // confidence intervals, and the distribution median (CDF = 0.5).
    //
    // Usage: to estimate the 99% confidence interval (two-tail), find the
    // index of the cdf equal to 0.005 (i.e. (1-CI)/2) and the index of the
    // cdf equal to or greater than 0.995 (i.e. 1-((1-CI)/2)).
    // Then lookup the corresponding source positions in source_positions.
    //
    // This array is sorted in ascending order.
    repeated double cdfs = 1;
    // The source positions corresponding to each of the above cdf values.
    // I.E. source_positions[i] corresponds to cfs[i].
    //
    // The probability of a changepoint occurring at or before source_positions[i]
    // is at least cdfs[i].
    //
    // Invariant: length(source_positions) == len(cdfs).
    //
    // Because cdfs is in ascending order, this array is also in ascending
    // order.
    repeated int64 source_positions = 2;
  }

  // The starting changepoint position distribution. Only available for new
  // changepoints detected from ~July 2024 onwards.
  PositionDistribution start_position_distribution = 9;

  // The earliest hour a test run at the indicated start_position
  // was recorded. Gives an approximate upper bound on the timestamp the
  // changepoint occurred, for systems which need to filter by date.
  google.protobuf.Timestamp start_hour = 5;

  // The nominal source position at which the segment ends (inclusive).
  // This is either the last recorded source position in the test history
  // (for this test variant branch), or the position of the last run
  // seen before the next detected changepoint.
  int64 end_position = 6;

  // The latest hour a test run at the indicated end_position
  // was recorded. Gives an approximate lower bound on the  timestamp
  // the changepoint occurred, for systems which need to filter by date.
  google.protobuf.Timestamp end_hour = 7;

  // Counts of source verdicts over a time period. Includes only
  // test results for submitted code changes. This is defined as:
  // (1) where the code under test was already submitted when the test ran
  //       (e.g. postsubmit builders)
  // (2) where the code under test was not submitted at the time the test ran,
  //     but was submitted immediately after (e.g. because the tests ran as part
  //     of a tryjob, the presubmit run the tryjob was triggered by succeeded,
  //     and submitted code as a result).
  //     Currently, when test results lead to CL submission via recycled CQ runs,
  //     they are not counted.
  // Source verdicts represent the aggregation of all test results at a given
  // source position.
  //
  // Statistics for test results and test runs can be added here when needed.
  message Counts {
    // The number of unexpected non-skipped test results.
    int32 unexpected_results = 1;

    // The total number of non-skipped test results.
    int32 total_results = 2;

    // The number of expected passed test results.
    int32 expected_passed_results = 3;

    // The number of expected failed test results.
    int32 expected_failed_results = 4;

    // The number of expected crashed test results.
    int32 expected_crashed_results = 5;

    // The number of expected aborted test results.
    int32 expected_aborted_results = 6;

    // The number of unexpected passed test results.
    int32 unexpected_passed_results = 7;

    // The number of unexpected failed test results.
    int32 unexpected_failed_results = 8;

    // The number of unexpected crashed test results.
    int32 unexpected_crashed_results = 9;

    // The number of unexpected aborted test results.
    int32 unexpected_aborted_results = 10;

    // The number of test runs which had an unexpected test result but were
    // not retried.
    int32 unexpected_unretried_runs = 11;

    // The number of test run which had an unexpected test result, were
    // retried, and still contained only unexpected test results.
    int32 unexpected_after_retry_runs = 12;

    // The number of test runs which had an unexpected test result, were
    // retried, and eventually recorded an expected test result.
    int32 flaky_runs = 13;

    // The total number of test runs.
    int32 total_runs = 14;

    // The number of source verdicts with only unexpected test results.
    // A source verdict refers to all test results at a source position.
    int32 unexpected_verdicts = 15;

    // The number of source verdicts with a mix of expected and unexpected test results.
    // A source verdict refers to all test results at a source position.
    // As such, is a signal of either in- or cross- build flakiness.
    int32 flaky_verdicts = 16;

    // The total number of source verdicts.
    // A source verdict refers to all test results at a source position.
    // As such, this is also the total number of source positions with
    // test results in the segment.
    int32 total_verdicts = 17;
  }

  // Total number of test results/runs/verdicts in the segment.
  Counts counts = 8;
}

message QuerySourceVerdictsRequest {
  // The name of the test variant branch to query.
  // It MUST be of the form projects/{PROJECT}/tests/{URL_ESCAPED_TEST_ID}/variants/{VARIANT_HASH}/refs/{REF_HASH}
  // where:
  // PROJECT is the LUCI Project of the test variant branch analysis.
  // URL_ESCAPED_TEST_ID is the test ID, escaped with
  // https://golang.org/pkg/net/url/#PathEscape. See also https://aip.dev/122.
  // VARIANT_HASH is the variant hash of the test variant analysis (16 lower-case-character hex string).
  // REF_HASH is the identity of the branch of the analysis. It is a 16 lower-case-character hex string.
  string parent = 1;
  // The source position to start querying from, inclusive. This is the maximum source
  // position to be returned in the response.
  //
  // Note: The start is the maximum source position (not the minimum) as this RPC
  // is designed for UIs that paginate backwards through source history.
  int64 start_source_position = 2;
  // The source position to stop querying at, exclusive. This is an exclusive lower
  // bound on the source positions returned in the response. As this is a lower bound,
  // it is required that end_source_position < start_source_position.
  //
  // In addition, no more than 1,000 source positions may be requested in one call,
  // i.e. start_source_position - end_source_position <= 1,000.
  int64 end_source_position = 3;
}

message QuerySourceVerdictsResponse {
  // VerdictStatus represents the status of a verdict as it is
  // seen by changepoint analysis. Changepoint analysis does not consider skipped
  // test results or exonerations.
  enum VerdictStatus {
    VERDICT_EXPECTATION_STATUS_UNSPECIFIED = 0;
    // The verdict (excluding skips) has only unexpected results.
    UNEXPECTED = 1;
    // The verdict (excluding skips) has only expected results.
    EXPECTED = 2;
    // The verdict (excluding skips) has a mix of expected and unexpected results.
    FLAKY = 3;
    // The verdict has only skips, and as such was not used in change
    // point analysis.
    SKIPPED = 4;
  }
  // Test verdict is the aggregation of test results of a test variant in an invocation.
  message TestVerdict {
    // The ID of the top-level invocation that the test verdict belongs to.
    string invocation_id = 1;
    // The partition time of the test verdict.
    google.protobuf.Timestamp partition_time = 2;
    // The status of the test verdict as it is interpreted by changepoint analysis.
    VerdictStatus status = 3;
    // The changelist(s) that were tested, if any. If there are more 10, only
    // the first 10 are returned here.
    repeated Changelist changelists = 4;
  }
  // Source verdict is the aggregation of test results of a test variant at a source position.
  message SourceVerdict {
    // The source position.
    int64 position = 1;
    // The overall status of the source verdict. Due to limitations in the implementation,
    // this currently reflects the aggregation of all test verdicts included in the
    // source verdict, and may include verdicts for unsubmitted code. As such, it may
    // differ from the actual source verdict status as used in change point analysis.
    VerdictStatus status = 2;
    // The test verdicts at the source position. Note some of these test verdicts
    // may have not been used in change point analysis as they pertain to test results
    // for unsubmitted code.
    // Test verdicts will be ordered by ascending partition time, i.e. earliest test
    // verdict first.
    // Limited to at most 20 test verdicts.
    repeated TestVerdict verdicts = 3;
  }
  // Source verdicts in descending source position order. Only source verdicts
  // with test results are returned.
  repeated SourceVerdict source_verdicts = 1;
}

message QueryChangepointAIAnalysisRequest {
  // The LUCI project.
  string project = 1;
  // The identifier of a test.
  string test_id = 2;
  // The hash of the variant.
  string variant_hash = 3;
  // Hash of the source branch, as 16 lowercase hexadecimal characters.
  string ref_hash = 4;
  // The nominal starting source position of the changepoint to query.
  // As the change point analysis is constantly changing and the current
  // nominal start position of the changepoint may have moved, the changepoint
  // nearest the queried position is returned.
  // If no changepoint is found near the given position, the error NOT_FOUND
  // is returned.
  int64 start_source_position = 5;
  // Settings to control the prompt used. To assist experimentation.
  // Optional.
  PromptOptions prompt_options = 6;

  message PromptOptions {
    // The prompt prefix to use. If set, replaces the
    // default prompt prefix. Optional.
    string prefix = 1;

    // The prompt suffix to use. If set, replaces the
    // default prompt suffix. Optional.
    string suffix = 2;

    // TODO: Add options to control how CL details are presented
    // to the model.
  }
}

message QueryChangepointAIAnalysisResponse {
  // The AI-generated analysis markdown. This content is produced by
  // generative AI and is experimental.
  string analysis_markdown = 1;

  // The prompt provided to generative AI. For debugging purposes only.
  string prompt = 2;
}
