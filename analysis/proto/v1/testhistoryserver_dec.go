// Code generated by svcdec; DO NOT EDIT.

package analysispb

import (
	"context"

	proto "github.com/golang/protobuf/proto"
)

type DecoratedTestHistory struct {
	// Service is the service to decorate.
	Service TestHistoryServer
	// Prelude is called for each method before forwarding the call to Service.
	// If Prelude returns an error, then the call is skipped and the error is
	// processed via the Postlude (if one is defined), or it is returned directly.
	Prelude func(ctx context.Context, methodName string, req proto.Message) (context.Context, error)
	// Postlude is called for each method after Service has processed the call, or
	// after the Prelude has returned an error. This takes the Service's
	// response proto (which may be nil) and/or any error. The decorated
	// service will return the response (possibly mutated) and error that Postlude
	// returns.
	Postlude func(ctx context.Context, methodName string, rsp proto.Message, err error) error
}

func (s *DecoratedTestHistory) Query(ctx context.Context, req *QueryTestHistoryRequest) (rsp *QueryTestHistoryResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "Query", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.Query(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "Query", rsp, err)
	}
	return
}

func (s *DecoratedTestHistory) QueryStats(ctx context.Context, req *QueryTestHistoryStatsRequest) (rsp *QueryTestHistoryStatsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryStats", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryStats(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryStats", rsp, err)
	}
	return
}

func (s *DecoratedTestHistory) QueryVariants(ctx context.Context, req *QueryVariantsRequest) (rsp *QueryVariantsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryVariants", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryVariants(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryVariants", rsp, err)
	}
	return
}

func (s *DecoratedTestHistory) QueryTests(ctx context.Context, req *QueryTestsRequest) (rsp *QueryTestsResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryTests", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryTests(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryTests", rsp, err)
	}
	return
}

func (s *DecoratedTestHistory) QueryRecentPasses(ctx context.Context, req *QueryRecentPassesRequest) (rsp *QueryRecentPassesResponse, err error) {
	if s.Prelude != nil {
		var newCtx context.Context
		newCtx, err = s.Prelude(ctx, "QueryRecentPasses", req)
		if err == nil {
			ctx = newCtx
		}
	}
	if err == nil {
		rsp, err = s.Service.QueryRecentPasses(ctx, req)
	}
	if s.Postlude != nil {
		err = s.Postlude(ctx, "QueryRecentPasses", rsp, err)
	}
	return
}
