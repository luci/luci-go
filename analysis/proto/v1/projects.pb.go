// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/proto/v1/projects.proto

package analysispb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request object with data to fetch the list of projects configured
// in LUCI Analysis.
type ListProjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{0}
}

// A response containing the list of projects which are are using
// LUCI Analysis.
type ListProjectsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of projects using LUCI Analysis.
	Projects      []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{1}
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type GetProjectConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project configuration to retrieve.
	// Format: projects/{project}/config.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectConfigRequest) Reset() {
	*x = GetProjectConfigRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectConfigRequest) ProtoMessage() {}

func (x *GetProjectConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectConfigRequest.ProtoReflect.Descriptor instead.
func (*GetProjectConfigRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProjectConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource name of the project configuration.
	// Format: projects/{project}/config.
	// See also https://google.aip.dev/122.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration for automatic bug management.
	BugManagement *BugManagement `protobuf:"bytes,6,opt,name=bug_management,json=bugManagement,proto3" json:"bug_management,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectConfig) Reset() {
	*x = ProjectConfig{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectConfig) ProtoMessage() {}

func (x *ProjectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectConfig.ProtoReflect.Descriptor instead.
func (*ProjectConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{3}
}

func (x *ProjectConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectConfig) GetBugManagement() *BugManagement {
	if x != nil {
		return x.BugManagement
	}
	return nil
}

// Settings related to bug management.
type BugManagement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of policies which control the (re-)opening, closure and
	// prioritization of bugs under the control of LUCI Analysis.
	Policies []*BugManagementPolicy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// Monorail-specific bug filing configuration.
	Monorail      *MonorailProject `protobuf:"bytes,2,opt,name=monorail,proto3" json:"monorail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BugManagement) Reset() {
	*x = BugManagement{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagement) ProtoMessage() {}

func (x *BugManagement) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagement.ProtoReflect.Descriptor instead.
func (*BugManagement) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{4}
}

func (x *BugManagement) GetPolicies() []*BugManagementPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *BugManagement) GetMonorail() *MonorailProject {
	if x != nil {
		return x.Monorail
	}
	return nil
}

// A bug management policy in LUCI Analysis.
//
// Bug management policies control when and how bugs are automatically
// opened, prioritised, and verified as fixed. Each policy has a user-visible
// identity in the UI and can post custom instructions on the bug.
//
// LUCI Analysis avoids filing multiple bugs for the same failures by
// allowing multiple policies to activate on the same failure association
// rule. The bug associated with a rule will only be verified if all policies
// have de-activated.
type BugManagementPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier for the bug management policy.
	//
	// Policies are stateful in that LUCI Analysis tracks which bugs have met the
	// activation condition on the policy (and not since met the deactivation
	// condition).
	//
	// Changing this value changes the identity of the policy and hence results in
	// the activation state for the policy being lost for all bugs.
	//
	// Valid syntax: ^[a-z]([a-z0-9-]{0,62}[a-z0-9])?$. (Syntax designed to comply
	// with google.aip.dev/122 for resource IDs.)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The owners of the policy, who can be contacted if there are issues/concerns
	// about the policy. Each item in the list should be an @google.com email
	// address. At least one owner (preferably a group) is required.
	Owners []string `protobuf:"bytes,6,rep,name=owners,proto3" json:"owners,omitempty"`
	// A short one-line description for the problem the policy identifies, which
	// will appear on the UI and in bugs comments. This is a sentence fragment
	// and not a sentence, so please do NOT include a full stop and or starting
	// capital letter.
	//
	// For example, "test variant(s) are being exonerated in presubmit".
	HumanReadableName string `protobuf:"bytes,2,opt,name=human_readable_name,json=humanReadableName,proto3" json:"human_readable_name,omitempty"`
	// The priority of the problem this policy defines.
	//
	// If:
	//   - the priority of the bug associated with a rule
	//     differs from this priority, and
	//   - the policy is activate on the rule (see `metrics`), and
	//   - LUCI Analysis is controlling the priority of the bug
	//     (the "Update bug priority" switch on the rule is enabled),
	//
	// the priority of the bug will be updated to match this priority.
	//
	// Where are there multiple policies active on the same rule,
	// the highest priority (of all active policies) will be used.
	//
	// For monorail projects, the buganizer priority will be converted to the
	// equivalent monorail priority (P0 is converted to Pri-0, P1 to Pri-1,
	// P2 to Pri-2, etc.) until monorail is turned down.
	Priority BuganizerPriority `protobuf:"varint,3,opt,name=priority,proto3,enum=luci.analysis.v1.BuganizerPriority" json:"priority,omitempty"`
	// The set of metrics which will control activation of the bug-filing policy.
	// If a policy activates on a suggested cluster, a new bug will be filed.
	// If a policy activates on an existing rule cluster, the bug will be
	// updated.
	//
	// The policy will activate if the activation threshold is met on *ANY*
	// metric, and will de-activate only if the deactivation threshold is met
	// on *ALL* metrics.
	//
	// Activation on suggested clusters will be based on the metric values after
	// excluding failures for which a bug has already been filed. This is to
	// avoid duplicate bug filing.
	Metrics []*BugManagementPolicy_Metric `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Expanatory text of the problem the policy identified, shown on the
	// user interface when the user requests more information. Required.
	Explanation   *BugManagementPolicy_Explanation `protobuf:"bytes,5,opt,name=explanation,proto3" json:"explanation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BugManagementPolicy) Reset() {
	*x = BugManagementPolicy{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementPolicy) ProtoMessage() {}

func (x *BugManagementPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementPolicy.ProtoReflect.Descriptor instead.
func (*BugManagementPolicy) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{5}
}

func (x *BugManagementPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BugManagementPolicy) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *BugManagementPolicy) GetHumanReadableName() string {
	if x != nil {
		return x.HumanReadableName
	}
	return ""
}

func (x *BugManagementPolicy) GetPriority() BuganizerPriority {
	if x != nil {
		return x.Priority
	}
	return BuganizerPriority_BUGANIZER_PRIORITY_UNSPECIFIED
}

func (x *BugManagementPolicy) GetMetrics() []*BugManagementPolicy_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *BugManagementPolicy) GetExplanation() *BugManagementPolicy_Explanation {
	if x != nil {
		return x.Explanation
	}
	return nil
}

// MonorailProject describes the configuration to use when filing bugs
// into a given monorail project.
type MonorailProject struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The monorail project being described.
	// E.g. "chromium".
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The prefix that should appear when displaying bugs from the
	// given bug tracking system. E.g. "crbug.com" or "fxbug.dev".
	// If no prefix is specified, only the bug number will appear.
	// Otherwise, the supplifed prefix will appear, followed by a
	// forward slash ("/"), followed by the bug number.
	// Valid prefixes match `^[a-z0-9\-.]{0,64}$`.
	DisplayPrefix string `protobuf:"bytes,2,opt,name=display_prefix,json=displayPrefix,proto3" json:"display_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonorailProject) Reset() {
	*x = MonorailProject{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonorailProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonorailProject) ProtoMessage() {}

func (x *MonorailProject) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonorailProject.ProtoReflect.Descriptor instead.
func (*MonorailProject) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{6}
}

func (x *MonorailProject) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *MonorailProject) GetDisplayPrefix() string {
	if x != nil {
		return x.DisplayPrefix
	}
	return ""
}

// MetricThreshold specifies thresholds for a particular metric.
// The threshold is considered satisfied if any of the individual metric
// thresholds is met or exceeded (i.e. if multiple thresholds are set, they
// are combined using an OR-semantic). If no threshold is set, the threshold
// as a whole is unsatisfiable.
type MetricThreshold struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The threshold for one day.
	OneDay *int64 `protobuf:"varint,1,opt,name=one_day,json=oneDay,proto3,oneof" json:"one_day,omitempty"`
	// The threshold for three day.
	ThreeDay *int64 `protobuf:"varint,2,opt,name=three_day,json=threeDay,proto3,oneof" json:"three_day,omitempty"`
	// The threshold for seven days.
	SevenDay      *int64 `protobuf:"varint,3,opt,name=seven_day,json=sevenDay,proto3,oneof" json:"seven_day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricThreshold) Reset() {
	*x = MetricThreshold{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricThreshold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricThreshold) ProtoMessage() {}

func (x *MetricThreshold) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricThreshold.ProtoReflect.Descriptor instead.
func (*MetricThreshold) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{7}
}

func (x *MetricThreshold) GetOneDay() int64 {
	if x != nil && x.OneDay != nil {
		return *x.OneDay
	}
	return 0
}

func (x *MetricThreshold) GetThreeDay() int64 {
	if x != nil && x.ThreeDay != nil {
		return *x.ThreeDay
	}
	return 0
}

func (x *MetricThreshold) GetSevenDay() int64 {
	if x != nil && x.SevenDay != nil {
		return *x.SevenDay
	}
	return 0
}

// A metric used to control activation of a bug-filing policy.
type BugManagementPolicy_Metric struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the metric.
	//
	// Full list of available metrics here:
	// https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/analysis/internal/analysis/metrics/metrics.go
	MetricId string `protobuf:"bytes,1,opt,name=metric_id,json=metricId,proto3" json:"metric_id,omitempty"`
	// The level at which the policy activates. Activation occurs if the
	// cluster impact meets or exceeds this threshold.
	// MUST imply deactivation_threshold.
	ActivationThreshold *MetricThreshold `protobuf:"bytes,2,opt,name=activation_threshold,json=activationThreshold,proto3" json:"activation_threshold,omitempty"`
	// The minimum metric level at which the policy remains active.
	// Deactivation occcurs if the cluster impact is below the de-activation
	// threshold. Deactivation_threshold should be set significantly lower
	// than activation_threshold to prevent policies repeatedly activating
	// and deactivating due to noise in the data, e.g. less tests executed
	// on weekends.
	DeactivationThreshold *MetricThreshold `protobuf:"bytes,3,opt,name=deactivation_threshold,json=deactivationThreshold,proto3" json:"deactivation_threshold,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *BugManagementPolicy_Metric) Reset() {
	*x = BugManagementPolicy_Metric{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementPolicy_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementPolicy_Metric) ProtoMessage() {}

func (x *BugManagementPolicy_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementPolicy_Metric.ProtoReflect.Descriptor instead.
func (*BugManagementPolicy_Metric) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{5, 0}
}

func (x *BugManagementPolicy_Metric) GetMetricId() string {
	if x != nil {
		return x.MetricId
	}
	return ""
}

func (x *BugManagementPolicy_Metric) GetActivationThreshold() *MetricThreshold {
	if x != nil {
		return x.ActivationThreshold
	}
	return nil
}

func (x *BugManagementPolicy_Metric) GetDeactivationThreshold() *MetricThreshold {
	if x != nil {
		return x.DeactivationThreshold
	}
	return nil
}

// Content displayed on the user interface, to explain the problem and
// guide a developer to fix it.
type BugManagementPolicy_Explanation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A longer human-readable description of the problem this policy
	// has identified, in HTML.
	//
	// For example, "Test variant(s) in this cluster are being exonerated
	// (ignored) in presubmit because they are too flaky or failing. This
	// means they are no longer effective at preventing the breakage of
	// the functionality the test(s) cover.".
	//
	// MUST be sanitised by UI before rendering. Sanitisation is only
	// required to support simple uses of the following tags: ul, li, a.
	ProblemHtml string `protobuf:"bytes,1,opt,name=problem_html,json=problemHtml,proto3" json:"problem_html,omitempty"`
	// A description of how a human should go about trying to fix the
	// problem, in HTML.
	//
	// For example, "<ul>
	// <li>View recent failures</li>
	// <li><a href="http://goto.google.com/demote-from-cq">Demote</a> the test from CQ</li>
	// </ul>"
	//
	// MUST be sanitised by UI before rendering. Sanitisation is only
	// required to support simple uses of the following tags: ul, li, a.
	ActionHtml    string `protobuf:"bytes,2,opt,name=action_html,json=actionHtml,proto3" json:"action_html,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BugManagementPolicy_Explanation) Reset() {
	*x = BugManagementPolicy_Explanation{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementPolicy_Explanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementPolicy_Explanation) ProtoMessage() {}

func (x *BugManagementPolicy_Explanation) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementPolicy_Explanation.ProtoReflect.Descriptor instead.
func (*BugManagementPolicy_Explanation) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP(), []int{5, 1}
}

func (x *BugManagementPolicy_Explanation) GetProblemHtml() string {
	if x != nil {
		return x.ProblemHtml
	}
	return ""
}

func (x *BugManagementPolicy_Explanation) GetActionHtml() string {
	if x != nil {
		return x.ActionHtml
	}
	return ""
}

var File_go_chromium_org_luci_analysis_proto_v1_projects_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDesc = string([]byte{
	0x0a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x62, 0x75, 0x67, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08,
	0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x22, 0xf6, 0x04, 0x0a, 0x13,
	0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x67,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd5, 0x01, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x54, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x58, 0x0a, 0x16, 0x64, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x15, 0x64, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x1a, 0x51, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x68, 0x74, 0x6d, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x48,
	0x74, 0x6d, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x74,
	0x6d, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x74, 0x6d, 0x6c, 0x22, 0x58, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x9b,
	0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x65, 0x44, 0x61, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x79,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x32, 0xbe, 0x01, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a,
	0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_go_chromium_org_luci_analysis_proto_v1_projects_proto_goTypes = []any{
	(*ListProjectsRequest)(nil),             // 0: luci.analysis.v1.ListProjectsRequest
	(*ListProjectsResponse)(nil),            // 1: luci.analysis.v1.ListProjectsResponse
	(*GetProjectConfigRequest)(nil),         // 2: luci.analysis.v1.GetProjectConfigRequest
	(*ProjectConfig)(nil),                   // 3: luci.analysis.v1.ProjectConfig
	(*BugManagement)(nil),                   // 4: luci.analysis.v1.BugManagement
	(*BugManagementPolicy)(nil),             // 5: luci.analysis.v1.BugManagementPolicy
	(*MonorailProject)(nil),                 // 6: luci.analysis.v1.MonorailProject
	(*MetricThreshold)(nil),                 // 7: luci.analysis.v1.MetricThreshold
	(*BugManagementPolicy_Metric)(nil),      // 8: luci.analysis.v1.BugManagementPolicy.Metric
	(*BugManagementPolicy_Explanation)(nil), // 9: luci.analysis.v1.BugManagementPolicy.Explanation
	(*Project)(nil),                         // 10: luci.analysis.v1.Project
	(BuganizerPriority)(0),                  // 11: luci.analysis.v1.BuganizerPriority
}
var file_go_chromium_org_luci_analysis_proto_v1_projects_proto_depIdxs = []int32{
	10, // 0: luci.analysis.v1.ListProjectsResponse.projects:type_name -> luci.analysis.v1.Project
	4,  // 1: luci.analysis.v1.ProjectConfig.bug_management:type_name -> luci.analysis.v1.BugManagement
	5,  // 2: luci.analysis.v1.BugManagement.policies:type_name -> luci.analysis.v1.BugManagementPolicy
	6,  // 3: luci.analysis.v1.BugManagement.monorail:type_name -> luci.analysis.v1.MonorailProject
	11, // 4: luci.analysis.v1.BugManagementPolicy.priority:type_name -> luci.analysis.v1.BuganizerPriority
	8,  // 5: luci.analysis.v1.BugManagementPolicy.metrics:type_name -> luci.analysis.v1.BugManagementPolicy.Metric
	9,  // 6: luci.analysis.v1.BugManagementPolicy.explanation:type_name -> luci.analysis.v1.BugManagementPolicy.Explanation
	7,  // 7: luci.analysis.v1.BugManagementPolicy.Metric.activation_threshold:type_name -> luci.analysis.v1.MetricThreshold
	7,  // 8: luci.analysis.v1.BugManagementPolicy.Metric.deactivation_threshold:type_name -> luci.analysis.v1.MetricThreshold
	2,  // 9: luci.analysis.v1.Projects.GetConfig:input_type -> luci.analysis.v1.GetProjectConfigRequest
	0,  // 10: luci.analysis.v1.Projects.List:input_type -> luci.analysis.v1.ListProjectsRequest
	3,  // 11: luci.analysis.v1.Projects.GetConfig:output_type -> luci.analysis.v1.ProjectConfig
	1,  // 12: luci.analysis.v1.Projects.List:output_type -> luci.analysis.v1.ListProjectsResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_projects_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_projects_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_projects_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_v1_issue_tracking_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_project_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_projects_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_projects_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_projects_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_projects_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_projects_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_projects_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_projects_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProjectsClient is the client API for Projects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectsClient interface {
	// Gets LUCI Analysis configuration for a LUCI Project.
	//
	// RPC desigend to comply with https://google.aip.dev/131.
	GetConfig(ctx context.Context, in *GetProjectConfigRequest, opts ...grpc.CallOption) (*ProjectConfig, error)
	// Lists LUCI Projects visible to the user.
	//
	// RPC compliant with https://google.aip.dev/132.
	// This RPC is incomplete. Future breaking changes are
	// expressly flagged.
	List(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
}
type projectsPRPCClient struct {
	client *prpc.Client
}

func NewProjectsPRPCClient(client *prpc.Client) ProjectsClient {
	return &projectsPRPCClient{client}
}

func (c *projectsPRPCClient) GetConfig(ctx context.Context, in *GetProjectConfigRequest, opts ...grpc.CallOption) (*ProjectConfig, error) {
	out := new(ProjectConfig)
	err := c.client.Call(ctx, "luci.analysis.v1.Projects", "GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsPRPCClient) List(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Projects", "List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type projectsClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsClient(cc grpc.ClientConnInterface) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) GetConfig(ctx context.Context, in *GetProjectConfigRequest, opts ...grpc.CallOption) (*ProjectConfig, error) {
	out := new(ProjectConfig)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Projects/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) List(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Projects/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServer is the server API for Projects service.
type ProjectsServer interface {
	// Gets LUCI Analysis configuration for a LUCI Project.
	//
	// RPC desigend to comply with https://google.aip.dev/131.
	GetConfig(context.Context, *GetProjectConfigRequest) (*ProjectConfig, error)
	// Lists LUCI Projects visible to the user.
	//
	// RPC compliant with https://google.aip.dev/132.
	// This RPC is incomplete. Future breaking changes are
	// expressly flagged.
	List(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
}

// UnimplementedProjectsServer can be embedded to have forward compatible implementations.
type UnimplementedProjectsServer struct {
}

func (*UnimplementedProjectsServer) GetConfig(context.Context, *GetProjectConfigRequest) (*ProjectConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedProjectsServer) List(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterProjectsServer(s prpc.Registrar, srv ProjectsServer) {
	s.RegisterService(&_Projects_serviceDesc, srv)
}

func _Projects_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Projects/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetConfig(ctx, req.(*GetProjectConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Projects/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).List(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Projects_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.analysis.v1.Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Projects_GetConfig_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Projects_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/analysis/proto/v1/projects.proto",
}
