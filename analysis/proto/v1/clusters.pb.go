// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/proto/v1/clusters.proto

package analysispb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterSummaryView int32

const (
	// The default / unset value.
	// The API will default to the BASIC view.
	ClusterSummaryView_CLUSTER_SUMMARY_VIEW_UNSPECIFIED ClusterSummaryView = 0
	// Include most fields in the cluster summary, EXCLUDING
	// daily breakdowns of the cluster's impact metrics.
	ClusterSummaryView_BASIC ClusterSummaryView = 1
	// Include everything in the cluster summary.
	ClusterSummaryView_FULL ClusterSummaryView = 2
)

// Enum value maps for ClusterSummaryView.
var (
	ClusterSummaryView_name = map[int32]string{
		0: "CLUSTER_SUMMARY_VIEW_UNSPECIFIED",
		1: "BASIC",
		2: "FULL",
	}
	ClusterSummaryView_value = map[string]int32{
		"CLUSTER_SUMMARY_VIEW_UNSPECIFIED": 0,
		"BASIC":                            1,
		"FULL":                             2,
	}
)

func (x ClusterSummaryView) Enum() *ClusterSummaryView {
	p := new(ClusterSummaryView)
	*p = x
	return p
}

func (x ClusterSummaryView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterSummaryView) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_enumTypes[0].Descriptor()
}

func (ClusterSummaryView) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_enumTypes[0]
}

func (x ClusterSummaryView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterSummaryView.Descriptor instead.
func (ClusterSummaryView) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{0}
}

type ClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project for which the test result should be clustered.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The test results to cluster. At most 1000 test results may be
	// clustered in one request.
	TestResults   []*ClusterRequest_TestResult `protobuf:"bytes,2,rep,name=test_results,json=testResults,proto3" json:"test_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterRequest) Reset() {
	*x = ClusterRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRequest) ProtoMessage() {}

func (x *ClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRequest.ProtoReflect.Descriptor instead.
func (*ClusterRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{0}
}

func (x *ClusterRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterRequest) GetTestResults() []*ClusterRequest_TestResult {
	if x != nil {
		return x.TestResults
	}
	return nil
}

type ClusterResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The clusters each test result is in.
	// Contains one result for each test result specified in the request.
	// Results are provided in the same order as the request, so
	// the i-th ClusteredTestResult corresponds to the i-th
	// TestResult in the request.
	ClusteredTestResults []*ClusterResponse_ClusteredTestResult `protobuf:"bytes,1,rep,name=clustered_test_results,json=clusteredTestResults,proto3" json:"clustered_test_results,omitempty"`
	// The versions of clustering algorithms, rules and project configuration
	// used to service this request. For debugging purposes only.
	ClusteringVersion *ClusteringVersion `protobuf:"bytes,2,opt,name=clustering_version,json=clusteringVersion,proto3" json:"clustering_version,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClusterResponse) Reset() {
	*x = ClusterResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponse) ProtoMessage() {}

func (x *ClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponse.ProtoReflect.Descriptor instead.
func (*ClusterResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{1}
}

func (x *ClusterResponse) GetClusteredTestResults() []*ClusterResponse_ClusteredTestResult {
	if x != nil {
		return x.ClusteredTestResults
	}
	return nil
}

func (x *ClusterResponse) GetClusteringVersion() *ClusteringVersion {
	if x != nil {
		return x.ClusteringVersion
	}
	return nil
}

// The versions of algorithms, rules and configuration used by LUCI Analysis
// to cluster test results. For a given test result and ClusteringVersion,
// the set of returned clusters should always be the same.
type ClusteringVersion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The version of clustering algorithms used.
	AlgorithmsVersion int32 `protobuf:"varint,1,opt,name=algorithms_version,json=algorithmsVersion,proto3" json:"algorithms_version,omitempty"`
	// The version of failure association rules used. This is the Spanner
	// commit timestamp of the last rule modification incorporated in the
	// set of rules used to cluster the results.
	RulesVersion *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=rules_version,json=rulesVersion,proto3" json:"rules_version,omitempty"`
	// The version of project configuration used. This is the timestamp
	// the project configuration was ingested by LUCI Analysis.
	ConfigVersion *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusteringVersion) Reset() {
	*x = ClusteringVersion{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusteringVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteringVersion) ProtoMessage() {}

func (x *ClusteringVersion) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteringVersion.ProtoReflect.Descriptor instead.
func (*ClusteringVersion) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{2}
}

func (x *ClusteringVersion) GetAlgorithmsVersion() int32 {
	if x != nil {
		return x.AlgorithmsVersion
	}
	return 0
}

func (x *ClusteringVersion) GetRulesVersion() *timestamppb.Timestamp {
	if x != nil {
		return x.RulesVersion
	}
	return nil
}

func (x *ClusteringVersion) GetConfigVersion() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfigVersion
	}
	return nil
}

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the cluster to retrieve.
	// Format: projects/{project}/clusters/{cluster_algorithm}/{cluster_id}.
	// Designed to conform to aip.dev/131.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{3}
}

func (x *GetClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Cluster struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the cluster.
	// Format: projects/{project}/clusters/{cluster_algorithm}/{cluster_id}.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether there is a recent example in the cluster.
	HasExample bool `protobuf:"varint,2,opt,name=has_example,json=hasExample,proto3" json:"has_example,omitempty"`
	// A human-readable name for the cluster.
	// Only populated for suggested clusters where has_example = true.
	// Not populated for rule-based clusters.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// The values of metrics associated with the cluster. The map key is the ID
	// of the metric (e.g. "human-cls-failed-presubmit").
	//
	// The following metrics are currently defined:
	//   - "human-cls-failed-presubmit":
	//     The number of distinct developer changelists that failed at least one
	//     presubmit (CQ) run because of failure(s) in this cluster. Excludes
	//     changelists authored by automation.
	//   - "critical-failures-exonerated":
	//     The number of failures on test variants which were configured to be
	//     presubmit-blocking, which were exonerated (i.e. did not actually block
	//     presubmit) because infrastructure determined the test variant to be
	//     failing or too flaky at tip-of-tree. If this number is non-zero, it
	//     means a test variant which was configured to be presubmit-blocking is
	//     not stable enough to do so, and should be fixed or made non-blocking.
	//   - "failures":
	//     The total number of test results in this cluster. LUCI Analysis only
	//     clusters test results which are unexpected and have a status of crash,
	//     abort or fail, so by definition the only test results counted here
	//     will be an unexpected fail/crash/abort.
	Metrics map[string]*Cluster_TimewiseCounts `protobuf:"bytes,10,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The failure association rule equivalent to the cluster. Populated only
	// for suggested clusters where has_example = true.
	// Not populated for rule-based clusters. If you need the failure
	// association rule for a rule-based cluster, use
	// luci.analysis.v1.Rules/Get to retrieve the rule with ID matching the
	// cluster ID.
	// Used to facilitate creating a new rule based on a suggested cluster.
	EquivalentFailureAssociationRule string `protobuf:"bytes,7,opt,name=equivalent_failure_association_rule,json=equivalentFailureAssociationRule,proto3" json:"equivalent_failure_association_rule,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{4}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetHasExample() bool {
	if x != nil {
		return x.HasExample
	}
	return false
}

func (x *Cluster) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Cluster) GetMetrics() map[string]*Cluster_TimewiseCounts {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Cluster) GetEquivalentFailureAssociationRule() string {
	if x != nil {
		return x.EquivalentFailureAssociationRule
	}
	return ""
}

// Designed to conform with aip.dev/131.
type GetReclusteringProgressRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the reclustering progress resource to retrieve.
	// Format: projects/{project}/reclusteringProgress.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReclusteringProgressRequest) Reset() {
	*x = GetReclusteringProgressRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReclusteringProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReclusteringProgressRequest) ProtoMessage() {}

func (x *GetReclusteringProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReclusteringProgressRequest.ProtoReflect.Descriptor instead.
func (*GetReclusteringProgressRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{5}
}

func (x *GetReclusteringProgressRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ReclusteringProgress captures the progress re-clustering a
// given LUCI project's test results using specific rules
// versions or algorithms versions.
type ReclusteringProgress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the reclustering progress resource.
	// Format: projects/{project}/reclusteringProgress.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ProgressPerMille is the progress of the current re-clustering run,
	// measured in thousandths (per mille). As such, this value ranges
	// from 0 (0% complete) to 1000 (100% complete).
	ProgressPerMille int32 `protobuf:"varint,2,opt,name=progress_per_mille,json=progressPerMille,proto3" json:"progress_per_mille,omitempty"`
	// The goal of the last completed re-clustering run.
	Last *ClusteringVersion `protobuf:"bytes,5,opt,name=last,proto3" json:"last,omitempty"`
	// The goal of the current re-clustering run. (For which
	// ProgressPerMille is specified.) This may be the same as the
	// last completed re-clustering run the available algorithm versions,
	// rules and configuration is unchanged.
	Next          *ClusteringVersion `protobuf:"bytes,6,opt,name=next,proto3" json:"next,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReclusteringProgress) Reset() {
	*x = ReclusteringProgress{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReclusteringProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReclusteringProgress) ProtoMessage() {}

func (x *ReclusteringProgress) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReclusteringProgress.ProtoReflect.Descriptor instead.
func (*ReclusteringProgress) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{6}
}

func (x *ReclusteringProgress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReclusteringProgress) GetProgressPerMille() int32 {
	if x != nil {
		return x.ProgressPerMille
	}
	return 0
}

func (x *ReclusteringProgress) GetLast() *ClusteringVersion {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *ReclusteringProgress) GetNext() *ClusteringVersion {
	if x != nil {
		return x.Next
	}
	return nil
}

type QueryClusterSummariesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// An AIP-160 style filter to select test failures in the project
	// to cluster and calculate metrics for.
	//
	// Filtering supports a subset of [AIP-160 filtering](https://google.aip.dev/160).
	//
	// All values are case-sensitive.
	//
	// A bare value is searched for in the columns test_id and
	// failure_reason. E.g. ninja or "test failed".
	//
	// You can use AND, OR and NOT (case sensitive) logical operators, along
	// with grouping. '-' is equivalent to NOT. Multiple bare values are
	// considered to be AND separated.  E.g. These are equivalent:
	// hello world
	// and:
	// hello AND world
	//
	// More examples:
	// a OR b
	// a AND NOT(b or -c)
	//
	// You can filter particular columns with '=', '!=' and ':' (has) operators.
	// The right hand side of the operator must be a simple value. E.g:
	// test_id:telemetry
	// -failure_reason:Timeout
	// ingested_invocation_id="build-8822963500388678513"
	//
	// Supported columns to search on:
	// - test_id
	// - failure_reason
	// - realm
	// - ingested_invocation_id
	// - cluster_algorithm
	// - cluster_id
	// - variant_hash
	// - test_run_id
	// - tags
	//
	// Note that cost is greatly reduced (more than 90%) if exact matches for the
	// cluster_algorithm and cluster_id field are both provided in the filter string.
	FailureFilter string `protobuf:"bytes,2,opt,name=failure_filter,json=failureFilter,proto3" json:"failure_filter,omitempty"`
	// A comma-separated list of fields to order the response by.
	//
	// The default sorting order is ascending; to specify descending order
	// for a field append a " desc" suffix. The dot syntax can be used
	// to navigate fields and map keys, and the backtick character (“) used
	// to escape field names that do not match `[a-zA-Z_][a-zA-Z0-9_]`.
	//
	// The only sortable columns that are supported currently are metric
	// fields.
	//
	// For example, to sort by human CLs failed presubmit descending, use:
	// "metrics.`human-cls-failed-presubmit`.value desc".
	// To sort by human CLs failed presubmit followed by failures, use:
	// "metrics.`human-cls-failed-presubmit`.value desc, metrics.`failures`.value desc"
	//
	// For more details, see aip.dev/132 for ordering syntax, and
	// aip.dev/161#map-fields for navigating map fields.
	OrderBy string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// The resource name(s) of the metrics to include in the cluster summaries.
	// Format: projects/{project}/metrics/{metric_id}.
	// See the metrics field on the luci.analysis.v1.Cluster message for details
	// about valid metric identifiers.
	Metrics []string `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// The time range over which to get the cluster summaries.
	// Note: the response will include only data for the portion of the
	// time range that is within the data retention period of 90 days.
	TimeRange *TimeRange `protobuf:"bytes,5,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// The level of detail that the returned cluster summaries should have. See
	// luci.analysis.v1.ClusterSummaryView.
	View          ClusterSummaryView `protobuf:"varint,6,opt,name=view,proto3,enum=luci.analysis.v1.ClusterSummaryView" json:"view,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterSummariesRequest) Reset() {
	*x = QueryClusterSummariesRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterSummariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterSummariesRequest) ProtoMessage() {}

func (x *QueryClusterSummariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterSummariesRequest.ProtoReflect.Descriptor instead.
func (*QueryClusterSummariesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{7}
}

func (x *QueryClusterSummariesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryClusterSummariesRequest) GetFailureFilter() string {
	if x != nil {
		return x.FailureFilter
	}
	return ""
}

func (x *QueryClusterSummariesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *QueryClusterSummariesRequest) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *QueryClusterSummariesRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *QueryClusterSummariesRequest) GetView() ClusterSummaryView {
	if x != nil {
		return x.View
	}
	return ClusterSummaryView_CLUSTER_SUMMARY_VIEW_UNSPECIFIED
}

type QueryClusterSummariesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The clusters and impact metrics from the filtered failures.
	ClusterSummaries []*ClusterSummary `protobuf:"bytes,1,rep,name=cluster_summaries,json=clusterSummaries,proto3" json:"cluster_summaries,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryClusterSummariesResponse) Reset() {
	*x = QueryClusterSummariesResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterSummariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterSummariesResponse) ProtoMessage() {}

func (x *QueryClusterSummariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterSummariesResponse.ProtoReflect.Descriptor instead.
func (*QueryClusterSummariesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{8}
}

func (x *QueryClusterSummariesResponse) GetClusterSummaries() []*ClusterSummary {
	if x != nil {
		return x.ClusterSummaries
	}
	return nil
}

type ClusterSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The cluster ID of this cluster.
	ClusterId *ClusterId `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// Title is a one-line description of the cluster.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The bug associated with the cluster. This will only be present for
	// rules algorithm clusters.
	Bug *AssociatedBug `protobuf:"bytes,3,opt,name=bug,proto3" json:"bug,omitempty"`
	// The values of cluster metrics. The key of the map is the identifier
	// of the metric (e.g. "human-cls-failed-presubmit").
	// See the metrics field on the luci.analysis.v1.Cluster message for details
	// about valid metric identifiers.
	Metrics       map[string]*ClusterSummary_MetricValue `protobuf:"bytes,7,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterSummary) Reset() {
	*x = ClusterSummary{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSummary) ProtoMessage() {}

func (x *ClusterSummary) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSummary.ProtoReflect.Descriptor instead.
func (*ClusterSummary) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{9}
}

func (x *ClusterSummary) GetClusterId() *ClusterId {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *ClusterSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ClusterSummary) GetBug() *AssociatedBug {
	if x != nil {
		return x.Bug
	}
	return nil
}

func (x *ClusterSummary) GetMetrics() map[string]*ClusterSummary_MetricValue {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type QueryClusterFailuresRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the cluster failures to retrieve.
	// Format: projects/{project}/clusters/{cluster_algorithm}/{cluster_id}/failures.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The resource name of the metric for which failures should
	// be displayed.
	// Format: projects/{project}/metrics/{metric_id}.
	//
	// If no metrics is specified here, then no filtering is performed
	// and all failures are eligible to be returned. Over time, we may wish
	// to migrate this to an AIP-160 filter clause, e.g. "in_metric(`metric-id`)"
	// where in_metric is a function.
	MetricFilter  string `protobuf:"bytes,2,opt,name=metric_filter,json=metricFilter,proto3" json:"metric_filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterFailuresRequest) Reset() {
	*x = QueryClusterFailuresRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterFailuresRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterFailuresRequest) ProtoMessage() {}

func (x *QueryClusterFailuresRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterFailuresRequest.ProtoReflect.Descriptor instead.
func (*QueryClusterFailuresRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{10}
}

func (x *QueryClusterFailuresRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *QueryClusterFailuresRequest) GetMetricFilter() string {
	if x != nil {
		return x.MetricFilter
	}
	return ""
}

type QueryClusterFailuresResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Example failures in the cluster.
	// Limited to the most recent 2000 examples.
	Failures      []*DistinctClusterFailure `protobuf:"bytes,1,rep,name=failures,proto3" json:"failures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterFailuresResponse) Reset() {
	*x = QueryClusterFailuresResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterFailuresResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterFailuresResponse) ProtoMessage() {}

func (x *QueryClusterFailuresResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterFailuresResponse.ProtoReflect.Descriptor instead.
func (*QueryClusterFailuresResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{11}
}

func (x *QueryClusterFailuresResponse) GetFailures() []*DistinctClusterFailure {
	if x != nil {
		return x.Failures
	}
	return nil
}

// DistinctClusterFailure represents a number of failures which have identical
// properties. This provides slightly compressed transfer of examples.
type DistinctClusterFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the test.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// Timestamp representing the start of the data retention period for the
	// test results in this group.
	// The partition time is the creation time of the ingested invocation in
	// Spanner.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// Details if the presubmit run associated with these results (if any).
	PresubmitRun *DistinctClusterFailure_PresubmitRun `protobuf:"bytes,4,opt,name=presubmit_run,json=presubmitRun,proto3" json:"presubmit_run,omitempty"`
	// Whether the build was critical to a presubmit run succeeding.
	// If the build was not part of a presubmit run, this field should
	// be ignored.
	IsBuildCritical bool `protobuf:"varint,5,opt,name=is_build_critical,json=isBuildCritical,proto3" json:"is_build_critical,omitempty"`
	// The exonerations applied to the test variant verdict.
	Exonerations []*DistinctClusterFailure_Exoneration `protobuf:"bytes,6,rep,name=exonerations,proto3" json:"exonerations,omitempty"`
	// The status of the build that contained this test result. Can be used
	// to filter incomplete results (e.g. where build was cancelled or had
	// an infra failure). Can also be used to filter builds with incomplete
	// exonerations (e.g. build succeeded but some tests not exonerated).
	// This is the build corresponding to ingested_invocation_id.
	BuildStatus BuildStatus `protobuf:"varint,7,opt,name=build_status,json=buildStatus,proto3,enum=luci.analysis.v1.BuildStatus" json:"build_status,omitempty"`
	// The invocation from which this test result was ingested. This is
	// the top-level invocation that was ingested, an "invocation" being
	// a container of test results as identified by the source test result
	// system.
	//
	// For ResultDB, LUCI Analysis ingests invocations corresponding to
	// buildbucket builds.
	IngestedInvocationId string `protobuf:"bytes,8,opt,name=ingested_invocation_id,json=ingestedInvocationId,proto3" json:"ingested_invocation_id,omitempty"`
	// Is the ingested invocation blocked by this test variant? This is
	// only true if all (non-skipped) test results for this test variant
	// (in the ingested invocation) are unexpected failures.
	//
	// Exoneration does not factor into this value; check exonerations
	// to see if the impact of this ingested invocation being blocked was
	// mitigated by exoneration.
	IsIngestedInvocationBlocked bool `protobuf:"varint,9,opt,name=is_ingested_invocation_blocked,json=isIngestedInvocationBlocked,proto3" json:"is_ingested_invocation_blocked,omitempty"`
	// The unsubmitted changelists that were tested (if any).
	// Up to 10 changelists are captured.
	Changelists []*Changelist `protobuf:"bytes,10,rep,name=changelists,proto3" json:"changelists,omitempty"`
	// The number of test results which have these properties.
	Count int32 `protobuf:"varint,11,opt,name=count,proto3" json:"count,omitempty"`
	// The first 255 characters of the failure_reason.primary_error_message
	// field of one of the test results.
	// Note that this is for saving the user a click in the UI, not for
	// analytical purposes.
	FailureReasonPrefix string `protobuf:"bytes,12,opt,name=failure_reason_prefix,json=failureReasonPrefix,proto3" json:"failure_reason_prefix,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *DistinctClusterFailure) Reset() {
	*x = DistinctClusterFailure{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinctClusterFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinctClusterFailure) ProtoMessage() {}

func (x *DistinctClusterFailure) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinctClusterFailure.ProtoReflect.Descriptor instead.
func (*DistinctClusterFailure) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{12}
}

func (x *DistinctClusterFailure) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *DistinctClusterFailure) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *DistinctClusterFailure) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *DistinctClusterFailure) GetPresubmitRun() *DistinctClusterFailure_PresubmitRun {
	if x != nil {
		return x.PresubmitRun
	}
	return nil
}

func (x *DistinctClusterFailure) GetIsBuildCritical() bool {
	if x != nil {
		return x.IsBuildCritical
	}
	return false
}

func (x *DistinctClusterFailure) GetExonerations() []*DistinctClusterFailure_Exoneration {
	if x != nil {
		return x.Exonerations
	}
	return nil
}

func (x *DistinctClusterFailure) GetBuildStatus() BuildStatus {
	if x != nil {
		return x.BuildStatus
	}
	return BuildStatus_BUILD_STATUS_UNSPECIFIED
}

func (x *DistinctClusterFailure) GetIngestedInvocationId() string {
	if x != nil {
		return x.IngestedInvocationId
	}
	return ""
}

func (x *DistinctClusterFailure) GetIsIngestedInvocationBlocked() bool {
	if x != nil {
		return x.IsIngestedInvocationBlocked
	}
	return false
}

func (x *DistinctClusterFailure) GetChangelists() []*Changelist {
	if x != nil {
		return x.Changelists
	}
	return nil
}

func (x *DistinctClusterFailure) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DistinctClusterFailure) GetFailureReasonPrefix() string {
	if x != nil {
		return x.FailureReasonPrefix
	}
	return ""
}

type QueryClusterExoneratedTestVariantsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the cluster exonerated test variants to retrieve.
	// Format: projects/{project}/clusters/{cluster_algorithm}/{cluster_id}/exoneratedTestVariants.
	Parent        string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterExoneratedTestVariantsRequest) Reset() {
	*x = QueryClusterExoneratedTestVariantsRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterExoneratedTestVariantsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterExoneratedTestVariantsRequest) ProtoMessage() {}

func (x *QueryClusterExoneratedTestVariantsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterExoneratedTestVariantsRequest.ProtoReflect.Descriptor instead.
func (*QueryClusterExoneratedTestVariantsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{13}
}

func (x *QueryClusterExoneratedTestVariantsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type QueryClusterExoneratedTestVariantsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of test variants in the cluster which have exonerated critical
	// failures. Ordered by recency of the exoneration (most recent exonerations
	// first) and limited to at most 100 test variants.
	TestVariants  []*ClusterExoneratedTestVariant `protobuf:"bytes,1,rep,name=test_variants,json=testVariants,proto3" json:"test_variants,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterExoneratedTestVariantsResponse) Reset() {
	*x = QueryClusterExoneratedTestVariantsResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterExoneratedTestVariantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterExoneratedTestVariantsResponse) ProtoMessage() {}

func (x *QueryClusterExoneratedTestVariantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterExoneratedTestVariantsResponse.ProtoReflect.Descriptor instead.
func (*QueryClusterExoneratedTestVariantsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{14}
}

func (x *QueryClusterExoneratedTestVariantsResponse) GetTestVariants() []*ClusterExoneratedTestVariant {
	if x != nil {
		return x.TestVariants
	}
	return nil
}

// ClusterExoneratedTestVariant represents a test variant in a cluster
// which has been exonerated. A cluster test variant is the subset
// of a test variant that intersects with the failures of a cluster.
type ClusterExoneratedTestVariant struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier of the test in a LUCI project.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// The number of critical (presubmit-blocking) failures in the
	// cluster which have been exonerated on this test variant
	// in the last week.
	CriticalFailuresExonerated int32 `protobuf:"varint,3,opt,name=critical_failures_exonerated,json=criticalFailuresExonerated,proto3" json:"critical_failures_exonerated,omitempty"`
	// The partition time of the most recent exoneration of a
	// critical failure.
	LastExoneration *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_exoneration,json=lastExoneration,proto3" json:"last_exoneration,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClusterExoneratedTestVariant) Reset() {
	*x = ClusterExoneratedTestVariant{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterExoneratedTestVariant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterExoneratedTestVariant) ProtoMessage() {}

func (x *ClusterExoneratedTestVariant) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterExoneratedTestVariant.ProtoReflect.Descriptor instead.
func (*ClusterExoneratedTestVariant) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{15}
}

func (x *ClusterExoneratedTestVariant) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *ClusterExoneratedTestVariant) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *ClusterExoneratedTestVariant) GetCriticalFailuresExonerated() int32 {
	if x != nil {
		return x.CriticalFailuresExonerated
	}
	return 0
}

func (x *ClusterExoneratedTestVariant) GetLastExoneration() *timestamppb.Timestamp {
	if x != nil {
		return x.LastExoneration
	}
	return nil
}

type QueryClusterExoneratedTestVariantBranchesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the cluster exonerated test variant branches to retrieve.
	// Format: projects/{project}/clusters/{cluster_algorithm}/{cluster_id}/exoneratedTestVariantBranches.
	Parent        string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterExoneratedTestVariantBranchesRequest) Reset() {
	*x = QueryClusterExoneratedTestVariantBranchesRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterExoneratedTestVariantBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterExoneratedTestVariantBranchesRequest) ProtoMessage() {}

func (x *QueryClusterExoneratedTestVariantBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterExoneratedTestVariantBranchesRequest.ProtoReflect.Descriptor instead.
func (*QueryClusterExoneratedTestVariantBranchesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{16}
}

func (x *QueryClusterExoneratedTestVariantBranchesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type QueryClusterExoneratedTestVariantBranchesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of test variants branches in the cluster which have exonerated
	// critical failures. Ordered by recency of the exoneration (most recent
	// exonerations first) and limited to at most 100 test variant branches.
	//
	// Pagination following AIP-158 may be implemented in future if
	// more than 100 items is needed.
	TestVariantBranches []*ClusterExoneratedTestVariantBranch `protobuf:"bytes,1,rep,name=test_variant_branches,json=testVariantBranches,proto3" json:"test_variant_branches,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryClusterExoneratedTestVariantBranchesResponse) Reset() {
	*x = QueryClusterExoneratedTestVariantBranchesResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterExoneratedTestVariantBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterExoneratedTestVariantBranchesResponse) ProtoMessage() {}

func (x *QueryClusterExoneratedTestVariantBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterExoneratedTestVariantBranchesResponse.ProtoReflect.Descriptor instead.
func (*QueryClusterExoneratedTestVariantBranchesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{17}
}

func (x *QueryClusterExoneratedTestVariantBranchesResponse) GetTestVariantBranches() []*ClusterExoneratedTestVariantBranch {
	if x != nil {
		return x.TestVariantBranches
	}
	return nil
}

// ClusterExoneratedTestVariantBranch represents a (test, variant, source ref)
// in a cluster which has been exonerated. A cluster test variant branch is
// the subset of a test variant branch that intersects with the failures of a
// cluster.
type ClusterExoneratedTestVariantBranch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// A unique identifier of the test in a LUCI project.
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	Variant *Variant `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// The branch in source control that was tested, if known.
	// For example, the `refs/heads/main` branch in the `chromium/src` repo
	// hosted by `chromium.googlesource.com`.
	SourceRef *SourceRef `protobuf:"bytes,4,opt,name=source_ref,json=sourceRef,proto3" json:"source_ref,omitempty"`
	// The number of critical (presubmit-blocking) failures in the
	// cluster which have been exonerated on this test variant
	// in the last week.
	CriticalFailuresExonerated int32 `protobuf:"varint,5,opt,name=critical_failures_exonerated,json=criticalFailuresExonerated,proto3" json:"critical_failures_exonerated,omitempty"`
	// The partition time of the most recent exoneration of a
	// critical failure.
	LastExoneration *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_exoneration,json=lastExoneration,proto3" json:"last_exoneration,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClusterExoneratedTestVariantBranch) Reset() {
	*x = ClusterExoneratedTestVariantBranch{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterExoneratedTestVariantBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterExoneratedTestVariantBranch) ProtoMessage() {}

func (x *ClusterExoneratedTestVariantBranch) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterExoneratedTestVariantBranch.ProtoReflect.Descriptor instead.
func (*ClusterExoneratedTestVariantBranch) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{18}
}

func (x *ClusterExoneratedTestVariantBranch) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusterExoneratedTestVariantBranch) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *ClusterExoneratedTestVariantBranch) GetVariant() *Variant {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *ClusterExoneratedTestVariantBranch) GetSourceRef() *SourceRef {
	if x != nil {
		return x.SourceRef
	}
	return nil
}

func (x *ClusterExoneratedTestVariantBranch) GetCriticalFailuresExonerated() int32 {
	if x != nil {
		return x.CriticalFailuresExonerated
	}
	return 0
}

func (x *ClusterExoneratedTestVariantBranch) GetLastExoneration() *timestamppb.Timestamp {
	if x != nil {
		return x.LastExoneration
	}
	return nil
}

type QueryClusterHistoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// An AIP-160 style filter to select test failures in the project
	// to calculate metrics for.
	//
	// See the description of the QueryClusterSummariesRequest.failure_filter
	// above for the format of this field.
	//
	// Note that cost is greatly reduced (more than 90%) if exact matches for the
	// cluster_algorithm and cluster_id field are both provided in the filter string.
	FailureFilter string `protobuf:"bytes,2,opt,name=failure_filter,json=failureFilter,proto3" json:"failure_filter,omitempty"`
	// The number of days of history to return.  Maximum of 90 as only 90 days of
	// history is kept by LUCI Analysis.  Note that the cost of the query scales
	// linearly with the number of days.
	Days int32 `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
	// The resource name(s) of the metrics to include in the cluster histories.
	// Format: projects/{project}/metrics/{metric_id}.
	// See the metrics field on the luci.analysis.v1.Cluster message for details
	// about valid metric identifiers.
	Metrics       []string `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterHistoryRequest) Reset() {
	*x = QueryClusterHistoryRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterHistoryRequest) ProtoMessage() {}

func (x *QueryClusterHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterHistoryRequest.ProtoReflect.Descriptor instead.
func (*QueryClusterHistoryRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{19}
}

func (x *QueryClusterHistoryRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *QueryClusterHistoryRequest) GetFailureFilter() string {
	if x != nil {
		return x.FailureFilter
	}
	return ""
}

func (x *QueryClusterHistoryRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *QueryClusterHistoryRequest) GetMetrics() []string {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type QueryClusterHistoryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The metrics for each day.  There will be the same number of days as
	// requested in the request.  The entries will be returned in sorted date
	// order, earliest day first.
	Days          []*ClusterHistoryDay `protobuf:"bytes,1,rep,name=days,proto3" json:"days,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryClusterHistoryResponse) Reset() {
	*x = QueryClusterHistoryResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryClusterHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryClusterHistoryResponse) ProtoMessage() {}

func (x *QueryClusterHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryClusterHistoryResponse.ProtoReflect.Descriptor instead.
func (*QueryClusterHistoryResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{20}
}

func (x *QueryClusterHistoryResponse) GetDays() []*ClusterHistoryDay {
	if x != nil {
		return x.Days
	}
	return nil
}

// Represents metrics about a cluster on a specific day.
type ClusterHistoryDay struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A map from requested metric name to the value of that metric on this day.
	// The key of the map is the metric ID.
	Metrics map[string]int32 `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// The date that these metrics are for.
	// This is a UTC date in ISO 8601 format, e.g. 2022-11-29
	Date          string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterHistoryDay) Reset() {
	*x = ClusterHistoryDay{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterHistoryDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterHistoryDay) ProtoMessage() {}

func (x *ClusterHistoryDay) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterHistoryDay.ProtoReflect.Descriptor instead.
func (*ClusterHistoryDay) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{21}
}

func (x *ClusterHistoryDay) GetMetrics() map[string]int32 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ClusterHistoryDay) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

// TestResult captures information about a test result, sufficient to
// cluster it. The fields requested here may be expanded over time.
// For example, variant information may be requested in future.
type ClusterRequest_TestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Opaque tag supplied by the caller, to be returned in the
	// response. Provided to assist correlating responses with requests.
	// Does not need to be unique. Optional.
	RequestTag string `protobuf:"bytes,1,opt,name=request_tag,json=requestTag,proto3" json:"request_tag,omitempty"`
	// Identifier of the test (as reported to ResultDB).
	// For chromium projects, this starts with ninja://.
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The failure reason of the test (if any).
	FailureReason *FailureReason `protobuf:"bytes,3,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterRequest_TestResult) Reset() {
	*x = ClusterRequest_TestResult{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterRequest_TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterRequest_TestResult) ProtoMessage() {}

func (x *ClusterRequest_TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterRequest_TestResult.ProtoReflect.Descriptor instead.
func (*ClusterRequest_TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClusterRequest_TestResult) GetRequestTag() string {
	if x != nil {
		return x.RequestTag
	}
	return ""
}

func (x *ClusterRequest_TestResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *ClusterRequest_TestResult) GetFailureReason() *FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

// The cluster(s) a test result is contained in.
type ClusterResponse_ClusteredTestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Opaque tag supplied by the caller in the request. Provided to assist
	// the caller correlate responses with requests.
	RequestTag string `protobuf:"bytes,1,opt,name=request_tag,json=requestTag,proto3" json:"request_tag,omitempty"`
	// The clusters the test result is contained within.
	Clusters      []*ClusterResponse_ClusteredTestResult_ClusterEntry `protobuf:"bytes,2,rep,name=clusters,proto3" json:"clusters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterResponse_ClusteredTestResult) Reset() {
	*x = ClusterResponse_ClusteredTestResult{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterResponse_ClusteredTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponse_ClusteredTestResult) ProtoMessage() {}

func (x *ClusterResponse_ClusteredTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponse_ClusteredTestResult.ProtoReflect.Descriptor instead.
func (*ClusterResponse_ClusteredTestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ClusterResponse_ClusteredTestResult) GetRequestTag() string {
	if x != nil {
		return x.RequestTag
	}
	return ""
}

func (x *ClusterResponse_ClusteredTestResult) GetClusters() []*ClusterResponse_ClusteredTestResult_ClusterEntry {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// An individual cluster a test result is contained in.
type ClusterResponse_ClusteredTestResult_ClusterEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier of the cluster.
	// If the algorithm is "rules", the cluster ID is also a rule ID.
	ClusterId *ClusterId `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The bug associated with the cluster, if any. This is only
	// populated for clusters defined by a failure association rule,
	// which associates specified failures to a bug.
	Bug           *AssociatedBug `protobuf:"bytes,2,opt,name=bug,proto3" json:"bug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterResponse_ClusteredTestResult_ClusterEntry) Reset() {
	*x = ClusterResponse_ClusteredTestResult_ClusterEntry{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterResponse_ClusteredTestResult_ClusterEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterResponse_ClusteredTestResult_ClusterEntry) ProtoMessage() {}

func (x *ClusterResponse_ClusteredTestResult_ClusterEntry) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterResponse_ClusteredTestResult_ClusterEntry.ProtoReflect.Descriptor instead.
func (*ClusterResponse_ClusteredTestResult_ClusterEntry) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *ClusterResponse_ClusteredTestResult_ClusterEntry) GetClusterId() *ClusterId {
	if x != nil {
		return x.ClusterId
	}
	return nil
}

func (x *ClusterResponse_ClusteredTestResult_ClusterEntry) GetBug() *AssociatedBug {
	if x != nil {
		return x.Bug
	}
	return nil
}

type Cluster_Counts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value of the metric (summed over all failures).
	Nominal       int64 `protobuf:"varint,1,opt,name=nominal,proto3" json:"nominal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster_Counts) Reset() {
	*x = Cluster_Counts{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_Counts) ProtoMessage() {}

func (x *Cluster_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_Counts.ProtoReflect.Descriptor instead.
func (*Cluster_Counts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Cluster_Counts) GetNominal() int64 {
	if x != nil {
		return x.Nominal
	}
	return 0
}

type Cluster_TimewiseCounts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The impact value for the last day.
	OneDay *Cluster_Counts `protobuf:"bytes,2,opt,name=one_day,json=oneDay,proto3" json:"one_day,omitempty"`
	// The impact value for the last three days.
	ThreeDay *Cluster_Counts `protobuf:"bytes,3,opt,name=three_day,json=threeDay,proto3" json:"three_day,omitempty"`
	// The impact value for the last week.
	SevenDay      *Cluster_Counts `protobuf:"bytes,4,opt,name=seven_day,json=sevenDay,proto3" json:"seven_day,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cluster_TimewiseCounts) Reset() {
	*x = Cluster_TimewiseCounts{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster_TimewiseCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster_TimewiseCounts) ProtoMessage() {}

func (x *Cluster_TimewiseCounts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster_TimewiseCounts.ProtoReflect.Descriptor instead.
func (*Cluster_TimewiseCounts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Cluster_TimewiseCounts) GetOneDay() *Cluster_Counts {
	if x != nil {
		return x.OneDay
	}
	return nil
}

func (x *Cluster_TimewiseCounts) GetThreeDay() *Cluster_Counts {
	if x != nil {
		return x.ThreeDay
	}
	return nil
}

func (x *Cluster_TimewiseCounts) GetSevenDay() *Cluster_Counts {
	if x != nil {
		return x.SevenDay
	}
	return nil
}

type ClusterSummary_MetricValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The residual value of the cluster metric.
	// For bug clusters, the residual metric value is the metric value
	// calculated using all of the failures in the cluster.
	// For suggested clusters, the residual metric value is calculated
	// using the failures in the cluster which are not also part of a
	// bug cluster. In this way, measures attributed to bug clusters
	// are not counted again against suggested clusters.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The value of the cluster metric over time, grouped by 24-hour periods
	// in the queried time range, in reverse chronological order
	// i.e. the first entry is the metric value for the 24-hour period
	// immediately preceding the time range's latest time.
	DailyBreakdown []int64 `protobuf:"varint,2,rep,packed,name=daily_breakdown,json=dailyBreakdown,proto3" json:"daily_breakdown,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClusterSummary_MetricValue) Reset() {
	*x = ClusterSummary_MetricValue{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterSummary_MetricValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterSummary_MetricValue) ProtoMessage() {}

func (x *ClusterSummary_MetricValue) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterSummary_MetricValue.ProtoReflect.Descriptor instead.
func (*ClusterSummary_MetricValue) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ClusterSummary_MetricValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ClusterSummary_MetricValue) GetDailyBreakdown() []int64 {
	if x != nil {
		return x.DailyBreakdown
	}
	return nil
}

// Representation of an exoneration. An exoneration means the subject of
// the test (e.g. a CL) is absolved from blame for the unexpected results
// of the test variant.
type DistinctClusterFailure_Exoneration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The machine-readable reason for the exoneration.
	Reason        ExonerationReason `protobuf:"varint,1,opt,name=reason,proto3,enum=luci.analysis.v1.ExonerationReason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistinctClusterFailure_Exoneration) Reset() {
	*x = DistinctClusterFailure_Exoneration{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinctClusterFailure_Exoneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinctClusterFailure_Exoneration) ProtoMessage() {}

func (x *DistinctClusterFailure_Exoneration) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinctClusterFailure_Exoneration.ProtoReflect.Descriptor instead.
func (*DistinctClusterFailure_Exoneration) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{12, 0}
}

func (x *DistinctClusterFailure_Exoneration) GetReason() ExonerationReason {
	if x != nil {
		return x.Reason
	}
	return ExonerationReason_EXONERATION_REASON_UNSPECIFIED
}

// Representation of a presubmit run (e.g. LUCI CV Run).
type DistinctClusterFailure_PresubmitRun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identity of the presubmit run that contains this test result.
	// This should be unique per "CQ+1"/"CQ+2" attempt on gerrit.
	//
	// One presubmit run MAY have many ingested invocation IDs (e.g. for its
	// various tryjobs), but every ingested invocation ID only ever has one
	// presubmit run ID (if any).
	//
	// If the test result was not collected as part of a presubmit run,
	// this is unset.
	PresubmitRunId *PresubmitRunId `protobuf:"bytes,1,opt,name=presubmit_run_id,json=presubmitRunId,proto3" json:"presubmit_run_id,omitempty"`
	// The owner of the presubmit run (if any).
	// This is the owner of the CL on which CQ+1/CQ+2 was clicked
	// (even in case of presubmit run with multiple CLs).
	// There is scope for this field to become an email address if privacy
	// approval is obtained, until then it is "automation" (for automation
	// service accounts) and "user" otherwise.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The mode of the presubmit run. E.g. DRY_RUN, FULL_RUN, QUICK_DRY_RUN.
	Mode PresubmitRunMode `protobuf:"varint,3,opt,name=mode,proto3,enum=luci.analysis.v1.PresubmitRunMode" json:"mode,omitempty"`
	// The status of the presubmit run. E.g. succeeded, failed or cancelled.
	Status        PresubmitRunStatus `protobuf:"varint,4,opt,name=status,proto3,enum=luci.analysis.v1.PresubmitRunStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DistinctClusterFailure_PresubmitRun) Reset() {
	*x = DistinctClusterFailure_PresubmitRun{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DistinctClusterFailure_PresubmitRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinctClusterFailure_PresubmitRun) ProtoMessage() {}

func (x *DistinctClusterFailure_PresubmitRun) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinctClusterFailure_PresubmitRun.ProtoReflect.Descriptor instead.
func (*DistinctClusterFailure_PresubmitRun) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP(), []int{12, 1}
}

func (x *DistinctClusterFailure_PresubmitRun) GetPresubmitRunId() *PresubmitRunId {
	if x != nil {
		return x.PresubmitRunId
	}
	return nil
}

func (x *DistinctClusterFailure_PresubmitRun) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *DistinctClusterFailure_PresubmitRun) GetMode() PresubmitRunMode {
	if x != nil {
		return x.Mode
	}
	return PresubmitRunMode_PRESUBMIT_RUN_MODE_UNSPECIFIED
}

func (x *DistinctClusterFailure_PresubmitRun) GetStatus() PresubmitRunStatus {
	if x != nil {
		return x.Status
	}
	return PresubmitRunStatus_PRESUBMIT_RUN_STATUS_UNSPECIFIED
}

var File_go_chromium_org_luci_analysis_proto_v1_clusters_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDesc = string([]byte{
	0x0a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4e, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0x8e, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0xea, 0x03, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x95, 0x02, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x61, 0x67, 0x12, 0x5e,
	0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x7d,
	0x0a, 0x0c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x62, 0x75,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x67, 0x52, 0x03, 0x62, 0x75, 0x67, 0x22, 0xc6, 0x01,
	0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xbb, 0x04, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4d, 0x0a, 0x23, 0x65, 0x71, 0x75, 0x69,
	0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x1a, 0x22, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x1a, 0xc9, 0x01, 0x0a, 0x0e,
	0x54, 0x69, 0x6d, 0x65, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x07, 0x6f, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x06, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08,
	0x74, 0x68, 0x72, 0x65, 0x65, 0x44, 0x61, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x65, 0x76, 0x65,
	0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x1a, 0x64, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x77, 0x69, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x22, 0x8a, 0x02, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x6e, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x96, 0x03,
	0x0a, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x62, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x67,
	0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x47, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x4c,
	0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x68, 0x0a, 0x0c,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x64, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x08,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x22, 0x87, 0x08, 0x0a, 0x16, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52,
	0x75, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x0c,
	0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x6f,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x4a, 0x0a,
	0x0b, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xe6, 0x01, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x4a, 0x0a, 0x10, 0x70, 0x72,
	0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x43, 0x0a, 0x29, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x2a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x74,
	0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x1c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x30, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0x9d, 0x01, 0x0a, 0x31, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22,
	0xd1, 0x02, 0x0a, 0x22, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x5f,
	0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x22, 0x56, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x79, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x79, 0x12,
	0x4a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x61, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x4f, 0x0a, 0x12, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x4d,
	0x4d, 0x41, 0x52, 0x59, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0xcf, 0x07, 0x0a,
	0x08, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x07, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x03, 0x47,
	0x65, 0x74, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9a, 0x01, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x6f,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaf, 0x01,
	0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x42, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_goTypes = []any{
	(ClusterSummaryView)(0),                                   // 0: luci.analysis.v1.ClusterSummaryView
	(*ClusterRequest)(nil),                                    // 1: luci.analysis.v1.ClusterRequest
	(*ClusterResponse)(nil),                                   // 2: luci.analysis.v1.ClusterResponse
	(*ClusteringVersion)(nil),                                 // 3: luci.analysis.v1.ClusteringVersion
	(*GetClusterRequest)(nil),                                 // 4: luci.analysis.v1.GetClusterRequest
	(*Cluster)(nil),                                           // 5: luci.analysis.v1.Cluster
	(*GetReclusteringProgressRequest)(nil),                    // 6: luci.analysis.v1.GetReclusteringProgressRequest
	(*ReclusteringProgress)(nil),                              // 7: luci.analysis.v1.ReclusteringProgress
	(*QueryClusterSummariesRequest)(nil),                      // 8: luci.analysis.v1.QueryClusterSummariesRequest
	(*QueryClusterSummariesResponse)(nil),                     // 9: luci.analysis.v1.QueryClusterSummariesResponse
	(*ClusterSummary)(nil),                                    // 10: luci.analysis.v1.ClusterSummary
	(*QueryClusterFailuresRequest)(nil),                       // 11: luci.analysis.v1.QueryClusterFailuresRequest
	(*QueryClusterFailuresResponse)(nil),                      // 12: luci.analysis.v1.QueryClusterFailuresResponse
	(*DistinctClusterFailure)(nil),                            // 13: luci.analysis.v1.DistinctClusterFailure
	(*QueryClusterExoneratedTestVariantsRequest)(nil),         // 14: luci.analysis.v1.QueryClusterExoneratedTestVariantsRequest
	(*QueryClusterExoneratedTestVariantsResponse)(nil),        // 15: luci.analysis.v1.QueryClusterExoneratedTestVariantsResponse
	(*ClusterExoneratedTestVariant)(nil),                      // 16: luci.analysis.v1.ClusterExoneratedTestVariant
	(*QueryClusterExoneratedTestVariantBranchesRequest)(nil),  // 17: luci.analysis.v1.QueryClusterExoneratedTestVariantBranchesRequest
	(*QueryClusterExoneratedTestVariantBranchesResponse)(nil), // 18: luci.analysis.v1.QueryClusterExoneratedTestVariantBranchesResponse
	(*ClusterExoneratedTestVariantBranch)(nil),                // 19: luci.analysis.v1.ClusterExoneratedTestVariantBranch
	(*QueryClusterHistoryRequest)(nil),                        // 20: luci.analysis.v1.QueryClusterHistoryRequest
	(*QueryClusterHistoryResponse)(nil),                       // 21: luci.analysis.v1.QueryClusterHistoryResponse
	(*ClusterHistoryDay)(nil),                                 // 22: luci.analysis.v1.ClusterHistoryDay
	(*ClusterRequest_TestResult)(nil),                         // 23: luci.analysis.v1.ClusterRequest.TestResult
	(*ClusterResponse_ClusteredTestResult)(nil),               // 24: luci.analysis.v1.ClusterResponse.ClusteredTestResult
	(*ClusterResponse_ClusteredTestResult_ClusterEntry)(nil),  // 25: luci.analysis.v1.ClusterResponse.ClusteredTestResult.ClusterEntry
	(*Cluster_Counts)(nil),                                    // 26: luci.analysis.v1.Cluster.Counts
	(*Cluster_TimewiseCounts)(nil),                            // 27: luci.analysis.v1.Cluster.TimewiseCounts
	nil,                                                       // 28: luci.analysis.v1.Cluster.MetricsEntry
	(*ClusterSummary_MetricValue)(nil),                        // 29: luci.analysis.v1.ClusterSummary.MetricValue
	nil,                                                       // 30: luci.analysis.v1.ClusterSummary.MetricsEntry
	(*DistinctClusterFailure_Exoneration)(nil),                // 31: luci.analysis.v1.DistinctClusterFailure.Exoneration
	(*DistinctClusterFailure_PresubmitRun)(nil),               // 32: luci.analysis.v1.DistinctClusterFailure.PresubmitRun
	nil,                           // 33: luci.analysis.v1.ClusterHistoryDay.MetricsEntry
	(*timestamppb.Timestamp)(nil), // 34: google.protobuf.Timestamp
	(*TimeRange)(nil),             // 35: luci.analysis.v1.TimeRange
	(*ClusterId)(nil),             // 36: luci.analysis.v1.ClusterId
	(*AssociatedBug)(nil),         // 37: luci.analysis.v1.AssociatedBug
	(*Variant)(nil),               // 38: luci.analysis.v1.Variant
	(BuildStatus)(0),              // 39: luci.analysis.v1.BuildStatus
	(*Changelist)(nil),            // 40: luci.analysis.v1.Changelist
	(*SourceRef)(nil),             // 41: luci.analysis.v1.SourceRef
	(*FailureReason)(nil),         // 42: luci.analysis.v1.FailureReason
	(ExonerationReason)(0),        // 43: luci.analysis.v1.ExonerationReason
	(*PresubmitRunId)(nil),        // 44: luci.analysis.v1.PresubmitRunId
	(PresubmitRunMode)(0),         // 45: luci.analysis.v1.PresubmitRunMode
	(PresubmitRunStatus)(0),       // 46: luci.analysis.v1.PresubmitRunStatus
}
var file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_depIdxs = []int32{
	23, // 0: luci.analysis.v1.ClusterRequest.test_results:type_name -> luci.analysis.v1.ClusterRequest.TestResult
	24, // 1: luci.analysis.v1.ClusterResponse.clustered_test_results:type_name -> luci.analysis.v1.ClusterResponse.ClusteredTestResult
	3,  // 2: luci.analysis.v1.ClusterResponse.clustering_version:type_name -> luci.analysis.v1.ClusteringVersion
	34, // 3: luci.analysis.v1.ClusteringVersion.rules_version:type_name -> google.protobuf.Timestamp
	34, // 4: luci.analysis.v1.ClusteringVersion.config_version:type_name -> google.protobuf.Timestamp
	28, // 5: luci.analysis.v1.Cluster.metrics:type_name -> luci.analysis.v1.Cluster.MetricsEntry
	3,  // 6: luci.analysis.v1.ReclusteringProgress.last:type_name -> luci.analysis.v1.ClusteringVersion
	3,  // 7: luci.analysis.v1.ReclusteringProgress.next:type_name -> luci.analysis.v1.ClusteringVersion
	35, // 8: luci.analysis.v1.QueryClusterSummariesRequest.time_range:type_name -> luci.analysis.v1.TimeRange
	0,  // 9: luci.analysis.v1.QueryClusterSummariesRequest.view:type_name -> luci.analysis.v1.ClusterSummaryView
	10, // 10: luci.analysis.v1.QueryClusterSummariesResponse.cluster_summaries:type_name -> luci.analysis.v1.ClusterSummary
	36, // 11: luci.analysis.v1.ClusterSummary.cluster_id:type_name -> luci.analysis.v1.ClusterId
	37, // 12: luci.analysis.v1.ClusterSummary.bug:type_name -> luci.analysis.v1.AssociatedBug
	30, // 13: luci.analysis.v1.ClusterSummary.metrics:type_name -> luci.analysis.v1.ClusterSummary.MetricsEntry
	13, // 14: luci.analysis.v1.QueryClusterFailuresResponse.failures:type_name -> luci.analysis.v1.DistinctClusterFailure
	38, // 15: luci.analysis.v1.DistinctClusterFailure.variant:type_name -> luci.analysis.v1.Variant
	34, // 16: luci.analysis.v1.DistinctClusterFailure.partition_time:type_name -> google.protobuf.Timestamp
	32, // 17: luci.analysis.v1.DistinctClusterFailure.presubmit_run:type_name -> luci.analysis.v1.DistinctClusterFailure.PresubmitRun
	31, // 18: luci.analysis.v1.DistinctClusterFailure.exonerations:type_name -> luci.analysis.v1.DistinctClusterFailure.Exoneration
	39, // 19: luci.analysis.v1.DistinctClusterFailure.build_status:type_name -> luci.analysis.v1.BuildStatus
	40, // 20: luci.analysis.v1.DistinctClusterFailure.changelists:type_name -> luci.analysis.v1.Changelist
	16, // 21: luci.analysis.v1.QueryClusterExoneratedTestVariantsResponse.test_variants:type_name -> luci.analysis.v1.ClusterExoneratedTestVariant
	38, // 22: luci.analysis.v1.ClusterExoneratedTestVariant.variant:type_name -> luci.analysis.v1.Variant
	34, // 23: luci.analysis.v1.ClusterExoneratedTestVariant.last_exoneration:type_name -> google.protobuf.Timestamp
	19, // 24: luci.analysis.v1.QueryClusterExoneratedTestVariantBranchesResponse.test_variant_branches:type_name -> luci.analysis.v1.ClusterExoneratedTestVariantBranch
	38, // 25: luci.analysis.v1.ClusterExoneratedTestVariantBranch.variant:type_name -> luci.analysis.v1.Variant
	41, // 26: luci.analysis.v1.ClusterExoneratedTestVariantBranch.source_ref:type_name -> luci.analysis.v1.SourceRef
	34, // 27: luci.analysis.v1.ClusterExoneratedTestVariantBranch.last_exoneration:type_name -> google.protobuf.Timestamp
	22, // 28: luci.analysis.v1.QueryClusterHistoryResponse.days:type_name -> luci.analysis.v1.ClusterHistoryDay
	33, // 29: luci.analysis.v1.ClusterHistoryDay.metrics:type_name -> luci.analysis.v1.ClusterHistoryDay.MetricsEntry
	42, // 30: luci.analysis.v1.ClusterRequest.TestResult.failure_reason:type_name -> luci.analysis.v1.FailureReason
	25, // 31: luci.analysis.v1.ClusterResponse.ClusteredTestResult.clusters:type_name -> luci.analysis.v1.ClusterResponse.ClusteredTestResult.ClusterEntry
	36, // 32: luci.analysis.v1.ClusterResponse.ClusteredTestResult.ClusterEntry.cluster_id:type_name -> luci.analysis.v1.ClusterId
	37, // 33: luci.analysis.v1.ClusterResponse.ClusteredTestResult.ClusterEntry.bug:type_name -> luci.analysis.v1.AssociatedBug
	26, // 34: luci.analysis.v1.Cluster.TimewiseCounts.one_day:type_name -> luci.analysis.v1.Cluster.Counts
	26, // 35: luci.analysis.v1.Cluster.TimewiseCounts.three_day:type_name -> luci.analysis.v1.Cluster.Counts
	26, // 36: luci.analysis.v1.Cluster.TimewiseCounts.seven_day:type_name -> luci.analysis.v1.Cluster.Counts
	27, // 37: luci.analysis.v1.Cluster.MetricsEntry.value:type_name -> luci.analysis.v1.Cluster.TimewiseCounts
	29, // 38: luci.analysis.v1.ClusterSummary.MetricsEntry.value:type_name -> luci.analysis.v1.ClusterSummary.MetricValue
	43, // 39: luci.analysis.v1.DistinctClusterFailure.Exoneration.reason:type_name -> luci.analysis.v1.ExonerationReason
	44, // 40: luci.analysis.v1.DistinctClusterFailure.PresubmitRun.presubmit_run_id:type_name -> luci.analysis.v1.PresubmitRunId
	45, // 41: luci.analysis.v1.DistinctClusterFailure.PresubmitRun.mode:type_name -> luci.analysis.v1.PresubmitRunMode
	46, // 42: luci.analysis.v1.DistinctClusterFailure.PresubmitRun.status:type_name -> luci.analysis.v1.PresubmitRunStatus
	1,  // 43: luci.analysis.v1.Clusters.Cluster:input_type -> luci.analysis.v1.ClusterRequest
	4,  // 44: luci.analysis.v1.Clusters.Get:input_type -> luci.analysis.v1.GetClusterRequest
	6,  // 45: luci.analysis.v1.Clusters.GetReclusteringProgress:input_type -> luci.analysis.v1.GetReclusteringProgressRequest
	8,  // 46: luci.analysis.v1.Clusters.QueryClusterSummaries:input_type -> luci.analysis.v1.QueryClusterSummariesRequest
	11, // 47: luci.analysis.v1.Clusters.QueryClusterFailures:input_type -> luci.analysis.v1.QueryClusterFailuresRequest
	14, // 48: luci.analysis.v1.Clusters.QueryExoneratedTestVariants:input_type -> luci.analysis.v1.QueryClusterExoneratedTestVariantsRequest
	17, // 49: luci.analysis.v1.Clusters.QueryExoneratedTestVariantBranches:input_type -> luci.analysis.v1.QueryClusterExoneratedTestVariantBranchesRequest
	20, // 50: luci.analysis.v1.Clusters.QueryHistory:input_type -> luci.analysis.v1.QueryClusterHistoryRequest
	2,  // 51: luci.analysis.v1.Clusters.Cluster:output_type -> luci.analysis.v1.ClusterResponse
	5,  // 52: luci.analysis.v1.Clusters.Get:output_type -> luci.analysis.v1.Cluster
	7,  // 53: luci.analysis.v1.Clusters.GetReclusteringProgress:output_type -> luci.analysis.v1.ReclusteringProgress
	9,  // 54: luci.analysis.v1.Clusters.QueryClusterSummaries:output_type -> luci.analysis.v1.QueryClusterSummariesResponse
	12, // 55: luci.analysis.v1.Clusters.QueryClusterFailures:output_type -> luci.analysis.v1.QueryClusterFailuresResponse
	15, // 56: luci.analysis.v1.Clusters.QueryExoneratedTestVariants:output_type -> luci.analysis.v1.QueryClusterExoneratedTestVariantsResponse
	18, // 57: luci.analysis.v1.Clusters.QueryExoneratedTestVariantBranches:output_type -> luci.analysis.v1.QueryClusterExoneratedTestVariantBranchesResponse
	21, // 58: luci.analysis.v1.Clusters.QueryHistory:output_type -> luci.analysis.v1.QueryClusterHistoryResponse
	51, // [51:59] is the sub-list for method output_type
	43, // [43:51] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_clusters_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_sources_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_failure_reason_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_clusters_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_clusters_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClustersClient is the client API for Clusters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClustersClient interface {
	// Identifies the cluster(s) for one or more test failure(s).
	//
	// This RPC returns the clusters of each test result, using
	// current suggested cluster algorithms, configured failure
	// association rules, and ingested project configuration with
	// a bounded staleness of up to one minute. (Returned clusters
	// may be based on project configuration and configured failure
	// association rules that is up to one minute out-of-date).
	//
	// As at April 2022, the implementation does not use stale
	// rules, but you are instructed NOT to rely on this property to
	// allow reversion to the faster implementation that is tolerant
	// to higher QPS in future. If your use case require strong reads
	// (e.g. you want to call cluster immediately after updating a rule),
	// please contact LUCI Analysis owners. We may be able to provide a
	// request flag to select this processing behaviour.
	//
	// This RPC is a pure query API and does not lead to the ingestion of the
	// test failures by LUCI Analysis (e.g. for cluster impact calculations).
	Cluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
	// Reads information about the given cluster.
	//
	// Please consult LUCI Analysis owners before adding additional calls to
	// this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	//
	// As of writing (April 13, 2022) this query reads ~1 GB per call for
	// the largest LUCI Project, which translates to a cost of 0.5 US cents
	// per query at published pricing (US$5/TB analyzed for BigQuery).
	//
	// Changes to this RPC should comply with https://google.aip.dev/131.
	Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// Reads current progress re-clustering the given project. Re-clustering
	// means updating the clusters each failure is in to reflect the latest
	// failure association rules, suggested clustering algorithms and
	// clustering configuration.
	GetReclusteringProgress(ctx context.Context, in *GetReclusteringProgressRequest, opts ...grpc.CallOption) (*ReclusteringProgress, error)
	// Queries summary information about top clusters.
	//
	// The set of test failures used as input to the clustering can be
	// specified using the failure_filter field on the request.
	// The returned clusters include only the impact derived from the
	// filtered failures.
	//
	// This allows investigation of the highest impact clusters for some
	// subset of the failure data in a project. For example, a filter string
	// of "failure_reason:ssh" would find all of the clusters where any test
	// results mention "ssh" in their failure reason, and show how big the
	// impact from these ssh failures is in each cluster. This is useful when
	// investigating specific problems, or ownership areas of the tests.
	//
	// Please consult LUCI Analysis owners before adding additional calls
	// to this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	//
	// As of writing (April 13, 2022) this query reads up to 10 GB per call for
	// 7 days of data for the largest LUCI Project, which translates to a cost
	// of up to 5 US cents per query at published pricing
	// (US$5/TB analyzed for BigQuery).
	QueryClusterSummaries(ctx context.Context, in *QueryClusterSummariesRequest, opts ...grpc.CallOption) (*QueryClusterSummariesResponse, error)
	// Queries examples of failures in the given cluster.
	//
	// Please consult LUCI Analysis owners before adding additional calls to
	// this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	QueryClusterFailures(ctx context.Context, in *QueryClusterFailuresRequest, opts ...grpc.CallOption) (*QueryClusterFailuresResponse, error)
	// Queries test variants in the cluster which have recently had an
	// exoneration recorded against them. Only exonerations on failures
	// which are part of the cluster are considered.
	//
	// Consider solving this use case in future by a standard AIP-132 List
	// method with filter and order_by support.
	//
	// This RPC is useful for projects using the legacy QueryFailureRate
	// API for exoneration.
	QueryExoneratedTestVariants(ctx context.Context, in *QueryClusterExoneratedTestVariantsRequest, opts ...grpc.CallOption) (*QueryClusterExoneratedTestVariantsResponse, error)
	// Queries test variant branches in the cluster which have recently had
	// an exoneration recorded against them. Only exonerations on failures
	// which are part of the cluster are considered.
	//
	// Use for projects performing branch-scoped exoneration using
	// QueryStability.
	QueryExoneratedTestVariantBranches(ctx context.Context, in *QueryClusterExoneratedTestVariantBranchesRequest, opts ...grpc.CallOption) (*QueryClusterExoneratedTestVariantBranchesResponse, error)
	// Queries the history of metrics for clustered failures satisying given criteria.
	// For example the number of test runs failed on each day for the last 7 days.
	//
	// Please consult LUCI Analysis owners before adding additional calls to
	// this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	QueryHistory(ctx context.Context, in *QueryClusterHistoryRequest, opts ...grpc.CallOption) (*QueryClusterHistoryResponse, error)
}
type clustersPRPCClient struct {
	client *prpc.Client
}

func NewClustersPRPCClient(client *prpc.Client) ClustersClient {
	return &clustersPRPCClient{client}
}

func (c *clustersPRPCClient) Cluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "Cluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersPRPCClient) Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersPRPCClient) GetReclusteringProgress(ctx context.Context, in *GetReclusteringProgressRequest, opts ...grpc.CallOption) (*ReclusteringProgress, error) {
	out := new(ReclusteringProgress)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "GetReclusteringProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersPRPCClient) QueryClusterSummaries(ctx context.Context, in *QueryClusterSummariesRequest, opts ...grpc.CallOption) (*QueryClusterSummariesResponse, error) {
	out := new(QueryClusterSummariesResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "QueryClusterSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersPRPCClient) QueryClusterFailures(ctx context.Context, in *QueryClusterFailuresRequest, opts ...grpc.CallOption) (*QueryClusterFailuresResponse, error) {
	out := new(QueryClusterFailuresResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "QueryClusterFailures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersPRPCClient) QueryExoneratedTestVariants(ctx context.Context, in *QueryClusterExoneratedTestVariantsRequest, opts ...grpc.CallOption) (*QueryClusterExoneratedTestVariantsResponse, error) {
	out := new(QueryClusterExoneratedTestVariantsResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "QueryExoneratedTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersPRPCClient) QueryExoneratedTestVariantBranches(ctx context.Context, in *QueryClusterExoneratedTestVariantBranchesRequest, opts ...grpc.CallOption) (*QueryClusterExoneratedTestVariantBranchesResponse, error) {
	out := new(QueryClusterExoneratedTestVariantBranchesResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "QueryExoneratedTestVariantBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersPRPCClient) QueryHistory(ctx context.Context, in *QueryClusterHistoryRequest, opts ...grpc.CallOption) (*QueryClusterHistoryResponse, error) {
	out := new(QueryClusterHistoryResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Clusters", "QueryHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type clustersClient struct {
	cc grpc.ClientConnInterface
}

func NewClustersClient(cc grpc.ClientConnInterface) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) Cluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/Cluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) GetReclusteringProgress(ctx context.Context, in *GetReclusteringProgressRequest, opts ...grpc.CallOption) (*ReclusteringProgress, error) {
	out := new(ReclusteringProgress)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/GetReclusteringProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) QueryClusterSummaries(ctx context.Context, in *QueryClusterSummariesRequest, opts ...grpc.CallOption) (*QueryClusterSummariesResponse, error) {
	out := new(QueryClusterSummariesResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/QueryClusterSummaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) QueryClusterFailures(ctx context.Context, in *QueryClusterFailuresRequest, opts ...grpc.CallOption) (*QueryClusterFailuresResponse, error) {
	out := new(QueryClusterFailuresResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/QueryClusterFailures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) QueryExoneratedTestVariants(ctx context.Context, in *QueryClusterExoneratedTestVariantsRequest, opts ...grpc.CallOption) (*QueryClusterExoneratedTestVariantsResponse, error) {
	out := new(QueryClusterExoneratedTestVariantsResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/QueryExoneratedTestVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) QueryExoneratedTestVariantBranches(ctx context.Context, in *QueryClusterExoneratedTestVariantBranchesRequest, opts ...grpc.CallOption) (*QueryClusterExoneratedTestVariantBranchesResponse, error) {
	out := new(QueryClusterExoneratedTestVariantBranchesResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/QueryExoneratedTestVariantBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) QueryHistory(ctx context.Context, in *QueryClusterHistoryRequest, opts ...grpc.CallOption) (*QueryClusterHistoryResponse, error) {
	out := new(QueryClusterHistoryResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Clusters/QueryHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClustersServer is the server API for Clusters service.
type ClustersServer interface {
	// Identifies the cluster(s) for one or more test failure(s).
	//
	// This RPC returns the clusters of each test result, using
	// current suggested cluster algorithms, configured failure
	// association rules, and ingested project configuration with
	// a bounded staleness of up to one minute. (Returned clusters
	// may be based on project configuration and configured failure
	// association rules that is up to one minute out-of-date).
	//
	// As at April 2022, the implementation does not use stale
	// rules, but you are instructed NOT to rely on this property to
	// allow reversion to the faster implementation that is tolerant
	// to higher QPS in future. If your use case require strong reads
	// (e.g. you want to call cluster immediately after updating a rule),
	// please contact LUCI Analysis owners. We may be able to provide a
	// request flag to select this processing behaviour.
	//
	// This RPC is a pure query API and does not lead to the ingestion of the
	// test failures by LUCI Analysis (e.g. for cluster impact calculations).
	Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error)
	// Reads information about the given cluster.
	//
	// Please consult LUCI Analysis owners before adding additional calls to
	// this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	//
	// As of writing (April 13, 2022) this query reads ~1 GB per call for
	// the largest LUCI Project, which translates to a cost of 0.5 US cents
	// per query at published pricing (US$5/TB analyzed for BigQuery).
	//
	// Changes to this RPC should comply with https://google.aip.dev/131.
	Get(context.Context, *GetClusterRequest) (*Cluster, error)
	// Reads current progress re-clustering the given project. Re-clustering
	// means updating the clusters each failure is in to reflect the latest
	// failure association rules, suggested clustering algorithms and
	// clustering configuration.
	GetReclusteringProgress(context.Context, *GetReclusteringProgressRequest) (*ReclusteringProgress, error)
	// Queries summary information about top clusters.
	//
	// The set of test failures used as input to the clustering can be
	// specified using the failure_filter field on the request.
	// The returned clusters include only the impact derived from the
	// filtered failures.
	//
	// This allows investigation of the highest impact clusters for some
	// subset of the failure data in a project. For example, a filter string
	// of "failure_reason:ssh" would find all of the clusters where any test
	// results mention "ssh" in their failure reason, and show how big the
	// impact from these ssh failures is in each cluster. This is useful when
	// investigating specific problems, or ownership areas of the tests.
	//
	// Please consult LUCI Analysis owners before adding additional calls
	// to this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	//
	// As of writing (April 13, 2022) this query reads up to 10 GB per call for
	// 7 days of data for the largest LUCI Project, which translates to a cost
	// of up to 5 US cents per query at published pricing
	// (US$5/TB analyzed for BigQuery).
	QueryClusterSummaries(context.Context, *QueryClusterSummariesRequest) (*QueryClusterSummariesResponse, error)
	// Queries examples of failures in the given cluster.
	//
	// Please consult LUCI Analysis owners before adding additional calls to
	// this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	QueryClusterFailures(context.Context, *QueryClusterFailuresRequest) (*QueryClusterFailuresResponse, error)
	// Queries test variants in the cluster which have recently had an
	// exoneration recorded against them. Only exonerations on failures
	// which are part of the cluster are considered.
	//
	// Consider solving this use case in future by a standard AIP-132 List
	// method with filter and order_by support.
	//
	// This RPC is useful for projects using the legacy QueryFailureRate
	// API for exoneration.
	QueryExoneratedTestVariants(context.Context, *QueryClusterExoneratedTestVariantsRequest) (*QueryClusterExoneratedTestVariantsResponse, error)
	// Queries test variant branches in the cluster which have recently had
	// an exoneration recorded against them. Only exonerations on failures
	// which are part of the cluster are considered.
	//
	// Use for projects performing branch-scoped exoneration using
	// QueryStability.
	QueryExoneratedTestVariantBranches(context.Context, *QueryClusterExoneratedTestVariantBranchesRequest) (*QueryClusterExoneratedTestVariantBranchesResponse, error)
	// Queries the history of metrics for clustered failures satisying given criteria.
	// For example the number of test runs failed on each day for the last 7 days.
	//
	// Please consult LUCI Analysis owners before adding additional calls to
	// this RPC, as the implementation currently calls back to BigQuery and as
	// such, is not cost-optimised if many queries are to be made.
	QueryHistory(context.Context, *QueryClusterHistoryRequest) (*QueryClusterHistoryResponse, error)
}

// UnimplementedClustersServer can be embedded to have forward compatible implementations.
type UnimplementedClustersServer struct {
}

func (*UnimplementedClustersServer) Cluster(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cluster not implemented")
}
func (*UnimplementedClustersServer) Get(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedClustersServer) GetReclusteringProgress(context.Context, *GetReclusteringProgressRequest) (*ReclusteringProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReclusteringProgress not implemented")
}
func (*UnimplementedClustersServer) QueryClusterSummaries(context.Context, *QueryClusterSummariesRequest) (*QueryClusterSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClusterSummaries not implemented")
}
func (*UnimplementedClustersServer) QueryClusterFailures(context.Context, *QueryClusterFailuresRequest) (*QueryClusterFailuresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryClusterFailures not implemented")
}
func (*UnimplementedClustersServer) QueryExoneratedTestVariants(context.Context, *QueryClusterExoneratedTestVariantsRequest) (*QueryClusterExoneratedTestVariantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExoneratedTestVariants not implemented")
}
func (*UnimplementedClustersServer) QueryExoneratedTestVariantBranches(context.Context, *QueryClusterExoneratedTestVariantBranchesRequest) (*QueryClusterExoneratedTestVariantBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExoneratedTestVariantBranches not implemented")
}
func (*UnimplementedClustersServer) QueryHistory(context.Context, *QueryClusterHistoryRequest) (*QueryClusterHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHistory not implemented")
}

func RegisterClustersServer(s prpc.Registrar, srv ClustersServer) {
	s.RegisterService(&_Clusters_serviceDesc, srv)
}

func _Clusters_Cluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Cluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/Cluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Cluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Get(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_GetReclusteringProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReclusteringProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).GetReclusteringProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/GetReclusteringProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).GetReclusteringProgress(ctx, req.(*GetReclusteringProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_QueryClusterSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).QueryClusterSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/QueryClusterSummaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).QueryClusterSummaries(ctx, req.(*QueryClusterSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_QueryClusterFailures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterFailuresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).QueryClusterFailures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/QueryClusterFailures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).QueryClusterFailures(ctx, req.(*QueryClusterFailuresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_QueryExoneratedTestVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterExoneratedTestVariantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).QueryExoneratedTestVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/QueryExoneratedTestVariants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).QueryExoneratedTestVariants(ctx, req.(*QueryClusterExoneratedTestVariantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_QueryExoneratedTestVariantBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterExoneratedTestVariantBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).QueryExoneratedTestVariantBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/QueryExoneratedTestVariantBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).QueryExoneratedTestVariantBranches(ctx, req.(*QueryClusterExoneratedTestVariantBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_QueryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClusterHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).QueryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Clusters/QueryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).QueryHistory(ctx, req.(*QueryClusterHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.analysis.v1.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Cluster",
			Handler:    _Clusters_Cluster_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Clusters_Get_Handler,
		},
		{
			MethodName: "GetReclusteringProgress",
			Handler:    _Clusters_GetReclusteringProgress_Handler,
		},
		{
			MethodName: "QueryClusterSummaries",
			Handler:    _Clusters_QueryClusterSummaries_Handler,
		},
		{
			MethodName: "QueryClusterFailures",
			Handler:    _Clusters_QueryClusterFailures_Handler,
		},
		{
			MethodName: "QueryExoneratedTestVariants",
			Handler:    _Clusters_QueryExoneratedTestVariants_Handler,
		},
		{
			MethodName: "QueryExoneratedTestVariantBranches",
			Handler:    _Clusters_QueryExoneratedTestVariantBranches_Handler,
		},
		{
			MethodName: "QueryHistory",
			Handler:    _Clusters_QueryHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/analysis/proto/v1/clusters.proto",
}
