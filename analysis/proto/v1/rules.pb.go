// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/proto/v1/rules.proto

package analysispb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The issue access restriction level.
type CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit int32

const (
	// Default value. Do not use.
	CreateRuleWithNewIssueRequest_Issue_ISSUE_ACCESS_LIMIT_UNSPECIFIED CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit = 0
	// No issue access limits apply. All users who can
	// access the component can see the issue.
	CreateRuleWithNewIssueRequest_Issue_None CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit = 1
	// Only actors on the issue or trusted users (Full-time Googlers +
	// Common tools by default) users retain view access.
	CreateRuleWithNewIssueRequest_Issue_Trusted CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit = 4
)

// Enum value maps for CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit.
var (
	CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit_name = map[int32]string{
		0: "ISSUE_ACCESS_LIMIT_UNSPECIFIED",
		1: "None",
		4: "Trusted",
	}
	CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit_value = map[string]int32{
		"ISSUE_ACCESS_LIMIT_UNSPECIFIED": 0,
		"None":                           1,
		"Trusted":                        4,
	}
)

func (x CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit) Enum() *CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit {
	p := new(CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit)
	*p = x
	return p
}

func (x CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_enumTypes[0].Descriptor()
}

func (CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_enumTypes[0]
}

func (x CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit.Descriptor instead.
func (CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{11, 0, 0}
}

// A rule associating failures with a bug.
type Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the failure association rule.
	// Can be used to refer to this rule, e.g. in Rules.Get RPC.
	// Format: projects/{project}/rules/{rule_id}.
	// See also https://google.aip.dev/122.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The LUCI Project for which this rule is defined.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The unique identifier for the failure association rule,
	// as 32 lowercase hexadecimal characters.
	RuleId string `protobuf:"bytes,3,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// The rule predicate, defining which failures are being associated.
	// For example, 'reason LIKE "Some error: %"'.
	//
	// analysis/internal/clustering/rules/lang/lang.go contains the
	// EBNF grammar for the language used to define rule predicates;
	// it is a subset of Google Standard SQL.
	//
	// The maximum allowed length is 65536 characters.
	RuleDefinition string `protobuf:"bytes,4,opt,name=rule_definition,json=ruleDefinition,proto3" json:"rule_definition,omitempty"`
	// The bug that the failures are associated with.
	Bug *AssociatedBug `protobuf:"bytes,5,opt,name=bug,proto3" json:"bug,omitempty"`
	// Whether the bug should be updated by LUCI Analysis, and whether
	// failures should still be matched against the rule.
	IsActive bool `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Whether LUCI Analysis should manage the priority and verified status
	// of the associated bug based on the impact established via this rule.
	IsManagingBug bool `protobuf:"varint,14,opt,name=is_managing_bug,json=isManagingBug,proto3" json:"is_managing_bug,omitempty"`
	// Determines whether LUCI Analysis is managing the bug priority updates
	// of the bug.
	IsManagingBugPriority bool `protobuf:"varint,15,opt,name=is_managing_bug_priority,json=isManagingBugPriority,proto3" json:"is_managing_bug_priority,omitempty"`
	// Output Only. The time is_managing_bug_priority was last updated.
	IsManagingBugPriorityLastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=is_managing_bug_priority_last_update_time,json=isManagingBugPriorityLastUpdateTime,proto3" json:"is_managing_bug_priority_last_update_time,omitempty"`
	// The suggested cluster this rule was created from (if any).
	// Until re-clustering is complete and has reduced the residual impact
	// of the source cluster, this cluster ID tells bug filing to ignore
	// the source cluster when determining whether new bugs need to be filed.
	// Immutable after creation.
	SourceCluster *ClusterId `protobuf:"bytes,7,opt,name=source_cluster,json=sourceCluster,proto3" json:"source_cluster,omitempty"`
	// Bug management state.
	// System controlled data, cannot be modified by the user.
	BugManagementState *BugManagementState `protobuf:"bytes,17,opt,name=bug_management_state,json=bugManagementState,proto3" json:"bug_management_state,omitempty"`
	// The time the rule was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The user which created the rule.
	// This could be an email address or the value 'system' (for rules
	// automaticatically created by LUCI Analysis itself).
	// This value may not be available, as its disclosure is limited
	// to Googlers only and is subject to automatic deletion after 30 days.
	CreateUser string `protobuf:"bytes,9,opt,name=create_user,json=createUser,proto3" json:"create_user,omitempty"`
	// The last time an auditable field was updated. An auditable field
	// is any field other than a system controlled data field.
	LastAuditableUpdateTime *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=last_auditable_update_time,json=lastAuditableUpdateTime,proto3" json:"last_auditable_update_time,omitempty"`
	// The last user which updated an auditable field. An auditable field
	// is any field other than a system controlled data field.
	// This could be an email address or the value 'system' (for rules
	// automaticatically modified by LUCI Analysis itself).
	// This value may not be available, as its disclosure is limited
	// to Googlers only and is subject to automatic deletion after 30 days.
	LastAuditableUpdateUser string `protobuf:"bytes,19,opt,name=last_auditable_update_user,json=lastAuditableUpdateUser,proto3" json:"last_auditable_update_user,omitempty"`
	// The time the rule was last updated.
	LastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// The time the rule was last updated in a way that caused the
	// matched failures to change, i.e. because of a change to rule_definition
	// or is_active. (By contrast, updating the associated bug does NOT change
	// the matched failures, so does NOT update this field.)
	// Output only.
	PredicateLastUpdateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=predicate_last_update_time,json=predicateLastUpdateTime,proto3" json:"predicate_last_update_time,omitempty"`
	// This checksum is computed by the server based on the value of other
	// fields, and may be sent on update requests to ensure the client
	// has an up-to-date value before proceeding.
	// See also https://google.aip.dev/154.
	Etag          string `protobuf:"bytes,12,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rule) Reset() {
	*x = Rule{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{0}
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Rule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *Rule) GetRuleDefinition() string {
	if x != nil {
		return x.RuleDefinition
	}
	return ""
}

func (x *Rule) GetBug() *AssociatedBug {
	if x != nil {
		return x.Bug
	}
	return nil
}

func (x *Rule) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Rule) GetIsManagingBug() bool {
	if x != nil {
		return x.IsManagingBug
	}
	return false
}

func (x *Rule) GetIsManagingBugPriority() bool {
	if x != nil {
		return x.IsManagingBugPriority
	}
	return false
}

func (x *Rule) GetIsManagingBugPriorityLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IsManagingBugPriorityLastUpdateTime
	}
	return nil
}

func (x *Rule) GetSourceCluster() *ClusterId {
	if x != nil {
		return x.SourceCluster
	}
	return nil
}

func (x *Rule) GetBugManagementState() *BugManagementState {
	if x != nil {
		return x.BugManagementState
	}
	return nil
}

func (x *Rule) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Rule) GetCreateUser() string {
	if x != nil {
		return x.CreateUser
	}
	return ""
}

func (x *Rule) GetLastAuditableUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAuditableUpdateTime
	}
	return nil
}

func (x *Rule) GetLastAuditableUpdateUser() string {
	if x != nil {
		return x.LastAuditableUpdateUser
	}
	return ""
}

func (x *Rule) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

func (x *Rule) GetPredicateLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PredicateLastUpdateTime
	}
	return nil
}

func (x *Rule) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

// BugManagementState is the state of bug management for a rule.
type BugManagementState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The state of each bug management policy.
	PolicyState   []*BugManagementState_PolicyState `protobuf:"bytes,1,rep,name=policy_state,json=policyState,proto3" json:"policy_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BugManagementState) Reset() {
	*x = BugManagementState{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementState) ProtoMessage() {}

func (x *BugManagementState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementState.ProtoReflect.Descriptor instead.
func (*BugManagementState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{1}
}

func (x *BugManagementState) GetPolicyState() []*BugManagementState_PolicyState {
	if x != nil {
		return x.PolicyState
	}
	return nil
}

type GetRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the rule to retrieve.
	// Format: projects/{project}/rules/{rule_id}.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRuleRequest) Reset() {
	*x = GetRuleRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRuleRequest) ProtoMessage() {}

func (x *GetRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRuleRequest.ProtoReflect.Descriptor instead.
func (*GetRuleRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{2}
}

func (x *GetRuleRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRulesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of rules.
	// Format: projects/{project}.
	Parent        string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRulesRequest) Reset() {
	*x = ListRulesRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesRequest) ProtoMessage() {}

func (x *ListRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesRequest.ProtoReflect.Descriptor instead.
func (*ListRulesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{3}
}

func (x *ListRulesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type ListRulesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rules.
	Rules         []*Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRulesResponse) Reset() {
	*x = ListRulesResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRulesResponse) ProtoMessage() {}

func (x *ListRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRulesResponse.ProtoReflect.Descriptor instead.
func (*ListRulesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{4}
}

func (x *ListRulesResponse) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type CreateRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent resource where the rule will be created.
	// Format: projects/{project}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The rule to create.
	//
	// The `name` of the rule should be left empty, it will be automatically
	// assigned by the service.
	Rule          *Rule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRuleRequest) Reset() {
	*x = CreateRuleRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleRequest) ProtoMessage() {}

func (x *CreateRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleRequest.ProtoReflect.Descriptor instead.
func (*CreateRuleRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRuleRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRuleRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type UpdateRuleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rule to update.
	//
	// The rule's `name` field is used to identify the book to update.
	// Format: projects/{project}/rules/{rule_id}.
	Rule *Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// The current etag of the rule.
	// If an etag is provided and does not match the current etag of the rule,
	// update will be blocked and an ABORTED error will be returned.
	Etag          string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRuleRequest) Reset() {
	*x = UpdateRuleRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleRequest) ProtoMessage() {}

func (x *UpdateRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateRuleRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRuleRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *UpdateRuleRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateRuleRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type LookupBugRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// System is the bug tracking system of the bug. This is either
	// "monorail" or "buganizer".
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	// Id is the bug tracking system-specific identity of the bug.
	// For monorail, the scheme is {project}/{numeric_id}, for
	// buganizer the scheme is {numeric_id}.
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupBugRequest) Reset() {
	*x = LookupBugRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupBugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupBugRequest) ProtoMessage() {}

func (x *LookupBugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupBugRequest.ProtoReflect.Descriptor instead.
func (*LookupBugRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{7}
}

func (x *LookupBugRequest) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *LookupBugRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LookupBugResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rules corresponding to the requested bug.
	// Format: projects/{project}/rules/{rule_id}.
	Rules         []string `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LookupBugResponse) Reset() {
	*x = LookupBugResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LookupBugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupBugResponse) ProtoMessage() {}

func (x *LookupBugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupBugResponse.ProtoReflect.Descriptor instead.
func (*LookupBugResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{8}
}

func (x *LookupBugResponse) GetRules() []string {
	if x != nil {
		return x.Rules
	}
	return nil
}

// PrepareRuleDefaultsRequest represents a request to prepare default
// values for a new rule.
type PrepareRuleDefaultsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent LUCI Project, which will own the rule.
	// Format: projects/{project}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The test failure to create a rule for. If set, a failure
	// association rule that matches it will be included in the
	// response.
	TestResult    *PrepareRuleDefaultsRequest_TestResult `protobuf:"bytes,2,opt,name=test_result,json=testResult,proto3" json:"test_result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareRuleDefaultsRequest) Reset() {
	*x = PrepareRuleDefaultsRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRuleDefaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRuleDefaultsRequest) ProtoMessage() {}

func (x *PrepareRuleDefaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRuleDefaultsRequest.ProtoReflect.Descriptor instead.
func (*PrepareRuleDefaultsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{9}
}

func (x *PrepareRuleDefaultsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *PrepareRuleDefaultsRequest) GetTestResult() *PrepareRuleDefaultsRequest_TestResult {
	if x != nil {
		return x.TestResult
	}
	return nil
}

type PrepareRuleDefaultsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rule with defaults such as is_active and the failure
	// association rule populated.
	Rule          *Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareRuleDefaultsResponse) Reset() {
	*x = PrepareRuleDefaultsResponse{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRuleDefaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRuleDefaultsResponse) ProtoMessage() {}

func (x *PrepareRuleDefaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRuleDefaultsResponse.ProtoReflect.Descriptor instead.
func (*PrepareRuleDefaultsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{10}
}

func (x *PrepareRuleDefaultsResponse) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type CreateRuleWithNewIssueRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent resource where the rule will be created.
	// Format: projects/{project}.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The rule to create.
	//
	// The `bug` field should not be set, it will be automatically populated
	// based on the issue that is filed as part of this request.
	//
	// The `name` of the rule should be left empty, it will be automatically
	// assigned by the service.
	Rule *Rule `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	// The issue to create alongside this rule.
	Issue         *CreateRuleWithNewIssueRequest_Issue `protobuf:"bytes,3,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRuleWithNewIssueRequest) Reset() {
	*x = CreateRuleWithNewIssueRequest{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRuleWithNewIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleWithNewIssueRequest) ProtoMessage() {}

func (x *CreateRuleWithNewIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleWithNewIssueRequest.ProtoReflect.Descriptor instead.
func (*CreateRuleWithNewIssueRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRuleWithNewIssueRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRuleWithNewIssueRequest) GetRule() *Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *CreateRuleWithNewIssueRequest) GetIssue() *CreateRuleWithNewIssueRequest_Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

// The state of a bug management policy for a rule.
type BugManagementState_PolicyState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the bug management policy.
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// Whether the given policy is active for the rule.
	// Updated on every bug-filing run as follows:
	// - Set to true if the policy activation criteria was met.
	// - Set to false if the policy deactivation criteria was met.
	IsActive bool `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// The last time the policy was made active.
	// Allows detecting if policy is made active for the first time (as a
	// zero last_activation_time indicates the policy was never active).
	// Allows UI to filter to showing policies that were at least once active.
	// Allows UI to sort which policy was most recently active.
	// Allows UI to show when a policy last activated.
	LastActivationTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_activation_time,json=lastActivationTime,proto3" json:"last_activation_time,omitempty"`
	// The last time the policy was made inactive.
	// Allows UI to show when a policy last deactivated.
	LastDeactivationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_deactivation_time,json=lastDeactivationTime,proto3" json:"last_deactivation_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BugManagementState_PolicyState) Reset() {
	*x = BugManagementState_PolicyState{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BugManagementState_PolicyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BugManagementState_PolicyState) ProtoMessage() {}

func (x *BugManagementState_PolicyState) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BugManagementState_PolicyState.ProtoReflect.Descriptor instead.
func (*BugManagementState_PolicyState) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BugManagementState_PolicyState) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *BugManagementState_PolicyState) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BugManagementState_PolicyState) GetLastActivationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivationTime
	}
	return nil
}

func (x *BugManagementState_PolicyState) GetLastDeactivationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeactivationTime
	}
	return nil
}

// The unexpectedly failed/crashed/aborted test result.
type PrepareRuleDefaultsRequest_TestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test identifier.
	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The failure reason.
	FailureReason *FailureReason `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareRuleDefaultsRequest_TestResult) Reset() {
	*x = PrepareRuleDefaultsRequest_TestResult{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRuleDefaultsRequest_TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRuleDefaultsRequest_TestResult) ProtoMessage() {}

func (x *PrepareRuleDefaultsRequest_TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRuleDefaultsRequest_TestResult.ProtoReflect.Descriptor instead.
func (*PrepareRuleDefaultsRequest_TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PrepareRuleDefaultsRequest_TestResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *PrepareRuleDefaultsRequest_TestResult) GetFailureReason() *FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

// Contents of the issue to create alongside this rule.
type CreateRuleWithNewIssueRequest_Issue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The issue tracker component to file the bug into. Currently, only
	// IssueTracker (Buganizer) components are supported.
	Component *BugComponent `protobuf:"bytes,1,opt,name=component,proto3" json:"component,omitempty"`
	// Short title to use for the new issue.
	// Maximum length is 250 bytes. Content must be UTF-8
	// normal form C, with printable characters only.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The issue description (initial comment).
	// Maximum length is 100,000 characters. Content must be UTF-8
	// normal form C, with printable characters only.
	//
	// LUCI Analysis will append its own footer to this
	// description when creating the issue.
	// This footer will contain a link to the rule in LUCI Analysis,
	// and identity of the user who invoked this RPC.
	//
	// For example:
	// "<Supplied issue comment.>
	//
	// See failure examples and modify the failure associated with this bug in LUCI Analysis: <link to rule>.
	// Filed on behalf of someone@google.com."
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// The issue priority.
	Priority BuganizerPriority `protobuf:"varint,4,opt,name=priority,proto3,enum=luci.analysis.v1.BuganizerPriority" json:"priority,omitempty"`
	// The issue access limit to use for the new issue.
	AccessLimit   CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit `protobuf:"varint,5,opt,name=access_limit,json=accessLimit,proto3,enum=luci.analysis.v1.CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit" json:"access_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRuleWithNewIssueRequest_Issue) Reset() {
	*x = CreateRuleWithNewIssueRequest_Issue{}
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRuleWithNewIssueRequest_Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleWithNewIssueRequest_Issue) ProtoMessage() {}

func (x *CreateRuleWithNewIssueRequest_Issue) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleWithNewIssueRequest_Issue.ProtoReflect.Descriptor instead.
func (*CreateRuleWithNewIssueRequest_Issue) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CreateRuleWithNewIssueRequest_Issue) GetComponent() *BugComponent {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *CreateRuleWithNewIssueRequest_Issue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateRuleWithNewIssueRequest_Issue) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateRuleWithNewIssueRequest_Issue) GetPriority() BuganizerPriority {
	if x != nil {
		return x.Priority
	}
	return BuganizerPriority_BUGANIZER_PRIORITY_UNSPECIFIED
}

func (x *CreateRuleWithNewIssueRequest_Issue) GetAccessLimit() CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit {
	if x != nil {
		return x.AccessLimit
	}
	return CreateRuleWithNewIssueRequest_Issue_ISSUE_ACCESS_LIMIT_UNSPECIFIED
}

var File_go_chromium_org_luci_analysis_proto_v1_rules_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDesc = string([]byte{
	0x0a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x08, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0e, 0x72, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x03, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x42, 0x75, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x62, 0x75, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x67, 0x12, 0x37,
	0x0a, 0x18, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x67, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x29, 0x69, 0x73, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x23, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x42, 0x75, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x5b, 0x0a, 0x14, 0x62, 0x75, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x62, 0x75, 0x67, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5c, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xd3, 0x02, 0x0a, 0x12, 0x42, 0x75, 0x67, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53,
	0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x67, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x1a, 0xe7, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x29, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x44, 0x0a, 0x10,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x29, 0x0a, 0x11, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x75, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x82, 0x02,
	0x0a, 0x1a, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x1a, 0x6d, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x1b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xb2, 0x04,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x65, 0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65,
	0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x1a, 0xf5, 0x02, 0x0a, 0x05, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x46,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x65, 0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x4d, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x10, 0x04, 0x32, 0xda, 0x04, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x09, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x75,
	0x67, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42,
	0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0f,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x2f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x65, 0x77, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x42,
	0x33, 0x5a, 0x31, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_v1_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_go_chromium_org_luci_analysis_proto_v1_rules_proto_goTypes = []any{
	(CreateRuleWithNewIssueRequest_Issue_IssueAccessLimit)(0), // 0: luci.analysis.v1.CreateRuleWithNewIssueRequest.Issue.IssueAccessLimit
	(*Rule)(nil),                                  // 1: luci.analysis.v1.Rule
	(*BugManagementState)(nil),                    // 2: luci.analysis.v1.BugManagementState
	(*GetRuleRequest)(nil),                        // 3: luci.analysis.v1.GetRuleRequest
	(*ListRulesRequest)(nil),                      // 4: luci.analysis.v1.ListRulesRequest
	(*ListRulesResponse)(nil),                     // 5: luci.analysis.v1.ListRulesResponse
	(*CreateRuleRequest)(nil),                     // 6: luci.analysis.v1.CreateRuleRequest
	(*UpdateRuleRequest)(nil),                     // 7: luci.analysis.v1.UpdateRuleRequest
	(*LookupBugRequest)(nil),                      // 8: luci.analysis.v1.LookupBugRequest
	(*LookupBugResponse)(nil),                     // 9: luci.analysis.v1.LookupBugResponse
	(*PrepareRuleDefaultsRequest)(nil),            // 10: luci.analysis.v1.PrepareRuleDefaultsRequest
	(*PrepareRuleDefaultsResponse)(nil),           // 11: luci.analysis.v1.PrepareRuleDefaultsResponse
	(*CreateRuleWithNewIssueRequest)(nil),         // 12: luci.analysis.v1.CreateRuleWithNewIssueRequest
	(*BugManagementState_PolicyState)(nil),        // 13: luci.analysis.v1.BugManagementState.PolicyState
	(*PrepareRuleDefaultsRequest_TestResult)(nil), // 14: luci.analysis.v1.PrepareRuleDefaultsRequest.TestResult
	(*CreateRuleWithNewIssueRequest_Issue)(nil),   // 15: luci.analysis.v1.CreateRuleWithNewIssueRequest.Issue
	(*AssociatedBug)(nil),                         // 16: luci.analysis.v1.AssociatedBug
	(*timestamppb.Timestamp)(nil),                 // 17: google.protobuf.Timestamp
	(*ClusterId)(nil),                             // 18: luci.analysis.v1.ClusterId
	(*fieldmaskpb.FieldMask)(nil),                 // 19: google.protobuf.FieldMask
	(*FailureReason)(nil),                         // 20: luci.analysis.v1.FailureReason
	(*BugComponent)(nil),                          // 21: luci.analysis.v1.BugComponent
	(BuganizerPriority)(0),                        // 22: luci.analysis.v1.BuganizerPriority
}
var file_go_chromium_org_luci_analysis_proto_v1_rules_proto_depIdxs = []int32{
	16, // 0: luci.analysis.v1.Rule.bug:type_name -> luci.analysis.v1.AssociatedBug
	17, // 1: luci.analysis.v1.Rule.is_managing_bug_priority_last_update_time:type_name -> google.protobuf.Timestamp
	18, // 2: luci.analysis.v1.Rule.source_cluster:type_name -> luci.analysis.v1.ClusterId
	2,  // 3: luci.analysis.v1.Rule.bug_management_state:type_name -> luci.analysis.v1.BugManagementState
	17, // 4: luci.analysis.v1.Rule.create_time:type_name -> google.protobuf.Timestamp
	17, // 5: luci.analysis.v1.Rule.last_auditable_update_time:type_name -> google.protobuf.Timestamp
	17, // 6: luci.analysis.v1.Rule.last_update_time:type_name -> google.protobuf.Timestamp
	17, // 7: luci.analysis.v1.Rule.predicate_last_update_time:type_name -> google.protobuf.Timestamp
	13, // 8: luci.analysis.v1.BugManagementState.policy_state:type_name -> luci.analysis.v1.BugManagementState.PolicyState
	1,  // 9: luci.analysis.v1.ListRulesResponse.rules:type_name -> luci.analysis.v1.Rule
	1,  // 10: luci.analysis.v1.CreateRuleRequest.rule:type_name -> luci.analysis.v1.Rule
	1,  // 11: luci.analysis.v1.UpdateRuleRequest.rule:type_name -> luci.analysis.v1.Rule
	19, // 12: luci.analysis.v1.UpdateRuleRequest.update_mask:type_name -> google.protobuf.FieldMask
	14, // 13: luci.analysis.v1.PrepareRuleDefaultsRequest.test_result:type_name -> luci.analysis.v1.PrepareRuleDefaultsRequest.TestResult
	1,  // 14: luci.analysis.v1.PrepareRuleDefaultsResponse.rule:type_name -> luci.analysis.v1.Rule
	1,  // 15: luci.analysis.v1.CreateRuleWithNewIssueRequest.rule:type_name -> luci.analysis.v1.Rule
	15, // 16: luci.analysis.v1.CreateRuleWithNewIssueRequest.issue:type_name -> luci.analysis.v1.CreateRuleWithNewIssueRequest.Issue
	17, // 17: luci.analysis.v1.BugManagementState.PolicyState.last_activation_time:type_name -> google.protobuf.Timestamp
	17, // 18: luci.analysis.v1.BugManagementState.PolicyState.last_deactivation_time:type_name -> google.protobuf.Timestamp
	20, // 19: luci.analysis.v1.PrepareRuleDefaultsRequest.TestResult.failure_reason:type_name -> luci.analysis.v1.FailureReason
	21, // 20: luci.analysis.v1.CreateRuleWithNewIssueRequest.Issue.component:type_name -> luci.analysis.v1.BugComponent
	22, // 21: luci.analysis.v1.CreateRuleWithNewIssueRequest.Issue.priority:type_name -> luci.analysis.v1.BuganizerPriority
	0,  // 22: luci.analysis.v1.CreateRuleWithNewIssueRequest.Issue.access_limit:type_name -> luci.analysis.v1.CreateRuleWithNewIssueRequest.Issue.IssueAccessLimit
	3,  // 23: luci.analysis.v1.Rules.Get:input_type -> luci.analysis.v1.GetRuleRequest
	4,  // 24: luci.analysis.v1.Rules.List:input_type -> luci.analysis.v1.ListRulesRequest
	6,  // 25: luci.analysis.v1.Rules.Create:input_type -> luci.analysis.v1.CreateRuleRequest
	7,  // 26: luci.analysis.v1.Rules.Update:input_type -> luci.analysis.v1.UpdateRuleRequest
	8,  // 27: luci.analysis.v1.Rules.LookupBug:input_type -> luci.analysis.v1.LookupBugRequest
	10, // 28: luci.analysis.v1.Rules.PrepareDefaults:input_type -> luci.analysis.v1.PrepareRuleDefaultsRequest
	12, // 29: luci.analysis.v1.Rules.CreateWithNewIssue:input_type -> luci.analysis.v1.CreateRuleWithNewIssueRequest
	1,  // 30: luci.analysis.v1.Rules.Get:output_type -> luci.analysis.v1.Rule
	5,  // 31: luci.analysis.v1.Rules.List:output_type -> luci.analysis.v1.ListRulesResponse
	1,  // 32: luci.analysis.v1.Rules.Create:output_type -> luci.analysis.v1.Rule
	1,  // 33: luci.analysis.v1.Rules.Update:output_type -> luci.analysis.v1.Rule
	9,  // 34: luci.analysis.v1.Rules.LookupBug:output_type -> luci.analysis.v1.LookupBugResponse
	11, // 35: luci.analysis.v1.Rules.PrepareDefaults:output_type -> luci.analysis.v1.PrepareRuleDefaultsResponse
	1,  // 36: luci.analysis.v1.Rules.CreateWithNewIssue:output_type -> luci.analysis.v1.Rule
	30, // [30:37] is the sub-list for method output_type
	23, // [23:30] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_v1_rules_proto_init() }
func file_go_chromium_org_luci_analysis_proto_v1_rules_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_v1_rules_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_v1_common_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_failure_reason_proto_init()
	file_go_chromium_org_luci_analysis_proto_v1_issue_tracking_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_v1_rules_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_v1_rules_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_v1_rules_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_proto_v1_rules_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_v1_rules_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_v1_rules_proto = out.File
	file_go_chromium_org_luci_analysis_proto_v1_rules_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_v1_rules_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RulesClient is the client API for Rules service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RulesClient interface {
	// Retrieves a rule.
	// Designed to conform to https://google.aip.dev/131.
	Get(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Lists rules.
	// TODO: implement pagination to make this
	// RPC compliant with https://google.aip.dev/132.
	// This RPC is incomplete. Future breaking changes are
	// expressly flagged.
	List(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error)
	// Creates a new rule.
	// Designed to conform to https://google.aip.dev/133.
	Create(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Updates a rule.
	// Designed to conform to https://google.aip.dev/134.
	Update(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error)
	// Looks up the rule associated with a given bug, without knowledge
	// of the LUCI project the rule is in.
	// Designed to conform to https://google.aip.dev/136.
	LookupBug(ctx context.Context, in *LookupBugRequest, opts ...grpc.CallOption) (*LookupBugResponse, error)
	// Prepares default values for a rule.
	PrepareDefaults(ctx context.Context, in *PrepareRuleDefaultsRequest, opts ...grpc.CallOption) (*PrepareRuleDefaultsResponse, error)
	// Creates a new rule and creates a new issue in an issue tracker.
	// Returns the rule that was created, which references the
	// newly filed issue.
	//
	// Designed as a compound RPC rather than separate NewIssue + CreateRule RPCs
	// to ensure that issues with the definition of the failure association rule
	// can be caught before the bug is filed (reduces chance of partial success
	// in which bug is filed but rule cannot then be created).
	// Designed to conform to https://google.aip.dev/136.
	CreateWithNewIssue(ctx context.Context, in *CreateRuleWithNewIssueRequest, opts ...grpc.CallOption) (*Rule, error)
}
type rulesPRPCClient struct {
	client *prpc.Client
}

func NewRulesPRPCClient(client *prpc.Client) RulesClient {
	return &rulesPRPCClient{client}
}

func (c *rulesPRPCClient) Get(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.client.Call(ctx, "luci.analysis.v1.Rules", "Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesPRPCClient) List(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Rules", "List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesPRPCClient) Create(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.client.Call(ctx, "luci.analysis.v1.Rules", "Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesPRPCClient) Update(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.client.Call(ctx, "luci.analysis.v1.Rules", "Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesPRPCClient) LookupBug(ctx context.Context, in *LookupBugRequest, opts ...grpc.CallOption) (*LookupBugResponse, error) {
	out := new(LookupBugResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Rules", "LookupBug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesPRPCClient) PrepareDefaults(ctx context.Context, in *PrepareRuleDefaultsRequest, opts ...grpc.CallOption) (*PrepareRuleDefaultsResponse, error) {
	out := new(PrepareRuleDefaultsResponse)
	err := c.client.Call(ctx, "luci.analysis.v1.Rules", "PrepareDefaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesPRPCClient) CreateWithNewIssue(ctx context.Context, in *CreateRuleWithNewIssueRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.client.Call(ctx, "luci.analysis.v1.Rules", "CreateWithNewIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type rulesClient struct {
	cc grpc.ClientConnInterface
}

func NewRulesClient(cc grpc.ClientConnInterface) RulesClient {
	return &rulesClient{cc}
}

func (c *rulesClient) Get(ctx context.Context, in *GetRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Rules/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) List(ctx context.Context, in *ListRulesRequest, opts ...grpc.CallOption) (*ListRulesResponse, error) {
	out := new(ListRulesResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Rules/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) Create(ctx context.Context, in *CreateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Rules/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) Update(ctx context.Context, in *UpdateRuleRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Rules/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) LookupBug(ctx context.Context, in *LookupBugRequest, opts ...grpc.CallOption) (*LookupBugResponse, error) {
	out := new(LookupBugResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Rules/LookupBug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) PrepareDefaults(ctx context.Context, in *PrepareRuleDefaultsRequest, opts ...grpc.CallOption) (*PrepareRuleDefaultsResponse, error) {
	out := new(PrepareRuleDefaultsResponse)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Rules/PrepareDefaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rulesClient) CreateWithNewIssue(ctx context.Context, in *CreateRuleWithNewIssueRequest, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := c.cc.Invoke(ctx, "/luci.analysis.v1.Rules/CreateWithNewIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulesServer is the server API for Rules service.
type RulesServer interface {
	// Retrieves a rule.
	// Designed to conform to https://google.aip.dev/131.
	Get(context.Context, *GetRuleRequest) (*Rule, error)
	// Lists rules.
	// TODO: implement pagination to make this
	// RPC compliant with https://google.aip.dev/132.
	// This RPC is incomplete. Future breaking changes are
	// expressly flagged.
	List(context.Context, *ListRulesRequest) (*ListRulesResponse, error)
	// Creates a new rule.
	// Designed to conform to https://google.aip.dev/133.
	Create(context.Context, *CreateRuleRequest) (*Rule, error)
	// Updates a rule.
	// Designed to conform to https://google.aip.dev/134.
	Update(context.Context, *UpdateRuleRequest) (*Rule, error)
	// Looks up the rule associated with a given bug, without knowledge
	// of the LUCI project the rule is in.
	// Designed to conform to https://google.aip.dev/136.
	LookupBug(context.Context, *LookupBugRequest) (*LookupBugResponse, error)
	// Prepares default values for a rule.
	PrepareDefaults(context.Context, *PrepareRuleDefaultsRequest) (*PrepareRuleDefaultsResponse, error)
	// Creates a new rule and creates a new issue in an issue tracker.
	// Returns the rule that was created, which references the
	// newly filed issue.
	//
	// Designed as a compound RPC rather than separate NewIssue + CreateRule RPCs
	// to ensure that issues with the definition of the failure association rule
	// can be caught before the bug is filed (reduces chance of partial success
	// in which bug is filed but rule cannot then be created).
	// Designed to conform to https://google.aip.dev/136.
	CreateWithNewIssue(context.Context, *CreateRuleWithNewIssueRequest) (*Rule, error)
}

// UnimplementedRulesServer can be embedded to have forward compatible implementations.
type UnimplementedRulesServer struct {
}

func (*UnimplementedRulesServer) Get(context.Context, *GetRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRulesServer) List(context.Context, *ListRulesRequest) (*ListRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedRulesServer) Create(context.Context, *CreateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedRulesServer) Update(context.Context, *UpdateRuleRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRulesServer) LookupBug(context.Context, *LookupBugRequest) (*LookupBugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupBug not implemented")
}
func (*UnimplementedRulesServer) PrepareDefaults(context.Context, *PrepareRuleDefaultsRequest) (*PrepareRuleDefaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareDefaults not implemented")
}
func (*UnimplementedRulesServer) CreateWithNewIssue(context.Context, *CreateRuleWithNewIssueRequest) (*Rule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithNewIssue not implemented")
}

func RegisterRulesServer(s prpc.Registrar, srv RulesServer) {
	s.RegisterService(&_Rules_serviceDesc, srv)
}

func _Rules_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Rules/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Get(ctx, req.(*GetRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Rules/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).List(ctx, req.(*ListRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Rules/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Create(ctx, req.(*CreateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Rules/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).Update(ctx, req.(*UpdateRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_LookupBug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupBugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).LookupBug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Rules/LookupBug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).LookupBug(ctx, req.(*LookupBugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_PrepareDefaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRuleDefaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).PrepareDefaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Rules/PrepareDefaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).PrepareDefaults(ctx, req.(*PrepareRuleDefaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rules_CreateWithNewIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRuleWithNewIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulesServer).CreateWithNewIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.analysis.v1.Rules/CreateWithNewIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulesServer).CreateWithNewIssue(ctx, req.(*CreateRuleWithNewIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rules_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.analysis.v1.Rules",
	HandlerType: (*RulesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Rules_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Rules_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Rules_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Rules_Update_Handler,
		},
		{
			MethodName: "LookupBug",
			Handler:    _Rules_LookupBug_Handler,
		},
		{
			MethodName: "PrepareDefaults",
			Handler:    _Rules_PrepareDefaults_Handler,
		},
		{
			MethodName: "CreateWithNewIssue",
			Handler:    _Rules_CreateWithNewIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/analysis/proto/v1/rules.proto",
}
