// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.analysis.v1;

option go_package = "go.chromium.org/luci/analysis/proto/v1;analysispb";

// Provides information about metrics in LUCI Analysis.
//
// Use of LUCI is subject to the Google [Terms of Service](https://policies.google.com/terms)
// and [Privacy Policy](https://policies.google.com/privacy).
service Metrics {
    // ListForProject lists metrics in a given LUCI Project.
    // Designed to follow aip.dev/132.
    rpc ListForProject(ListProjectMetricsRequest) returns (ListProjectMetricsResponse) {};
}

// A request to list metrics in a given LUCI project.
message ListProjectMetricsRequest {
    // The parent LUCI Project, which owns the collection of metrics.
    // Format: projects/{project}.
    string parent = 1;

    // Currently does not comply with aip.dev/132 as page_size and
    // page_token are missing. These should be added in future.
    // For now, the method is guaranteed to return all metrics.
}

// Lists the metrics available in a LUCI Project.
// Designed to follow aip.dev/132.
message ListProjectMetricsResponse {
    // The metrics available in the LUCI Project.
    repeated ProjectMetric metrics = 1;

    // TODO: Add next_page_token to comply with aip.dev/132.
}

// A metric with LUCI project-specific configuration attached.
message ProjectMetric {
    // The resource name of the metric.
    // Format: projects/{project}/metrics/{metric_id}.
    // See aip.dev/122 for more.
    string name = 1;

    // The identifier of the metric.
    // Follows the pattern: ^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$.
    string metric_id = 2;

    // A human readable name for the metric. E.g.
    // "User CLs Failed Presubmit".
    string human_readable_name = 3;

    // A human readable description of the metric. Normally
    // this appears in a help popup near the metric.
    string description = 4;

    // Whether the metric should be shown by default in
    // the cluster listing and on cluster pages.
    bool is_default = 5;

    // SortPriority defines the order by which metrics are sorted by default.
    // The metric with the highest sort priority will define the
    // (default) primary sort order, followed by the metric with the
    // second highest sort priority, and so on.
    // Each metric is guaranteed to have a unique sort priority.
    int32 sort_priority = 6;

    // Next ID: 7.
}
