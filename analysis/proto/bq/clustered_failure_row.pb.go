// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.31.1
// source: go.chromium.org/luci/analysis/proto/bq/clustered_failure_row.proto

package bqpb

import (
	v1 "go.chromium.org/luci/analysis/proto/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClusteredFailureRow represents a row in a BigQuery table for a clustered
// test failure.
// Next ID: 47.
type ClusteredFailureRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI project that the test failure belongs to.
	Project string `protobuf:"bytes,39,opt,name=project,proto3" json:"project,omitempty"`
	// The clustering algorithm which clustered the test failure.
	ClusterAlgorithm string `protobuf:"bytes,1,opt,name=cluster_algorithm,json=clusterAlgorithm,proto3" json:"cluster_algorithm,omitempty"`
	// The algorithm-defined cluster ID. Together with the cluster algorithm,
	// this uniquely defines a cluster the test failure was clustered into.
	//
	// Note that each test failure may appear in multiple clusters (due to
	// the presence of multiple clustering algorithms), but each clustering
	// algorithm may only cluster the test result into one cluster.
	//
	// Note that the cluster ID is split over two fields (cluster_algorithm,
	// cluster_id), rather than as one field with a record type, so that
	// BigQuery clustering can be defined over the ID (not possible if a
	// record type was used).
	ClusterId string `protobuf:"bytes,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	// The test results system from which the test originated.
	//
	// Currently, the only valid value is "resultdb".
	TestResultSystem string `protobuf:"bytes,3,opt,name=test_result_system,json=testResultSystem,proto3" json:"test_result_system,omitempty"`
	// The invocation from which this test result was ingested. This is
	// the top-level invocation that was ingested, an "invocation" being
	// a container of test results as identified by the source test result
	// system.
	//
	// For ResultDB, LUCI Analysis ingests invocations corresponding to
	// buildbucket builds.
	//
	// All test results ingested from the same invocation (i.e. with the
	// same ingested_invocation_id) will have the same partition time.
	IngestedInvocationId string `protobuf:"bytes,21,opt,name=ingested_invocation_id,json=ingestedInvocationId,proto3" json:"ingested_invocation_id,omitempty"`
	// The identity of the test result in the test results system. Together
	// with the test results system and the ingested invocation ID, this uniquely
	// identifies the failure that was clustered.
	//
	// In some test result systems (e.g. ResultDB), a test result might be
	// included in multiple invocations. Where this occurs, the test result may be
	// ingested by LUCI Analysis multiple times, once for each top-level
	// invocation it appears in. The same test result may have different
	// attributes (e.g. presubmit_run_owner) depending on which top-level
	// invocation it is ingested under.
	//
	// For test results in ResultDB, the format is:
	// "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}"
	// Where INVOCATION_ID, URL_ESCAPED_TEST_ID and RESULT_ID are values
	// defined in ResultDB.
	//
	// Note that the test result ID is split over three fields
	// (test_result_system, ingested_invocation_id, test_result_id), rather than
	// as one field with a record type, so that BigQuery clustering can be defined
	// over the ID (not possible if a record type was used).
	TestResultId string `protobuf:"bytes,4,opt,name=test_result_id,json=testResultId,proto3" json:"test_result_id,omitempty"`
	// Last Updated defines the version of test result-cluster inclusion status,
	// as represented by this row. During its lifetime, due to changing
	// failure association rules and clustering algorithm revisions, the
	// clusters a test result is in may be updated.
	//
	// To achieve deletion in an append-optimised datastore like BigQuery,
	// a new row will be exported for a given (cluster_algorithm, cluster_id,
	// test_result_system, ingested_invocation_id, test_result_id) tuple with a
	// later last_updated time that changes the is_included and/or
	// is_included_with_high_priority fields. A scheduled query periodically
	// purges superseded rows, to avoid excessive growth in the table.
	//
	// Clients should filter the rows they read to ensure they only use the
	// rows with the latest last_updated time.
	//
	// The following is the definition of a view that correctly uses
	// the last updated time column to query the table:
	//
	//	SELECT
	//	  ARRAY_AGG(cf ORDER BY last_updated DESC LIMIT 1)[OFFSET(0)] as row
	//	FROM clustered_failures cf
	//	-- Recommended: Apply restriction on partitions (e.g. last 14 days) as
	//	-- desired.
	//	-- WHERE partition_time >= TIMESTAMP_SUB(@as_at_time, INTERVAL 14 DAY)
	//	GROUP BY project, cluster_algorithm, cluster_id, test_result_system, ingested_invocation_id, test_result_id
	//	HAVING row.is_included
	//
	// This is based on the query design in [1].
	// [1]: https://cloud.google.com/blog/products/bigquery/performing-large-scale-mutations-in-bigquery
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// The test result partition time identifies the beginning of the test
	// result retention period, and corresponds to the time the ingested
	// invocation was created in Spanner.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// Whether the test result is included in the cluster. Set to false if
	// the test result has been removed from the cluster.
	// False values appear in BigQuery as NULL.
	IsIncluded bool `protobuf:"varint,7,opt,name=is_included,json=isIncluded,proto3" json:"is_included,omitempty"`
	// Whether the test result is included in the cluster with high priority.
	// True if either:
	//  1. this cluster is a bug cluster (i.e. cluster defined by failure
	//     association rule), OR
	//  2. this cluster is a suggested cluster, and the test result is NOT
	//     also in a bug cluster.
	//
	// False values appear in BigQuery as NULL.
	IsIncludedWithHighPriority bool `protobuf:"varint,8,opt,name=is_included_with_high_priority,json=isIncludedWithHighPriority,proto3" json:"is_included_with_high_priority,omitempty"`
	// The chunk this failure was processed and stored in. Assigned by
	// LUCI Analysis ingestion.
	ChunkId string `protobuf:"bytes,9,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// The zero-based index of this failure within the chunk. Assigned by
	// LUCI Analysis ingestion.
	ChunkIndex int64 `protobuf:"varint,10,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	// Security realm of the test result.
	// For test results from ResultDB, this must be set. The format is
	// "{LUCI_PROJECT}:{REALM_SUFFIX}", for example "chromium:ci".
	Realm string `protobuf:"bytes,11,opt,name=realm,proto3" json:"realm,omitempty"`
	// The structured test identifier.
	//
	// Uniquely identifies the test that was run, including the specific way of running that
	// test, e.g. build configuration, CPU architecture, OS.
	TestIdStructured *TestIdentifier `protobuf:"bytes,45,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// A unique identifier of the test in a LUCI project, excluding variant.
	//
	// This is the flat-form encoding of the structured test variant ID above,
	// excluding information about the specific way of running test (e.g. build configuration,
	// CPU architecture). Such information is captured separately in the `variant` field below.
	TestId string `protobuf:"bytes,12,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The previous ID used by this test, if any.
	// This comes from test_metadata.previous_test_id.
	PreviousTestId string `protobuf:"bytes,46,opt,name=previous_test_id,json=previousTestId,proto3" json:"previous_test_id,omitempty"`
	// Key-value pairs describing one specific way of running the test,
	// e.g. build configuration, CPU architecture, OS.
	Variant []*v1.StringPair `protobuf:"bytes,13,rep,name=variant,proto3" json:"variant,omitempty"`
	// Metadata key value pairs for this test result.
	// It might describe this particular execution or the test case.
	// A key can be repeated.
	Tags []*v1.StringPair `protobuf:"bytes,32,rep,name=tags,proto3" json:"tags,omitempty"`
	// Hash of the variant.
	// hex(sha256(‚Äù.join(sorted('%s:%s\n' for k, v in variant.items())))).
	VariantHash string `protobuf:"bytes,14,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// A failure reason describing why the test failed.
	FailureReason *v1.FailureReason `protobuf:"bytes,15,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// The bug tracking component corresponding to this test case, as identified
	// by the test results system. If no information is available, this is
	// unset.
	BugTrackingComponent *v1.BugTrackingComponent `protobuf:"bytes,16,opt,name=bug_tracking_component,json=bugTrackingComponent,proto3" json:"bug_tracking_component,omitempty"`
	// The point in time when the test case started to execute.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The amount of time the test case took to execute, in seconds.
	Duration float64 `protobuf:"fixed64,18,opt,name=duration,proto3" json:"duration,omitempty"`
	// The exonerations applied to the test verdict.
	// An empty list indicates the test verdict this test result was a part of
	// was not exonerated.
	Exonerations []*ClusteredFailureRow_TestExoneration `protobuf:"bytes,33,rep,name=exonerations,proto3" json:"exonerations,omitempty"`
	// Identity of the presubmit run that contains this test result.
	// This should be unique per "CQ+1"/"CQ+2" attempt on gerrit.
	//
	// One presumbit run MAY have many ingested invocation IDs (e.g. for its
	// various tryjobs), but every ingested invocation ID only ever has one
	// presubmit run ID (if any).
	//
	// All test results for the same presubmit run will have one
	// partition_time.
	//
	// If the test result was not collected as part of a presubmit run,
	// this is unset.
	PresubmitRunId *v1.PresubmitRunId `protobuf:"bytes,20,opt,name=presubmit_run_id,json=presubmitRunId,proto3" json:"presubmit_run_id,omitempty"`
	// The owner of the presubmit run (if any).
	// This is the owner of the CL on which CQ+1/CQ+2 was clicked
	// (even in case of presubmit run with multiple CLs).
	// There is scope for this field to become an email address if privacy
	// approval is obtained, until then it is "automation" (for automation
	// service accounts) and "user" otherwise.
	PresubmitRunOwner string `protobuf:"bytes,29,opt,name=presubmit_run_owner,json=presubmitRunOwner,proto3" json:"presubmit_run_owner,omitempty"`
	// The mode of the presubmit run (if any).
	// E.g. DRY_RUN, FULL_RUN, QUICK_DRY_RUN.
	// If this test result does not relate to a presubmit run, this field
	// is left as its default value (""). In BigQuery, this results in a
	// NULL value.
	PresubmitRunMode string `protobuf:"bytes,34,opt,name=presubmit_run_mode,json=presubmitRunMode,proto3" json:"presubmit_run_mode,omitempty"`
	// The presubmit run's ending status.
	// Notionally luci.analysis.v1.PresubmitRunStatus, but string so that
	// we can chop off the "PRESUBMIT_RUN_STATUS_" prefix and have
	// only the status, e.g. SUCCESS, FAILURE, CANCELED.
	// If this test result does not relate to a presubmit run, this field
	// is left as its default value (""). In BigQuery, this results in a
	// NULL value.
	PresubmitRunStatus string `protobuf:"bytes,35,opt,name=presubmit_run_status,json=presubmitRunStatus,proto3" json:"presubmit_run_status,omitempty"`
	// The status of the build that contained this test result. Can be used
	// to filter incomplete results (e.g. where build was cancelled or had
	// an infra failure). Can also be used to filter builds with incomplete
	// exonerations (e.g. build succeeded but some tests not exonerated).
	// This is the build corresponding to ingested_invocation_id.
	// Notionally luci.analysis.v1.BuildStatus, but string so that we can chop
	// off the BUILD_STATUS_ prefix that would otherwise appear on every value.
	BuildStatus string `protobuf:"bytes,36,opt,name=build_status,json=buildStatus,proto3" json:"build_status,omitempty"`
	// Whether the build was critical to a presubmit run succeeding.
	// If the build did not relate presubmit run (i.e. because it was a tryjob
	// for a presubmit run), this is false.
	// Note that both possible false values (from the build is not critical
	// or because the build was not part of a presubmit run) appear in
	// BigQuery as NULL.
	// You can identify which of these cases applies by
	// checking if presubmit_run_id is populated.
	BuildCritical bool `protobuf:"varint,37,opt,name=build_critical,json=buildCritical,proto3" json:"build_critical,omitempty"`
	// The zero-based index for this test result, in the sequence of the
	// ingested invocation's results for this test variant. Within the sequence,
	// test results are ordered by start_time and then by test result ID.
	// The first test result is 0, the last test result is
	// ingested_invocation_result_count - 1.
	IngestedInvocationResultIndex int64 `protobuf:"varint,22,opt,name=ingested_invocation_result_index,json=ingestedInvocationResultIndex,proto3" json:"ingested_invocation_result_index,omitempty"`
	// The number of test results having this test variant in the ingested
	// invocation.
	IngestedInvocationResultCount int64 `protobuf:"varint,23,opt,name=ingested_invocation_result_count,json=ingestedInvocationResultCount,proto3" json:"ingested_invocation_result_count,omitempty"`
	// Is the ingested invocation blocked by this test variant? This is
	// only true if all (non-skipped) test results for this test variant
	// (in the ingested invocation) are unexpected failures.
	//
	// Exoneration does not factor into this value; check is_exonerated
	// to see if the impact of this ingested invocation being blocked was
	// mitigated by exoneration.
	IsIngestedInvocationBlocked bool `protobuf:"varint,24,opt,name=is_ingested_invocation_blocked,json=isIngestedInvocationBlocked,proto3" json:"is_ingested_invocation_blocked,omitempty"`
	// The identifier of the test run the test ran in. Test results in different
	// test runs are generally considered independent as they should be unable
	// to leak state to one another.
	//
	// In Chrome and Chrome OS, a test run logically corresponds to a swarming
	// task that runs tests, but this ID is not necessarily the ID of that
	// task, but rather any other ID that is unique per such task.
	//
	// If test result system is ResultDB, this is the ID of the ResultDB
	// invocation the test result was immediately contained within, not including
	// any "invocations/" prefix.
	TestRunId string `protobuf:"bytes,25,opt,name=test_run_id,json=testRunId,proto3" json:"test_run_id,omitempty"`
	// The zero-based index for this test result, in the sequence of results
	// having this test variant and test run. Within the sequence, test
	// results are ordered by start_time and then by test result ID.
	// The first test result is 0, the last test result is
	// test_run_result_count - 1.
	TestRunResultIndex int64 `protobuf:"varint,26,opt,name=test_run_result_index,json=testRunResultIndex,proto3" json:"test_run_result_index,omitempty"`
	// The number of test results having this test variant and test run.
	TestRunResultCount int64 `protobuf:"varint,27,opt,name=test_run_result_count,json=testRunResultCount,proto3" json:"test_run_result_count,omitempty"`
	// Is the test run blocked by this test variant? This is only true if all
	// (non-skipped) test results for this test variant (in the test run)
	// are unexpected failures.
	//
	// Exoneration does not factor into this value; check is_exonerated
	// to see if the impact of this test run being blocked was
	// mitigated by exoneration.
	IsTestRunBlocked bool `protobuf:"varint,28,opt,name=is_test_run_blocked,json=isTestRunBlocked,proto3" json:"is_test_run_blocked,omitempty"`
	// The code sources tested, if known.
	Sources *v1.Sources `protobuf:"bytes,40,opt,name=sources,proto3" json:"sources,omitempty"`
	// The branch in source control that was tested, if known.
	// For example, the `refs/heads/main` branch in the `chromium/src` repo
	// hosted by `chromium.googlesource.com`.
	// This is a subset of the information in the `sources` field.
	SourceRef *v1.SourceRef `protobuf:"bytes,41,opt,name=source_ref,json=sourceRef,proto3" json:"source_ref,omitempty"`
	// Hash of the source_ref field, as 16 lowercase hexadecimal characters.
	// Can be used to uniquely identify a branch in a source code
	// version control system.
	SourceRefHash string `protobuf:"bytes,42,opt,name=source_ref_hash,json=sourceRefHash,proto3" json:"source_ref_hash,omitempty"`
	// The gardener rotations the build is a part of. Corresponds to the
	// `sheriff_rotations` field of the build input properties.
	BuildGardenerRotations []string `protobuf:"bytes,43,rep,name=build_gardener_rotations,json=buildGardenerRotations,proto3" json:"build_gardener_rotations,omitempty"`
	// Information about the test variant branch the result is from.
	TestVariantBranch *ClusteredFailureRow_TestVariantBranch `protobuf:"bytes,44,opt,name=test_variant_branch,json=testVariantBranch,proto3" json:"test_variant_branch,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClusteredFailureRow) Reset() {
	*x = ClusteredFailureRow{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusteredFailureRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteredFailureRow) ProtoMessage() {}

func (x *ClusteredFailureRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteredFailureRow.ProtoReflect.Descriptor instead.
func (*ClusteredFailureRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescGZIP(), []int{0}
}

func (x *ClusteredFailureRow) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ClusteredFailureRow) GetClusterAlgorithm() string {
	if x != nil {
		return x.ClusterAlgorithm
	}
	return ""
}

func (x *ClusteredFailureRow) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *ClusteredFailureRow) GetTestResultSystem() string {
	if x != nil {
		return x.TestResultSystem
	}
	return ""
}

func (x *ClusteredFailureRow) GetIngestedInvocationId() string {
	if x != nil {
		return x.IngestedInvocationId
	}
	return ""
}

func (x *ClusteredFailureRow) GetTestResultId() string {
	if x != nil {
		return x.TestResultId
	}
	return ""
}

func (x *ClusteredFailureRow) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *ClusteredFailureRow) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *ClusteredFailureRow) GetIsIncluded() bool {
	if x != nil {
		return x.IsIncluded
	}
	return false
}

func (x *ClusteredFailureRow) GetIsIncludedWithHighPriority() bool {
	if x != nil {
		return x.IsIncludedWithHighPriority
	}
	return false
}

func (x *ClusteredFailureRow) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *ClusteredFailureRow) GetChunkIndex() int64 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ClusteredFailureRow) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *ClusteredFailureRow) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *ClusteredFailureRow) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *ClusteredFailureRow) GetPreviousTestId() string {
	if x != nil {
		return x.PreviousTestId
	}
	return ""
}

func (x *ClusteredFailureRow) GetVariant() []*v1.StringPair {
	if x != nil {
		return x.Variant
	}
	return nil
}

func (x *ClusteredFailureRow) GetTags() []*v1.StringPair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ClusteredFailureRow) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *ClusteredFailureRow) GetFailureReason() *v1.FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

func (x *ClusteredFailureRow) GetBugTrackingComponent() *v1.BugTrackingComponent {
	if x != nil {
		return x.BugTrackingComponent
	}
	return nil
}

func (x *ClusteredFailureRow) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ClusteredFailureRow) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *ClusteredFailureRow) GetExonerations() []*ClusteredFailureRow_TestExoneration {
	if x != nil {
		return x.Exonerations
	}
	return nil
}

func (x *ClusteredFailureRow) GetPresubmitRunId() *v1.PresubmitRunId {
	if x != nil {
		return x.PresubmitRunId
	}
	return nil
}

func (x *ClusteredFailureRow) GetPresubmitRunOwner() string {
	if x != nil {
		return x.PresubmitRunOwner
	}
	return ""
}

func (x *ClusteredFailureRow) GetPresubmitRunMode() string {
	if x != nil {
		return x.PresubmitRunMode
	}
	return ""
}

func (x *ClusteredFailureRow) GetPresubmitRunStatus() string {
	if x != nil {
		return x.PresubmitRunStatus
	}
	return ""
}

func (x *ClusteredFailureRow) GetBuildStatus() string {
	if x != nil {
		return x.BuildStatus
	}
	return ""
}

func (x *ClusteredFailureRow) GetBuildCritical() bool {
	if x != nil {
		return x.BuildCritical
	}
	return false
}

func (x *ClusteredFailureRow) GetIngestedInvocationResultIndex() int64 {
	if x != nil {
		return x.IngestedInvocationResultIndex
	}
	return 0
}

func (x *ClusteredFailureRow) GetIngestedInvocationResultCount() int64 {
	if x != nil {
		return x.IngestedInvocationResultCount
	}
	return 0
}

func (x *ClusteredFailureRow) GetIsIngestedInvocationBlocked() bool {
	if x != nil {
		return x.IsIngestedInvocationBlocked
	}
	return false
}

func (x *ClusteredFailureRow) GetTestRunId() string {
	if x != nil {
		return x.TestRunId
	}
	return ""
}

func (x *ClusteredFailureRow) GetTestRunResultIndex() int64 {
	if x != nil {
		return x.TestRunResultIndex
	}
	return 0
}

func (x *ClusteredFailureRow) GetTestRunResultCount() int64 {
	if x != nil {
		return x.TestRunResultCount
	}
	return 0
}

func (x *ClusteredFailureRow) GetIsTestRunBlocked() bool {
	if x != nil {
		return x.IsTestRunBlocked
	}
	return false
}

func (x *ClusteredFailureRow) GetSources() *v1.Sources {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *ClusteredFailureRow) GetSourceRef() *v1.SourceRef {
	if x != nil {
		return x.SourceRef
	}
	return nil
}

func (x *ClusteredFailureRow) GetSourceRefHash() string {
	if x != nil {
		return x.SourceRefHash
	}
	return ""
}

func (x *ClusteredFailureRow) GetBuildGardenerRotations() []string {
	if x != nil {
		return x.BuildGardenerRotations
	}
	return nil
}

func (x *ClusteredFailureRow) GetTestVariantBranch() *ClusteredFailureRow_TestVariantBranch {
	if x != nil {
		return x.TestVariantBranch
	}
	return nil
}

type ClusteredFailureRow_TestExoneration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Machine-readable reasons describing why the test failure was exonerated
	// (if any).
	Reason        v1.ExonerationReason `protobuf:"varint,1,opt,name=reason,proto3,enum=luci.analysis.v1.ExonerationReason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusteredFailureRow_TestExoneration) Reset() {
	*x = ClusteredFailureRow_TestExoneration{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusteredFailureRow_TestExoneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteredFailureRow_TestExoneration) ProtoMessage() {}

func (x *ClusteredFailureRow_TestExoneration) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteredFailureRow_TestExoneration.ProtoReflect.Descriptor instead.
func (*ClusteredFailureRow_TestExoneration) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ClusteredFailureRow_TestExoneration) GetReason() v1.ExonerationReason {
	if x != nil {
		return x.Reason
	}
	return v1.ExonerationReason(0)
}

// Information about the (test,variant,source ref) the verdict is from.
// Source ref refers to the source branch that was tested, see
// `source_ref`.
type ClusteredFailureRow_TestVariantBranch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of flaky verdicts in the preceding 24 hours. A verdict
	// is considered flaky for this count if it has both expected and
	// unexpected test results (excluding skips). Whether the verdict
	// was exonerated is irrelevant.
	FlakyVerdicts_24H int64 `protobuf:"varint,1,opt,name=flaky_verdicts_24h,json=flakyVerdicts24h,proto3" json:"flaky_verdicts_24h,omitempty"`
	// The number of unexpected verdicts in the preceding 24 hours. A verdict
	// is considered unexpected for this count if has only unexpected test
	// results (excluding skips). Whether the verdict was exonerated is
	// irrelevant.
	UnexpectedVerdicts_24H int64 `protobuf:"varint,2,opt,name=unexpected_verdicts_24h,json=unexpectedVerdicts24h,proto3" json:"unexpected_verdicts_24h,omitempty"`
	// The total number of verdicts in the preceding 24 hours, excluding
	// verdicts with only skipped test results.
	TotalVerdicts_24H int64 `protobuf:"varint,3,opt,name=total_verdicts_24h,json=totalVerdicts24h,proto3" json:"total_verdicts_24h,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ClusteredFailureRow_TestVariantBranch) Reset() {
	*x = ClusteredFailureRow_TestVariantBranch{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusteredFailureRow_TestVariantBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusteredFailureRow_TestVariantBranch) ProtoMessage() {}

func (x *ClusteredFailureRow_TestVariantBranch) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusteredFailureRow_TestVariantBranch.ProtoReflect.Descriptor instead.
func (*ClusteredFailureRow_TestVariantBranch) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ClusteredFailureRow_TestVariantBranch) GetFlakyVerdicts_24H() int64 {
	if x != nil {
		return x.FlakyVerdicts_24H
	}
	return 0
}

func (x *ClusteredFailureRow_TestVariantBranch) GetUnexpectedVerdicts_24H() int64 {
	if x != nil {
		return x.UnexpectedVerdicts_24H
	}
	return 0
}

func (x *ClusteredFailureRow_TestVariantBranch) GetTotalVerdicts_24H() int64 {
	if x != nil {
		return x.TotalVerdicts_24H
	}
	return 0
}

var File_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDesc = string([]byte{
	0x0a, 0x42, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x13, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x4e, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x5c, 0x0a,
	0x16, 0x62, 0x75, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x75, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x62, 0x75, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0c, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x65,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x75, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x47, 0x0a, 0x20,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69,
	0x73, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x0a,
	0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2d, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x18, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x47, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x67, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x62, 0x71, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x11, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x4e, 0x0a, 0x0f, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xa7, 0x01, 0x0a, 0x11,
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x66,
	0x6c, 0x61, 0x6b, 0x79, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x32, 0x34, 0x68, 0x12,
	0x36, 0x0a, 0x17, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x73, 0x32, 0x34, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x73, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x73, 0x32, 0x34, 0x68, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x4a, 0x04, 0x08, 0x1f, 0x10,
	0x20, 0x4a, 0x04, 0x08, 0x1e, 0x10, 0x1f, 0x4a, 0x04, 0x08, 0x26, 0x10, 0x27, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x3b, 0x62, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_goTypes = []any{
	(*ClusteredFailureRow)(nil),                   // 0: luci.analysis.bq.ClusteredFailureRow
	(*ClusteredFailureRow_TestExoneration)(nil),   // 1: luci.analysis.bq.ClusteredFailureRow.TestExoneration
	(*ClusteredFailureRow_TestVariantBranch)(nil), // 2: luci.analysis.bq.ClusteredFailureRow.TestVariantBranch
	(*timestamppb.Timestamp)(nil),                 // 3: google.protobuf.Timestamp
	(*TestIdentifier)(nil),                        // 4: luci.analysis.bq.TestIdentifier
	(*v1.StringPair)(nil),                         // 5: luci.analysis.v1.StringPair
	(*v1.FailureReason)(nil),                      // 6: luci.analysis.v1.FailureReason
	(*v1.BugTrackingComponent)(nil),               // 7: luci.analysis.v1.BugTrackingComponent
	(*v1.PresubmitRunId)(nil),                     // 8: luci.analysis.v1.PresubmitRunId
	(*v1.Sources)(nil),                            // 9: luci.analysis.v1.Sources
	(*v1.SourceRef)(nil),                          // 10: luci.analysis.v1.SourceRef
	(v1.ExonerationReason)(0),                     // 11: luci.analysis.v1.ExonerationReason
}
var file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_depIdxs = []int32{
	3,  // 0: luci.analysis.bq.ClusteredFailureRow.last_updated:type_name -> google.protobuf.Timestamp
	3,  // 1: luci.analysis.bq.ClusteredFailureRow.partition_time:type_name -> google.protobuf.Timestamp
	4,  // 2: luci.analysis.bq.ClusteredFailureRow.test_id_structured:type_name -> luci.analysis.bq.TestIdentifier
	5,  // 3: luci.analysis.bq.ClusteredFailureRow.variant:type_name -> luci.analysis.v1.StringPair
	5,  // 4: luci.analysis.bq.ClusteredFailureRow.tags:type_name -> luci.analysis.v1.StringPair
	6,  // 5: luci.analysis.bq.ClusteredFailureRow.failure_reason:type_name -> luci.analysis.v1.FailureReason
	7,  // 6: luci.analysis.bq.ClusteredFailureRow.bug_tracking_component:type_name -> luci.analysis.v1.BugTrackingComponent
	3,  // 7: luci.analysis.bq.ClusteredFailureRow.start_time:type_name -> google.protobuf.Timestamp
	1,  // 8: luci.analysis.bq.ClusteredFailureRow.exonerations:type_name -> luci.analysis.bq.ClusteredFailureRow.TestExoneration
	8,  // 9: luci.analysis.bq.ClusteredFailureRow.presubmit_run_id:type_name -> luci.analysis.v1.PresubmitRunId
	9,  // 10: luci.analysis.bq.ClusteredFailureRow.sources:type_name -> luci.analysis.v1.Sources
	10, // 11: luci.analysis.bq.ClusteredFailureRow.source_ref:type_name -> luci.analysis.v1.SourceRef
	2,  // 12: luci.analysis.bq.ClusteredFailureRow.test_variant_branch:type_name -> luci.analysis.bq.ClusteredFailureRow.TestVariantBranch
	11, // 13: luci.analysis.bq.ClusteredFailureRow.TestExoneration.reason:type_name -> luci.analysis.v1.ExonerationReason
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_init() }
func file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_clustered_failure_row_proto_depIdxs = nil
}
