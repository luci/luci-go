// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.0
// source: go.chromium.org/luci/analysis/proto/bq/legacy/ants_test_result_row.proto

package bqpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum that defines the type of the Android build.
type AntsTestResultRow_BuildType int32

const (
	AntsTestResultRow_BUILD_TYPE_UNSPECIFIED AntsTestResultRow_BuildType = 0
	AntsTestResultRow_SUBMITTED              AntsTestResultRow_BuildType = 1
	AntsTestResultRow_PENDING                AntsTestResultRow_BuildType = 2
	AntsTestResultRow_EXTERNAL               AntsTestResultRow_BuildType = 3
	// For Mainline train build.
	AntsTestResultRow_TRAIN AntsTestResultRow_BuildType = 4
	// For local build.
	AntsTestResultRow_LOCAL AntsTestResultRow_BuildType = 5
)

// Enum value maps for AntsTestResultRow_BuildType.
var (
	AntsTestResultRow_BuildType_name = map[int32]string{
		0: "BUILD_TYPE_UNSPECIFIED",
		1: "SUBMITTED",
		2: "PENDING",
		3: "EXTERNAL",
		4: "TRAIN",
		5: "LOCAL",
	}
	AntsTestResultRow_BuildType_value = map[string]int32{
		"BUILD_TYPE_UNSPECIFIED": 0,
		"SUBMITTED":              1,
		"PENDING":                2,
		"EXTERNAL":               3,
		"TRAIN":                  4,
		"LOCAL":                  5,
	}
)

func (x AntsTestResultRow_BuildType) Enum() *AntsTestResultRow_BuildType {
	p := new(AntsTestResultRow_BuildType)
	*p = x
	return p
}

func (x AntsTestResultRow_BuildType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AntsTestResultRow_BuildType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[0].Descriptor()
}

func (AntsTestResultRow_BuildType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[0]
}

func (x AntsTestResultRow_BuildType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AntsTestResultRow_BuildType.Descriptor instead.
func (AntsTestResultRow_BuildType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 0}
}

// The possible statuses that a TestResult can report.
type AntsTestResultRow_TestStatus int32

const (
	AntsTestResultRow_TEST_STATUS_UNSPECIFIED AntsTestResultRow_TestStatus = 0
	// The test passed.
	AntsTestResultRow_PASS AntsTestResultRow_TestStatus = 1
	// The test failed.
	AntsTestResultRow_FAIL AntsTestResultRow_TestStatus = 2
	// The test result should be ignored. For example, see http://junit.sourceforge.net/javadoc/org/junit/Ignore.html.
	AntsTestResultRow_IGNORED AntsTestResultRow_TestStatus = 3
	// The test result had an assumption which failed. For example, see http://junit.sourceforge.net/javadoc/org/junit/Assume.html.
	AntsTestResultRow_ASSUMPTION_FAILURE AntsTestResultRow_TestStatus = 4
	// There was an error while running the test.
	AntsTestResultRow_TEST_ERROR AntsTestResultRow_TestStatus = 5
	// The test was skipped. When the test was skipped the reason should be available in the skipped_reason field.
	AntsTestResultRow_TEST_SKIPPED AntsTestResultRow_TestStatus = 6
)

// Enum value maps for AntsTestResultRow_TestStatus.
var (
	AntsTestResultRow_TestStatus_name = map[int32]string{
		0: "TEST_STATUS_UNSPECIFIED",
		1: "PASS",
		2: "FAIL",
		3: "IGNORED",
		4: "ASSUMPTION_FAILURE",
		5: "TEST_ERROR",
		6: "TEST_SKIPPED",
	}
	AntsTestResultRow_TestStatus_value = map[string]int32{
		"TEST_STATUS_UNSPECIFIED": 0,
		"PASS":                    1,
		"FAIL":                    2,
		"IGNORED":                 3,
		"ASSUMPTION_FAILURE":      4,
		"TEST_ERROR":              5,
		"TEST_SKIPPED":            6,
	}
)

func (x AntsTestResultRow_TestStatus) Enum() *AntsTestResultRow_TestStatus {
	p := new(AntsTestResultRow_TestStatus)
	*p = x
	return p
}

func (x AntsTestResultRow_TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AntsTestResultRow_TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[1].Descriptor()
}

func (AntsTestResultRow_TestStatus) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[1]
}

func (x AntsTestResultRow_TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AntsTestResultRow_TestStatus.Descriptor instead.
func (AntsTestResultRow_TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 1}
}

// Error type, to better distinguish different causes of errors.
type AntsTestResultRow_ErrorType int32

const (
	AntsTestResultRow_ERROR_TYPE_UNSPECIFIED AntsTestResultRow_ErrorType = 0
	// The test in progress was the reason for the failure.
	AntsTestResultRow_TEST_FAILURE AntsTestResultRow_ErrorType = 1
	// A timeout condition on the operation in progress occurred.
	AntsTestResultRow_TIMEOUT AntsTestResultRow_ErrorType = 2
	// The test in progress was cancelled.
	AntsTestResultRow_TEST_CANCELLED AntsTestResultRow_ErrorType = 3
	// A failure attributed to something not functioning properly.
	AntsTestResultRow_INFRA_ERROR AntsTestResultRow_ErrorType = 4
	// System under test crashed and caused the test to fail.
	AntsTestResultRow_SYSTEM_UNDER_TEST_CRASHED AntsTestResultRow_ErrorType = 5
	// The test was expected to run but did not.
	AntsTestResultRow_NOT_EXECUTED AntsTestResultRow_ErrorType = 6
	// System under test became unavailable and never came back available again.
	AntsTestResultRow_LOST_SYSTEM_UNDER_TEST AntsTestResultRow_ErrorType = 7
	// Represent an error caused by an unmet dependency that the current infra depends on. For example: Unfound resources,
	// Device error, Hardware issue (lab host, device wear), Underlying tools
	AntsTestResultRow_DEPENDENCY_ISSUE AntsTestResultRow_ErrorType = 8
	// Represent an error caused by the input from the end user. For example: Unexpected option combination, Configuration error, Bad flags
	AntsTestResultRow_CUSTOMER_ISSUE AntsTestResultRow_ErrorType = 9
)

// Enum value maps for AntsTestResultRow_ErrorType.
var (
	AntsTestResultRow_ErrorType_name = map[int32]string{
		0: "ERROR_TYPE_UNSPECIFIED",
		1: "TEST_FAILURE",
		2: "TIMEOUT",
		3: "TEST_CANCELLED",
		4: "INFRA_ERROR",
		5: "SYSTEM_UNDER_TEST_CRASHED",
		6: "NOT_EXECUTED",
		7: "LOST_SYSTEM_UNDER_TEST",
		8: "DEPENDENCY_ISSUE",
		9: "CUSTOMER_ISSUE",
	}
	AntsTestResultRow_ErrorType_value = map[string]int32{
		"ERROR_TYPE_UNSPECIFIED":    0,
		"TEST_FAILURE":              1,
		"TIMEOUT":                   2,
		"TEST_CANCELLED":            3,
		"INFRA_ERROR":               4,
		"SYSTEM_UNDER_TEST_CRASHED": 5,
		"NOT_EXECUTED":              6,
		"LOST_SYSTEM_UNDER_TEST":    7,
		"DEPENDENCY_ISSUE":          8,
		"CUSTOMER_ISSUE":            9,
	}
)

func (x AntsTestResultRow_ErrorType) Enum() *AntsTestResultRow_ErrorType {
	p := new(AntsTestResultRow_ErrorType)
	*p = x
	return p
}

func (x AntsTestResultRow_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AntsTestResultRow_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[2].Descriptor()
}

func (AntsTestResultRow_ErrorType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[2]
}

func (x AntsTestResultRow_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AntsTestResultRow_ErrorType.Descriptor instead.
func (AntsTestResultRow_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 2}
}

// The level of aggregation.
type AntsTestResultRow_AggregationLevel int32

const (
	AntsTestResultRow_AGGREGATION_LEVEL_UNSPECIFIED AntsTestResultRow_AggregationLevel = 0
	// All test results for an Invocation.
	AntsTestResultRow_INVOCATION AntsTestResultRow_AggregationLevel = 1
	// Test results for a module. This considers the module name and parameters in the `TestIdentifier` message.
	AntsTestResultRow_MODULE AntsTestResultRow_AggregationLevel = 2
	// Test results for a test package. This considers the module and all results sharing the same package from `test_class`
	// field in the `TestIdentifier` message. This is the string before the last "." in that field.
	AntsTestResultRow_PACKAGE AntsTestResultRow_AggregationLevel = 3
	// Test results for a test class. This considers the module and all results sharing the same `test_class` in the `TestIdentifier` message.
	AntsTestResultRow_CLASS AntsTestResultRow_AggregationLevel = 4
	// Test results for a method. This is currently not being generated.
	AntsTestResultRow_METHOD AntsTestResultRow_AggregationLevel = 5
)

// Enum value maps for AntsTestResultRow_AggregationLevel.
var (
	AntsTestResultRow_AggregationLevel_name = map[int32]string{
		0: "AGGREGATION_LEVEL_UNSPECIFIED",
		1: "INVOCATION",
		2: "MODULE",
		3: "PACKAGE",
		4: "CLASS",
		5: "METHOD",
	}
	AntsTestResultRow_AggregationLevel_value = map[string]int32{
		"AGGREGATION_LEVEL_UNSPECIFIED": 0,
		"INVOCATION":                    1,
		"MODULE":                        2,
		"PACKAGE":                       3,
		"CLASS":                         4,
		"METHOD":                        5,
	}
)

func (x AntsTestResultRow_AggregationLevel) Enum() *AntsTestResultRow_AggregationLevel {
	p := new(AntsTestResultRow_AggregationLevel)
	*p = x
	return p
}

func (x AntsTestResultRow_AggregationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AntsTestResultRow_AggregationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[3].Descriptor()
}

func (AntsTestResultRow_AggregationLevel) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[3]
}

func (x AntsTestResultRow_AggregationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AntsTestResultRow_AggregationLevel.Descriptor instead.
func (AntsTestResultRow_AggregationLevel) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 3}
}

// Possible reasons why a test result was skipped and did not run.
// Next ID: 2
type AntsTestResultRow_ReasonType int32

const (
	AntsTestResultRow_REASON_UNSPECIFIED AntsTestResultRow_ReasonType = 0
	AntsTestResultRow_REASON_DEMOTION    AntsTestResultRow_ReasonType = 1
)

// Enum value maps for AntsTestResultRow_ReasonType.
var (
	AntsTestResultRow_ReasonType_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "REASON_DEMOTION",
	}
	AntsTestResultRow_ReasonType_value = map[string]int32{
		"REASON_UNSPECIFIED": 0,
		"REASON_DEMOTION":    1,
	}
)

func (x AntsTestResultRow_ReasonType) Enum() *AntsTestResultRow_ReasonType {
	p := new(AntsTestResultRow_ReasonType)
	*p = x
	return p
}

func (x AntsTestResultRow_ReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AntsTestResultRow_ReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[4].Descriptor()
}

func (AntsTestResultRow_ReasonType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes[4]
}

func (x AntsTestResultRow_ReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AntsTestResultRow_ReasonType.Descriptor instead.
func (AntsTestResultRow_ReasonType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 4}
}

// AntsTestResultRow represents a row in a BigQuery table for an AnTS test result.
// Next ID: 30.
type AntsTestResultRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the build.
	BuildType AntsTestResultRow_BuildType `protobuf:"varint,1,opt,name=build_type,json=buildType,proto3,enum=luci.analysis.bq.legacy.AntsTestResultRow_BuildType" json:"build_type,omitempty"`
	// The ID of the build.
	BuildId string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// The provider of the build.
	BuildProvider string `protobuf:"bytes,3,opt,name=build_provider,json=buildProvider,proto3" json:"build_provider,omitempty"`
	// The branch of the build.
	Branch string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	// The target of the build.
	BuildTarget string `protobuf:"bytes,5,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// The ID of the test result.
	TestResultId string `protobuf:"bytes,6,opt,name=test_result_id,json=testResultId,proto3" json:"test_result_id,omitempty"`
	// The ID of the work unit.
	WorkUnitId string `protobuf:"bytes,7,opt,name=work_unit_id,json=workUnitId,proto3" json:"work_unit_id,omitempty"`
	// The ID of the invocation.
	InvocationId string `protobuf:"bytes,8,opt,name=invocation_id,json=invocationId,proto3" json:"invocation_id,omitempty"`
	// The test identifier.
	TestIdentifier *AntsTestResultRow_TestIdentifier `protobuf:"bytes,9,opt,name=test_identifier,json=testIdentifier,proto3" json:"test_identifier,omitempty"`
	// The status of the test.
	TestStatus AntsTestResultRow_TestStatus `protobuf:"varint,10,opt,name=test_status,json=testStatus,proto3,enum=luci.analysis.bq.legacy.AntsTestResultRow_TestStatus" json:"test_status,omitempty"`
	// The debug information.
	DebugInfo *AntsTestResultRow_DebugInfo `protobuf:"bytes,11,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	// The timing information.
	Timing *AntsTestResultRow_Timing `protobuf:"bytes,13,opt,name=timing,proto3" json:"timing,omitempty"`
	// The properties of the test result.
	Properties    []*AntsTestResultRow_StringPair `protobuf:"bytes,14,rep,name=properties,proto3" json:"properties,omitempty"`
	AttemptNumber int32                           `protobuf:"varint,15,opt,name=attempt_number,json=attemptNumber,proto3" json:"attempt_number,omitempty"`
	RunNumber     int32                           `protobuf:"varint,16,opt,name=run_number,json=runNumber,proto3" json:"run_number,omitempty"`
	// The aggregation detail for an aggregated test result.
	AggregationDetail *AntsTestResultRow_AggregationDetail `protobuf:"bytes,17,opt,name=aggregation_detail,json=aggregationDetail,proto3" json:"aggregation_detail,omitempty"`
	// The hash of the test identifier.
	TestIdentifierHash string `protobuf:"bytes,18,opt,name=test_identifier_hash,json=testIdentifierHash,proto3" json:"test_identifier_hash,omitempty"`
	// The id of the test identifier.
	TestIdentifierId string `protobuf:"bytes,19,opt,name=test_identifier_id,json=testIdentifierId,proto3" json:"test_identifier_id,omitempty"`
	// The id of the test definition.
	TestDefinitionId string `protobuf:"bytes,20,opt,name=test_definition_id,json=testDefinitionId,proto3" json:"test_definition_id,omitempty"`
	// The number of flaky test cases.
	FlakyTestCases int64 `protobuf:"varint,21,opt,name=flaky_test_cases,json=flakyTestCases,proto3" json:"flaky_test_cases,omitempty"`
	// The id of the parent test identifier.
	ParentTestIdentifierId string `protobuf:"bytes,22,opt,name=parent_test_identifier_id,json=parentTestIdentifierId,proto3" json:"parent_test_identifier_id,omitempty"`
	// The test definition.
	Test         *AntsTestResultRow_Test `protobuf:"bytes,23,opt,name=test,proto3" json:"test,omitempty"`
	FlakyModules int32                   `protobuf:"varint,24,opt,name=flaky_modules,json=flakyModules,proto3" json:"flaky_modules,omitempty"`
	// The skipped reason.
	SkippedReason *AntsTestResultRow_SkippedReason `protobuf:"bytes,25,opt,name=skipped_reason,json=skippedReason,proto3" json:"skipped_reason,omitempty"`
	// The hour of the test result.
	Hour string `protobuf:"bytes,26,opt,name=hour,proto3" json:"hour,omitempty"`
	// The flat test id encoded by luci.
	// Not exported to placer, used to cluster the BigQuery table to improve ad-hoc query.
	TestId string `protobuf:"bytes,27,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// The completion time of the invocation that has this test result.
	// Use to partition the BigQuery table.
	// Not exported to placer.
	CompletionTime *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	// The time when the server started inserting the row into the BigQuery
	// table.
	//
	// While this is approximately the same as the time the row became visible in the
	// BigQuery table, it will not match exactly due factors such as:
	// - RPC latency,
	// - server processing delay,
	// - server clock drift.
	// For these reasons, a row with a later insert_time may actually have
	// been visible before a row with an earlier insert_time.
	//
	// If you require timestamping that lines up with table visibility, e.g.
	// for incremental extracts, you may better off using the APPENDS Table-valued
	// function that is part of the BigQuery change history feature:
	// https://cloud.google.com/bigquery/docs/change-history
	// Not exported to placer.
	InsertTime    *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=insert_time,json=insertTime,proto3" json:"insert_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow) Reset() {
	*x = AntsTestResultRow{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow) ProtoMessage() {}

func (x *AntsTestResultRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0}
}

func (x *AntsTestResultRow) GetBuildType() AntsTestResultRow_BuildType {
	if x != nil {
		return x.BuildType
	}
	return AntsTestResultRow_BUILD_TYPE_UNSPECIFIED
}

func (x *AntsTestResultRow) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *AntsTestResultRow) GetBuildProvider() string {
	if x != nil {
		return x.BuildProvider
	}
	return ""
}

func (x *AntsTestResultRow) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *AntsTestResultRow) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *AntsTestResultRow) GetTestResultId() string {
	if x != nil {
		return x.TestResultId
	}
	return ""
}

func (x *AntsTestResultRow) GetWorkUnitId() string {
	if x != nil {
		return x.WorkUnitId
	}
	return ""
}

func (x *AntsTestResultRow) GetInvocationId() string {
	if x != nil {
		return x.InvocationId
	}
	return ""
}

func (x *AntsTestResultRow) GetTestIdentifier() *AntsTestResultRow_TestIdentifier {
	if x != nil {
		return x.TestIdentifier
	}
	return nil
}

func (x *AntsTestResultRow) GetTestStatus() AntsTestResultRow_TestStatus {
	if x != nil {
		return x.TestStatus
	}
	return AntsTestResultRow_TEST_STATUS_UNSPECIFIED
}

func (x *AntsTestResultRow) GetDebugInfo() *AntsTestResultRow_DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *AntsTestResultRow) GetTiming() *AntsTestResultRow_Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *AntsTestResultRow) GetProperties() []*AntsTestResultRow_StringPair {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *AntsTestResultRow) GetAttemptNumber() int32 {
	if x != nil {
		return x.AttemptNumber
	}
	return 0
}

func (x *AntsTestResultRow) GetRunNumber() int32 {
	if x != nil {
		return x.RunNumber
	}
	return 0
}

func (x *AntsTestResultRow) GetAggregationDetail() *AntsTestResultRow_AggregationDetail {
	if x != nil {
		return x.AggregationDetail
	}
	return nil
}

func (x *AntsTestResultRow) GetTestIdentifierHash() string {
	if x != nil {
		return x.TestIdentifierHash
	}
	return ""
}

func (x *AntsTestResultRow) GetTestIdentifierId() string {
	if x != nil {
		return x.TestIdentifierId
	}
	return ""
}

func (x *AntsTestResultRow) GetTestDefinitionId() string {
	if x != nil {
		return x.TestDefinitionId
	}
	return ""
}

func (x *AntsTestResultRow) GetFlakyTestCases() int64 {
	if x != nil {
		return x.FlakyTestCases
	}
	return 0
}

func (x *AntsTestResultRow) GetParentTestIdentifierId() string {
	if x != nil {
		return x.ParentTestIdentifierId
	}
	return ""
}

func (x *AntsTestResultRow) GetTest() *AntsTestResultRow_Test {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *AntsTestResultRow) GetFlakyModules() int32 {
	if x != nil {
		return x.FlakyModules
	}
	return 0
}

func (x *AntsTestResultRow) GetSkippedReason() *AntsTestResultRow_SkippedReason {
	if x != nil {
		return x.SkippedReason
	}
	return nil
}

func (x *AntsTestResultRow) GetHour() string {
	if x != nil {
		return x.Hour
	}
	return ""
}

func (x *AntsTestResultRow) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *AntsTestResultRow) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *AntsTestResultRow) GetInsertTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InsertTime
	}
	return nil
}

// A TestIdentifier describes how to identify a TestResult within an Invocaiton. This includes a hierarchy for where a TestResult is located.
// Modules are identified by the module name and parameters. Different modules can have the same name but the paramereters must be different.
// Next ID: 10
type AntsTestResultRow_TestIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the module this test belongs to.
	Module string `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Parameters for the test module.
	ModuleParameters []*AntsTestResultRow_StringPair `protobuf:"bytes,2,rep,name=module_parameters,json=moduleParameters,proto3" json:"module_parameters,omitempty"`
	// SHA256 hash of module_parameters used for cache and lookups. This is generated by the server and not exposed to the API.
	ModuleParametersHash string `protobuf:"bytes,3,opt,name=module_parameters_hash,json=moduleParametersHash,proto3" json:"module_parameters_hash,omitempty"`
	// The name for a group of tests that are logically grouped together. Typically in the format of <package name>.<class name>.
	TestClass string `protobuf:"bytes,4,opt,name=test_class,json=testClass,proto3" json:"test_class,omitempty"`
	// The corresponding class name part of the test_class field.
	ClassName string `protobuf:"bytes,5,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	// The corresponding package name part of the test_class field.
	PackageName string `protobuf:"bytes,6,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// The name of the test that is the smallest test execution unit.
	Method        string `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_TestIdentifier) Reset() {
	*x = AntsTestResultRow_TestIdentifier{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_TestIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_TestIdentifier) ProtoMessage() {}

func (x *AntsTestResultRow_TestIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_TestIdentifier.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_TestIdentifier) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AntsTestResultRow_TestIdentifier) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *AntsTestResultRow_TestIdentifier) GetModuleParameters() []*AntsTestResultRow_StringPair {
	if x != nil {
		return x.ModuleParameters
	}
	return nil
}

func (x *AntsTestResultRow_TestIdentifier) GetModuleParametersHash() string {
	if x != nil {
		return x.ModuleParametersHash
	}
	return ""
}

func (x *AntsTestResultRow_TestIdentifier) GetTestClass() string {
	if x != nil {
		return x.TestClass
	}
	return ""
}

func (x *AntsTestResultRow_TestIdentifier) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *AntsTestResultRow_TestIdentifier) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *AntsTestResultRow_TestIdentifier) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// A generic key-value property definition.
// Next ID: 3
type AntsTestResultRow_StringPair struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the key-value pair.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the key-value pair.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_StringPair) Reset() {
	*x = AntsTestResultRow_StringPair{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_StringPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_StringPair) ProtoMessage() {}

func (x *AntsTestResultRow_StringPair) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_StringPair.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_StringPair) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AntsTestResultRow_StringPair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AntsTestResultRow_StringPair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The debug information for a WorkUnit or TestResult.
// Next ID: 8
type AntsTestResultRow_DebugInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error message.
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The stack trace.
	Trace string `protobuf:"bytes,2,opt,name=trace,proto3" json:"trace,omitempty"`
	// Error type, to better distinguish different causes of errors.
	ErrorType AntsTestResultRow_ErrorType `protobuf:"varint,3,opt,name=error_type,json=errorType,proto3,enum=luci.analysis.bq.legacy.AntsTestResultRow_ErrorType" json:"error_type,omitempty"`
	// Describing the current phase of the tests lifecycle.
	PhaseInProgress string `protobuf:"bytes,4,opt,name=phase_in_progress,json=phaseInProgress,proto3" json:"phase_in_progress,omitempty"`
	// Identifier of the error (error code style. For example: OUT_OF_QUOTA)
	ErrorName string `protobuf:"bytes,5,opt,name=error_name,json=errorName,proto3" json:"error_name,omitempty"`
	// The error code associated with the error name. (Where error code groupings are defined by leading numbers,
	// similar to HTTP's error code) TODO(b/160875067): Link the official documentation of error code categories
	// See go/invocation-error-classification-v2 for more details
	ErrorCode int64 `protobuf:"varint,6,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Class that generated the error (origin of the error). For example: the fully qualified java class name that created and threw the exception.
	ErrorOrigin   string `protobuf:"bytes,7,opt,name=error_origin,json=errorOrigin,proto3" json:"error_origin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_DebugInfo) Reset() {
	*x = AntsTestResultRow_DebugInfo{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_DebugInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_DebugInfo) ProtoMessage() {}

func (x *AntsTestResultRow_DebugInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_DebugInfo.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_DebugInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 2}
}

func (x *AntsTestResultRow_DebugInfo) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *AntsTestResultRow_DebugInfo) GetTrace() string {
	if x != nil {
		return x.Trace
	}
	return ""
}

func (x *AntsTestResultRow_DebugInfo) GetErrorType() AntsTestResultRow_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return AntsTestResultRow_ERROR_TYPE_UNSPECIFIED
}

func (x *AntsTestResultRow_DebugInfo) GetPhaseInProgress() string {
	if x != nil {
		return x.PhaseInProgress
	}
	return ""
}

func (x *AntsTestResultRow_DebugInfo) GetErrorName() string {
	if x != nil {
		return x.ErrorName
	}
	return ""
}

func (x *AntsTestResultRow_DebugInfo) GetErrorCode() int64 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *AntsTestResultRow_DebugInfo) GetErrorOrigin() string {
	if x != nil {
		return x.ErrorOrigin
	}
	return ""
}

// The timing of a particular Invocation, WorkUnit, or TestResult.
// Next ID: 4
type AntsTestResultRow_Timing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time the resource started running. This is in UTC Epoch time.
	CreationTimestamp int64 `protobuf:"varint,1,opt,name=creation_timestamp,json=creationTimestamp,proto3" json:"creation_timestamp,omitempty"`
	// Indicates the time when the operation finished. This is in UTC Epoch time.
	CompleteTimestamp int64 `protobuf:"varint,2,opt,name=complete_timestamp,json=completeTimestamp,proto3" json:"complete_timestamp,omitempty"`
	// The corresponding month in yyyy-MM of creation_timestamp.
	CreationMonth string `protobuf:"bytes,3,opt,name=creation_month,json=creationMonth,proto3" json:"creation_month,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_Timing) Reset() {
	*x = AntsTestResultRow_Timing{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_Timing) ProtoMessage() {}

func (x *AntsTestResultRow_Timing) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_Timing.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_Timing) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 3}
}

func (x *AntsTestResultRow_Timing) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *AntsTestResultRow_Timing) GetCompleteTimestamp() int64 {
	if x != nil {
		return x.CompleteTimestamp
	}
	return 0
}

func (x *AntsTestResultRow_Timing) GetCreationMonth() string {
	if x != nil {
		return x.CreationMonth
	}
	return ""
}

// The aggregation details for an aggregated TestResult. Next ID: 4
type AntsTestResultRow_AggregationDetail struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The level of aggregation.
	AggregationLevel AntsTestResultRow_AggregationLevel `protobuf:"varint,1,opt,name=aggregation_level,json=aggregationLevel,proto3,enum=luci.analysis.bq.legacy.AntsTestResultRow_AggregationLevel" json:"aggregation_level,omitempty"`
	// Aggregated results for the number of test results with each status.
	StatusAggregation []*AntsTestResultRow_StatusAggregation `protobuf:"bytes,2,rep,name=status_aggregation,json=statusAggregation,proto3" json:"status_aggregation,omitempty"`
	// Module level errors. Only set for invocation level aggregates.
	ModuleErrors  int64 `protobuf:"varint,3,opt,name=module_errors,json=moduleErrors,proto3" json:"module_errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_AggregationDetail) Reset() {
	*x = AntsTestResultRow_AggregationDetail{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_AggregationDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_AggregationDetail) ProtoMessage() {}

func (x *AntsTestResultRow_AggregationDetail) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_AggregationDetail.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_AggregationDetail) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 4}
}

func (x *AntsTestResultRow_AggregationDetail) GetAggregationLevel() AntsTestResultRow_AggregationLevel {
	if x != nil {
		return x.AggregationLevel
	}
	return AntsTestResultRow_AGGREGATION_LEVEL_UNSPECIFIED
}

func (x *AntsTestResultRow_AggregationDetail) GetStatusAggregation() []*AntsTestResultRow_StatusAggregation {
	if x != nil {
		return x.StatusAggregation
	}
	return nil
}

func (x *AntsTestResultRow_AggregationDetail) GetModuleErrors() int64 {
	if x != nil {
		return x.ModuleErrors
	}
	return 0
}

type AntsTestResultRow_StatusAggregation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The test status.
	Status AntsTestResultRow_TestStatus `protobuf:"varint,1,opt,name=status,proto3,enum=luci.analysis.bq.legacy.AntsTestResultRow_TestStatus" json:"status,omitempty"`
	// The number of tests matching the aggregation.
	Num           int64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_StatusAggregation) Reset() {
	*x = AntsTestResultRow_StatusAggregation{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_StatusAggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_StatusAggregation) ProtoMessage() {}

func (x *AntsTestResultRow_StatusAggregation) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_StatusAggregation.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_StatusAggregation) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 5}
}

func (x *AntsTestResultRow_StatusAggregation) GetStatus() AntsTestResultRow_TestStatus {
	if x != nil {
		return x.Status
	}
	return AntsTestResultRow_TEST_STATUS_UNSPECIFIED
}

func (x *AntsTestResultRow_StatusAggregation) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

// A TestDefinition describes how to identify an Invocation. Next ID: 3
type AntsTestResultRow_Test struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name used to identify the set of tests being executed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A list of properties the scheduler uses to differentiate between configurations with the same name.
	// For example 'cluster_id' and 'run_target' for ATP (http://go/consistent-test-identifiers).
	Properties    []*AntsTestResultRow_StringPair `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_Test) Reset() {
	*x = AntsTestResultRow_Test{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_Test) ProtoMessage() {}

func (x *AntsTestResultRow_Test) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_Test.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_Test) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 6}
}

func (x *AntsTestResultRow_Test) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AntsTestResultRow_Test) GetProperties() []*AntsTestResultRow_StringPair {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Message explaining why a test was skipped. Next ID: 5
type AntsTestResultRow_SkippedReason struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Possible reasons why a test result was skipped and did not run.
	ReasonType AntsTestResultRow_ReasonType `protobuf:"varint,1,opt,name=reason_type,json=reasonType,proto3,enum=luci.analysis.bq.legacy.AntsTestResultRow_ReasonType" json:"reason_type,omitempty"`
	// Should describe what condition caused the test to be skipped.
	Trigger string `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// A message providing any other details about why a test was skipped.
	ReasonMessage string `protobuf:"bytes,3,opt,name=reason_message,json=reasonMessage,proto3" json:"reason_message,omitempty"`
	// Buganizer id for the issue that caused the tests to be skipped, if available.
	BugId         string `protobuf:"bytes,4,opt,name=bug_id,json=bugId,proto3" json:"bug_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsTestResultRow_SkippedReason) Reset() {
	*x = AntsTestResultRow_SkippedReason{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsTestResultRow_SkippedReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsTestResultRow_SkippedReason) ProtoMessage() {}

func (x *AntsTestResultRow_SkippedReason) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsTestResultRow_SkippedReason.ProtoReflect.Descriptor instead.
func (*AntsTestResultRow_SkippedReason) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP(), []int{0, 7}
}

func (x *AntsTestResultRow_SkippedReason) GetReasonType() AntsTestResultRow_ReasonType {
	if x != nil {
		return x.ReasonType
	}
	return AntsTestResultRow_REASON_UNSPECIFIED
}

func (x *AntsTestResultRow_SkippedReason) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *AntsTestResultRow_SkippedReason) GetReasonMessage() string {
	if x != nil {
		return x.ReasonMessage
	}
	return ""
}

func (x *AntsTestResultRow_SkippedReason) GetBugId() string {
	if x != nil {
		return x.BugId
	}
	return ""
}

var File_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDesc = string([]byte{
	0x0a, 0x48, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f,
	0x61, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x1d, 0x0a, 0x11, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x53, 0x0a, 0x0a, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62,
	0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0e, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a,
	0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x6b, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62,
	0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x30, 0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x6c, 0x61, 0x6b, 0x79, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x6b, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x6c, 0x61, 0x6b, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0e,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41,
	0x6e, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77,
	0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x75,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xbb, 0x02, 0x0a,
	0x0e, 0x54, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74,
	0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x1a, 0x36, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x09, 0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x1a, 0x8d, 0x01,
	0x0a, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x1a, 0x8f, 0x02,
	0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x68, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62,
	0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x6b, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a,
	0x74, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41,
	0x6e, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x1a, 0x71, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e,
	0x41, 0x6e, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f,
	0x77, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x41, 0x6e, 0x74, 0x73, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x67, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x09, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x05, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49,
	0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x22, 0xe2, 0x01, 0x0a, 0x09, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x52, 0x41,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x52,
	0x41, 0x53, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x4e, 0x43, 0x59, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x09, 0x22,
	0x75, 0x0a, 0x10, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x56, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x10, 0x05, 0x22, 0x39, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x3b, 0x62, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_goTypes = []any{
	(AntsTestResultRow_BuildType)(0),            // 0: luci.analysis.bq.legacy.AntsTestResultRow.BuildType
	(AntsTestResultRow_TestStatus)(0),           // 1: luci.analysis.bq.legacy.AntsTestResultRow.TestStatus
	(AntsTestResultRow_ErrorType)(0),            // 2: luci.analysis.bq.legacy.AntsTestResultRow.ErrorType
	(AntsTestResultRow_AggregationLevel)(0),     // 3: luci.analysis.bq.legacy.AntsTestResultRow.AggregationLevel
	(AntsTestResultRow_ReasonType)(0),           // 4: luci.analysis.bq.legacy.AntsTestResultRow.ReasonType
	(*AntsTestResultRow)(nil),                   // 5: luci.analysis.bq.legacy.AntsTestResultRow
	(*AntsTestResultRow_TestIdentifier)(nil),    // 6: luci.analysis.bq.legacy.AntsTestResultRow.TestIdentifier
	(*AntsTestResultRow_StringPair)(nil),        // 7: luci.analysis.bq.legacy.AntsTestResultRow.StringPair
	(*AntsTestResultRow_DebugInfo)(nil),         // 8: luci.analysis.bq.legacy.AntsTestResultRow.DebugInfo
	(*AntsTestResultRow_Timing)(nil),            // 9: luci.analysis.bq.legacy.AntsTestResultRow.Timing
	(*AntsTestResultRow_AggregationDetail)(nil), // 10: luci.analysis.bq.legacy.AntsTestResultRow.AggregationDetail
	(*AntsTestResultRow_StatusAggregation)(nil), // 11: luci.analysis.bq.legacy.AntsTestResultRow.StatusAggregation
	(*AntsTestResultRow_Test)(nil),              // 12: luci.analysis.bq.legacy.AntsTestResultRow.Test
	(*AntsTestResultRow_SkippedReason)(nil),     // 13: luci.analysis.bq.legacy.AntsTestResultRow.SkippedReason
	(*timestamppb.Timestamp)(nil),               // 14: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_depIdxs = []int32{
	0,  // 0: luci.analysis.bq.legacy.AntsTestResultRow.build_type:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.BuildType
	6,  // 1: luci.analysis.bq.legacy.AntsTestResultRow.test_identifier:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.TestIdentifier
	1,  // 2: luci.analysis.bq.legacy.AntsTestResultRow.test_status:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.TestStatus
	8,  // 3: luci.analysis.bq.legacy.AntsTestResultRow.debug_info:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.DebugInfo
	9,  // 4: luci.analysis.bq.legacy.AntsTestResultRow.timing:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.Timing
	7,  // 5: luci.analysis.bq.legacy.AntsTestResultRow.properties:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.StringPair
	10, // 6: luci.analysis.bq.legacy.AntsTestResultRow.aggregation_detail:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.AggregationDetail
	12, // 7: luci.analysis.bq.legacy.AntsTestResultRow.test:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.Test
	13, // 8: luci.analysis.bq.legacy.AntsTestResultRow.skipped_reason:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.SkippedReason
	14, // 9: luci.analysis.bq.legacy.AntsTestResultRow.completion_time:type_name -> google.protobuf.Timestamp
	14, // 10: luci.analysis.bq.legacy.AntsTestResultRow.insert_time:type_name -> google.protobuf.Timestamp
	7,  // 11: luci.analysis.bq.legacy.AntsTestResultRow.TestIdentifier.module_parameters:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.StringPair
	2,  // 12: luci.analysis.bq.legacy.AntsTestResultRow.DebugInfo.error_type:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.ErrorType
	3,  // 13: luci.analysis.bq.legacy.AntsTestResultRow.AggregationDetail.aggregation_level:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.AggregationLevel
	11, // 14: luci.analysis.bq.legacy.AntsTestResultRow.AggregationDetail.status_aggregation:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.StatusAggregation
	1,  // 15: luci.analysis.bq.legacy.AntsTestResultRow.StatusAggregation.status:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.TestStatus
	7,  // 16: luci.analysis.bq.legacy.AntsTestResultRow.Test.properties:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.StringPair
	4,  // 17: luci.analysis.bq.legacy.AntsTestResultRow.SkippedReason.reason_type:type_name -> luci.analysis.bq.legacy.AntsTestResultRow.ReasonType
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_init() }
func file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_depIdxs = nil
}
