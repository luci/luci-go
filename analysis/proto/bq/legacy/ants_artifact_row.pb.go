// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.31.1
// source: go.chromium.org/luci/analysis/proto/bq/legacy/ants_artifact_row.proto

package bqpb

import (
	_ "go.chromium.org/luci/common/bq/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AntsTestResultRow represents a row in a BigQuery table for an AnTS test artifact.
// Next ID: 16.
type AntsArtifactRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the build.
	BuildType BuildType `protobuf:"varint,1,opt,name=build_type,json=buildType,proto3,enum=luci.analysis.bq.legacy.BuildType" json:"build_type,omitempty"`
	// The ID of the build.
	BuildId string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// The provider of the build.
	BuildProvider string `protobuf:"bytes,3,opt,name=build_provider,json=buildProvider,proto3" json:"build_provider,omitempty"`
	// The branch of the build.
	Branch string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	// The target of the build.
	BuildTarget string `protobuf:"bytes,5,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// The ID of the invocation.
	InvocationId string `protobuf:"bytes,6,opt,name=invocation_id,json=invocationId,proto3" json:"invocation_id,omitempty"`
	// The ID of the work unit.
	WorkUnitId string `protobuf:"bytes,7,opt,name=work_unit_id,json=workUnitId,proto3" json:"work_unit_id,omitempty"`
	// The ID of the test result.
	TestResultId string `protobuf:"bytes,8,opt,name=test_result_id,json=testResultId,proto3" json:"test_result_id,omitempty"`
	// Name of the artifact.
	Name string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Size of the artifact in bytes.
	Size        int64  `protobuf:"varint,10,opt,name=size,proto3" json:"size,omitempty"`
	ContentType string `protobuf:"bytes,11,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// The time (in epoch time) this object was created
	CreationTime int64 `protobuf:"varint,12,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// The type of AnTS artifact type, e.g. “LOGCAT”, “HOST_LOG”. This field is only for AnTS.
	ArtifactType string `protobuf:"bytes,13,opt,name=artifact_type,json=artifactType,proto3" json:"artifact_type,omitempty"`
	// The completion time of the invocation that has this test result.
	// Use to partition the BigQuery table.
	CompletionTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	// The time when the BigQuery started inserting the row into the BigQuery
	// table.
	//
	// While this is approximately the same as the time the row became visible in the
	// BigQuery table, it will not match exactly due factors such as:
	// - BigQuery server processing delay,
	// - BigQuery server clock drift.
	// For these reasons, a row with a later insert_time may actually have
	// been visible before a row with an earlier insert_time.
	//
	// If you require timestamping that lines up with table visibility, e.g.
	// for incremental extracts, you may better off using the APPENDS Table-valued
	// function that is part of the BigQuery change history feature:
	// https://cloud.google.com/bigquery/docs/change-history
	InsertTime    *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=insert_time,json=insertTime,proto3" json:"insert_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntsArtifactRow) Reset() {
	*x = AntsArtifactRow{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntsArtifactRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntsArtifactRow) ProtoMessage() {}

func (x *AntsArtifactRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntsArtifactRow.ProtoReflect.Descriptor instead.
func (*AntsArtifactRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDescGZIP(), []int{0}
}

func (x *AntsArtifactRow) GetBuildType() BuildType {
	if x != nil {
		return x.BuildType
	}
	return BuildType_BUILD_TYPE_UNSPECIFIED
}

func (x *AntsArtifactRow) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *AntsArtifactRow) GetBuildProvider() string {
	if x != nil {
		return x.BuildProvider
	}
	return ""
}

func (x *AntsArtifactRow) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *AntsArtifactRow) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *AntsArtifactRow) GetInvocationId() string {
	if x != nil {
		return x.InvocationId
	}
	return ""
}

func (x *AntsArtifactRow) GetWorkUnitId() string {
	if x != nil {
		return x.WorkUnitId
	}
	return ""
}

func (x *AntsArtifactRow) GetTestResultId() string {
	if x != nil {
		return x.TestResultId
	}
	return ""
}

func (x *AntsArtifactRow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AntsArtifactRow) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AntsArtifactRow) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AntsArtifactRow) GetCreationTime() int64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

func (x *AntsArtifactRow) GetArtifactType() string {
	if x != nil {
		return x.ArtifactType
	}
	return ""
}

func (x *AntsArtifactRow) GetCompletionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletionTime
	}
	return nil
}

func (x *AntsArtifactRow) GetInsertTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InsertTime
	}
	return nil
}

var File_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDesc = string([]byte{
	0x0a, 0x45, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f,
	0x61, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62,
	0x71, 0x2f, 0x70, 0x62, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x48, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x2f, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x04, 0x0a,
	0x0f, 0x41, 0x6e, 0x74, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x77,
	0x12, 0x41, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x19, 0xe2, 0xbc, 0x24, 0x15, 0x12, 0x13,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x28, 0x29, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x34, 0x5a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x3b, 0x62, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_goTypes = []any{
	(*AntsArtifactRow)(nil),       // 0: luci.analysis.bq.legacy.AntsArtifactRow
	(BuildType)(0),                // 1: luci.analysis.bq.legacy.BuildType
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_depIdxs = []int32{
	1, // 0: luci.analysis.bq.legacy.AntsArtifactRow.build_type:type_name -> luci.analysis.bq.legacy.BuildType
	2, // 1: luci.analysis.bq.legacy.AntsArtifactRow.completion_time:type_name -> google.protobuf.Timestamp
	2, // 2: luci.analysis.bq.legacy.AntsArtifactRow.insert_time:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_init() }
func file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_test_result_row_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_legacy_ants_artifact_row_proto_depIdxs = nil
}
