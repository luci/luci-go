// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto

package bqpb

import (
	v1 "go.chromium.org/luci/analysis/proto/v1"
	_ "go.chromium.org/luci/common/bq/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a test verdict exported to BigQuery.
//
// A test verdict summarises the results for a test variant
// (a way of running a test) in an invocation (a container of test
// results, such as a build).
//
// BigQuery tables using this schema will use the following settings:
//   - Partition by TIMESTAMP_TRUNC(partition_time, DAY),
//     retain data for 510 days.
//   - Cluster by project, test_id.
//
// NextId: 19
type TestVerdictRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project. E.g. "chromium".
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Structured-form test variant identifier.
	TestVariantId *TestVariantIdentifier `protobuf:"bytes,18,opt,name=test_variant_id,json=testVariantId,proto3" json:"test_variant_id,omitempty"`
	// Is a unique identifier of the test in a LUCI project.
	//
	// This is the flat-form encoding of the test component of the structured test variant ID above.
	// See TestVariantIdentifier for details how a structured test identifier is converted
	// to a flat test ID.
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Describes one specific way of running the test,
	// e.g. a specific bucket, builder and a test suite.
	//
	// This will be encoded as a JSON object like
	// {"builder":"linux-rel","os":"Ubuntu-18.04",...}
	// to take advantage of BigQuery's JSON support, so that
	// the query will only be billed for the variant
	// keys it reads.
	//
	// In the protocol buffer, it must be a string as per
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// A hash of the variant, encoded as lowercase hexadecimal characters.
	// The computation is an implementation detail of ResultDB.
	VariantHash string `protobuf:"bytes,4,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Invocation is the ResultDB invocation.
	//
	// This the top-level invocation for the test results of the verdict;
	// individual test results may not have been directly uploaded to
	// this invocation, but rather its included invocations. For example,
	// the top-level invocation may be a build, which includes multiple
	// invocations for swarming tasks within that build. The test results
	// that form part of this verdict may actually have been uploaded to
	// the invocations of those swarming tasks.
	Invocation *TestVerdictRow_InvocationRecord `protobuf:"bytes,5,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// Partition_time is used to partition the table.
	// It is the time when exported invocation was created in Spanner.
	// Note: it is NOT the time when the row is inserted into BigQuery table.
	// https://cloud.google.com/bigquery/docs/creating-column-partitions#limitations
	// mentions "The partitioning column must be a top-level field."
	// So we keep this column here instead of adding the CreateTime to InvocationRecord.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// Status of the test verdict. E.g. EXPECTED, UNEXPECTED, FLAKY,
	// UNEXPECTEDLY_SKIPPED, EXONERATED.
	Status v1.TestVerdictStatus `protobuf:"varint,7,opt,name=status,proto3,enum=luci.analysis.v1.TestVerdictStatus" json:"status,omitempty"`
	// The test results that are part of the verdict. Usually there is
	// only one test result per verdict, but in case of retries there
	// may be more.
	Results []*TestVerdictRow_TestResult `protobuf:"bytes,8,rep,name=results,proto3" json:"results,omitempty"`
	// The exoneration(s) recorded against the verdict.
	//
	// To determine if a verdict has an exoneration at all in a query,
	// use `ARRAY_LENGTH(exonerations) > 0`.
	Exonerations []*TestVerdictRow_Exoneration `protobuf:"bytes,9,rep,name=exonerations,proto3" json:"exonerations,omitempty"`
	// Statistics about the test results that are part of the verdict.
	Counts *TestVerdictRow_Counts `protobuf:"bytes,10,opt,name=counts,proto3" json:"counts,omitempty"`
	// The buildbucket build the results were collected as part of, if any.
	BuildbucketBuild *TestVerdictRow_BuildbucketBuild `protobuf:"bytes,11,opt,name=buildbucket_build,json=buildbucketBuild,proto3" json:"buildbucket_build,omitempty"`
	// The original presubmit run the results were collected as part of, if any.
	ChangeVerifierRun *TestVerdictRow_ChangeVerifierRun `protobuf:"bytes,12,opt,name=change_verifier_run,json=changeVerifierRun,proto3" json:"change_verifier_run,omitempty"`
	// The code sources tested. Obtained from one of the verdict's test results.
	// If the invocation which contained the test result
	// specified that code sources directly, this is those sources.
	// If the code sources were marked as are inherited from the including
	// invocation, this is the resolved code sources (if they could be resolved).
	// Unset otherwise.
	Sources *v1.Sources `protobuf:"bytes,13,opt,name=sources,proto3" json:"sources,omitempty"`
	// The branch in source control that was tested, if known.
	// For example, the `refs/heads/main` branch in the `chromium/src` repo
	// hosted by `chromium.googlesource.com`.
	// This is a subset of the information in the `sources` field.
	SourceRef *v1.SourceRef `protobuf:"bytes,15,opt,name=source_ref,json=sourceRef,proto3" json:"source_ref,omitempty"`
	// Hash of the source_ref field, as 16 lowercase hexadecimal characters.
	// Can be used to uniquely identify a branch in a source code
	// version control system.
	SourceRefHash string `protobuf:"bytes,16,opt,name=source_ref_hash,json=sourceRefHash,proto3" json:"source_ref_hash,omitempty"`
	// Metadata of the test case,
	// e.g. the original test name and test location.
	TestMetadata *v1.TestMetadata `protobuf:"bytes,14,opt,name=test_metadata,json=testMetadata,proto3" json:"test_metadata,omitempty"`
	// The time when the server started inserting the row into the BigQuery
	// table.
	//
	// While this is approximately the same as the time the row became visible in the
	// BigQuery table, it will not match exactly due factors such as:
	// - RPC latency,
	// - server processing delay,
	// - server clock drift.
	// For these reasons, a row with a later insert_time may actually have
	// been visible before a row with an earlier insert_time.
	//
	// If you require timestamping that lines up with table visiblity, e.g.
	// for incremental extracts, you may better off using the APPENDS Table-valued
	// function that is part of the BigQuery change history feature:
	// https://cloud.google.com/bigquery/docs/change-history
	InsertTime    *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=insert_time,json=insertTime,proto3" json:"insert_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow) Reset() {
	*x = TestVerdictRow{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow) ProtoMessage() {}

func (x *TestVerdictRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow.ProtoReflect.Descriptor instead.
func (*TestVerdictRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0}
}

func (x *TestVerdictRow) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVerdictRow) GetTestVariantId() *TestVariantIdentifier {
	if x != nil {
		return x.TestVariantId
	}
	return nil
}

func (x *TestVerdictRow) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVerdictRow) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *TestVerdictRow) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVerdictRow) GetInvocation() *TestVerdictRow_InvocationRecord {
	if x != nil {
		return x.Invocation
	}
	return nil
}

func (x *TestVerdictRow) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *TestVerdictRow) GetStatus() v1.TestVerdictStatus {
	if x != nil {
		return x.Status
	}
	return v1.TestVerdictStatus(0)
}

func (x *TestVerdictRow) GetResults() []*TestVerdictRow_TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TestVerdictRow) GetExonerations() []*TestVerdictRow_Exoneration {
	if x != nil {
		return x.Exonerations
	}
	return nil
}

func (x *TestVerdictRow) GetCounts() *TestVerdictRow_Counts {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *TestVerdictRow) GetBuildbucketBuild() *TestVerdictRow_BuildbucketBuild {
	if x != nil {
		return x.BuildbucketBuild
	}
	return nil
}

func (x *TestVerdictRow) GetChangeVerifierRun() *TestVerdictRow_ChangeVerifierRun {
	if x != nil {
		return x.ChangeVerifierRun
	}
	return nil
}

func (x *TestVerdictRow) GetSources() *v1.Sources {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *TestVerdictRow) GetSourceRef() *v1.SourceRef {
	if x != nil {
		return x.SourceRef
	}
	return nil
}

func (x *TestVerdictRow) GetSourceRefHash() string {
	if x != nil {
		return x.SourceRefHash
	}
	return ""
}

func (x *TestVerdictRow) GetTestMetadata() *v1.TestMetadata {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

func (x *TestVerdictRow) GetInsertTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InsertTime
	}
	return nil
}

// TestVariantIdentifier represents the identity of a test variant in structured form.
//
// The structured test variant identifier represented in this proto corresponds to
// the flat test identifier with the following form:
// :{module_name}!{module_scheme}:{coarse_name}:{fine_name}#{case_name}
//
// and variant matching module_variant.
//
// Where {x} represents inserting the value of x with the characters
// ':', '!', '#', and '\' escaped using a '\'.
//
// Special treatment exists for legacy test identifiers, for which
// module_name = "legacy", module_scheme = "legacy", coarse_name = "",
// fine_name = "" and case_name = <legacy_id>. For these, the corresponding
// flat test ID is simply:
// {case_name}
//
// (no escaping applies to this form, although method starting with ':'
// is illegal for legacy test identifiers).
//
// See go/resultdb-test-hierarchy-design for more details.
//
// Limits: the encoded test ID (as per rules above) must be less than
// 512 bytes in UTF-8.
type TestVariantIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the module being tested. A module is a set of tests which run
	// with the same test harness, and typically corresponds with a unit of
	// build, such as a bazel test target.
	//
	// For example, "CtsSdkExtensionsTestCases" or "chrome/test:blink_webkit_tests".
	//
	// Note: Modules are identified by the combination of module_name and scheme, not
	// only module_name. See `scheme` field below for more.
	//
	// Limited to 300 bytes of printable UTF-8. See also limits on `TestIdentifier` as a whole.
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// The scheme of the module, for example, "junit" or "gtest".
	//
	// Must match one of the schemes in the ResultDB service configuration (see
	// go/resultdb-schemes). Additional values can be configured as needed.
	//
	// Note: modules are identified by the combination of module_name, module_variant and
	// module_scheme.
	// Nonetheless, when presenting data on a frontend, it is acceptable to not show the scheme
	// as it exists primarily to allow customisation of the labels shown next to the coarse_name,
	// fine_name and case_name fields.
	// When uploading data it is STRONGLY DISCOURAGED to use different schemes with the same
	// module name as it may lead to ambiguous UI for users.
	//
	// Limited to ^[a-z][a-z0-9]{0,19}$.
	ModuleScheme string `protobuf:"bytes,2,opt,name=module_scheme,json=moduleScheme,proto3" json:"module_scheme,omitempty"`
	// Description of one specific way of running the tests in a module,
	// e.g. specific ABI (x64/x86/...), build flags and/or operating system.
	//
	// Variants identify the unique ways the module was run compared to every other way
	// the module is run by the LUCI project. As such, some variant key-value pairs
	// may be repeated for all modules in an invocation.
	//
	// This will be encoded as a JSON object like
	// {"builder":"linux-rel","os":"Ubuntu-18.04",...}
	// to take advantage of BigQuery's JSON support, so that
	// the query will only be billed for the variant
	// keys it reads.
	//
	// In the protocol buffer, it must be a string as per
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	ModuleVariant string `protobuf:"bytes,3,opt,name=module_variant,json=moduleVariant,proto3" json:"module_variant,omitempty"`
	// Hash of the module variant.
	// hex(sha256(sorted(”.join('%s:%s\n' for k, v in module_variant.items()))))[:8].
	ModuleVariantHash string `protobuf:"bytes,4,opt,name=module_variant_hash,json=moduleVariantHash,proto3" json:"module_variant_hash,omitempty"`
	// Intermediate hierarchy - coarse name.
	//
	// For example "com.android.os.ext".
	//
	// A scheme dependent value used to organise the test into a coarse group of related tests,
	// such as a package or directory.
	// If the scheme does not define a coarse grouping, this must be blank.
	// If only one intermediate hierarchy level is used for a scheme, it is always the
	// fine hierarchy level.
	//
	// Constraints:
	// - Must match constraints set by the module's scheme.
	// - Limited to 300 bytes of printable UTF-8 (see also limits on `TestIdentifier` as a whole).
	// - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
	CoarseName string `protobuf:"bytes,5,opt,name=coarse_name,json=coarseName,proto3" json:"coarse_name,omitempty"`
	// Interemdiate hierarchy - fine name.
	//
	// For example "SdkExtensionsTest" or "WebDialogBrowserTest".
	//
	// A finer grouping within the above coarse grouping (if any), e.g. class or file.
	// If the scheme does not define a fine grouping, this must be blank.
	//
	// Constraints:
	// - Must match constraints set by the module's scheme.
	// - Limited to 300 bytes of printable UTF-8 (see also limits on `TestIdentifier` as a whole).
	// - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
	FineName string `protobuf:"bytes,6,opt,name=fine_name,json=fineName,proto3" json:"fine_name,omitempty"`
	// The identifier of test case within the above fine grouping.
	//
	// For example "testBadArgument" or "CloseParentWindow".
	//
	// This is the finest granularity component of the test identifier, and typically
	// refers to sub-file granularity unless no such granularity exists.
	//
	// The special value "*fixture" may be used for reporting the result of
	// setup and teardown common to tests in the same fine_name.
	//
	// Constraints:
	//   - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C),
	//     unless it is to write the value "*fixture". Exception is made for tests in the
	//     module 'legacy' for which a slightly broader set of starting characters is allowed
	//     for backwards compatibility but use of this quirk is discouraged.
	CaseName      string `protobuf:"bytes,7,opt,name=case_name,json=caseName,proto3" json:"case_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVariantIdentifier) Reset() {
	*x = TestVariantIdentifier{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVariantIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantIdentifier) ProtoMessage() {}

func (x *TestVariantIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantIdentifier.ProtoReflect.Descriptor instead.
func (*TestVariantIdentifier) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{1}
}

func (x *TestVariantIdentifier) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *TestVariantIdentifier) GetModuleScheme() string {
	if x != nil {
		return x.ModuleScheme
	}
	return ""
}

func (x *TestVariantIdentifier) GetModuleVariant() string {
	if x != nil {
		return x.ModuleVariant
	}
	return ""
}

func (x *TestVariantIdentifier) GetModuleVariantHash() string {
	if x != nil {
		return x.ModuleVariantHash
	}
	return ""
}

func (x *TestVariantIdentifier) GetCoarseName() string {
	if x != nil {
		return x.CoarseName
	}
	return ""
}

func (x *TestVariantIdentifier) GetFineName() string {
	if x != nil {
		return x.FineName
	}
	return ""
}

func (x *TestVariantIdentifier) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

type TestVerdictRow_InvocationRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the invocation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tags represents Invocation-level string key-value pairs.
	// A key can be repeated.
	Tags []*v1.StringPair `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// The LUCI Realm the invocation exists under.
	// For example, "chromium:try".
	Realm string `protobuf:"bytes,3,opt,name=realm,proto3" json:"realm,omitempty"`
	// Arbitrary JSON object that contains structured, domain-specific properties
	// of the invocation. Stored here stringified as this is the only protocol
	// buffer type that maps to the JSON BigQuery type:
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	Properties    string `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_InvocationRecord) Reset() {
	*x = TestVerdictRow_InvocationRecord{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_InvocationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_InvocationRecord) ProtoMessage() {}

func (x *TestVerdictRow_InvocationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_InvocationRecord.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_InvocationRecord) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TestVerdictRow_InvocationRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestVerdictRow_InvocationRecord) GetTags() []*v1.StringPair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TestVerdictRow_InvocationRecord) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *TestVerdictRow_InvocationRecord) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

// ParentInvocationRecord for a test result is the immediate parent invocation
// that directly contains the test result.
type TestVerdictRow_ParentInvocationRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the invocation.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_ParentInvocationRecord) Reset() {
	*x = TestVerdictRow_ParentInvocationRecord{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_ParentInvocationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_ParentInvocationRecord) ProtoMessage() {}

func (x *TestVerdictRow_ParentInvocationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_ParentInvocationRecord.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_ParentInvocationRecord) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TestVerdictRow_ParentInvocationRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// NextId: 13
type TestVerdictRow_TestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parent contains info of the result's immediate parent invocation.
	Parent *TestVerdictRow_ParentInvocationRecord `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The global identifier of a test result in ResultDB.
	// Format:
	// "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}".
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Identifies a test result in a given invocation and test id.
	ResultId string `protobuf:"bytes,2,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// Expected is a flag indicating whether the result of test case execution is
	// expected. Refer to TestResult.Expected for details.
	Expected bool `protobuf:"varint,3,opt,name=expected,proto3" json:"expected,omitempty"`
	// Status of the test result.
	Status v1.TestResultStatus `protobuf:"varint,4,opt,name=status,proto3,enum=luci.analysis.v1.TestResultStatus" json:"status,omitempty"`
	// A human-readable explanation of the result, in HTML.
	// MUST be sanitized before rendering in the browser.
	SummaryHtml string `protobuf:"bytes,5,opt,name=summary_html,json=summaryHtml,proto3" json:"summary_html,omitempty"`
	// The point in time when the test case started to execute.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the test case execution in seconds.
	Duration float64 `protobuf:"fixed64,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// Tags contains metadata for this test result.
	// It might describe this particular execution or the test case.
	Tags []*v1.StringPair `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Information about failed tests.
	// e.g. the assertion failure message.
	FailureReason *v1.FailureReason `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// Reasoning behind a test skip, in machine-readable form.
	// Only set when status is SKIP.
	// It's the string presentation of luci.analysis.v1.SkipReason when
	// specified, "" when the skip reason is unspecified.
	SkipReason string `protobuf:"bytes,12,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	// Arbitrary JSON object that contains structured, domain-specific properties
	// of the test result. Stored here stringified as this is the only protocol
	// buffer type that maps to the JSON BigQuery type:
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	Properties    string `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_TestResult) Reset() {
	*x = TestVerdictRow_TestResult{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_TestResult) ProtoMessage() {}

func (x *TestVerdictRow_TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_TestResult.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TestVerdictRow_TestResult) GetParent() *TestVerdictRow_ParentInvocationRecord {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestVerdictRow_TestResult) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *TestVerdictRow_TestResult) GetExpected() bool {
	if x != nil {
		return x.Expected
	}
	return false
}

func (x *TestVerdictRow_TestResult) GetStatus() v1.TestResultStatus {
	if x != nil {
		return x.Status
	}
	return v1.TestResultStatus(0)
}

func (x *TestVerdictRow_TestResult) GetSummaryHtml() string {
	if x != nil {
		return x.SummaryHtml
	}
	return ""
}

func (x *TestVerdictRow_TestResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestVerdictRow_TestResult) GetTags() []*v1.StringPair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetFailureReason() *v1.FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *TestVerdictRow_TestResult) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type TestVerdictRow_Exoneration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reasoning behind exoneration, in HTML.
	// MUST be sanitized before rendering in the browser.
	ExplanationHtml string `protobuf:"bytes,1,opt,name=explanation_html,json=explanationHtml,proto3" json:"explanation_html,omitempty"`
	// Reasoning behind the exoneration, in machine-readable form.
	Reason        v1.ExonerationReason `protobuf:"varint,2,opt,name=reason,proto3,enum=luci.analysis.v1.ExonerationReason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_Exoneration) Reset() {
	*x = TestVerdictRow_Exoneration{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_Exoneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_Exoneration) ProtoMessage() {}

func (x *TestVerdictRow_Exoneration) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_Exoneration.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_Exoneration) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TestVerdictRow_Exoneration) GetExplanationHtml() string {
	if x != nil {
		return x.ExplanationHtml
	}
	return ""
}

func (x *TestVerdictRow_Exoneration) GetReason() v1.ExonerationReason {
	if x != nil {
		return x.Reason
	}
	return v1.ExonerationReason(0)
}

type TestVerdictRow_Counts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of unexpected test results in the verdict.
	Unexpected int64 `protobuf:"varint,1,opt,name=unexpected,proto3" json:"unexpected,omitempty"`
	// The total number of test results in the verdict.
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of unexpected test results in the verdict
	// that are not skips.
	UnexpectedNonSkipped int64 `protobuf:"varint,3,opt,name=unexpected_non_skipped,json=unexpectedNonSkipped,proto3" json:"unexpected_non_skipped,omitempty"`
	// The total number of unexpected test results in the verdict
	// that are not skips and not passes.
	UnexpectedNonSkippedNonPassed int64 `protobuf:"varint,4,opt,name=unexpected_non_skipped_non_passed,json=unexpectedNonSkippedNonPassed,proto3" json:"unexpected_non_skipped_non_passed,omitempty"`
	// The total number of test results in the verdict that
	// are not skips.
	TotalNonSkipped int64 `protobuf:"varint,5,opt,name=total_non_skipped,json=totalNonSkipped,proto3" json:"total_non_skipped,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestVerdictRow_Counts) Reset() {
	*x = TestVerdictRow_Counts{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_Counts) ProtoMessage() {}

func (x *TestVerdictRow_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_Counts.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_Counts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 4}
}

func (x *TestVerdictRow_Counts) GetUnexpected() int64 {
	if x != nil {
		return x.Unexpected
	}
	return 0
}

func (x *TestVerdictRow_Counts) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TestVerdictRow_Counts) GetUnexpectedNonSkipped() int64 {
	if x != nil {
		return x.UnexpectedNonSkipped
	}
	return 0
}

func (x *TestVerdictRow_Counts) GetUnexpectedNonSkippedNonPassed() int64 {
	if x != nil {
		return x.UnexpectedNonSkippedNonPassed
	}
	return 0
}

func (x *TestVerdictRow_Counts) GetTotalNonSkipped() int64 {
	if x != nil {
		return x.TotalNonSkipped
	}
	return 0
}

// Information about the buildbucket build which contained the test result.
type TestVerdictRow_BuildbucketBuild struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the buildbucket build.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The builder the build belongs to.
	Builder *TestVerdictRow_BuildbucketBuild_Builder `protobuf:"bytes,2,opt,name=builder,proto3" json:"builder,omitempty"`
	// The status of the build that contained this test result. Can be used
	// to filter incomplete results (e.g. where build was cancelled or had
	// an infra failure). Can also be used to filter builds with incomplete
	// exonerations (e.g. build succeeded but some tests not exonerated).
	//
	// Notionally luci.analysis.v1.BuildStatus, but string so that we can chop
	// off the BUILD_STATUS_ prefix that would otherwise appear on every value.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// The gardener rotations which monitor this build.
	GardenerRotations []string `protobuf:"bytes,4,rep,name=gardener_rotations,json=gardenerRotations,proto3" json:"gardener_rotations,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TestVerdictRow_BuildbucketBuild) Reset() {
	*x = TestVerdictRow_BuildbucketBuild{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_BuildbucketBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_BuildbucketBuild) ProtoMessage() {}

func (x *TestVerdictRow_BuildbucketBuild) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_BuildbucketBuild.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_BuildbucketBuild) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 5}
}

func (x *TestVerdictRow_BuildbucketBuild) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestVerdictRow_BuildbucketBuild) GetBuilder() *TestVerdictRow_BuildbucketBuild_Builder {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *TestVerdictRow_BuildbucketBuild) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestVerdictRow_BuildbucketBuild) GetGardenerRotations() []string {
	if x != nil {
		return x.GardenerRotations
	}
	return nil
}

// Information about the LUCI Change Verifier run which the test result
// was a part of, if any.
type TestVerdictRow_ChangeVerifierRun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identity of the change verifier run that contains this test result.
	// This should be unique per "CQ+1"/"CQ+2" attempt on gerrit.
	//
	// All test results for the same presubmit run will have one
	// partition_time.
	//
	// The format of this value is:
	// "{LUCI_PROJECT}/{LUCI_CV_ID}", e.g.
	// "infra/8988819463854-1-f94732fe20056fd1".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The mode of the presubmit run (if any).
	// E.g. DRY_RUN, FULL_RUN, QUICK_DRY_RUN.
	Mode v1.PresubmitRunMode `protobuf:"varint,2,opt,name=mode,proto3,enum=luci.analysis.v1.PresubmitRunMode" json:"mode,omitempty"`
	// The presubmit run's ending status.
	// Notionally luci.analysis.v1.PresubmitRunStatus, but string so that
	// we can chop off the "PRESUBMIT_RUN_STATUS_" prefix and have
	// only the status, e.g. SUCCEEDED, FAILED, CANCELED.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Whether the build indicated by buildbucket_build was
	// critical to the presubmit run succeeding. This is
	// false for experimental tryjobs.
	IsBuildCritical bool `protobuf:"varint,4,opt,name=is_build_critical,json=isBuildCritical,proto3" json:"is_build_critical,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestVerdictRow_ChangeVerifierRun) Reset() {
	*x = TestVerdictRow_ChangeVerifierRun{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_ChangeVerifierRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_ChangeVerifierRun) ProtoMessage() {}

func (x *TestVerdictRow_ChangeVerifierRun) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_ChangeVerifierRun.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_ChangeVerifierRun) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 6}
}

func (x *TestVerdictRow_ChangeVerifierRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestVerdictRow_ChangeVerifierRun) GetMode() v1.PresubmitRunMode {
	if x != nil {
		return x.Mode
	}
	return v1.PresubmitRunMode(0)
}

func (x *TestVerdictRow_ChangeVerifierRun) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestVerdictRow_ChangeVerifierRun) GetIsBuildCritical() bool {
	if x != nil {
		return x.IsBuildCritical
	}
	return false
}

type TestVerdictRow_BuildbucketBuild_Builder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project ID.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The build bucket, e.g. "try". Unique within project.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The builder name, e.g. "linux-rel". Unique within bucket.
	Builder       string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) Reset() {
	*x = TestVerdictRow_BuildbucketBuild_Builder{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_BuildbucketBuild_Builder) ProtoMessage() {}

func (x *TestVerdictRow_BuildbucketBuild_Builder) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_BuildbucketBuild_Builder.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_BuildbucketBuild_Builder) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

var File_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc = string([]byte{
	0x0a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x71, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62,
	0x71, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62,
	0x71, 0x2f, 0x70, 0x62, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf4, 0x14, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4f, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xbc, 0x24, 0x06,
	0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x51, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,
	0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x0c,
	0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x52, 0x6f, 0x77, 0x2e, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x65, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62,
	0x71, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x6f, 0x77,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x5e, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x10, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x62, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x75, 0x6e,
	0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x48, 0x61, 0x73, 0x68, 0x12, 0x43, 0x0a, 0x0d,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x96,
	0x01, 0x0a, 0x10, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x2a, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe2, 0xbc, 0x24, 0x06, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x28, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x1a, 0xa7, 0x04, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x4f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x52,
	0x6f, 0x77, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xe2, 0xbc, 0x24, 0x06, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x75, 0x0a, 0x0b, 0x45,
	0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x3b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x6f, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x1a, 0xea, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x14, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e,
	0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x75, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x1a,
	0x95, 0x02, 0x0a, 0x10, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x62, 0x71, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x64, 0x69, 0x63, 0x74, 0x52, 0x6f, 0x77, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x67, 0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x67,
	0x61, 0x72, 0x64, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x55, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x1a, 0x9f, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x69, 0x73, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0x9b, 0x02, 0x0a, 0x15, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0e, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xe2, 0xbc, 0x24, 0x06, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x52, 0x0d, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x61, 0x72, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62,
	0x71, 0x3b, 0x62, 0x71, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_goTypes = []any{
	(*TestVerdictRow)(nil),                          // 0: luci.analysis.bq.TestVerdictRow
	(*TestVariantIdentifier)(nil),                   // 1: luci.analysis.bq.TestVariantIdentifier
	(*TestVerdictRow_InvocationRecord)(nil),         // 2: luci.analysis.bq.TestVerdictRow.InvocationRecord
	(*TestVerdictRow_ParentInvocationRecord)(nil),   // 3: luci.analysis.bq.TestVerdictRow.ParentInvocationRecord
	(*TestVerdictRow_TestResult)(nil),               // 4: luci.analysis.bq.TestVerdictRow.TestResult
	(*TestVerdictRow_Exoneration)(nil),              // 5: luci.analysis.bq.TestVerdictRow.Exoneration
	(*TestVerdictRow_Counts)(nil),                   // 6: luci.analysis.bq.TestVerdictRow.Counts
	(*TestVerdictRow_BuildbucketBuild)(nil),         // 7: luci.analysis.bq.TestVerdictRow.BuildbucketBuild
	(*TestVerdictRow_ChangeVerifierRun)(nil),        // 8: luci.analysis.bq.TestVerdictRow.ChangeVerifierRun
	(*TestVerdictRow_BuildbucketBuild_Builder)(nil), // 9: luci.analysis.bq.TestVerdictRow.BuildbucketBuild.Builder
	(*timestamppb.Timestamp)(nil),                   // 10: google.protobuf.Timestamp
	(v1.TestVerdictStatus)(0),                       // 11: luci.analysis.v1.TestVerdictStatus
	(*v1.Sources)(nil),                              // 12: luci.analysis.v1.Sources
	(*v1.SourceRef)(nil),                            // 13: luci.analysis.v1.SourceRef
	(*v1.TestMetadata)(nil),                         // 14: luci.analysis.v1.TestMetadata
	(*v1.StringPair)(nil),                           // 15: luci.analysis.v1.StringPair
	(v1.TestResultStatus)(0),                        // 16: luci.analysis.v1.TestResultStatus
	(*v1.FailureReason)(nil),                        // 17: luci.analysis.v1.FailureReason
	(v1.ExonerationReason)(0),                       // 18: luci.analysis.v1.ExonerationReason
	(v1.PresubmitRunMode)(0),                        // 19: luci.analysis.v1.PresubmitRunMode
}
var file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_depIdxs = []int32{
	1,  // 0: luci.analysis.bq.TestVerdictRow.test_variant_id:type_name -> luci.analysis.bq.TestVariantIdentifier
	2,  // 1: luci.analysis.bq.TestVerdictRow.invocation:type_name -> luci.analysis.bq.TestVerdictRow.InvocationRecord
	10, // 2: luci.analysis.bq.TestVerdictRow.partition_time:type_name -> google.protobuf.Timestamp
	11, // 3: luci.analysis.bq.TestVerdictRow.status:type_name -> luci.analysis.v1.TestVerdictStatus
	4,  // 4: luci.analysis.bq.TestVerdictRow.results:type_name -> luci.analysis.bq.TestVerdictRow.TestResult
	5,  // 5: luci.analysis.bq.TestVerdictRow.exonerations:type_name -> luci.analysis.bq.TestVerdictRow.Exoneration
	6,  // 6: luci.analysis.bq.TestVerdictRow.counts:type_name -> luci.analysis.bq.TestVerdictRow.Counts
	7,  // 7: luci.analysis.bq.TestVerdictRow.buildbucket_build:type_name -> luci.analysis.bq.TestVerdictRow.BuildbucketBuild
	8,  // 8: luci.analysis.bq.TestVerdictRow.change_verifier_run:type_name -> luci.analysis.bq.TestVerdictRow.ChangeVerifierRun
	12, // 9: luci.analysis.bq.TestVerdictRow.sources:type_name -> luci.analysis.v1.Sources
	13, // 10: luci.analysis.bq.TestVerdictRow.source_ref:type_name -> luci.analysis.v1.SourceRef
	14, // 11: luci.analysis.bq.TestVerdictRow.test_metadata:type_name -> luci.analysis.v1.TestMetadata
	10, // 12: luci.analysis.bq.TestVerdictRow.insert_time:type_name -> google.protobuf.Timestamp
	15, // 13: luci.analysis.bq.TestVerdictRow.InvocationRecord.tags:type_name -> luci.analysis.v1.StringPair
	3,  // 14: luci.analysis.bq.TestVerdictRow.TestResult.parent:type_name -> luci.analysis.bq.TestVerdictRow.ParentInvocationRecord
	16, // 15: luci.analysis.bq.TestVerdictRow.TestResult.status:type_name -> luci.analysis.v1.TestResultStatus
	10, // 16: luci.analysis.bq.TestVerdictRow.TestResult.start_time:type_name -> google.protobuf.Timestamp
	15, // 17: luci.analysis.bq.TestVerdictRow.TestResult.tags:type_name -> luci.analysis.v1.StringPair
	17, // 18: luci.analysis.bq.TestVerdictRow.TestResult.failure_reason:type_name -> luci.analysis.v1.FailureReason
	18, // 19: luci.analysis.bq.TestVerdictRow.Exoneration.reason:type_name -> luci.analysis.v1.ExonerationReason
	9,  // 20: luci.analysis.bq.TestVerdictRow.BuildbucketBuild.builder:type_name -> luci.analysis.bq.TestVerdictRow.BuildbucketBuild.Builder
	19, // 21: luci.analysis.bq.TestVerdictRow.ChangeVerifierRun.mode:type_name -> luci.analysis.v1.PresubmitRunMode
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_init() }
func file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_depIdxs = nil
}
