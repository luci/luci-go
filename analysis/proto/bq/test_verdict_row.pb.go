// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto

package bqpb

import (
	v1 "go.chromium.org/luci/analysis/proto/v1"
	_ "go.chromium.org/luci/common/bq/pb"
	v11 "go.chromium.org/luci/resultdb/proto/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a ResultDB test verdict exported to BigQuery, with
// additional context from LUCI Analysis.
//
// A test verdict summarises the results for a test variant
// (a way of running a test) in an invocation (a container of test
// results, such as a build).
//
// BigQuery tables using this schema will use the following settings:
//   - Partition by TIMESTAMP_TRUNC(partition_time, DAY),
//     retain data for 510 days.
//   - Cluster by project, test_id.
//
// NextId: 22
type TestVerdictRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project. E.g. "chromium".
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The structured test identifier.
	//
	// Uniquely identifies the test that was run, including the specific way of running that
	// test, e.g. build configuration, CPU architecture, OS.
	TestIdStructured *TestIdentifier `protobuf:"bytes,18,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// A unique identifier of the test in a LUCI project, excluding variant.
	//
	// This is the flat-form encoding of the structured test variant ID above,
	// excluding information about the specific way of running test (e.g. build configuration,
	// CPU architecture). Such information is captured separately in the `variant` field below.
	//
	// See TestIdentifier for details how a structured test identifier is converted
	// to flat test ID.
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. build configuration, CPU architecture, OS.
	//
	// This will be encoded as a JSON object like
	// {"builder":"linux-rel","os":"Ubuntu-18.04",...}
	// to take advantage of BigQuery's JSON support, so that
	// the query will only be billed for the variant
	// keys it reads.
	//
	// In the protocol buffer, it must be a string as per
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// A hash of the variant, encoded as lowercase hexadecimal characters.
	// The computation is an implementation detail of ResultDB.
	VariantHash string `protobuf:"bytes,4,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Invocation is the ResultDB invocation.
	//
	// This the top-level invocation for the test results of the verdict;
	// individual test results may not have been directly uploaded to
	// this invocation, but rather its included invocations. For example,
	// the top-level invocation may be a build, which includes multiple
	// invocations for swarming tasks within that build. The test results
	// that form part of this verdict may actually have been uploaded to
	// the invocations of those swarming tasks.
	Invocation *TestVerdictRow_InvocationRecord `protobuf:"bytes,5,opt,name=invocation,proto3" json:"invocation,omitempty"`
	// Partition_time is used to partition the table.
	// It is the time when exported invocation was created in Spanner.
	// Note: it is NOT the time when the row is inserted into BigQuery table.
	// https://cloud.google.com/bigquery/docs/creating-column-partitions#limitations
	// mentions "The partitioning column must be a top-level field."
	// So we keep this column here instead of adding the CreateTime to InvocationRecord.
	PartitionTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=partition_time,json=partitionTime,proto3" json:"partition_time,omitempty"`
	// Status of the test verdict. E.g. EXPECTED, UNEXPECTED, FLAKY,
	// UNEXPECTEDLY_SKIPPED, EXONERATED.
	Status v1.TestVerdictStatus `protobuf:"varint,7,opt,name=status,proto3,enum=luci.analysis.v1.TestVerdictStatus" json:"status,omitempty"`
	// Status of the test verdict (v2), e.g. failed, flaky, passed.
	StatusV2 v1.TestVerdict_Status `protobuf:"varint,19,opt,name=status_v2,json=statusV2,proto3,enum=luci.analysis.v1.TestVerdict_Status" json:"status_v2,omitempty"`
	// The status override, e.g. whether the test was exonerated.
	StatusOverride v1.TestVerdict_StatusOverride `protobuf:"varint,20,opt,name=status_override,json=statusOverride,proto3,enum=luci.analysis.v1.TestVerdict_StatusOverride" json:"status_override,omitempty"`
	// The test results that are part of the verdict. Usually there is
	// only one test result per verdict, but in case of retries there
	// may be more.
	Results []*TestVerdictRow_TestResult `protobuf:"bytes,8,rep,name=results,proto3" json:"results,omitempty"`
	// The exoneration(s) recorded against the verdict.
	//
	// To determine if a verdict has an exoneration at all in a query,
	// use `ARRAY_LENGTH(exonerations) > 0`.
	Exonerations []*TestVerdictRow_Exoneration `protobuf:"bytes,9,rep,name=exonerations,proto3" json:"exonerations,omitempty"`
	// Deprecated: Use counts_v2 instead.
	// Statistics about the test results that are part of the verdict.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	Counts *TestVerdictRow_Counts `protobuf:"bytes,10,opt,name=counts,proto3" json:"counts,omitempty"`
	// Statistics about the test results that are part of the verdict.
	CountsV2 *TestVerdictRow_CountsV2 `protobuf:"bytes,21,opt,name=counts_v2,json=countsV2,proto3" json:"counts_v2,omitempty"`
	// The buildbucket build the results were collected as part of, if any.
	BuildbucketBuild *TestVerdictRow_BuildbucketBuild `protobuf:"bytes,11,opt,name=buildbucket_build,json=buildbucketBuild,proto3" json:"buildbucket_build,omitempty"`
	// The original presubmit run the results were collected as part of, if any.
	ChangeVerifierRun *TestVerdictRow_ChangeVerifierRun `protobuf:"bytes,12,opt,name=change_verifier_run,json=changeVerifierRun,proto3" json:"change_verifier_run,omitempty"`
	// The code sources tested. Obtained from one of the verdict's test results.
	// If the invocation which contained the test result
	// specified that code sources directly, this is those sources.
	// If the code sources were marked as are inherited from the including
	// invocation, this is the resolved code sources (if they could be resolved).
	// Unset otherwise.
	Sources *v1.Sources `protobuf:"bytes,13,opt,name=sources,proto3" json:"sources,omitempty"`
	// The branch in source control that was tested, if known.
	// For example, the `refs/heads/main` branch in the `chromium/src` repo
	// hosted by `chromium.googlesource.com`.
	// This is a subset of the information in the `sources` field.
	SourceRef *v1.SourceRef `protobuf:"bytes,15,opt,name=source_ref,json=sourceRef,proto3" json:"source_ref,omitempty"`
	// Hash of the source_ref field, as 16 lowercase hexadecimal characters.
	// Can be used to uniquely identify a branch in a source code
	// version control system.
	SourceRefHash string `protobuf:"bytes,16,opt,name=source_ref_hash,json=sourceRefHash,proto3" json:"source_ref_hash,omitempty"`
	// Metadata of the test case,
	// e.g. the original test name and test location.
	TestMetadata *TestMetadata `protobuf:"bytes,14,opt,name=test_metadata,json=testMetadata,proto3" json:"test_metadata,omitempty"`
	// The time when the server started inserting the row into the BigQuery
	// table.
	//
	// While this is approximately the same as the time the row became visible in the
	// BigQuery table, it will not match exactly due factors such as:
	// - RPC latency,
	// - server processing delay,
	// - server clock drift.
	// For these reasons, a row with a later insert_time may actually have
	// been visible before a row with an earlier insert_time.
	//
	// If you require timestamping that lines up with table visiblity, e.g.
	// for incremental extracts, you may better off using the APPENDS Table-valued
	// function that is part of the BigQuery change history feature:
	// https://cloud.google.com/bigquery/docs/change-history
	InsertTime    *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=insert_time,json=insertTime,proto3" json:"insert_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow) Reset() {
	*x = TestVerdictRow{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow) ProtoMessage() {}

func (x *TestVerdictRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow.ProtoReflect.Descriptor instead.
func (*TestVerdictRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0}
}

func (x *TestVerdictRow) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVerdictRow) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *TestVerdictRow) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVerdictRow) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *TestVerdictRow) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVerdictRow) GetInvocation() *TestVerdictRow_InvocationRecord {
	if x != nil {
		return x.Invocation
	}
	return nil
}

func (x *TestVerdictRow) GetPartitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PartitionTime
	}
	return nil
}

func (x *TestVerdictRow) GetStatus() v1.TestVerdictStatus {
	if x != nil {
		return x.Status
	}
	return v1.TestVerdictStatus(0)
}

func (x *TestVerdictRow) GetStatusV2() v1.TestVerdict_Status {
	if x != nil {
		return x.StatusV2
	}
	return v1.TestVerdict_Status(0)
}

func (x *TestVerdictRow) GetStatusOverride() v1.TestVerdict_StatusOverride {
	if x != nil {
		return x.StatusOverride
	}
	return v1.TestVerdict_StatusOverride(0)
}

func (x *TestVerdictRow) GetResults() []*TestVerdictRow_TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TestVerdictRow) GetExonerations() []*TestVerdictRow_Exoneration {
	if x != nil {
		return x.Exonerations
	}
	return nil
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow) GetCounts() *TestVerdictRow_Counts {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *TestVerdictRow) GetCountsV2() *TestVerdictRow_CountsV2 {
	if x != nil {
		return x.CountsV2
	}
	return nil
}

func (x *TestVerdictRow) GetBuildbucketBuild() *TestVerdictRow_BuildbucketBuild {
	if x != nil {
		return x.BuildbucketBuild
	}
	return nil
}

func (x *TestVerdictRow) GetChangeVerifierRun() *TestVerdictRow_ChangeVerifierRun {
	if x != nil {
		return x.ChangeVerifierRun
	}
	return nil
}

func (x *TestVerdictRow) GetSources() *v1.Sources {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *TestVerdictRow) GetSourceRef() *v1.SourceRef {
	if x != nil {
		return x.SourceRef
	}
	return nil
}

func (x *TestVerdictRow) GetSourceRefHash() string {
	if x != nil {
		return x.SourceRefHash
	}
	return ""
}

func (x *TestVerdictRow) GetTestMetadata() *TestMetadata {
	if x != nil {
		return x.TestMetadata
	}
	return nil
}

func (x *TestVerdictRow) GetInsertTime() *timestamppb.Timestamp {
	if x != nil {
		return x.InsertTime
	}
	return nil
}

type TestVerdictRow_InvocationRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the invocation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Tags represents Invocation-level string key-value pairs.
	// A key can be repeated.
	Tags []*v1.StringPair `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	// The LUCI Realm the invocation exists under.
	// For example, "chromium:try".
	Realm string `protobuf:"bytes,3,opt,name=realm,proto3" json:"realm,omitempty"`
	// Arbitrary JSON object that contains structured, domain-specific properties
	// of the invocation. Stored here stringified as this is the only protocol
	// buffer type that maps to the JSON BigQuery type:
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	Properties    string `protobuf:"bytes,4,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_InvocationRecord) Reset() {
	*x = TestVerdictRow_InvocationRecord{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_InvocationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_InvocationRecord) ProtoMessage() {}

func (x *TestVerdictRow_InvocationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_InvocationRecord.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_InvocationRecord) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TestVerdictRow_InvocationRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestVerdictRow_InvocationRecord) GetTags() []*v1.StringPair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TestVerdictRow_InvocationRecord) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *TestVerdictRow_InvocationRecord) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

// ParentInvocationRecord for a test result is the immediate parent invocation
// that directly contains the test result.
type TestVerdictRow_ParentInvocationRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of the invocation.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_ParentInvocationRecord) Reset() {
	*x = TestVerdictRow_ParentInvocationRecord{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_ParentInvocationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_ParentInvocationRecord) ProtoMessage() {}

func (x *TestVerdictRow_ParentInvocationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_ParentInvocationRecord.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_ParentInvocationRecord) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TestVerdictRow_ParentInvocationRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// NextId: 16
type TestVerdictRow_TestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parent contains info of the result's immediate parent invocation.
	Parent *TestVerdictRow_ParentInvocationRecord `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The global identifier of a test result in ResultDB.
	// Format:
	// "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}".
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Identifies a test result in a given invocation and test id.
	ResultId string `protobuf:"bytes,2,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	// Deprecated: Use status_v2 instead.
	// Expected is a flag indicating whether the result of test case execution is
	// expected. Refer to TestResult.Expected for details.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	Expected bool `protobuf:"varint,3,opt,name=expected,proto3" json:"expected,omitempty"`
	// Deprecated: Use status_v2 and framework_extensions instead.
	// Status of the test result.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	Status v1.TestResultStatus `protobuf:"varint,4,opt,name=status,proto3,enum=luci.analysis.v1.TestResultStatus" json:"status,omitempty"`
	// Status of the test result (v2).
	StatusV2 v1.TestResult_Status `protobuf:"varint,13,opt,name=status_v2,json=statusV2,proto3,enum=luci.analysis.v1.TestResult_Status" json:"status_v2,omitempty"`
	// A human-readable explanation of the result, in HTML.
	// MUST be sanitized before rendering in the browser.
	SummaryHtml string `protobuf:"bytes,5,opt,name=summary_html,json=summaryHtml,proto3" json:"summary_html,omitempty"`
	// The point in time when the test case started to execute.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Duration of the test case execution in seconds.
	Duration float64 `protobuf:"fixed64,7,opt,name=duration,proto3" json:"duration,omitempty"`
	// Tags contains metadata for this test result.
	// It might describe this particular execution or the test case.
	Tags []*v1.StringPair `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// Information about failed tests.
	// e.g. the assertion failure message.
	FailureReason *v11.FailureReason `protobuf:"bytes,9,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	// Deprecated: Replaced by skipped_reason message.
	// Reasoning behind a test skip, in machine-readable form.
	// Used to assist downstream analyses, such as automatic bug-filing.
	// MUST not be set unless status is SKIP.
	// It's the string presentation of luci.resultdb.v1.SkipReason when
	// specified, "" when the skip reason is unspecified.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	SkipReason string `protobuf:"bytes,12,opt,name=skip_reason,json=skipReason,proto3" json:"skip_reason,omitempty"`
	// Reason why a test was skipped.
	// The contents of this message should help the user answer:
	// Why was my test skipped? What can I do to stop it being skipped?
	SkippedReason *v11.SkippedReason `protobuf:"bytes,14,opt,name=skipped_reason,json=skippedReason,proto3" json:"skipped_reason,omitempty"`
	// Test result framework-specific data model elements.
	FrameworkExtensions *v11.FrameworkExtensions `protobuf:"bytes,15,opt,name=framework_extensions,json=frameworkExtensions,proto3" json:"framework_extensions,omitempty"`
	// Arbitrary JSON object that contains structured, domain-specific properties
	// of the test result. Stored here stringified as this is the only protocol
	// buffer type that maps to the JSON BigQuery type:
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	Properties    string `protobuf:"bytes,10,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_TestResult) Reset() {
	*x = TestVerdictRow_TestResult{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_TestResult) ProtoMessage() {}

func (x *TestVerdictRow_TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_TestResult.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_TestResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TestVerdictRow_TestResult) GetParent() *TestVerdictRow_ParentInvocationRecord {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestVerdictRow_TestResult) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_TestResult) GetExpected() bool {
	if x != nil {
		return x.Expected
	}
	return false
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_TestResult) GetStatus() v1.TestResultStatus {
	if x != nil {
		return x.Status
	}
	return v1.TestResultStatus(0)
}

func (x *TestVerdictRow_TestResult) GetStatusV2() v1.TestResult_Status {
	if x != nil {
		return x.StatusV2
	}
	return v1.TestResult_Status(0)
}

func (x *TestVerdictRow_TestResult) GetSummaryHtml() string {
	if x != nil {
		return x.SummaryHtml
	}
	return ""
}

func (x *TestVerdictRow_TestResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *TestVerdictRow_TestResult) GetTags() []*v1.StringPair {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetFailureReason() *v11.FailureReason {
	if x != nil {
		return x.FailureReason
	}
	return nil
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_TestResult) GetSkipReason() string {
	if x != nil {
		return x.SkipReason
	}
	return ""
}

func (x *TestVerdictRow_TestResult) GetSkippedReason() *v11.SkippedReason {
	if x != nil {
		return x.SkippedReason
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetFrameworkExtensions() *v11.FrameworkExtensions {
	if x != nil {
		return x.FrameworkExtensions
	}
	return nil
}

func (x *TestVerdictRow_TestResult) GetProperties() string {
	if x != nil {
		return x.Properties
	}
	return ""
}

type TestVerdictRow_Exoneration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Reasoning behind exoneration, in HTML.
	// MUST be sanitized before rendering in the browser.
	ExplanationHtml string `protobuf:"bytes,1,opt,name=explanation_html,json=explanationHtml,proto3" json:"explanation_html,omitempty"`
	// Reasoning behind the exoneration, in machine-readable form.
	Reason        v1.ExonerationReason `protobuf:"varint,2,opt,name=reason,proto3,enum=luci.analysis.v1.ExonerationReason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_Exoneration) Reset() {
	*x = TestVerdictRow_Exoneration{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_Exoneration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_Exoneration) ProtoMessage() {}

func (x *TestVerdictRow_Exoneration) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_Exoneration.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_Exoneration) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TestVerdictRow_Exoneration) GetExplanationHtml() string {
	if x != nil {
		return x.ExplanationHtml
	}
	return ""
}

func (x *TestVerdictRow_Exoneration) GetReason() v1.ExonerationReason {
	if x != nil {
		return x.Reason
	}
	return v1.ExonerationReason(0)
}

// Deprecated: Use CountsV2 instead.
// Counts of legacy test result statuses (expected+status).
type TestVerdictRow_Counts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of unexpected test results in the verdict.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	Unexpected int64 `protobuf:"varint,1,opt,name=unexpected,proto3" json:"unexpected,omitempty"`
	// The total number of test results in the verdict.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	Total int64 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// The total number of unexpected test results in the verdict
	// that are not skips.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	UnexpectedNonSkipped int64 `protobuf:"varint,3,opt,name=unexpected_non_skipped,json=unexpectedNonSkipped,proto3" json:"unexpected_non_skipped,omitempty"`
	// The total number of unexpected test results in the verdict
	// that are not skips and not passes.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	UnexpectedNonSkippedNonPassed int64 `protobuf:"varint,4,opt,name=unexpected_non_skipped_non_passed,json=unexpectedNonSkippedNonPassed,proto3" json:"unexpected_non_skipped_non_passed,omitempty"`
	// The total number of test results in the verdict that
	// are not skips.
	//
	// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
	TotalNonSkipped int64 `protobuf:"varint,5,opt,name=total_non_skipped,json=totalNonSkipped,proto3" json:"total_non_skipped,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestVerdictRow_Counts) Reset() {
	*x = TestVerdictRow_Counts{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_Counts) ProtoMessage() {}

func (x *TestVerdictRow_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_Counts.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_Counts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 4}
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_Counts) GetUnexpected() int64 {
	if x != nil {
		return x.Unexpected
	}
	return 0
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_Counts) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_Counts) GetUnexpectedNonSkipped() int64 {
	if x != nil {
		return x.UnexpectedNonSkipped
	}
	return 0
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_Counts) GetUnexpectedNonSkippedNonPassed() int64 {
	if x != nil {
		return x.UnexpectedNonSkippedNonPassed
	}
	return 0
}

// Deprecated: Marked as deprecated in go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto.
func (x *TestVerdictRow_Counts) GetTotalNonSkipped() int64 {
	if x != nil {
		return x.TotalNonSkipped
	}
	return 0
}

// Counts of v2 test result statuses (status_v2).
type TestVerdictRow_CountsV2 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The total number of passed results (status_v2 = passed).
	Passed int64 `protobuf:"varint,1,opt,name=passed,proto3" json:"passed,omitempty"`
	// The total number of failed results (status_v2 = failed).
	Failed int64 `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	// The total number of skipped results (status_v2 = skipped).
	Skipped int64 `protobuf:"varint,3,opt,name=skipped,proto3" json:"skipped,omitempty"`
	// The total number of execution errored results (status_v2 = execution_errored).
	ExecutionErrored int64 `protobuf:"varint,4,opt,name=execution_errored,json=executionErrored,proto3" json:"execution_errored,omitempty"`
	// The total number of precludeud results (status_v2 = precluded).
	Precluded int64 `protobuf:"varint,5,opt,name=precluded,proto3" json:"precluded,omitempty"`
	// The total number of results.
	Total         int64 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_CountsV2) Reset() {
	*x = TestVerdictRow_CountsV2{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_CountsV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_CountsV2) ProtoMessage() {}

func (x *TestVerdictRow_CountsV2) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_CountsV2.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_CountsV2) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 5}
}

func (x *TestVerdictRow_CountsV2) GetPassed() int64 {
	if x != nil {
		return x.Passed
	}
	return 0
}

func (x *TestVerdictRow_CountsV2) GetFailed() int64 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *TestVerdictRow_CountsV2) GetSkipped() int64 {
	if x != nil {
		return x.Skipped
	}
	return 0
}

func (x *TestVerdictRow_CountsV2) GetExecutionErrored() int64 {
	if x != nil {
		return x.ExecutionErrored
	}
	return 0
}

func (x *TestVerdictRow_CountsV2) GetPrecluded() int64 {
	if x != nil {
		return x.Precluded
	}
	return 0
}

func (x *TestVerdictRow_CountsV2) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Information about the buildbucket build which contained the test result.
type TestVerdictRow_BuildbucketBuild struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identifier of the buildbucket build.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The builder the build belongs to.
	Builder *TestVerdictRow_BuildbucketBuild_Builder `protobuf:"bytes,2,opt,name=builder,proto3" json:"builder,omitempty"`
	// The status of the build that contained this test result. Can be used
	// to filter incomplete results (e.g. where build was cancelled or had
	// an infra failure). Can also be used to filter builds with incomplete
	// exonerations (e.g. build succeeded but some tests not exonerated).
	//
	// Notionally luci.analysis.v1.BuildStatus, but string so that we can chop
	// off the BUILD_STATUS_ prefix that would otherwise appear on every value.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// The gardener rotations which monitor this build.
	GardenerRotations []string `protobuf:"bytes,4,rep,name=gardener_rotations,json=gardenerRotations,proto3" json:"gardener_rotations,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TestVerdictRow_BuildbucketBuild) Reset() {
	*x = TestVerdictRow_BuildbucketBuild{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_BuildbucketBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_BuildbucketBuild) ProtoMessage() {}

func (x *TestVerdictRow_BuildbucketBuild) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_BuildbucketBuild.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_BuildbucketBuild) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 6}
}

func (x *TestVerdictRow_BuildbucketBuild) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TestVerdictRow_BuildbucketBuild) GetBuilder() *TestVerdictRow_BuildbucketBuild_Builder {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *TestVerdictRow_BuildbucketBuild) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestVerdictRow_BuildbucketBuild) GetGardenerRotations() []string {
	if x != nil {
		return x.GardenerRotations
	}
	return nil
}

// Information about the LUCI Change Verifier run which the test result
// was a part of, if any.
type TestVerdictRow_ChangeVerifierRun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identity of the change verifier run that contains this test result.
	// This should be unique per "CQ+1"/"CQ+2" attempt on gerrit.
	//
	// All test results for the same presubmit run will have one
	// partition_time.
	//
	// The format of this value is:
	// "{LUCI_PROJECT}/{LUCI_CV_ID}", e.g.
	// "infra/8988819463854-1-f94732fe20056fd1".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The mode of the presubmit run (if any).
	// E.g. DRY_RUN, FULL_RUN, QUICK_DRY_RUN.
	Mode v1.PresubmitRunMode `protobuf:"varint,2,opt,name=mode,proto3,enum=luci.analysis.v1.PresubmitRunMode" json:"mode,omitempty"`
	// The presubmit run's ending status.
	// Notionally luci.analysis.v1.PresubmitRunStatus, but string so that
	// we can chop off the "PRESUBMIT_RUN_STATUS_" prefix and have
	// only the status, e.g. SUCCEEDED, FAILED, CANCELED.
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Whether the build indicated by buildbucket_build was
	// critical to the presubmit run succeeding. This is
	// false for experimental tryjobs.
	IsBuildCritical bool `protobuf:"varint,4,opt,name=is_build_critical,json=isBuildCritical,proto3" json:"is_build_critical,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestVerdictRow_ChangeVerifierRun) Reset() {
	*x = TestVerdictRow_ChangeVerifierRun{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_ChangeVerifierRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_ChangeVerifierRun) ProtoMessage() {}

func (x *TestVerdictRow_ChangeVerifierRun) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_ChangeVerifierRun.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_ChangeVerifierRun) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 7}
}

func (x *TestVerdictRow_ChangeVerifierRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestVerdictRow_ChangeVerifierRun) GetMode() v1.PresubmitRunMode {
	if x != nil {
		return x.Mode
	}
	return v1.PresubmitRunMode(0)
}

func (x *TestVerdictRow_ChangeVerifierRun) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestVerdictRow_ChangeVerifierRun) GetIsBuildCritical() bool {
	if x != nil {
		return x.IsBuildCritical
	}
	return false
}

type TestVerdictRow_BuildbucketBuild_Builder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project ID.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The build bucket, e.g. "try". Unique within project.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// The builder name, e.g. "linux-rel". Unique within bucket.
	Builder       string `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) Reset() {
	*x = TestVerdictRow_BuildbucketBuild_Builder{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVerdictRow_BuildbucketBuild_Builder) ProtoMessage() {}

func (x *TestVerdictRow_BuildbucketBuild_Builder) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVerdictRow_BuildbucketBuild_Builder.ProtoReflect.Descriptor instead.
func (*TestVerdictRow_BuildbucketBuild_Builder) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *TestVerdictRow_BuildbucketBuild_Builder) GetBuilder() string {
	if x != nil {
		return x.Builder
	}
	return ""
}

var File_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc = "" +
	"\n" +
	"=go.chromium.org/luci/analysis/proto/bq/test_verdict_row.proto\x12\x10luci.analysis.bq\x1a\x1fgoogle/protobuf/timestamp.proto\x1a3go.chromium.org/luci/analysis/proto/bq/common.proto\x1a:go.chromium.org/luci/analysis/proto/bq/test_metadata.proto\x1a3go.chromium.org/luci/analysis/proto/v1/common.proto\x1a4go.chromium.org/luci/analysis/proto/v1/sources.proto\x1a9go.chromium.org/luci/analysis/proto/v1/test_verdict.proto\x1a;go.chromium.org/luci/resultdb/proto/v1/failure_reason.proto\x1a8go.chromium.org/luci/resultdb/proto/v1/test_result.proto\x1a/go.chromium.org/luci/common/bq/pb/options.proto\"\x95\x1a\n" +
	"\x0eTestVerdictRow\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12N\n" +
	"\x12test_id_structured\x18\x12 \x01(\v2 .luci.analysis.bq.TestIdentifierR\x10testIdStructured\x12\x17\n" +
	"\atest_id\x18\x02 \x01(\tR\x06testId\x12$\n" +
	"\avariant\x18\x03 \x01(\tB\n" +
	"\xe2\xbc$\x06\n" +
	"\x04JSONR\avariant\x12!\n" +
	"\fvariant_hash\x18\x04 \x01(\tR\vvariantHash\x12Q\n" +
	"\n" +
	"invocation\x18\x05 \x01(\v21.luci.analysis.bq.TestVerdictRow.InvocationRecordR\n" +
	"invocation\x12A\n" +
	"\x0epartition_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\rpartitionTime\x12;\n" +
	"\x06status\x18\a \x01(\x0e2#.luci.analysis.v1.TestVerdictStatusR\x06status\x12A\n" +
	"\tstatus_v2\x18\x13 \x01(\x0e2$.luci.analysis.v1.TestVerdict.StatusR\bstatusV2\x12U\n" +
	"\x0fstatus_override\x18\x14 \x01(\x0e2,.luci.analysis.v1.TestVerdict.StatusOverrideR\x0estatusOverride\x12E\n" +
	"\aresults\x18\b \x03(\v2+.luci.analysis.bq.TestVerdictRow.TestResultR\aresults\x12P\n" +
	"\fexonerations\x18\t \x03(\v2,.luci.analysis.bq.TestVerdictRow.ExonerationR\fexonerations\x12C\n" +
	"\x06counts\x18\n" +
	" \x01(\v2'.luci.analysis.bq.TestVerdictRow.CountsB\x02\x18\x01R\x06counts\x12F\n" +
	"\tcounts_v2\x18\x15 \x01(\v2).luci.analysis.bq.TestVerdictRow.CountsV2R\bcountsV2\x12^\n" +
	"\x11buildbucket_build\x18\v \x01(\v21.luci.analysis.bq.TestVerdictRow.BuildbucketBuildR\x10buildbucketBuild\x12b\n" +
	"\x13change_verifier_run\x18\f \x01(\v22.luci.analysis.bq.TestVerdictRow.ChangeVerifierRunR\x11changeVerifierRun\x123\n" +
	"\asources\x18\r \x01(\v2\x19.luci.analysis.v1.SourcesR\asources\x12:\n" +
	"\n" +
	"source_ref\x18\x0f \x01(\v2\x1b.luci.analysis.v1.SourceRefR\tsourceRef\x12&\n" +
	"\x0fsource_ref_hash\x18\x10 \x01(\tR\rsourceRefHash\x12C\n" +
	"\rtest_metadata\x18\x0e \x01(\v2\x1e.luci.analysis.bq.TestMetadataR\ftestMetadata\x12;\n" +
	"\vinsert_time\x18\x11 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"insertTime\x1a\x96\x01\n" +
	"\x10InvocationRecord\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x120\n" +
	"\x04tags\x18\x02 \x03(\v2\x1c.luci.analysis.v1.StringPairR\x04tags\x12\x14\n" +
	"\x05realm\x18\x03 \x01(\tR\x05realm\x12*\n" +
	"\n" +
	"properties\x18\x04 \x01(\tB\n" +
	"\xe2\xbc$\x06\n" +
	"\x04JSONR\n" +
	"properties\x1a(\n" +
	"\x16ParentInvocationRecord\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x1a\x97\x06\n" +
	"\n" +
	"TestResult\x12O\n" +
	"\x06parent\x18\x01 \x01(\v27.luci.analysis.bq.TestVerdictRow.ParentInvocationRecordR\x06parent\x12\x12\n" +
	"\x04name\x18\v \x01(\tR\x04name\x12\x1b\n" +
	"\tresult_id\x18\x02 \x01(\tR\bresultId\x12\x1e\n" +
	"\bexpected\x18\x03 \x01(\bB\x02\x18\x01R\bexpected\x12>\n" +
	"\x06status\x18\x04 \x01(\x0e2\".luci.analysis.v1.TestResultStatusB\x02\x18\x01R\x06status\x12@\n" +
	"\tstatus_v2\x18\r \x01(\x0e2#.luci.analysis.v1.TestResult.StatusR\bstatusV2\x12!\n" +
	"\fsummary_html\x18\x05 \x01(\tR\vsummaryHtml\x129\n" +
	"\n" +
	"start_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12\x1a\n" +
	"\bduration\x18\a \x01(\x01R\bduration\x120\n" +
	"\x04tags\x18\b \x03(\v2\x1c.luci.analysis.v1.StringPairR\x04tags\x12F\n" +
	"\x0efailure_reason\x18\t \x01(\v2\x1f.luci.resultdb.v1.FailureReasonR\rfailureReason\x12#\n" +
	"\vskip_reason\x18\f \x01(\tB\x02\x18\x01R\n" +
	"skipReason\x12F\n" +
	"\x0eskipped_reason\x18\x0e \x01(\v2\x1f.luci.resultdb.v1.SkippedReasonR\rskippedReason\x12X\n" +
	"\x14framework_extensions\x18\x0f \x01(\v2%.luci.resultdb.v1.FrameworkExtensionsR\x13frameworkExtensions\x12*\n" +
	"\n" +
	"properties\x18\n" +
	" \x01(\tB\n" +
	"\xe2\xbc$\x06\n" +
	"\x04JSONR\n" +
	"properties\x1au\n" +
	"\vExoneration\x12)\n" +
	"\x10explanation_html\x18\x01 \x01(\tR\x0fexplanationHtml\x12;\n" +
	"\x06reason\x18\x02 \x01(\x0e2#.luci.analysis.v1.ExonerationReasonR\x06reason\x1a\xfe\x01\n" +
	"\x06Counts\x12\"\n" +
	"\n" +
	"unexpected\x18\x01 \x01(\x03B\x02\x18\x01R\n" +
	"unexpected\x12\x18\n" +
	"\x05total\x18\x02 \x01(\x03B\x02\x18\x01R\x05total\x128\n" +
	"\x16unexpected_non_skipped\x18\x03 \x01(\x03B\x02\x18\x01R\x14unexpectedNonSkipped\x12L\n" +
	"!unexpected_non_skipped_non_passed\x18\x04 \x01(\x03B\x02\x18\x01R\x1dunexpectedNonSkippedNonPassed\x12.\n" +
	"\x11total_non_skipped\x18\x05 \x01(\x03B\x02\x18\x01R\x0ftotalNonSkipped\x1a\xb5\x01\n" +
	"\bCountsV2\x12\x16\n" +
	"\x06passed\x18\x01 \x01(\x03R\x06passed\x12\x16\n" +
	"\x06failed\x18\x02 \x01(\x03R\x06failed\x12\x18\n" +
	"\askipped\x18\x03 \x01(\x03R\askipped\x12+\n" +
	"\x11execution_errored\x18\x04 \x01(\x03R\x10executionErrored\x12\x1c\n" +
	"\tprecluded\x18\x05 \x01(\x03R\tprecluded\x12\x14\n" +
	"\x05total\x18\x06 \x01(\x03R\x05total\x1a\x95\x02\n" +
	"\x10BuildbucketBuild\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12S\n" +
	"\abuilder\x18\x02 \x01(\v29.luci.analysis.bq.TestVerdictRow.BuildbucketBuild.BuilderR\abuilder\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12-\n" +
	"\x12gardener_rotations\x18\x04 \x03(\tR\x11gardenerRotations\x1aU\n" +
	"\aBuilder\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12\x16\n" +
	"\x06bucket\x18\x02 \x01(\tR\x06bucket\x12\x18\n" +
	"\abuilder\x18\x03 \x01(\tR\abuilder\x1a\x9f\x01\n" +
	"\x11ChangeVerifierRun\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x126\n" +
	"\x04mode\x18\x02 \x01(\x0e2\".luci.analysis.v1.PresubmitRunModeR\x04mode\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12*\n" +
	"\x11is_build_critical\x18\x04 \x01(\bR\x0fisBuildCriticalB-Z+go.chromium.org/luci/analysis/proto/bq;bqpbb\x06proto3"

var (
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_goTypes = []any{
	(*TestVerdictRow)(nil),                          // 0: luci.analysis.bq.TestVerdictRow
	(*TestVerdictRow_InvocationRecord)(nil),         // 1: luci.analysis.bq.TestVerdictRow.InvocationRecord
	(*TestVerdictRow_ParentInvocationRecord)(nil),   // 2: luci.analysis.bq.TestVerdictRow.ParentInvocationRecord
	(*TestVerdictRow_TestResult)(nil),               // 3: luci.analysis.bq.TestVerdictRow.TestResult
	(*TestVerdictRow_Exoneration)(nil),              // 4: luci.analysis.bq.TestVerdictRow.Exoneration
	(*TestVerdictRow_Counts)(nil),                   // 5: luci.analysis.bq.TestVerdictRow.Counts
	(*TestVerdictRow_CountsV2)(nil),                 // 6: luci.analysis.bq.TestVerdictRow.CountsV2
	(*TestVerdictRow_BuildbucketBuild)(nil),         // 7: luci.analysis.bq.TestVerdictRow.BuildbucketBuild
	(*TestVerdictRow_ChangeVerifierRun)(nil),        // 8: luci.analysis.bq.TestVerdictRow.ChangeVerifierRun
	(*TestVerdictRow_BuildbucketBuild_Builder)(nil), // 9: luci.analysis.bq.TestVerdictRow.BuildbucketBuild.Builder
	(*TestIdentifier)(nil),                          // 10: luci.analysis.bq.TestIdentifier
	(*timestamppb.Timestamp)(nil),                   // 11: google.protobuf.Timestamp
	(v1.TestVerdictStatus)(0),                       // 12: luci.analysis.v1.TestVerdictStatus
	(v1.TestVerdict_Status)(0),                      // 13: luci.analysis.v1.TestVerdict.Status
	(v1.TestVerdict_StatusOverride)(0),              // 14: luci.analysis.v1.TestVerdict.StatusOverride
	(*v1.Sources)(nil),                              // 15: luci.analysis.v1.Sources
	(*v1.SourceRef)(nil),                            // 16: luci.analysis.v1.SourceRef
	(*TestMetadata)(nil),                            // 17: luci.analysis.bq.TestMetadata
	(*v1.StringPair)(nil),                           // 18: luci.analysis.v1.StringPair
	(v1.TestResultStatus)(0),                        // 19: luci.analysis.v1.TestResultStatus
	(v1.TestResult_Status)(0),                       // 20: luci.analysis.v1.TestResult.Status
	(*v11.FailureReason)(nil),                       // 21: luci.resultdb.v1.FailureReason
	(*v11.SkippedReason)(nil),                       // 22: luci.resultdb.v1.SkippedReason
	(*v11.FrameworkExtensions)(nil),                 // 23: luci.resultdb.v1.FrameworkExtensions
	(v1.ExonerationReason)(0),                       // 24: luci.analysis.v1.ExonerationReason
	(v1.PresubmitRunMode)(0),                        // 25: luci.analysis.v1.PresubmitRunMode
}
var file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_depIdxs = []int32{
	10, // 0: luci.analysis.bq.TestVerdictRow.test_id_structured:type_name -> luci.analysis.bq.TestIdentifier
	1,  // 1: luci.analysis.bq.TestVerdictRow.invocation:type_name -> luci.analysis.bq.TestVerdictRow.InvocationRecord
	11, // 2: luci.analysis.bq.TestVerdictRow.partition_time:type_name -> google.protobuf.Timestamp
	12, // 3: luci.analysis.bq.TestVerdictRow.status:type_name -> luci.analysis.v1.TestVerdictStatus
	13, // 4: luci.analysis.bq.TestVerdictRow.status_v2:type_name -> luci.analysis.v1.TestVerdict.Status
	14, // 5: luci.analysis.bq.TestVerdictRow.status_override:type_name -> luci.analysis.v1.TestVerdict.StatusOverride
	3,  // 6: luci.analysis.bq.TestVerdictRow.results:type_name -> luci.analysis.bq.TestVerdictRow.TestResult
	4,  // 7: luci.analysis.bq.TestVerdictRow.exonerations:type_name -> luci.analysis.bq.TestVerdictRow.Exoneration
	5,  // 8: luci.analysis.bq.TestVerdictRow.counts:type_name -> luci.analysis.bq.TestVerdictRow.Counts
	6,  // 9: luci.analysis.bq.TestVerdictRow.counts_v2:type_name -> luci.analysis.bq.TestVerdictRow.CountsV2
	7,  // 10: luci.analysis.bq.TestVerdictRow.buildbucket_build:type_name -> luci.analysis.bq.TestVerdictRow.BuildbucketBuild
	8,  // 11: luci.analysis.bq.TestVerdictRow.change_verifier_run:type_name -> luci.analysis.bq.TestVerdictRow.ChangeVerifierRun
	15, // 12: luci.analysis.bq.TestVerdictRow.sources:type_name -> luci.analysis.v1.Sources
	16, // 13: luci.analysis.bq.TestVerdictRow.source_ref:type_name -> luci.analysis.v1.SourceRef
	17, // 14: luci.analysis.bq.TestVerdictRow.test_metadata:type_name -> luci.analysis.bq.TestMetadata
	11, // 15: luci.analysis.bq.TestVerdictRow.insert_time:type_name -> google.protobuf.Timestamp
	18, // 16: luci.analysis.bq.TestVerdictRow.InvocationRecord.tags:type_name -> luci.analysis.v1.StringPair
	2,  // 17: luci.analysis.bq.TestVerdictRow.TestResult.parent:type_name -> luci.analysis.bq.TestVerdictRow.ParentInvocationRecord
	19, // 18: luci.analysis.bq.TestVerdictRow.TestResult.status:type_name -> luci.analysis.v1.TestResultStatus
	20, // 19: luci.analysis.bq.TestVerdictRow.TestResult.status_v2:type_name -> luci.analysis.v1.TestResult.Status
	11, // 20: luci.analysis.bq.TestVerdictRow.TestResult.start_time:type_name -> google.protobuf.Timestamp
	18, // 21: luci.analysis.bq.TestVerdictRow.TestResult.tags:type_name -> luci.analysis.v1.StringPair
	21, // 22: luci.analysis.bq.TestVerdictRow.TestResult.failure_reason:type_name -> luci.resultdb.v1.FailureReason
	22, // 23: luci.analysis.bq.TestVerdictRow.TestResult.skipped_reason:type_name -> luci.resultdb.v1.SkippedReason
	23, // 24: luci.analysis.bq.TestVerdictRow.TestResult.framework_extensions:type_name -> luci.resultdb.v1.FrameworkExtensions
	24, // 25: luci.analysis.bq.TestVerdictRow.Exoneration.reason:type_name -> luci.analysis.v1.ExonerationReason
	9,  // 26: luci.analysis.bq.TestVerdictRow.BuildbucketBuild.builder:type_name -> luci.analysis.bq.TestVerdictRow.BuildbucketBuild.Builder
	25, // 27: luci.analysis.bq.TestVerdictRow.ChangeVerifierRun.mode:type_name -> luci.analysis.v1.PresubmitRunMode
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_init() }
func file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_init()
	file_go_chromium_org_luci_analysis_proto_bq_test_metadata_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_test_verdict_row_proto_depIdxs = nil
}
