// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/analysis/proto/bq/test_variant_branch_row.proto

package bqpb

import (
	v1 "go.chromium.org/luci/analysis/proto/v1"
	_ "go.chromium.org/luci/common/bq/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents analysis for a test variant on a source branch at a point in time.
//
// Primary key (test_variant_segments): project, test_id, variant_hash, ref_hash.
type TestVariantBranchRow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The LUCI Project. E.g. "chromium".
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The structured test identifier.
	//
	// Uniquely identifies the test that was run, including the specific way of running that
	// test, e.g. build configuration, CPU architecture, OS.
	TestIdStructured *TestIdentifier `protobuf:"bytes,10,opt,name=test_id_structured,json=testIdStructured,proto3" json:"test_id_structured,omitempty"`
	// A unique identifier of the test in a LUCI project, excluding variant.
	//
	// This is the flat-form encoding of the structured test variant ID above,
	// excluding information about the specific way of running test (e.g. build configuration,
	// CPU architecture). Such information is captured separately in the `variant` field below.
	//
	// See TestIdentifier for details how a structured test identifier is converted
	// to flat test ID.
	TestId string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	// Description of one specific way of running the test,
	// e.g. build configuration, CPU architecture, OS.
	//
	// This will be encoded as a JSON object like
	// {"builder":"linux-rel","os":"Ubuntu-18.04",...}
	// to take advantage of BigQuery's JSON support, so that the query will only
	// be billed for the variant keys it reads.
	//
	// In the protocol buffer, it must be a string as per
	// https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
	Variant string `protobuf:"bytes,5,opt,name=variant,proto3" json:"variant,omitempty"`
	// Hash of the variant, as 16 lowercase hexadecimal characters.
	// E.g. "96c68dc946ab4068".
	VariantHash string `protobuf:"bytes,3,opt,name=variant_hash,json=variantHash,proto3" json:"variant_hash,omitempty"`
	// Hash of the source branch, as 16 lowercase hexadecimal characters.
	RefHash string `protobuf:"bytes,4,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"`
	// The branch in source control.
	Ref *v1.SourceRef `protobuf:"bytes,6,opt,name=ref,proto3" json:"ref,omitempty"`
	// The test history represented as a set of [start commit position,
	// end commit position] segments, where segments have statistically
	// different failure and/or flake rates. The segments are ordered so that
	// the most recent segment appears first.
	// If a client is only interested in the current failure/flake rate, they
	// can just query the first segment.
	Segments []*Segment `protobuf:"bytes,7,rep,name=segments,proto3" json:"segments,omitempty"`
	// This field has value = 1 if the test variant has any unexpected
	// test results in the last 90 days (excluding presubmit runs that do not
	// results  in CL submission). It has value = 0 otherwise.
	// It is int value instead of bool because we use it as partitioning key
	// (BigQuery does not support bool as partitioning key).
	HasRecentUnexpectedResults int64 `protobuf:"varint,8,opt,name=has_recent_unexpected_results,json=hasRecentUnexpectedResults,proto3" json:"has_recent_unexpected_results,omitempty"`
	// The Spanner commit timestamp that reflects the version of data that was
	// exported. Rows with later timestamps are strictly newer.
	// In the test_variant_segments table, only one version of analysis
	// will be present for a given (project, test_id, variant_hash, ref_hash).
	Version       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestVariantBranchRow) Reset() {
	*x = TestVariantBranchRow{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestVariantBranchRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestVariantBranchRow) ProtoMessage() {}

func (x *TestVariantBranchRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestVariantBranchRow.ProtoReflect.Descriptor instead.
func (*TestVariantBranchRow) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescGZIP(), []int{0}
}

func (x *TestVariantBranchRow) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestVariantBranchRow) GetTestIdStructured() *TestIdentifier {
	if x != nil {
		return x.TestIdStructured
	}
	return nil
}

func (x *TestVariantBranchRow) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *TestVariantBranchRow) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *TestVariantBranchRow) GetVariantHash() string {
	if x != nil {
		return x.VariantHash
	}
	return ""
}

func (x *TestVariantBranchRow) GetRefHash() string {
	if x != nil {
		return x.RefHash
	}
	return ""
}

func (x *TestVariantBranchRow) GetRef() *v1.SourceRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *TestVariantBranchRow) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *TestVariantBranchRow) GetHasRecentUnexpectedResults() int64 {
	if x != nil {
		return x.HasRecentUnexpectedResults
	}
	return 0
}

func (x *TestVariantBranchRow) GetVersion() *timestamppb.Timestamp {
	if x != nil {
		return x.Version
	}
	return nil
}

// Represents a period in history where the test had a consistent failure and
// flake rate. Segments are separated by changepoints. Each segment captures
// information about the changepoint which started it.
type Segment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, means the segment commenced with a changepoint.
	// If unset, means the segment began with the beginning of recorded
	// history for the segment. (All recorded history for a test variant branch
	// is deleted after 90 days of no results, so this means there were
	// no results for at least 90 days before the segment.)
	HasStartChangepoint bool `protobuf:"varint,1,opt,name=has_start_changepoint,json=hasStartChangepoint,proto3" json:"has_start_changepoint,omitempty"`
	// The nominal commit position at which the segment starts (inclusive).
	// Guaranteed to be strictly greater than the end_position of the
	// chronologically previous segment (if any).
	// If this segment has a starting changepoint, this is the nominal position
	// of the changepoint (when the new test behaviour started).
	// If this segment does not have a starting changepoint, this is the
	// simply the first commit position in the known history of the test.
	StartPosition int64 `protobuf:"varint,2,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// The lower bound of the starting changepoint position in a 99% two-tailed
	// confidence interval. Inclusive.
	// Only set if has_start_changepoint is set.
	StartPositionLowerBound_99Th int64 `protobuf:"varint,3,opt,name=start_position_lower_bound_99th,json=startPositionLowerBound99th,proto3" json:"start_position_lower_bound_99th,omitempty"`
	// The upper bound of the starting changepoint position in a 99% two-tailed
	// confidence interval. Inclusive.
	// Only set if has_start_changepoint is set.
	// When has_start_changepoint is set, the following invariant holds:
	// previous_segment.start_position <= start_position_lower_bound_99th <= start_position <= start_position_upper_bound_99th
	// where previous_segment refers to the chronologically previous segment.
	StartPositionUpperBound_99Th int64 `protobuf:"varint,4,opt,name=start_position_upper_bound_99th,json=startPositionUpperBound99th,proto3" json:"start_position_upper_bound_99th,omitempty"`
	// The earliest hour a test verdict at the indicated start_position
	// was recorded. Gives an approximate upper bound on the timestamp the
	// changepoint occurred, for systems which need to filter by date.
	StartHour *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// The nominal commit position at which the segment ends (inclusive).
	// This is either the last recorded commit position in the test history
	// (for this test variant branch), or the position of the last verdict
	// seen before the next detected changepoint.
	EndPosition int64 `protobuf:"varint,6,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	// The latest hour a test verdict at the indicated end_position
	// was recorded. Gives an approximate lower bound on the  timestamp
	// the changepoint occurred, for systems which need to filter by date.
	EndHour *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	// Total number of test results/runs/verdicts in the segment.
	Counts        *Segment_Counts `protobuf:"bytes,8,opt,name=counts,proto3" json:"counts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescGZIP(), []int{1}
}

func (x *Segment) GetHasStartChangepoint() bool {
	if x != nil {
		return x.HasStartChangepoint
	}
	return false
}

func (x *Segment) GetStartPosition() int64 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *Segment) GetStartPositionLowerBound_99Th() int64 {
	if x != nil {
		return x.StartPositionLowerBound_99Th
	}
	return 0
}

func (x *Segment) GetStartPositionUpperBound_99Th() int64 {
	if x != nil {
		return x.StartPositionUpperBound_99Th
	}
	return 0
}

func (x *Segment) GetStartHour() *timestamppb.Timestamp {
	if x != nil {
		return x.StartHour
	}
	return nil
}

func (x *Segment) GetEndPosition() int64 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *Segment) GetEndHour() *timestamppb.Timestamp {
	if x != nil {
		return x.EndHour
	}
	return nil
}

func (x *Segment) GetCounts() *Segment_Counts {
	if x != nil {
		return x.Counts
	}
	return nil
}

// Counts of test results, runs and verdicts over a time period. Includes only
// test results for submitted code changes. This is defined as:
// (1) where the code under test was already submitted when the test ran
//
//	(e.g. postsubmit builders)
//
// (2) where the code under test was not submitted at the time the test ran,
//
//	but was submitted immediately after (e.g. because the tests ran as part
//	of a tryjob, the presubmit run the tryjob was triggered by succeeded,
//	and submitted code as a result).
//	Currently, when test results lead to CL submission via recycled CQ runs,
//	they are not counted.
//
// Next ID: 18
type Segment_Counts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of unexpected non-skipped test results.
	UnexpectedResults int64 `protobuf:"varint,1,opt,name=unexpected_results,json=unexpectedResults,proto3" json:"unexpected_results,omitempty"`
	// The total number of non-skipped test results.
	TotalResults int64 `protobuf:"varint,2,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"`
	// The number of expected passed test results.
	ExpectedPassedResults int64 `protobuf:"varint,10,opt,name=expected_passed_results,json=expectedPassedResults,proto3" json:"expected_passed_results,omitempty"`
	// The number of expected failed test results.
	ExpectedFailedResults int64 `protobuf:"varint,11,opt,name=expected_failed_results,json=expectedFailedResults,proto3" json:"expected_failed_results,omitempty"`
	// The number of expected crashed test results.
	ExpectedCrashedResults int64 `protobuf:"varint,12,opt,name=expected_crashed_results,json=expectedCrashedResults,proto3" json:"expected_crashed_results,omitempty"`
	// The number of expected aborted test results.
	ExpectedAbortedResults int64 `protobuf:"varint,13,opt,name=expected_aborted_results,json=expectedAbortedResults,proto3" json:"expected_aborted_results,omitempty"`
	// The number of unexpected passed test results.
	UnexpectedPassedResults int64 `protobuf:"varint,14,opt,name=unexpected_passed_results,json=unexpectedPassedResults,proto3" json:"unexpected_passed_results,omitempty"`
	// The number of unexpected failed test results.
	UnexpectedFailedResults int64 `protobuf:"varint,15,opt,name=unexpected_failed_results,json=unexpectedFailedResults,proto3" json:"unexpected_failed_results,omitempty"`
	// The number of unexpected crashed test results.
	UnexpectedCrashedResults int64 `protobuf:"varint,16,opt,name=unexpected_crashed_results,json=unexpectedCrashedResults,proto3" json:"unexpected_crashed_results,omitempty"`
	// The number of unexpected aborted test results.
	UnexpectedAbortedResults int64 `protobuf:"varint,17,opt,name=unexpected_aborted_results,json=unexpectedAbortedResults,proto3" json:"unexpected_aborted_results,omitempty"`
	// The number of test runs which had an unexpected test result but were
	// not retried.
	UnexpectedUnretriedRuns int64 `protobuf:"varint,3,opt,name=unexpected_unretried_runs,json=unexpectedUnretriedRuns,proto3" json:"unexpected_unretried_runs,omitempty"`
	// The number of test run which had an unexpected test result, were
	// retried, and still contained only unexpected test results.
	UnexpectedAfterRetryRuns int64 `protobuf:"varint,4,opt,name=unexpected_after_retry_runs,json=unexpectedAfterRetryRuns,proto3" json:"unexpected_after_retry_runs,omitempty"`
	// The number of test runs which had an unexpected test result, were
	// retried, and eventually recorded an expected test result.
	FlakyRuns int64 `protobuf:"varint,5,opt,name=flaky_runs,json=flakyRuns,proto3" json:"flaky_runs,omitempty"`
	// The total number of test runs.
	TotalRuns int64 `protobuf:"varint,6,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	// The number of source verdicts with only unexpected test results.
	// A source verdict refers to all test results at a commit position.
	UnexpectedVerdicts int64 `protobuf:"varint,7,opt,name=unexpected_verdicts,json=unexpectedVerdicts,proto3" json:"unexpected_verdicts,omitempty"`
	// The number of source verdicts with a mix of expected and unexpected test results.
	// A source verdict refers to all test results at a commit position.
	// As such, is a signal of either in- or cross- build flakiness.
	FlakyVerdicts int64 `protobuf:"varint,8,opt,name=flaky_verdicts,json=flakyVerdicts,proto3" json:"flaky_verdicts,omitempty"`
	// The total number of source verdicts.
	// A source verdict refers to all test results at a commit position.
	// As such, this is also the total number of source positions with
	// test results in the segment.
	TotalVerdicts int64 `protobuf:"varint,9,opt,name=total_verdicts,json=totalVerdicts,proto3" json:"total_verdicts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment_Counts) Reset() {
	*x = Segment_Counts{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment_Counts) ProtoMessage() {}

func (x *Segment_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment_Counts.ProtoReflect.Descriptor instead.
func (*Segment_Counts) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Segment_Counts) GetUnexpectedResults() int64 {
	if x != nil {
		return x.UnexpectedResults
	}
	return 0
}

func (x *Segment_Counts) GetTotalResults() int64 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

func (x *Segment_Counts) GetExpectedPassedResults() int64 {
	if x != nil {
		return x.ExpectedPassedResults
	}
	return 0
}

func (x *Segment_Counts) GetExpectedFailedResults() int64 {
	if x != nil {
		return x.ExpectedFailedResults
	}
	return 0
}

func (x *Segment_Counts) GetExpectedCrashedResults() int64 {
	if x != nil {
		return x.ExpectedCrashedResults
	}
	return 0
}

func (x *Segment_Counts) GetExpectedAbortedResults() int64 {
	if x != nil {
		return x.ExpectedAbortedResults
	}
	return 0
}

func (x *Segment_Counts) GetUnexpectedPassedResults() int64 {
	if x != nil {
		return x.UnexpectedPassedResults
	}
	return 0
}

func (x *Segment_Counts) GetUnexpectedFailedResults() int64 {
	if x != nil {
		return x.UnexpectedFailedResults
	}
	return 0
}

func (x *Segment_Counts) GetUnexpectedCrashedResults() int64 {
	if x != nil {
		return x.UnexpectedCrashedResults
	}
	return 0
}

func (x *Segment_Counts) GetUnexpectedAbortedResults() int64 {
	if x != nil {
		return x.UnexpectedAbortedResults
	}
	return 0
}

func (x *Segment_Counts) GetUnexpectedUnretriedRuns() int64 {
	if x != nil {
		return x.UnexpectedUnretriedRuns
	}
	return 0
}

func (x *Segment_Counts) GetUnexpectedAfterRetryRuns() int64 {
	if x != nil {
		return x.UnexpectedAfterRetryRuns
	}
	return 0
}

func (x *Segment_Counts) GetFlakyRuns() int64 {
	if x != nil {
		return x.FlakyRuns
	}
	return 0
}

func (x *Segment_Counts) GetTotalRuns() int64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *Segment_Counts) GetUnexpectedVerdicts() int64 {
	if x != nil {
		return x.UnexpectedVerdicts
	}
	return 0
}

func (x *Segment_Counts) GetFlakyVerdicts() int64 {
	if x != nil {
		return x.FlakyVerdicts
	}
	return 0
}

func (x *Segment_Counts) GetTotalVerdicts() int64 {
	if x != nil {
		return x.TotalVerdicts
	}
	return 0
}

var File_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDesc = "" +
	"\n" +
	"Dgo.chromium.org/luci/analysis/proto/bq/test_variant_branch_row.proto\x12\x10luci.analysis.bq\x1a\x1fgoogle/protobuf/timestamp.proto\x1a3go.chromium.org/luci/analysis/proto/bq/common.proto\x1a4go.chromium.org/luci/analysis/proto/v1/sources.proto\x1a/go.chromium.org/luci/common/bq/pb/options.proto\"\xdc\x03\n" +
	"\x14TestVariantBranchRow\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12N\n" +
	"\x12test_id_structured\x18\n" +
	" \x01(\v2 .luci.analysis.bq.TestIdentifierR\x10testIdStructured\x12\x17\n" +
	"\atest_id\x18\x02 \x01(\tR\x06testId\x12$\n" +
	"\avariant\x18\x05 \x01(\tB\n" +
	"\xe2\xbc$\x06\n" +
	"\x04JSONR\avariant\x12!\n" +
	"\fvariant_hash\x18\x03 \x01(\tR\vvariantHash\x12\x19\n" +
	"\bref_hash\x18\x04 \x01(\tR\arefHash\x12-\n" +
	"\x03ref\x18\x06 \x01(\v2\x1b.luci.analysis.v1.SourceRefR\x03ref\x125\n" +
	"\bsegments\x18\a \x03(\v2\x19.luci.analysis.bq.SegmentR\bsegments\x12A\n" +
	"\x1dhas_recent_unexpected_results\x18\b \x01(\x03R\x1ahasRecentUnexpectedResults\x124\n" +
	"\aversion\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\aversion\"\xae\n" +
	"\n" +
	"\aSegment\x122\n" +
	"\x15has_start_changepoint\x18\x01 \x01(\bR\x13hasStartChangepoint\x12%\n" +
	"\x0estart_position\x18\x02 \x01(\x03R\rstartPosition\x12D\n" +
	"\x1fstart_position_lower_bound_99th\x18\x03 \x01(\x03R\x1bstartPositionLowerBound99th\x12D\n" +
	"\x1fstart_position_upper_bound_99th\x18\x04 \x01(\x03R\x1bstartPositionUpperBound99th\x129\n" +
	"\n" +
	"start_hour\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tstartHour\x12!\n" +
	"\fend_position\x18\x06 \x01(\x03R\vendPosition\x125\n" +
	"\bend_hour\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\aendHour\x128\n" +
	"\x06counts\x18\b \x01(\v2 .luci.analysis.bq.Segment.CountsR\x06counts\x1a\xec\x06\n" +
	"\x06Counts\x12-\n" +
	"\x12unexpected_results\x18\x01 \x01(\x03R\x11unexpectedResults\x12#\n" +
	"\rtotal_results\x18\x02 \x01(\x03R\ftotalResults\x126\n" +
	"\x17expected_passed_results\x18\n" +
	" \x01(\x03R\x15expectedPassedResults\x126\n" +
	"\x17expected_failed_results\x18\v \x01(\x03R\x15expectedFailedResults\x128\n" +
	"\x18expected_crashed_results\x18\f \x01(\x03R\x16expectedCrashedResults\x128\n" +
	"\x18expected_aborted_results\x18\r \x01(\x03R\x16expectedAbortedResults\x12:\n" +
	"\x19unexpected_passed_results\x18\x0e \x01(\x03R\x17unexpectedPassedResults\x12:\n" +
	"\x19unexpected_failed_results\x18\x0f \x01(\x03R\x17unexpectedFailedResults\x12<\n" +
	"\x1aunexpected_crashed_results\x18\x10 \x01(\x03R\x18unexpectedCrashedResults\x12<\n" +
	"\x1aunexpected_aborted_results\x18\x11 \x01(\x03R\x18unexpectedAbortedResults\x12:\n" +
	"\x19unexpected_unretried_runs\x18\x03 \x01(\x03R\x17unexpectedUnretriedRuns\x12=\n" +
	"\x1bunexpected_after_retry_runs\x18\x04 \x01(\x03R\x18unexpectedAfterRetryRuns\x12\x1d\n" +
	"\n" +
	"flaky_runs\x18\x05 \x01(\x03R\tflakyRuns\x12\x1d\n" +
	"\n" +
	"total_runs\x18\x06 \x01(\x03R\ttotalRuns\x12/\n" +
	"\x13unexpected_verdicts\x18\a \x01(\x03R\x12unexpectedVerdicts\x12%\n" +
	"\x0eflaky_verdicts\x18\b \x01(\x03R\rflakyVerdicts\x12%\n" +
	"\x0etotal_verdicts\x18\t \x01(\x03R\rtotalVerdictsB-Z+go.chromium.org/luci/analysis/proto/bq;bqpbb\x06proto3"

var (
	file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_goTypes = []any{
	(*TestVariantBranchRow)(nil),  // 0: luci.analysis.bq.TestVariantBranchRow
	(*Segment)(nil),               // 1: luci.analysis.bq.Segment
	(*Segment_Counts)(nil),        // 2: luci.analysis.bq.Segment.Counts
	(*TestIdentifier)(nil),        // 3: luci.analysis.bq.TestIdentifier
	(*v1.SourceRef)(nil),          // 4: luci.analysis.v1.SourceRef
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_depIdxs = []int32{
	3, // 0: luci.analysis.bq.TestVariantBranchRow.test_id_structured:type_name -> luci.analysis.bq.TestIdentifier
	4, // 1: luci.analysis.bq.TestVariantBranchRow.ref:type_name -> luci.analysis.v1.SourceRef
	1, // 2: luci.analysis.bq.TestVariantBranchRow.segments:type_name -> luci.analysis.bq.Segment
	5, // 3: luci.analysis.bq.TestVariantBranchRow.version:type_name -> google.protobuf.Timestamp
	5, // 4: luci.analysis.bq.Segment.start_hour:type_name -> google.protobuf.Timestamp
	5, // 5: luci.analysis.bq.Segment.end_hour:type_name -> google.protobuf.Timestamp
	2, // 6: luci.analysis.bq.Segment.counts:type_name -> luci.analysis.bq.Segment.Counts
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_init() }
func file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto != nil {
		return
	}
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_test_variant_branch_row_proto_depIdxs = nil
}
