// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: go.chromium.org/luci/analysis/proto/bq/common.proto

package bqpb

import (
	_ "go.chromium.org/luci/common/bq/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TestIdentifier represents the identity of a test in structured form.
// It includes information about the configuration the test was run in (e.g.
// build configuration, CPU architecture, OS).
//
// The structured test identifier represented in this proto corresponds to
// the flat test identifier with the following form:
// :{module_name}!{module_scheme}:{coarse_name}:{fine_name}#{case_name}
//
// and variant matching module_variant.
//
// Where {x} represents inserting the value of x with the characters
// ':', '!', '#', and '\' escaped using a '\'.
//
// Special treatment exists for legacy test identifiers, for which
// module_name = "legacy", module_scheme = "legacy", coarse_name = "",
// fine_name = "" and case_name = <legacy_id>. For these, the corresponding
// flat test ID is simply:
// {case_name}
//
// (no escaping applies to this form, although method starting with ':'
// is illegal for legacy test identifiers).
//
// See go/resultdb-test-hierarchy-design for more details.
//
// Limits: the encoded flat test ID (as per rules above) must be less than
// 512 bytes in UTF-8.
type TestIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the module being tested. A module is a set of tests which run
	// with the same test harness, and typically corresponds with a unit of
	// build, such as a bazel test target.
	//
	// For example, "CtsSdkExtensionsTestCases" or "chrome/test:blink_webkit_tests".
	//
	// Note: Modules are identified by the combination of module_name and scheme, not
	// only module_name. See `scheme` field below for more.
	//
	// Constraints:
	// - Limited to 300 bytes of printable UTF-8. See also limits on `TestIdentifier` as a whole.
	// - All unicode must be in Normalization Form C.
	// - Use of spaces is allowed, but discouraged.
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// The scheme of the module, for example, "junit" or "gtest".
	//
	// Must match one of the schemes in the ResultDB service configuration (see
	// go/resultdb-schemes). Additional values can be configured as needed.
	//
	// Note: modules are identified by the combination of module_name, module_variant and
	// module_scheme.
	// Nonetheless, when presenting data on a frontend, it is acceptable to not show the scheme
	// as it exists primarily to allow customisation of the labels shown next to the coarse_name,
	// fine_name and case_name fields.
	// When uploading data it is STRONGLY DISCOURAGED to use different schemes with the same
	// module name as it may lead to ambiguous UI for users.
	//
	// Limited to ^[a-z][a-z0-9]{0,19}$.
	ModuleScheme string `protobuf:"bytes,2,opt,name=module_scheme,json=moduleScheme,proto3" json:"module_scheme,omitempty"`
	// Description of one specific way of running the tests in a module,
	// e.g. specific ABI (x64/x86/...), build flags and/or operating system.
	//
	// This will be encoded as a JSON object like
	// {"builder":"linux-rel","os":"Ubuntu-18.04",...}
	// to take advantage of BigQuery's JSON support, so that
	// the query will only be billed for the variant
	// keys it reads.
	//
	// N.B. Presently this is always the same as test_result.variant but semantics could
	// diverge in future if variants are introduced at other levels.
	ModuleVariant string `protobuf:"bytes,3,opt,name=module_variant,json=moduleVariant,proto3" json:"module_variant,omitempty"`
	// Hash of the module variant.
	// hex(sha256(sorted(‚Äù.join('%s:%s\n' for k, v in module_variant.items()))))[:8].
	ModuleVariantHash string `protobuf:"bytes,4,opt,name=module_variant_hash,json=moduleVariantHash,proto3" json:"module_variant_hash,omitempty"`
	// Intermediate hierarchy - coarse name.
	//
	// For example "com.android.os.ext".
	//
	// A scheme dependent value used to organise the test into a coarse group of related tests,
	// such as a package or directory.
	// If the scheme does not define a coarse grouping, this must be blank.
	// If only one intermediate hierarchy level is used for a scheme, it is always the
	// fine hierarchy level.
	//
	// Constraints:
	// - Must match constraints set by the module's scheme.
	// - Limited to 300 bytes of printable UTF-8 (see also limits on `TestIdentifier` as a whole).
	// - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
	// - All unicode must be in Normalization Form C.
	// - Use of spaces is allowed, but discouraged.
	CoarseName string `protobuf:"bytes,5,opt,name=coarse_name,json=coarseName,proto3" json:"coarse_name,omitempty"`
	// Interemdiate hierarchy - fine name.
	//
	// For example "SdkExtensionsTest" or "WebDialogBrowserTest".
	//
	// A finer grouping within the above coarse grouping (if any), e.g. class or file.
	// If the scheme does not define a fine grouping, this must be blank.
	//
	// Constraints:
	// - Must match constraints set by the module's scheme.
	// - Limited to 300 bytes of printable UTF-8 (see also limits on `TestIdentifier` as a whole).
	// - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C).
	// - All unicode must be in Normalization Form C.
	// - Use of spaces is allowed, but discouraged.
	FineName string `protobuf:"bytes,6,opt,name=fine_name,json=fineName,proto3" json:"fine_name,omitempty"`
	// The identifier of test case within the above fine grouping.
	//
	// For example "testBadArgument" or "CloseParentWindow".
	//
	// This is the finest granularity component of the test identifier, and typically
	// refers to sub-file granularity unless no such granularity exists.
	//
	// The special value "*fixture" may be used for reporting the result of
	// setup and teardown common to tests in the same fine_name.
	//
	// Constraints:
	//   - Must not start with one of the characters in [ !"#$%'()*+,] (i.e. U+0020 to U+002C),
	//     unless it is to write the value "*fixture". Exception is made for tests in the
	//     module 'legacy' for which a slightly broader set of starting characters is allowed
	//     for backwards compatibility but use of this quirk is discouraged.
	//   - Limited to 512 bytes of printable UTF-8, although in practice this can
	//     never be reached except in case of legacy test IDs as the total encoded test ID is
	//     also limited to 512 bytes (see limits on `TestIdentifier` as a whole).
	//   - All unicode must be in Normalization Form C.
	//   - Use of spaces is allowed, but discouraged.
	CaseName      string `protobuf:"bytes,7,opt,name=case_name,json=caseName,proto3" json:"case_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestIdentifier) Reset() {
	*x = TestIdentifier{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIdentifier) ProtoMessage() {}

func (x *TestIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIdentifier.ProtoReflect.Descriptor instead.
func (*TestIdentifier) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescGZIP(), []int{0}
}

func (x *TestIdentifier) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *TestIdentifier) GetModuleScheme() string {
	if x != nil {
		return x.ModuleScheme
	}
	return ""
}

func (x *TestIdentifier) GetModuleVariant() string {
	if x != nil {
		return x.ModuleVariant
	}
	return ""
}

func (x *TestIdentifier) GetModuleVariantHash() string {
	if x != nil {
		return x.ModuleVariantHash
	}
	return ""
}

func (x *TestIdentifier) GetCoarseName() string {
	if x != nil {
		return x.CoarseName
	}
	return ""
}

func (x *TestIdentifier) GetFineName() string {
	if x != nil {
		return x.FineName
	}
	return ""
}

func (x *TestIdentifier) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

// TestIdentifierBase represent a structured test id message without variant information.
// See TestIdentifier for the full message structured test id message.
type TestIdentifierBase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Equivalent of luci.resultdb.v1.TestIdentifier.module_name.
	ModuleName string `protobuf:"bytes,1,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	// Equivalent of luci.resultdb.v1.TestIdentifier.module_scheme.
	ModuleScheme string `protobuf:"bytes,2,opt,name=module_scheme,json=moduleScheme,proto3" json:"module_scheme,omitempty"`
	// Equivalent of luci.resultdb.v1.TestIdentifier.coarse_name.
	CoarseName string `protobuf:"bytes,5,opt,name=coarse_name,json=coarseName,proto3" json:"coarse_name,omitempty"`
	// Equivalent of luci.resultdb.v1.TestIdentifier.fine_name.
	FineName string `protobuf:"bytes,6,opt,name=fine_name,json=fineName,proto3" json:"fine_name,omitempty"`
	// Equivalent of luci.resultdb.v1.TestIdentifier.case_name.
	CaseName      string `protobuf:"bytes,7,opt,name=case_name,json=caseName,proto3" json:"case_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestIdentifierBase) Reset() {
	*x = TestIdentifierBase{}
	mi := &file_go_chromium_org_luci_analysis_proto_bq_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestIdentifierBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestIdentifierBase) ProtoMessage() {}

func (x *TestIdentifierBase) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_analysis_proto_bq_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestIdentifierBase.ProtoReflect.Descriptor instead.
func (*TestIdentifierBase) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescGZIP(), []int{1}
}

func (x *TestIdentifierBase) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *TestIdentifierBase) GetModuleScheme() string {
	if x != nil {
		return x.ModuleScheme
	}
	return ""
}

func (x *TestIdentifierBase) GetCoarseName() string {
	if x != nil {
		return x.CoarseName
	}
	return ""
}

func (x *TestIdentifierBase) GetFineName() string {
	if x != nil {
		return x.FineName
	}
	return ""
}

func (x *TestIdentifierBase) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

var File_go_chromium_org_luci_analysis_proto_bq_common_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDesc = "" +
	"\n" +
	"3go.chromium.org/luci/analysis/proto/bq/common.proto\x12\x10luci.analysis.bq\x1a/go.chromium.org/luci/common/bq/pb/options.proto\"\x94\x02\n" +
	"\x0eTestIdentifier\x12\x1f\n" +
	"\vmodule_name\x18\x01 \x01(\tR\n" +
	"moduleName\x12#\n" +
	"\rmodule_scheme\x18\x02 \x01(\tR\fmoduleScheme\x121\n" +
	"\x0emodule_variant\x18\x03 \x01(\tB\n" +
	"\xe2\xbc$\x06\n" +
	"\x04JSONR\rmoduleVariant\x12.\n" +
	"\x13module_variant_hash\x18\x04 \x01(\tR\x11moduleVariantHash\x12\x1f\n" +
	"\vcoarse_name\x18\x05 \x01(\tR\n" +
	"coarseName\x12\x1b\n" +
	"\tfine_name\x18\x06 \x01(\tR\bfineName\x12\x1b\n" +
	"\tcase_name\x18\a \x01(\tR\bcaseName\"\xb5\x01\n" +
	"\x12TestIdentifierBase\x12\x1f\n" +
	"\vmodule_name\x18\x01 \x01(\tR\n" +
	"moduleName\x12#\n" +
	"\rmodule_scheme\x18\x02 \x01(\tR\fmoduleScheme\x12\x1f\n" +
	"\vcoarse_name\x18\x05 \x01(\tR\n" +
	"coarseName\x12\x1b\n" +
	"\tfine_name\x18\x06 \x01(\tR\bfineName\x12\x1b\n" +
	"\tcase_name\x18\a \x01(\tR\bcaseNameB-Z+go.chromium.org/luci/analysis/proto/bq;bqpbb\x06proto3"

var (
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescData []byte
)

func file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDescData
}

var file_go_chromium_org_luci_analysis_proto_bq_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_go_chromium_org_luci_analysis_proto_bq_common_proto_goTypes = []any{
	(*TestIdentifier)(nil),     // 0: luci.analysis.bq.TestIdentifier
	(*TestIdentifierBase)(nil), // 1: luci.analysis.bq.TestIdentifierBase
}
var file_go_chromium_org_luci_analysis_proto_bq_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_analysis_proto_bq_common_proto_init() }
func file_go_chromium_org_luci_analysis_proto_bq_common_proto_init() {
	if File_go_chromium_org_luci_analysis_proto_bq_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDesc), len(file_go_chromium_org_luci_analysis_proto_bq_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_analysis_proto_bq_common_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_analysis_proto_bq_common_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_analysis_proto_bq_common_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_analysis_proto_bq_common_proto = out.File
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_goTypes = nil
	file_go_chromium_org_luci_analysis_proto_bq_common_proto_depIdxs = nil
}
