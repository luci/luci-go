// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/source_index/proto/v1/source_index.proto

package sourceindexpb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryCommitHashRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The gitiles host. Must be a subdomain of `.googlesource.com`
	// (e.g. chromium.googlesource.com).
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Required. The Git project to query the commit in (e.g. chromium/src).
	Repository string `protobuf:"bytes,2,opt,name=repository,proto3" json:"repository,omitempty"`
	// Required. The name of position defined in value of git-footer git-svn-id
	// or Cr-Commit-Position (e.g. refs/heads/master,
	// svn://svn.chromium.org/chrome/trunk/src)
	PositionRef string `protobuf:"bytes,3,opt,name=position_ref,json=positionRef,proto3" json:"position_ref,omitempty"`
	// Required. The sequential identifier of the commit in the given branch
	// (position_ref).
	PositionNumber int64 `protobuf:"varint,4,opt,name=position_number,json=positionNumber,proto3" json:"position_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryCommitHashRequest) Reset() {
	*x = QueryCommitHashRequest{}
	mi := &file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommitHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommitHashRequest) ProtoMessage() {}

func (x *QueryCommitHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommitHashRequest.ProtoReflect.Descriptor instead.
func (*QueryCommitHashRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescGZIP(), []int{0}
}

func (x *QueryCommitHashRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *QueryCommitHashRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *QueryCommitHashRequest) GetPositionRef() string {
	if x != nil {
		return x.PositionRef
	}
	return ""
}

func (x *QueryCommitHashRequest) GetPositionNumber() int64 {
	if x != nil {
		return x.PositionNumber
	}
	return 0
}

type QueryCommitHashResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full git commit hash of the matched commit.
	Hash          string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCommitHashResponse) Reset() {
	*x = QueryCommitHashResponse{}
	mi := &file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCommitHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCommitHashResponse) ProtoMessage() {}

func (x *QueryCommitHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCommitHashResponse.ProtoReflect.Descriptor instead.
func (*QueryCommitHashResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescGZIP(), []int{1}
}

func (x *QueryCommitHashResponse) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

var File_go_chromium_org_luci_source_index_proto_v1_source_index_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDesc = string([]byte{
	0x0a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x14, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x22, 0x98, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x2d, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x32,
	0x7d, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x6e,
	0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescData []byte
)

func file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDesc), len(file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDescData
}

var file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_goTypes = []any{
	(*QueryCommitHashRequest)(nil),  // 0: luci.source_index.v1.QueryCommitHashRequest
	(*QueryCommitHashResponse)(nil), // 1: luci.source_index.v1.QueryCommitHashResponse
}
var file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_depIdxs = []int32{
	0, // 0: luci.source_index.v1.SourceIndex.QueryCommitHash:input_type -> luci.source_index.v1.QueryCommitHashRequest
	1, // 1: luci.source_index.v1.SourceIndex.QueryCommitHash:output_type -> luci.source_index.v1.QueryCommitHashResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_init() }
func file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_init() {
	if File_go_chromium_org_luci_source_index_proto_v1_source_index_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDesc), len(file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_source_index_proto_v1_source_index_proto = out.File
	file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_goTypes = nil
	file_go_chromium_org_luci_source_index_proto_v1_source_index_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SourceIndexClient is the client API for SourceIndex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SourceIndexClient interface {
	// QueryCommitHash returns commit that matches desired position of commit,
	// based on QueryCommitHashRequest parameters. Commit position is based on
	// git-footer git-svn-id or Cr-Commit-Position.
	//
	// Returns `NOT_FOUND` if the commit is not indexed by source-index.
	// When there are multiple matches (i.e. the same commit position occurs on
	// different commits somehow), the first match (determined arbitrarily) will
	// be returned.
	QueryCommitHash(ctx context.Context, in *QueryCommitHashRequest, opts ...grpc.CallOption) (*QueryCommitHashResponse, error)
}
type sourceIndexPRPCClient struct {
	client *prpc.Client
}

func NewSourceIndexPRPCClient(client *prpc.Client) SourceIndexClient {
	return &sourceIndexPRPCClient{client}
}

func (c *sourceIndexPRPCClient) QueryCommitHash(ctx context.Context, in *QueryCommitHashRequest, opts ...grpc.CallOption) (*QueryCommitHashResponse, error) {
	out := new(QueryCommitHashResponse)
	err := c.client.Call(ctx, "luci.source_index.v1.SourceIndex", "QueryCommitHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type sourceIndexClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceIndexClient(cc grpc.ClientConnInterface) SourceIndexClient {
	return &sourceIndexClient{cc}
}

func (c *sourceIndexClient) QueryCommitHash(ctx context.Context, in *QueryCommitHashRequest, opts ...grpc.CallOption) (*QueryCommitHashResponse, error) {
	out := new(QueryCommitHashResponse)
	err := c.cc.Invoke(ctx, "/luci.source_index.v1.SourceIndex/QueryCommitHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceIndexServer is the server API for SourceIndex service.
type SourceIndexServer interface {
	// QueryCommitHash returns commit that matches desired position of commit,
	// based on QueryCommitHashRequest parameters. Commit position is based on
	// git-footer git-svn-id or Cr-Commit-Position.
	//
	// Returns `NOT_FOUND` if the commit is not indexed by source-index.
	// When there are multiple matches (i.e. the same commit position occurs on
	// different commits somehow), the first match (determined arbitrarily) will
	// be returned.
	QueryCommitHash(context.Context, *QueryCommitHashRequest) (*QueryCommitHashResponse, error)
}

// UnimplementedSourceIndexServer can be embedded to have forward compatible implementations.
type UnimplementedSourceIndexServer struct {
}

func (*UnimplementedSourceIndexServer) QueryCommitHash(context.Context, *QueryCommitHashRequest) (*QueryCommitHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCommitHash not implemented")
}

func RegisterSourceIndexServer(s prpc.Registrar, srv SourceIndexServer) {
	s.RegisterService(&_SourceIndex_serviceDesc, srv)
}

func _SourceIndex_QueryCommitHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceIndexServer).QueryCommitHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.source_index.v1.SourceIndex/QueryCommitHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceIndexServer).QueryCommitHash(ctx, req.(*QueryCommitHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SourceIndex_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.source_index.v1.SourceIndex",
	HandlerType: (*SourceIndexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryCommitHash",
			Handler:    _SourceIndex_QueryCommitHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/source_index/proto/v1/source_index.proto",
}
