// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lucicfg;

import "go.chromium.org/luci/common/proto/options.proto";

option go_package = "go.chromium.org/luci/lucicfg/lockfilepb";

// Lockfile captures the result of loading PACKAGE.star and traversing its
// dependencies.
//
// It is serialized as JSONPB and stored in PACKAGE.lock file. This happens as
// part of "lucicfg gen" execution.
//
// Lockfiles are used to quickly configure the interpreter for executing
// Starlark code (with dependencies) without reparsing PACKAGE.star and doing
// dependency traversal and version resolution again.
message Lockfile {
  // Version of lucicfg used to generate this lockfile.
  string lucicfg = 1 [(luci.lucicfg_ignore) = true];

  // Packages are the main package along with all its transitive dependencies.
  //
  // The main package comes first. All other packages are sorted alphabetically
  // by their name.
  message Package {
    // Name is the package name as "@name" string.
    string name = 1;

    // Source is where to look for this package source code.
    //
    // Unset for the main package (since the location of the lockfile defines
    // where its sources are).
    message Source {
      // Repo specifies a git repository and its ref with the package code.
      //
      // It has the form "https://<host>.googlesource.com/<repo>/+/<ref>" to
      // make it friendly to code-search it and to copy-paste it.
      //
      // If empty, then the package is in the same repository as the lockfile.
      string repo = 1;

      // Revision is the git revision containing the package source.
      //
      // It is some git commit SHA (not a ref or a tag).
      //
      // Empty for packages that are in the same repository as the lockfile.
      string revision = 2;

      // Path is where to find the package source within the repository.
      //
      // If `repo` is empty, this is a slash-separated path relative to the
      // lockfile path, always starting with "./" or "../". Otherwise it is a
      // slash-separated path relative to the corresponding repository root (and
      // it never starts with "./" or "../", though it can be "." if the package
      // is at the root of the repository).
      //
      // When loading relative paths, the interpreter should verify they do not
      // go outside of repository directory that contains the lockfile.
      string path = 3;
    }
    Source source = 2;

    // Deps is a list of **direct** dependencies of this package.
    //
    // Each entry is a "@name" string, referencing one of the packages mentioned
    // in the `packages` section of the lockfile. Cycles are possible. Entries
    // in the list are sorted alphabetically.
    repeated string deps = 3;

    // Minimal required lucicfg version, matching pkg.declare(lucicfg=...) arg.
    string lucicfg = 4;

    // Resources is a list of resource patterns declared via pkg.resources(...).
    //
    // Sorted alphabetically.
    repeated string resources = 5;

    // Entrypoints is a list of entry points declared via pkg.entrypoint(...).
    //
    // Present only for the main package. Sorted alphabetically.
    repeated string entrypoints = 6;
  }
  repeated Package packages = 2;
}
