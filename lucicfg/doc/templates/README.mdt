# LUCI configuration definition language

{{/* Renders documentation for all functions in the given struct. */}}
{{define "gen-funcs-doc"}}
{{.Doc.Description | LinkifySymbols }}

{{range $sym := .Symbols "func"}}
{{- if not ($sym.HasDocTag "hidden")}}
### {{.FullName}} {#{{$sym.Anchor}}}

```python
{{$sym.InvocationSnippet}}
```

{{if $sym.HasDocTag "advanced"}}
*** note
**Advanced function.** It is not used for common use cases.
***
{{end}}
{{- if $sym.HasDocTag "experimental"}}
*** note
**Experimental.** No backward compatibility guarantees.
***
{{end}}

{{$sym.Doc.Description | LinkifySymbols}}
{{if $sym.Doc.Args}}
#### Arguments {#{{$sym.Anchor "args"}}}
{{range $sym.Doc.Args}}
* **{{.Name | EscapeMD}}**: {{.Desc | LinkifySymbols}}
{{- end}}
{{- end}}

{{if $sym.Doc.Returns}}
#### Returns  {#{{$sym.Anchor "returns"}}}

{{$sym.Doc.Returns | LinkifySymbols}}
{{end}}

{{end}}
{{- end}}
{{end}}

{{/*
  Load all symbols we are going to document in advance to let LinkifySymbols
  know that they can be referred to through anchors.
*/}}
{{ $lucicfg := Symbol "@stdlib//builtins.star" "lucicfg" }}
{{ $io := Symbol "@stdlib//builtins.star" "io" }}
{{ $time := Symbol "@stdlib//builtins.star" "time" }}
{{ $luci := Symbol "@stdlib//builtins.star" "luci" }}
{{ $acl := Symbol "@stdlib//builtins.star" "acl" }}
{{ $resultdb := Symbol "@stdlib//builtins.star" "resultdb" }}
{{ $swarming := Symbol "@stdlib//builtins.star" "swarming" }}
{{ $scheduler := Symbol "@stdlib//builtins.star" "scheduler" }}
{{ $cq := Symbol "@stdlib//builtins.star" "cq" }}
{{ $native := Symbol "@stdlib//native_doc.star" "" }}
{{ $json := Symbol "@stdlib//json_doc.star" "json" }}
{{ $proto := Symbol "@stdlib//proto_doc.star" "proto" }}
{{ $buildbucket := Symbol "@stdlib//builtins.star" "buildbucket" }}

{{ $pkg := Symbol "@pkg//builtins.star" "pkg" }}
{{ $pkg_source := Symbol "@pkg//builtins.star" "pkg.source" }}
{{ $pkg_options := Symbol "@pkg//builtins.star" "pkg.options" }}

{{/*
  Some symbols referenced from the non-generated portion of the doc below.
*/}}
{{ $acl_entry_ref := LinkifySymbols "acl.entry(...)" }}
{{ $bucket_ref := LinkifySymbols "luci.bucket(...)" }}
{{ $builder_ref := LinkifySymbols "luci.builder(...)" }}
{{ $config_ref := LinkifySymbols "lucicfg.config(...)" }}
{{ $console_view_entry_ref := LinkifySymbols "luci.console_view_entry(...)" }}
{{ $console_view_ref := LinkifySymbols "luci.console_view(...)" }}
{{ $cq_group_ref := LinkifySymbols "luci.cq_group(...)" }}
{{ $exec_ref := LinkifySymbols "exec(...)" }}
{{ $generator_ref := LinkifySymbols "lucicfg.generator(...)" }}
{{ $gitiles_poller_ref := LinkifySymbols "luci.gitiles_poller(...)" }}
{{ $load_ref := LinkifySymbols "load__(...)" }}
{{ $project_ref := LinkifySymbols "luci.project(...)" }}
{{ $current_module_ref := LinkifySymbols "lucicfg.current_module(...)" }}
{{ $read_file_ref := LinkifySymbols "io.read_file(...)" }}
{{ $pkg_declare_ref := LinkifySymbols "pkg.declare(...)" }}
{{ $pkg_depend_ref := LinkifySymbols "pkg.depend(...)" }}
{{ $pkg_lint_checks_ref := LinkifySymbols "pkg.options.lint_checks(...)" }}

[TOC]

## Overview

`lucicfg` is a tool for generating low-level LUCI configuration files based on a
high-level configuration given as a [Starlark] script that uses APIs exposed by
`lucicfg`. In other words, it takes a `*.star` file (or files) as input and
spits out a bunch of `*.cfg` files (such us `cr-buildbucket.cfg` and
`luci-scheduler.cfg`) as outputs. A single entity (such as a {{$builder_ref}}
definition) in the input is translated into multiple entities (such as
Buildbucket's `builder{...}` and Scheduler's `job{...})` in the output. This ensures
internal consistency of all low-level configs.

Using Starlark allows further reducing duplication and enforcing invariants in
the configs. A common pattern is to use Starlark functions that wrap one or
more basic rules (e.g. {{$builder_ref}} and {{$console_view_entry_ref}}) to
define more "concrete" entities (for example "a CI builder" or "a Try builder").
The rest of the config script then uses such functions to build up the actual
configuration.

### Getting lucicfg

`lucicfg` is distributed as a single self-contained binary as part of
[depot_tools], so if you use them, you already have it. Additionally it is
available in `PATH` on all LUCI builders. The rest of this doc also assumes that
`lucicfg` is in `PATH`.

If you don't use [depot_tools], `lucicfg` can be installed through CIPD. The
package is [infra/tools/luci/lucicfg/${platform}], and the canonical stable
version can be looked up in the depot_tools [CIPD manifest].

Finally, you can always try to build `lucicfg` from the source code. However,
the only officially supported distribution mechanism is CIPD packages.

### Getting started with a simple config

*** note
More examples of using `lucicfg` can be found [here](../examples).
***

Create `main.star` file with the following content:

```python
#!/usr/bin/env lucicfg

luci.project(
    name = "hello-world",
    buildbucket = "cr-buildbucket.appspot.com",
    swarming = "chromium-swarm.appspot.com",
)

luci.bucket(name = "my-bucket")

luci.builder(
    name = "my-builder",
    bucket = "my-bucket",
    executable = luci.recipe(
        name = "my-recipe",
        cipd_package = "recipe/bundle/package",
    ),
)
```

Now run `lucicfg generate main.star`. It will create a new directory
`generated` side-by-side with `main.star` file. This directory contains the
`project.cfg` and `cr-buildbucket.cfg` files, generated based on the script
above.

Equivalently, make the script executable (`chmod a+x main.star`) and then just
execute it (`./main.star`). This is the exact same thing as running `generate`
subcommand.

Now make some change in `main.star` (for example, rename the builder), but do
not regenerate the configs yet. Instead run `lucicfg validate main.star`. It
will produce an error, telling you that files on disk (in `generated/*`) are
stale. Regenerate them (`./main.star`), and run the validation again.

If you have never done this before or haven't used any other LUCI tools, you are
now asked to authenticate by running `lucicfg auth-login`. This is because
`lucicfg validate` in addition to checking configs locally also sends them for a
more thorough validation to the LUCI Config service, and this requires you to be
authenticated. Do `lucicfg auth-login` and re-run `lucicfg validate main.star`.
It should succeed now. If it still fails with permissions issues, you are
probably not in `config-validation` group (this should be rare, please contact
luci-eng@google.com if this is happening).

`lucicfg validate` is meant to be used from presubmit tests. If you use
depot_tools' `PRESUBMIT.py`, there's a [canned check] that wraps
`lucicfg validate`.

This is it, your first generated config! It is not very functional yet (e.g.
builders without Swarming dimensions are useless), but a good place to start.
Keep iterating on it, modifying the script, regenerating configs, and examining
the output in `generated` directory. Once you are satisfied with the result,
commit **both** Starlark scripts and generated configs into the repository, and
then configure LUCI Config service to pull configuration from `generated`
directory (how to do it is outside the scope of this doc).

[Starlark]: https://github.com/google/starlark-go
[depot_tools]: https://chromium.googlesource.com/chromium/tools/depot_tools/
[infra/tools/luci/lucicfg/${platform}]: https://chrome-infra-packages.appspot.com/p/infra/tools/luci/lucicfg
[CIPD manifest]: https://chromium.googlesource.com/chromium/tools/depot_tools/+/refs/heads/master/cipd_manifest.txt
[canned check]: https://chromium.googlesource.com/chromium/tools/depot_tools/+/39b0b8e32a4ed0675a38d97799e8a219cc549910/presubmit_canned_checks.py#1437

## Concepts

*** note
Most of information in this section is specific to `lucicfg`, **not** a generic
Starlark interpreter.
***

### Modules and packages {#modules-and-packages}

Each individual Starlark file is called a module. Several modules under the same
root directory form a package. The root of the package is taken to be a
directory that contains `PACKAGE.star` file (see [Package declaration via
PACKAGE.star](#pkg-star)) or, for legacy packages without `PACKAGE.star`,
the directory with the entry point script (usually `main.star`) as passed
to `lucicfg generate`.

Starlark code executed via {{$load_ref}} or {{$exec_ref}} knows the module and
the package it was loaded from (see {{$current_module_ref}}). When a module
wants to reference other files (in {{$load_ref}}, {{$exec_ref}} or even in
{{$read_file_ref}} or similar) it can use the following syntax:

* `//<path-relative-to-package-root>` for referencing files within the same
  package as the calling module, using their absolute paths within the package.
* `<path-relative-to-current-module>` for referencing files within the same
  package as the calling module, using their paths relative to the calling
  module.
* `@<other-package>//<path-relative-to-other-package-root>` for referencing
  files in another package, using their absolute paths within that other
  package. The referenced package must be declared in the current's
  package `PACKAGE.star` via {{$pkg_depend_ref}}.

(The last form also appears in paths in stack traces for Starlark files
imported from external packages).

Modules can either be "library-like" (executed via {{$load_ref}} statement) or
"script-like" (executed via {{$exec_ref}} function). Library-like modules can
load other library-like modules via {{$load_ref}}, but may not call
{{$exec_ref}}. Script-like modules may use both {{$load_ref}} and {{$exec_ref}}.

Dicts of modules loaded via {{$load_ref}} are reused, e.g. if two different
scripts load the exact same module, they'll get the exact same symbols as a
result. The loaded code always executes only once. The interpreter *may* load
modules in parallel in the future, libraries must not rely on their loading
order and must not have side effects.

On the other hand, modules executed via {{$exec_ref}} are guaranteed to be
processed sequentially, and only once. Thus 'exec'-ed scripts essentially form
a tree, traversed exactly once in the depth first order.

### Package declaration via PACKAGE.star {#pkg-star}

Package name, dependencies on other packages and various package-global options
are defined in the `PACKAGE.star` file. The location of this file also indicates
the root directory of the package. Each Starlark file belongs to exactly one
package (based on the closest `PACKAGE.star` file when traversing up the file
tree).

This `PACKAGE.star` file is special. It is not allowed to use {{$load_ref}} or
{{$exec_ref}} statements nor other standard lucicfg functions. Instead it has
access only to a [limited set of lucicfg APIs](#lucicfg-pkg) that are used
specifically to declare packages (plus the Starlark standard library, for things
like sets and structs). That way it can be loaded in a sandbox environment in
isolation from any other Starlark files, which is necessary when traversing a
dependency tree using "shallow" git fetches.

At minimum, `PACKAGE.star` must declare the package name and the minimal version
of the `lucicfg` interpreter the package was tested with. See
{{$pkg_declare_ref}} for more details.

Optionally it may also declare what other packages the current package depends
on. Each such dependency is essentially a pointer to some `PACKAGE.star` in some
googlesource.com repository at some revision.

A simple `PACKAGE.star` may look like this:

```python
"""The package definition file."""

pkg.declare(
    name = "@my-package",
    lucicfg = "1.45.0",
)

pkg.entrypoint("main.star")
pkg.entrypoint("dev.star")

pkg.resources(["data/*"])

pkg.options.lint_checks(["default"])

pkg.depend(
    name = "@shared-library",
    # This would be:
    #    https://some-host.googlesource.com/starlark/libs/+/refs/heads/main/shared-lib
    # at version ed02c601dcaf10305e34cb67618b48b7e69fc401
    source = pkg.source.googlesource(
        host = "some-host",
        repo = "starlark/libs",
        ref = "refs/heads/main",
        path = "shared-lib",
        revision = "ed02c601dcaf10305e34cb67618b48b7e69fc401",
    ),
)
```

The package that contains the entry point script passed to `lucicfg generate` is
called the main package. The only special thing about it is that its name is
stripped from module paths in error stack traces. Otherwise it is no different
from any other package.

### Dependency version resolution {#pkg-deps}

Each package name within a transitive set of dependencies of the main package
should map to some single `(repository, git ref)` pair. This generally means
that if a package is branched (i.e. its ref changes), it should get a new
name (as long as it is used in the same dependency tree as its original
version).

With such organization, when traversing a transitive set of dependencies of the
main package, we can collect a list of git commits each individual package is
imported at (potentially though different paths in the dependency tree). All
these commits will be on the same git ref and we can always pick the most
recent one (per the ref's git history). The package will be imported at this
single concrete revision. This is a variant of the
[Minimal Version Selection](https://research.swtch.com/vgo-mvs) algorithm.

Practically this means that if a package is depending on another package at some
revision, it may end up importing the dependency at the requested or **some
newer** revision (but never an older one). It means the public API of imported
packages should generally be backward compatible. If a significant breaking
change is necessary, the package should be renamed (this would also allow for
two such packages to co-exist in the dependency tree, if really necessary).

Currently `lucicfg generate` does the dependency traversal and resolution each
time it runs, caching the git state in a directory specified by
`LUCICFG_CACHE_DIR` env var, defaulting to the `lucicfg` directory in the OS's
[user cache directory](https://pkg.go.dev/os#UserCacheDir). This git cache is
sufficient to make the version resolution be fast enough. Nevertheless `lucicfg`
maintains the result of the resolution in a special `PACKAGE.lock` JSON file.
This file is generated as a side effect of `lucicfg generate` and validated by
`lucicfg validate` (i.e. it behaves just like any other generated output file).
It must be checked in into the repository with the package code.

`PACKAGE.lock` file is expected to be used in some future workflows that can
execute lucicfg scripts without having access to a git cache directory.

*** note
There's no global registry of lucicfg packages. As long as dependency trees
do not intersect, they can theoretically use the same package name for
completely different packages. But it is not recommended.
***

### Rules, state representation

All entities manipulated by `lucicfg` are represented by nodes in a directed
acyclic graph. One entity (such as a builder) can internally be represented by
multiple nodes. A function that adds nodes and edges to the graph is called
**a rule** (e.g. {{$builder_ref}} is a rule).

Each node has a unique hierarchical key, usually constructed from entity's
properties. For example, a builder name and its bucket name are used to
construct a unique key for this builder (roughly `<bucket>/<builder>`). These
keys are used internally by rules when adding edges to the graph.

To refer to entities from public API, one just usually uses strings (e.g.
a builder name to refer to the builder). Rules' implementation usually have
enough context to construct correct node keys from such strings. Sometimes they
need some help, see [Resolving naming ambiguities](#resolving_ambiguities).
Other times entities have no meaningful global names at all (for example,
{{$console_view_entry_ref}}). For such cases, one uses a return value of the
corresponding rule: rules return opaque pointer-like objects that can be passed
to other rules as an input in place of a string identifiers. This allows to
"chain" definitions, e.g.

```python
luci.console_view(
    ...
    entries = [
        luci.console_view_entry(...),
        luci.console_view_entry(...),
        ...
    ],
)
```

It is strongly preferred to either use string names to refer to entities **or**
define them inline where they are needed. Please **avoid** storing return values
of rules in variables to refer to them later. Using string names is as powerful
(`lucicfg` verifies referential integrity), and it offers additional advantages
(like referring to entities across file boundaries).

To aid in using inline definitions where makes sense, many rules allow entities
to be defines multiple times as long as all definitions are identical (this is
internally referred to as "idempotent nodes"). It allows following usage style:

```python
def my_recipe(name):
    return luci.recipe(
        name = name,
        cipd_package = 'my/recipe/bundle',
    )

luci.builder(
    name = 'builder 1',
    executable = my_recipe('some-recipe'),
    ...
)

luci.builder(
    name = 'builder 2',
    executable = my_recipe('some-recipe'),
    ...
)
```

Here `some-recipe` is formally defined twice, but both definitions are
identical, so it doesn't cause ambiguities. See the documentation of individual
rules to see whether they allow such redefinitions.

### Execution stages

There are 3 stages of `lucicfg gen` execution:

  1. **Building the state** by executing the given entry `main.star` code and
     all modules it exec's. This builds a graph in memory (via calls to rules),
     and registers a bunch of generator callbacks (via {{$generator_ref}}) that
     will traverse this graph in the stage 3.
       - Validation of the format of parameters happens during this stage (e.g.
         checking types, ranges, regexps, etc). This is done by rules'
         implementations. A frozen copy of validated parameters is put into
         the added graph nodes to be used from the stage 3.
       - Rules can mutate the graph, but **may not** examine or traverse it.
       - Nodes and edges can be added out of order, e.g. an edge may be added
         before the nodes it connects. Together with the previous constraint, it
         makes most lucicfg statements position independent.
       - The stage ends after reaching the end of the entry `main.star` code. At
         this point we have a (potentially incomplete) graph and a list of
         registered generator callbacks.
  2. **Checking the referential consistency** by verifying all edges of the
     graph actually connect existing nodes. Since we have a lot of information
     about the graph structure, we can emit helpful error messages here, e.g
     `luci.builder("name") refers to undefined luci.bucket("bucket") at <stack
     trace of the corresponding luci.builder(...) definition>`.
       - This stage is performed purely by `lucicfg` core code, not touching
         Starlark at all. It doesn't need to understand the semantics of graph
         nodes, and thus used for all sorts of configs (LUCI configs are just
         one specific application).
       - At the end of the stage we have a consistent graph with no dangling
         edges. It still may be semantically wrong.
  3. **Checking the semantics and generating actual configs** by calling all
     registered generator callbacks sequentially. They can examine and traverse
     the graph in whatever way they want and either emit errors or emit
     generated configs. They **may not** modify the graph at this stage.

Presently all this machinery is mostly hidden from the end user. It will become
available in future versions of `lucicfg` as an API for **extending**
`lucicfg`, e.g. for adding new entity types that have relation to LUCI, or for
repurposing `lucicfg` for generating non-LUCI conifgs.

## Common tasks

### Resolving naming ambiguities {#resolving-ambiguities}

Builder names are scoped to buckets. For example, it is possible to have the
following definition:

```python
# Runs pre-submit tests on Linux.
luci.builder(
    name = 'Linux',
    bucket = 'try',
    ...
)

# Runs post-submit tests on Linux.
luci.builder(
    name = 'Linux',
    bucket = 'ci',
    ...
)
```

Here `Linux` name by itself is ambiguous and can't be used to refer to the
builder. E.g. the following chunk of code will cause an error:

```python
luci.list_view_entry(
    builder = 'Linux',  # but which one?...
    ...
)
```

The fix is to prepend the bucket name:

```python
luci.list_view_entry(
    builder = 'ci/Linux',  # ah, the CI one
    ...
)
```

It is always correct to use "full" name like this. But in practice the vast
majority of real world configs do not have such ambiguities and requiring full
names everywhere is a chore. For that reason `lucicfg` allows to omit the bucket
name if the resulting reference is non-ambiguous. In the example above, if we
remove one of the builders, `builder = 'Linux'` reference becomes valid.


### Referring to builders in other projects {#external-builders}

*** note
**Experimental.** This feature is not yet supported in all contexts. If you want
to refer to an external builder in some rule, check the rule's documentation
to verify it supports such usage. If the documentation doesn't mention external
builders support, then the rule doesn't support it.
***

Some LUCI Services allow one project to refer to resources in another project.
For example, a {{$console_view_ref}} can display builders that belong to another
LUCI project, side-by-side with the builders from the project the console
belongs to.

Such external builders can be referred to via their fully qualified name in
the format `<project>:<bucket>/<name>`. Note that `<bucket>` part can't be
omitted.

For example:

```python
luci.console_view_entry(
    builder = 'chromium:ci/Linux Builder',
    ...
)
```

### Defining cron schedules {#schedules-doc}

{{$builder_ref}} and {{$gitiles_poller_ref}} rules have `schedule` field that
defines how often the builder or poller should run. Schedules are given as
strings. Supported kinds of schedules (illustrated via examples):

  - `* 0 * * * *`: a crontab expression, in a syntax supported by
    https://github.com/gorhill/cronexpr (see its docs for full reference).
    LUCI will attempt to start the job at specified moments in time (based on
    **UTC clock**). Some examples:
      - `0 */3 * * * *` - every 3 hours: at 12:00 AM UTC, 3:00 AM UTC, ...
      - `0 */3 * * *` - the exact same thing (the last field is optional).
      - `0 1/3 * * *` - every 3 hours but starting 1:00 AM UTC.
      - `0 2,10,18 * * *` - at 2 AM UTC, 10 AM UTC, 6 PM UTC.
      - `0 7 * * *` - at 7 AM UTC, once a day.

    If a previous invocation is still running when triggering a new one,
    an overrun is recorded and the new scheduled invocation is skipped. The next
    attempt to start the job happens based on the schedule (not when the
    currently running invocation finishes).

  - `with 10s interval`: run the job in a loop, waiting 10s after finishing
     an invocation before starting a new one. Moments when the job starts aren't
     synchronized with the wall clock at all.

  - `with 1m interval`, `with 1h interval`, `with 1h10m interval`: same format,
    just using minutes and hours instead of seconds.

  - `continuously` is alias for `with 0s interval`, meaning to run the job in
    a loop without any pauses at all.

  - `triggered` schedule indicates that the job is only started via some
    external triggering event (e.g. via LUCI Scheduler API), not periodically.
      - in {{$builder_ref}} this schedule is useful to make lucicfg setup a
        scheduler job associated with the builder (even if the builder is not
        triggered by anything else in the configs). This exposes the builder in
        LUCI Scheduler API.
      - in {{$gitiles_poller_ref}} this is useful to setup a poller that polls
        only on manual requests, not periodically.


## Formatting and linting Starlark code {#formatting-linting}

lucicfg uses [buildifier] internally to format and lint Starlark code.
Buildifier is primarily intended for Bazel BUILD and \*.bzl files, but it works
with lucicfg's \*.star files reasonably well too.

To format a single Starlark file use `lucicfg fmt path.star`. To format all
\*.star files in a directory (recursively) use `lucicfg fmt <dir>`.

There are two ways to run lint checks:

  1. Per-file or directory (recursively) using `lucicfg lint <path>`. What set
     of checks to perform over each individual Starlark file is defined in
     the `PACKAGE.star` of the package that contains the file (see
     {{$pkg_lint_checks_ref}}). It can also be overridden via `-check <set>`
     CLI argument, where `<set>` is a special comma-delimited string that
     identifies what checks to apply. See below for how to construct it.
  2. As part of `lucicfg validate <entry point>.star`. It will check all files
     that belong to the package that contains the entry point script. This is
     the recommended way.

Checking that files are properly formatted is a special kind of a lint check
called `formatting`.

[buildifier]: https://github.com/bazelbuild/buildtools/tree/master/buildifier


### Specifying a set of linter checks to apply

{{$pkg_lint_checks_ref}} and `lucicfg lint -check ...` CLI argument accept a
list of strings that looks like `[<initial set>], +warn1, +warn2, -warn3,
-warn4, ... `, where

  * `<initial set>` can be one of `default`, `none` or `all` and it
    identifies a set of linter checks to use as a base:
    * `default` is a set of checks that are known to work well with lucicfg
      Starlark code. If `<initial set>` is omitted, `default` is used.
    * `none` is an empty set.
    * `all` is all checks known to buildifier. Note that some of them may be
      incompatible with lucicfg Starlark code.
  * `+warn` adds some specific check to the set of checks to apply.
  * `-warn` removes some specific check from the set of checks to apply.

See [buildifier warnings list] for identifiers and meanings of all possible
checks. Note that many of them are specific to Bazel not applicable to lucicfg
Starlark code.

Additionally a check called `formatting` can be used to instruct lucicfg to
verify formatting of Starlark files. It is part of the `default` set. Note that
it is not a built-in buildifier check and thus it's not listed in the buildifier
docs nor can it be disabled via `buildifier: disable=...`.

Note that **all checks (including formatting checks) are disabled by default**
for now. Use something like this in `PACKAGE.star` to enable a common set of
checks:

```python
pkg.options.lint_checks(["default"])
```

To check formatting only:

```python
pkg.options.lint_checks(["none", "+formatting"])
```

[buildifier warnings list]: https://github.com/bazelbuild/buildtools/blob/master/WARNINGS.md

### Disabling checks locally

To suppress a specific occurrence of a linter warning add a special comment
`# buildifier: disable=<check-name>` to the expression that causes the warning:

```python
# buildifier: disable=function-docstring
def update_submodules_mirror(
        name,
        short_name,
        source_repo,
        target_repo,
        extra_submodules = None,
        triggered_by = None,
        refs = None):
    properties = {
        "source_repo": source_repo,
        "target_repo": target_repo,
    }
    ...
```

To suppress formatting changes (and thus formatting check) use
`# buildifier: leave-alone`.


## Interfacing with lucicfg internals
{{template "gen-funcs-doc" $lucicfg}}

## Working with time
{{template "gen-funcs-doc" $time}}

## Core LUCI rules
{{template "gen-funcs-doc" $luci}}

## ACLs

### Permissions and roles in LUCI Realms {#realm-roles-doc}

See [permissions.cfg](https://source.corp.google.com/h/chromium/infra/infra_superproject/+/main:data/config/configs/chrome-infra-auth/permissions.cfg)
(sorry, internal only) for permissions and roles in LUCI Realms.


### Roles {#roles-doc}

Below is the table with role constants that can be passed as `roles` in
{{$acl_entry_ref}}.

Due to some inconsistencies in how LUCI service are currently implemented, some
roles can be assigned only in {{$project_ref}} rule, but some also in individual
{{$bucket_ref}} or {{$cq_group_ref}} rules.

Similarly some roles can be assigned to individual users, other only to groups.

| Role  | Scope | Principals | Allows |
|-------|-------|------------|--------|
{{- range $sym := $acl.Symbols "inv"}}
| {{.FullName}} |
{{- if .HasDocTag "project_level_only"}}project only{{else if .HasDocTag "cq_role"}}project, cq_group{{else}}project, bucket{{end}} |
{{- if .HasDocTag "groups_only"}}groups{{else}}groups, users{{end}} |
{{- .Doc.Description | LinkifySymbols}} |
{{- end}}

{{template "gen-funcs-doc" $acl}}

## ResultDB
{{template "gen-funcs-doc" $resultdb}}

## Swarming
{{template "gen-funcs-doc" $swarming}}

## Scheduler
{{template "gen-funcs-doc" $scheduler}}

## CQ  {#cq-doc}
{{template "gen-funcs-doc" $cq}}

## Buildbucket
{{template "gen-funcs-doc" $buildbucket}}

## Built-in constants and functions

Refer to the list of [built-in constants and functions][starlark-builtins]
exposed in the global namespace by Starlark itself.

[starlark-builtins]: https://github.com/google/starlark-go/blob/master/doc/spec.md#built-in-constants-and-functions

In addition, `lucicfg` exposes the following functions.

{{template "gen-funcs-doc" $native}}
{{template "gen-funcs-doc" $json}}
{{template "gen-funcs-doc" $proto}}
{{template "gen-funcs-doc" $io}}


## Functions only available inside PACKAGE.star {#lucicfg-pkg}

*** note
**Experimental.** This is a new feature that may potentially change in the
future.
***

These functions are only available when executing `PACKAGE.star` file when
loading package declarations. See [Package declaration via PACKAGE.star](#pkg-star).

{{template "gen-funcs-doc" $pkg}}
{{template "gen-funcs-doc" $pkg_source}}
{{template "gen-funcs-doc" $pkg_options}}
