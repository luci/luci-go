// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package gerrit

import (
	"testing"

	"go.chromium.org/luci/common/testing/ftt"
	"go.chromium.org/luci/common/testing/truth/assert"
	"go.chromium.org/luci/common/testing/truth/should"
)

func TestTruncateMessage(t *testing.T) {
	t.Parallel()

	ftt.Run("TruncateMessage", t, func(t *ftt.Test) {
		t.Run("Noop when message doesn't exceed max length", func(t *ftt.Test) {
			const msg = "this is a message"
			assert.Loosely(t, truncate(msg, len(msg)), should.Equal(msg))
		})

		t.Run("Truncate works", func(t *ftt.Test) {
			const msg = "message is 45 characters long; max length 40."
			assert.Loosely(t, truncate(msg, 40), should.Equal("message \n...[truncated too long message]"))
		})

		t.Run("Last rune is valid utf-8", func(t *ftt.Test) {
			const msg = "ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€ðŸ˜€"
			assert.Loosely(t, msg, should.HaveLength(12*4)) // ðŸ˜€ is 4 bytes
			const expected = "ðŸ˜€\n...[truncated too long message]"
			// result should only keep (39-32)/4 = 1 emoji, where 32 is the
			// length of placeholder.
			assert.Loosely(t, truncate(msg, 39), should.Equal(expected))
		})
	})
}

func TestTag(t *testing.T) {
	t.Parallel()

	ftt.Run("Tag", t, func(t *ftt.Test) {
		t.Run("panic if name is not provided", func(t *ftt.Test) {
			assert.Loosely(t, func() { Tag("", "") }, should.Panic)
		})
		t.Run("panic if name contains ~", func(t *ftt.Test) {
			assert.Loosely(t, func() { Tag("a~b", "") }, should.Panic)
		})
		t.Run("with suffix", func(t *ftt.Test) {
			assert.Loosely(t, Tag("dry-run", "infra/abc"), should.Equal("autogenerated:luci-cv:dry-run~infra/abc"))
		})
		t.Run("without", func(t *ftt.Test) {
			assert.Loosely(t, Tag("dry-run", ""), should.Equal("autogenerated:luci-cv:dry-run"))
		})
	})
}
