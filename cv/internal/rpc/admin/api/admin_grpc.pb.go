// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: go.chromium.org/luci/cv/internal/rpc/admin/api/admin.proto

package adminpb

import (
	context "context"
	quotapb "go.chromium.org/luci/server/quota/quotapb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Admin_GetProject_FullMethodName          = "/cv.internal.rpc.admin.api.Admin/GetProject"
	Admin_GetProjectLogs_FullMethodName      = "/cv.internal.rpc.admin.api.Admin/GetProjectLogs"
	Admin_GetRun_FullMethodName              = "/cv.internal.rpc.admin.api.Admin/GetRun"
	Admin_GetCL_FullMethodName               = "/cv.internal.rpc.admin.api.Admin/GetCL"
	Admin_GetPoller_FullMethodName           = "/cv.internal.rpc.admin.api.Admin/GetPoller"
	Admin_SearchRuns_FullMethodName          = "/cv.internal.rpc.admin.api.Admin/SearchRuns"
	Admin_DSMLaunchJob_FullMethodName        = "/cv.internal.rpc.admin.api.Admin/DSMLaunchJob"
	Admin_DSMGetJob_FullMethodName           = "/cv.internal.rpc.admin.api.Admin/DSMGetJob"
	Admin_DSMAbortJob_FullMethodName         = "/cv.internal.rpc.admin.api.Admin/DSMAbortJob"
	Admin_RefreshProjectCLs_FullMethodName   = "/cv.internal.rpc.admin.api.Admin/RefreshProjectCLs"
	Admin_DeleteProjectEvents_FullMethodName = "/cv.internal.rpc.admin.api.Admin/DeleteProjectEvents"
	Admin_SendProjectEvent_FullMethodName    = "/cv.internal.rpc.admin.api.Admin/SendProjectEvent"
	Admin_SendRunEvent_FullMethodName        = "/cv.internal.rpc.admin.api.Admin/SendRunEvent"
	Admin_ScheduleTask_FullMethodName        = "/cv.internal.rpc.admin.api.Admin/ScheduleTask"
	Admin_GetQuotaAccounts_FullMethodName    = "/cv.internal.rpc.admin.api.Admin/GetQuotaAccounts"
	Admin_ApplyQuotaOps_FullMethodName       = "/cv.internal.rpc.admin.api.Admin/ApplyQuotaOps"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Admin is for CV maintainers only.
//
// CAN AND WILL CHANGE WITHOUT NOTICE IN BACKWARDS INCOMPATIBLE WAY.
type AdminClient interface {
	// GetProject returns current Project state.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// GetProjectLogs returns ProjectLogs recorded in the past.
	GetProjectLogs(ctx context.Context, in *GetProjectLogsRequest, opts ...grpc.CallOption) (*GetProjectLogsResponse, error)
	// GetRun returns current Run state.
	GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error)
	// GetCL returns current CL state.
	GetCL(ctx context.Context, in *GetCLRequest, opts ...grpc.CallOption) (*GetCLResponse, error)
	// GetPoller returns current Poller state.
	GetPoller(ctx context.Context, in *GetPollerRequest, opts ...grpc.CallOption) (*GetPollerResponse, error)
	// SearchRuns returns Runs ordered by .CreateTime DESC (most recent first).
	SearchRuns(ctx context.Context, in *SearchRunsRequest, opts ...grpc.CallOption) (*RunsResponse, error)
	// DSMLaunchJob launches a new job, pre-registered in dsmapper.go.
	//
	// If unsure about job name, use "404" and observe the error,
	// which will list all known names.
	//
	// Returns job ID.
	DSMLaunchJob(ctx context.Context, in *DSMLaunchJobRequest, opts ...grpc.CallOption) (*DSMJobID, error)
	// DSMGetJob returns details of previously launched job given its ID.
	DSMGetJob(ctx context.Context, in *DSMJobID, opts ...grpc.CallOption) (*DSMJob, error)
	// DSMAbortJob aborts previously launched job given its ID.
	DSMAbortJob(ctx context.Context, in *DSMJobID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RefreshProjectCLs refreshes all CLs currently tracked by PM.
	//
	// This is generally safe to call, but it may consume Gerrit Quota of the
	// given project, so use with care.
	RefreshProjectCLs(ctx context.Context, in *RefreshProjectCLsRequest, opts ...grpc.CallOption) (*RefreshProjectCLsResponse, error)
	// DeleteProjectEvents deletes all outstanding project events.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// Useful in case of severe emergency where a Project Manager gets stuck
	// with too many bogus events and/or an incorrect event. Usually, it's better
	// to figure out which event is incorrect and delete just that event in the
	// Cloud Datastore UI. However, in a time crunch, it may be OK to unblock a
	// busy project with this API, and manually resend important events (e.g. Run
	// Finished) via SendProjectEvent at a later time.
	//
	// Must be called with stopped manage-run task queue.
	DeleteProjectEvents(ctx context.Context, in *DeleteProjectEventsRequest, opts ...grpc.CallOption) (*DeleteProjectEventsResponse, error)
	// SendProjectEvent sends event to a PM.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// The implications vary depending on the event kind.
	SendProjectEvent(ctx context.Context, in *SendProjectEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SendRunEvent sends event to a RM.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// The implications vary depending on the event kind.
	SendRunEvent(ctx context.Context, in *SendRunEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ScheduleTask schedules an arbitrary CV TQ task.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// Some TQ tasks have external side effect, e.g. exporting BQ rows, which
	// shouldn't be scheduled willy-nilly. However, this API is indispensable when
	// a bunch of BQ rows failed to be exported, say due to a misconfiguration.
	ScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAccounts returns the indicated Accounts.
	GetQuotaAccounts(ctx context.Context, in *quotapb.GetAccountsRequest, opts ...grpc.CallOption) (*quotapb.GetAccountsResponse, error)
	// ApplyOps updates the available resources with the provided operations.
	ApplyQuotaOps(ctx context.Context, in *quotapb.ApplyOpsRequest, opts ...grpc.CallOption) (*quotapb.ApplyOpsResponse, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, Admin_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProjectLogs(ctx context.Context, in *GetProjectLogsRequest, opts ...grpc.CallOption) (*GetProjectLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectLogsResponse)
	err := c.cc.Invoke(ctx, Admin_GetProjectLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunResponse)
	err := c.cc.Invoke(ctx, Admin_GetRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCL(ctx context.Context, in *GetCLRequest, opts ...grpc.CallOption) (*GetCLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCLResponse)
	err := c.cc.Invoke(ctx, Admin_GetCL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPoller(ctx context.Context, in *GetPollerRequest, opts ...grpc.CallOption) (*GetPollerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPollerResponse)
	err := c.cc.Invoke(ctx, Admin_GetPoller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SearchRuns(ctx context.Context, in *SearchRunsRequest, opts ...grpc.CallOption) (*RunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunsResponse)
	err := c.cc.Invoke(ctx, Admin_SearchRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DSMLaunchJob(ctx context.Context, in *DSMLaunchJobRequest, opts ...grpc.CallOption) (*DSMJobID, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DSMJobID)
	err := c.cc.Invoke(ctx, Admin_DSMLaunchJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DSMGetJob(ctx context.Context, in *DSMJobID, opts ...grpc.CallOption) (*DSMJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DSMJob)
	err := c.cc.Invoke(ctx, Admin_DSMGetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DSMAbortJob(ctx context.Context, in *DSMJobID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_DSMAbortJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RefreshProjectCLs(ctx context.Context, in *RefreshProjectCLsRequest, opts ...grpc.CallOption) (*RefreshProjectCLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshProjectCLsResponse)
	err := c.cc.Invoke(ctx, Admin_RefreshProjectCLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteProjectEvents(ctx context.Context, in *DeleteProjectEventsRequest, opts ...grpc.CallOption) (*DeleteProjectEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProjectEventsResponse)
	err := c.cc.Invoke(ctx, Admin_DeleteProjectEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendProjectEvent(ctx context.Context, in *SendProjectEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_SendProjectEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendRunEvent(ctx context.Context, in *SendRunEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_SendRunEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ScheduleTask(ctx context.Context, in *ScheduleTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Admin_ScheduleTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetQuotaAccounts(ctx context.Context, in *quotapb.GetAccountsRequest, opts ...grpc.CallOption) (*quotapb.GetAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(quotapb.GetAccountsResponse)
	err := c.cc.Invoke(ctx, Admin_GetQuotaAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ApplyQuotaOps(ctx context.Context, in *quotapb.ApplyOpsRequest, opts ...grpc.CallOption) (*quotapb.ApplyOpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(quotapb.ApplyOpsResponse)
	err := c.cc.Invoke(ctx, Admin_ApplyQuotaOps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility.
//
// Admin is for CV maintainers only.
//
// CAN AND WILL CHANGE WITHOUT NOTICE IN BACKWARDS INCOMPATIBLE WAY.
type AdminServer interface {
	// GetProject returns current Project state.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// GetProjectLogs returns ProjectLogs recorded in the past.
	GetProjectLogs(context.Context, *GetProjectLogsRequest) (*GetProjectLogsResponse, error)
	// GetRun returns current Run state.
	GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error)
	// GetCL returns current CL state.
	GetCL(context.Context, *GetCLRequest) (*GetCLResponse, error)
	// GetPoller returns current Poller state.
	GetPoller(context.Context, *GetPollerRequest) (*GetPollerResponse, error)
	// SearchRuns returns Runs ordered by .CreateTime DESC (most recent first).
	SearchRuns(context.Context, *SearchRunsRequest) (*RunsResponse, error)
	// DSMLaunchJob launches a new job, pre-registered in dsmapper.go.
	//
	// If unsure about job name, use "404" and observe the error,
	// which will list all known names.
	//
	// Returns job ID.
	DSMLaunchJob(context.Context, *DSMLaunchJobRequest) (*DSMJobID, error)
	// DSMGetJob returns details of previously launched job given its ID.
	DSMGetJob(context.Context, *DSMJobID) (*DSMJob, error)
	// DSMAbortJob aborts previously launched job given its ID.
	DSMAbortJob(context.Context, *DSMJobID) (*emptypb.Empty, error)
	// RefreshProjectCLs refreshes all CLs currently tracked by PM.
	//
	// This is generally safe to call, but it may consume Gerrit Quota of the
	// given project, so use with care.
	RefreshProjectCLs(context.Context, *RefreshProjectCLsRequest) (*RefreshProjectCLsResponse, error)
	// DeleteProjectEvents deletes all outstanding project events.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// Useful in case of severe emergency where a Project Manager gets stuck
	// with too many bogus events and/or an incorrect event. Usually, it's better
	// to figure out which event is incorrect and delete just that event in the
	// Cloud Datastore UI. However, in a time crunch, it may be OK to unblock a
	// busy project with this API, and manually resend important events (e.g. Run
	// Finished) via SendProjectEvent at a later time.
	//
	// Must be called with stopped manage-run task queue.
	DeleteProjectEvents(context.Context, *DeleteProjectEventsRequest) (*DeleteProjectEventsResponse, error)
	// SendProjectEvent sends event to a PM.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// The implications vary depending on the event kind.
	SendProjectEvent(context.Context, *SendProjectEventRequest) (*emptypb.Empty, error)
	// SendRunEvent sends event to a RM.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// The implications vary depending on the event kind.
	SendRunEvent(context.Context, *SendRunEventRequest) (*emptypb.Empty, error)
	// ScheduleTask schedules an arbitrary CV TQ task.
	//
	// DANGER ZONE. DO NOT USE UNLESS YOU UNDERSTAND THE IMPLICATIONS WELL.
	//
	// Some TQ tasks have external side effect, e.g. exporting BQ rows, which
	// shouldn't be scheduled willy-nilly. However, this API is indispensable when
	// a bunch of BQ rows failed to be exported, say due to a misconfiguration.
	ScheduleTask(context.Context, *ScheduleTaskRequest) (*emptypb.Empty, error)
	// GetAccounts returns the indicated Accounts.
	GetQuotaAccounts(context.Context, *quotapb.GetAccountsRequest) (*quotapb.GetAccountsResponse, error)
	// ApplyOps updates the available resources with the provided operations.
	ApplyQuotaOps(context.Context, *quotapb.ApplyOpsRequest) (*quotapb.ApplyOpsResponse, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServer struct{}

func (UnimplementedAdminServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedAdminServer) GetProjectLogs(context.Context, *GetProjectLogsRequest) (*GetProjectLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectLogs not implemented")
}
func (UnimplementedAdminServer) GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedAdminServer) GetCL(context.Context, *GetCLRequest) (*GetCLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCL not implemented")
}
func (UnimplementedAdminServer) GetPoller(context.Context, *GetPollerRequest) (*GetPollerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoller not implemented")
}
func (UnimplementedAdminServer) SearchRuns(context.Context, *SearchRunsRequest) (*RunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRuns not implemented")
}
func (UnimplementedAdminServer) DSMLaunchJob(context.Context, *DSMLaunchJobRequest) (*DSMJobID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DSMLaunchJob not implemented")
}
func (UnimplementedAdminServer) DSMGetJob(context.Context, *DSMJobID) (*DSMJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DSMGetJob not implemented")
}
func (UnimplementedAdminServer) DSMAbortJob(context.Context, *DSMJobID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DSMAbortJob not implemented")
}
func (UnimplementedAdminServer) RefreshProjectCLs(context.Context, *RefreshProjectCLsRequest) (*RefreshProjectCLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshProjectCLs not implemented")
}
func (UnimplementedAdminServer) DeleteProjectEvents(context.Context, *DeleteProjectEventsRequest) (*DeleteProjectEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectEvents not implemented")
}
func (UnimplementedAdminServer) SendProjectEvent(context.Context, *SendProjectEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProjectEvent not implemented")
}
func (UnimplementedAdminServer) SendRunEvent(context.Context, *SendRunEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRunEvent not implemented")
}
func (UnimplementedAdminServer) ScheduleTask(context.Context, *ScheduleTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleTask not implemented")
}
func (UnimplementedAdminServer) GetQuotaAccounts(context.Context, *quotapb.GetAccountsRequest) (*quotapb.GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaAccounts not implemented")
}
func (UnimplementedAdminServer) ApplyQuotaOps(context.Context, *quotapb.ApplyOpsRequest) (*quotapb.ApplyOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyQuotaOps not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}
func (UnimplementedAdminServer) testEmbeddedByValue()               {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	// If the following call pancis, it indicates UnimplementedAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProjectLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProjectLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetProjectLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProjectLogs(ctx, req.(*GetProjectLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRun(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetCL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCL(ctx, req.(*GetCLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPoller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPollerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPoller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetPoller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPoller(ctx, req.(*GetPollerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SearchRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SearchRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SearchRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SearchRuns(ctx, req.(*SearchRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DSMLaunchJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSMLaunchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DSMLaunchJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DSMLaunchJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DSMLaunchJob(ctx, req.(*DSMLaunchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DSMGetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSMJobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DSMGetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DSMGetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DSMGetJob(ctx, req.(*DSMJobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DSMAbortJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DSMJobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DSMAbortJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DSMAbortJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DSMAbortJob(ctx, req.(*DSMJobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RefreshProjectCLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshProjectCLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RefreshProjectCLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_RefreshProjectCLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RefreshProjectCLs(ctx, req.(*RefreshProjectCLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteProjectEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteProjectEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_DeleteProjectEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteProjectEvents(ctx, req.(*DeleteProjectEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendProjectEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProjectEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendProjectEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SendProjectEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendProjectEvent(ctx, req.(*SendProjectEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendRunEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRunEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendRunEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_SendRunEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendRunEvent(ctx, req.(*SendRunEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ScheduleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ScheduleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ScheduleTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ScheduleTask(ctx, req.(*ScheduleTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetQuotaAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(quotapb.GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetQuotaAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetQuotaAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetQuotaAccounts(ctx, req.(*quotapb.GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ApplyQuotaOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(quotapb.ApplyOpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ApplyQuotaOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_ApplyQuotaOps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ApplyQuotaOps(ctx, req.(*quotapb.ApplyOpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cv.internal.rpc.admin.api.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _Admin_GetProject_Handler,
		},
		{
			MethodName: "GetProjectLogs",
			Handler:    _Admin_GetProjectLogs_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _Admin_GetRun_Handler,
		},
		{
			MethodName: "GetCL",
			Handler:    _Admin_GetCL_Handler,
		},
		{
			MethodName: "GetPoller",
			Handler:    _Admin_GetPoller_Handler,
		},
		{
			MethodName: "SearchRuns",
			Handler:    _Admin_SearchRuns_Handler,
		},
		{
			MethodName: "DSMLaunchJob",
			Handler:    _Admin_DSMLaunchJob_Handler,
		},
		{
			MethodName: "DSMGetJob",
			Handler:    _Admin_DSMGetJob_Handler,
		},
		{
			MethodName: "DSMAbortJob",
			Handler:    _Admin_DSMAbortJob_Handler,
		},
		{
			MethodName: "RefreshProjectCLs",
			Handler:    _Admin_RefreshProjectCLs_Handler,
		},
		{
			MethodName: "DeleteProjectEvents",
			Handler:    _Admin_DeleteProjectEvents_Handler,
		},
		{
			MethodName: "SendProjectEvent",
			Handler:    _Admin_SendProjectEvent_Handler,
		},
		{
			MethodName: "SendRunEvent",
			Handler:    _Admin_SendRunEvent_Handler,
		},
		{
			MethodName: "ScheduleTask",
			Handler:    _Admin_ScheduleTask_Handler,
		},
		{
			MethodName: "GetQuotaAccounts",
			Handler:    _Admin_GetQuotaAccounts_Handler,
		},
		{
			MethodName: "ApplyQuotaOps",
			Handler:    _Admin_ApplyQuotaOps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/cv/internal/rpc/admin/api/admin.proto",
}
