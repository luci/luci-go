// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/cv/internal/rpc/admin/api/admin.proto

package adminpb

import (
	changelist "go.chromium.org/luci/cv/internal/changelist"
	refresher "go.chromium.org/luci/cv/internal/configs/prjcfg/refresher"
	poller "go.chromium.org/luci/cv/internal/gerrit/poller"
	prjpb "go.chromium.org/luci/cv/internal/prjmanager/prjpb"
	run "go.chromium.org/luci/cv/internal/run"
	bq "go.chromium.org/luci/cv/internal/run/bq"
	eventpb "go.chromium.org/luci/cv/internal/run/eventpb"
	dsmapperpb "go.chromium.org/luci/server/dsmapper/dsmapperpb"
	quotapb "go.chromium.org/luci/server/quota/quotapb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetProjectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{0}
}

func (x *GetProjectRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// GetProjectResponse provides non-atomic snapshot of a LUCI project.
//
// The project state and outstanding events come from different entities,
// read in parallel.
type GetProjectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         *prjpb.PState          `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Events        []*prjpb.Event         `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{1}
}

func (x *GetProjectResponse) GetState() *prjpb.PState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *GetProjectResponse) GetEvents() []*prjpb.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetProjectLogsRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	PageSize  int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	Project   string                 `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Optional. Limits EVersions to [eversion_min, eversion_max].
	EversionMin   int64 `protobuf:"varint,4,opt,name=eversion_min,json=eversionMin,proto3" json:"eversion_min,omitempty"`
	EversionMax   int64 `protobuf:"varint,5,opt,name=eversion_max,json=eversionMax,proto3" json:"eversion_max,omitempty"` // inclusive, for ease of use by humans.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectLogsRequest) Reset() {
	*x = GetProjectLogsRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectLogsRequest) ProtoMessage() {}

func (x *GetProjectLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectLogsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectLogsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{2}
}

func (x *GetProjectLogsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetProjectLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetProjectLogsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetProjectLogsRequest) GetEversionMin() int64 {
	if x != nil {
		return x.EversionMin
	}
	return 0
}

func (x *GetProjectLogsRequest) GetEversionMax() int64 {
	if x != nil {
		return x.EversionMax
	}
	return 0
}

type GetProjectLogsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logs          []*ProjectLog          `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectLogsResponse) Reset() {
	*x = GetProjectLogsResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectLogsResponse) ProtoMessage() {}

func (x *GetProjectLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectLogsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectLogsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{3}
}

func (x *GetProjectLogsResponse) GetLogs() []*ProjectLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type ProjectLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Eversion      int64                  `protobuf:"varint,1,opt,name=eversion,proto3" json:"eversion,omitempty"`
	State         *prjpb.PState          `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Reasons       *prjpb.LogReasons      `protobuf:"bytes,4,opt,name=reasons,proto3" json:"reasons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectLog) Reset() {
	*x = ProjectLog{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLog) ProtoMessage() {}

func (x *ProjectLog) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLog.ProtoReflect.Descriptor instead.
func (*ProjectLog) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{4}
}

func (x *ProjectLog) GetEversion() int64 {
	if x != nil {
		return x.Eversion
	}
	return 0
}

func (x *ProjectLog) GetState() *prjpb.PState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ProjectLog) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *ProjectLog) GetReasons() *prjpb.LogReasons {
	if x != nil {
		return x.Reasons
	}
	return nil
}

type GetRunRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           string                 `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{5}
}

func (x *GetRunRequest) GetRun() string {
	if x != nil {
		return x.Run
	}
	return ""
}

// GetRunResponse provides non-atomic snapshot of a Run.
//
// The Run state and outstanding events come from different entities
// read in parallel.
type GetRunResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State. Next tag: 26.
	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Eversion            int64                  `protobuf:"varint,2,opt,name=eversion,proto3" json:"eversion,omitempty"`
	Mode                string                 `protobuf:"bytes,3,opt,name=mode,proto3" json:"mode,omitempty"`
	Status              run.Status             `protobuf:"varint,4,opt,name=status,proto3,enum=cv.internal.run.Status" json:"status,omitempty"`
	CreateTime          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	StartTime           *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	UpdateTime          *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	EndTime             *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Owner               string                 `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	CreatedBy           string                 `protobuf:"bytes,24,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	BilledTo            string                 `protobuf:"bytes,25,opt,name=billed_to,json=billedTo,proto3" json:"billed_to,omitempty"`
	ConfigGroupId       string                 `protobuf:"bytes,10,opt,name=config_group_id,json=configGroupId,proto3" json:"config_group_id,omitempty"`
	Cls                 []*GetRunResponse_CL   `protobuf:"bytes,23,rep,name=cls,proto3" json:"cls,omitempty"`
	Options             *run.Options           `protobuf:"bytes,16,opt,name=options,proto3" json:"options,omitempty"`
	CancellationReasons []string               `protobuf:"bytes,22,rep,name=cancellation_reasons,json=cancellationReasons,proto3" json:"cancellation_reasons,omitempty"`
	Tryjobs             *run.Tryjobs           `protobuf:"bytes,17,opt,name=tryjobs,proto3" json:"tryjobs,omitempty"`
	OngoingLongOps      *run.OngoingLongOps    `protobuf:"bytes,21,opt,name=ongoing_long_ops,json=ongoingLongOps,proto3" json:"ongoing_long_ops,omitempty"`
	Submission          *run.Submission        `protobuf:"bytes,12,opt,name=submission,proto3" json:"submission,omitempty"`
	LatestClsRefresh    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=latest_cls_refresh,json=latestClsRefresh,proto3" json:"latest_cls_refresh,omitempty"`
	// Log entries are substantitve changes to a Run's state.
	LogEntries []*run.LogEntry `protobuf:"bytes,19,rep,name=log_entries,json=logEntries,proto3" json:"log_entries,omitempty"`
	// Outstanding events.
	Events        []*eventpb.Event `protobuf:"bytes,20,rep,name=events,proto3" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRunResponse) Reset() {
	*x = GetRunResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunResponse) ProtoMessage() {}

func (x *GetRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunResponse.ProtoReflect.Descriptor instead.
func (*GetRunResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{6}
}

func (x *GetRunResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetRunResponse) GetEversion() int64 {
	if x != nil {
		return x.Eversion
	}
	return 0
}

func (x *GetRunResponse) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *GetRunResponse) GetStatus() run.Status {
	if x != nil {
		return x.Status
	}
	return run.Status(0)
}

func (x *GetRunResponse) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GetRunResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetRunResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *GetRunResponse) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetRunResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetRunResponse) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GetRunResponse) GetBilledTo() string {
	if x != nil {
		return x.BilledTo
	}
	return ""
}

func (x *GetRunResponse) GetConfigGroupId() string {
	if x != nil {
		return x.ConfigGroupId
	}
	return ""
}

func (x *GetRunResponse) GetCls() []*GetRunResponse_CL {
	if x != nil {
		return x.Cls
	}
	return nil
}

func (x *GetRunResponse) GetOptions() *run.Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *GetRunResponse) GetCancellationReasons() []string {
	if x != nil {
		return x.CancellationReasons
	}
	return nil
}

func (x *GetRunResponse) GetTryjobs() *run.Tryjobs {
	if x != nil {
		return x.Tryjobs
	}
	return nil
}

func (x *GetRunResponse) GetOngoingLongOps() *run.OngoingLongOps {
	if x != nil {
		return x.OngoingLongOps
	}
	return nil
}

func (x *GetRunResponse) GetSubmission() *run.Submission {
	if x != nil {
		return x.Submission
	}
	return nil
}

func (x *GetRunResponse) GetLatestClsRefresh() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestClsRefresh
	}
	return nil
}

func (x *GetRunResponse) GetLogEntries() []*run.LogEntry {
	if x != nil {
		return x.LogEntries
	}
	return nil
}

func (x *GetRunResponse) GetEvents() []*eventpb.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type GetCLRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId    string                 `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	GerritUrl     string                 `protobuf:"bytes,3,opt,name=gerrit_url,json=gerritUrl,proto3" json:"gerrit_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCLRequest) Reset() {
	*x = GetCLRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLRequest) ProtoMessage() {}

func (x *GetCLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLRequest.ProtoReflect.Descriptor instead.
func (*GetCLRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{7}
}

func (x *GetCLRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCLRequest) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *GetCLRequest) GetGerritUrl() string {
	if x != nil {
		return x.GerritUrl
	}
	return ""
}

// GetProjectResponse provides non-atomic snapshot of a project state.
//
// The config hash and status come from different DS entity than PState,
// and each event comes from its own entity and depends on yet another tombstone
// entity.
type GetCLResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State. Next tag: 9.
	Id               int64                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Eversion         int64                        `protobuf:"varint,2,opt,name=eversion,proto3" json:"eversion,omitempty"`
	ExternalId       string                       `protobuf:"bytes,3,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	UpdateTime       *timestamppb.Timestamp       `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Snapshot         *changelist.Snapshot         `protobuf:"bytes,4,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	ApplicableConfig *changelist.ApplicableConfig `protobuf:"bytes,5,opt,name=applicable_config,json=applicableConfig,proto3" json:"applicable_config,omitempty"`
	Access           *changelist.Access           `protobuf:"bytes,6,opt,name=access,proto3" json:"access,omitempty"`
	IncompleteRuns   []string                     `protobuf:"bytes,7,rep,name=incomplete_runs,json=incompleteRuns,proto3" json:"incomplete_runs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetCLResponse) Reset() {
	*x = GetCLResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLResponse) ProtoMessage() {}

func (x *GetCLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLResponse.ProtoReflect.Descriptor instead.
func (*GetCLResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{8}
}

func (x *GetCLResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCLResponse) GetEversion() int64 {
	if x != nil {
		return x.Eversion
	}
	return 0
}

func (x *GetCLResponse) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *GetCLResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *GetCLResponse) GetSnapshot() *changelist.Snapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

func (x *GetCLResponse) GetApplicableConfig() *changelist.ApplicableConfig {
	if x != nil {
		return x.ApplicableConfig
	}
	return nil
}

func (x *GetCLResponse) GetAccess() *changelist.Access {
	if x != nil {
		return x.Access
	}
	return nil
}

func (x *GetCLResponse) GetIncompleteRuns() []string {
	if x != nil {
		return x.IncompleteRuns
	}
	return nil
}

type GetPollerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPollerRequest) Reset() {
	*x = GetPollerRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPollerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPollerRequest) ProtoMessage() {}

func (x *GetPollerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPollerRequest.ProtoReflect.Descriptor instead.
func (*GetPollerRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{9}
}

func (x *GetPollerRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type GetPollerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Eversion      int64                  `protobuf:"varint,2,opt,name=eversion,proto3" json:"eversion,omitempty"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	ConfigHash    string                 `protobuf:"bytes,4,opt,name=config_hash,json=configHash,proto3" json:"config_hash,omitempty"`
	QueryStates   *poller.QueryStates    `protobuf:"bytes,5,opt,name=query_states,json=queryStates,proto3" json:"query_states,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPollerResponse) Reset() {
	*x = GetPollerResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPollerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPollerResponse) ProtoMessage() {}

func (x *GetPollerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPollerResponse.ProtoReflect.Descriptor instead.
func (*GetPollerResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{10}
}

func (x *GetPollerResponse) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetPollerResponse) GetEversion() int64 {
	if x != nil {
		return x.Eversion
	}
	return 0
}

func (x *GetPollerResponse) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *GetPollerResponse) GetConfigHash() string {
	if x != nil {
		return x.ConfigHash
	}
	return ""
}

func (x *GetPollerResponse) GetQueryStates() *poller.QueryStates {
	if x != nil {
		return x.QueryStates
	}
	return nil
}

type DeleteProjectEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectEventsRequest) Reset() {
	*x = DeleteProjectEventsRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectEventsRequest) ProtoMessage() {}

func (x *DeleteProjectEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectEventsRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectEventsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteProjectEventsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteProjectEventsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type DeleteProjectEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        map[string]int64       `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectEventsResponse) Reset() {
	*x = DeleteProjectEventsResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectEventsResponse) ProtoMessage() {}

func (x *DeleteProjectEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectEventsResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectEventsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteProjectEventsResponse) GetEvents() map[string]int64 {
	if x != nil {
		return x.Events
	}
	return nil
}

type RefreshProjectCLsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshProjectCLsRequest) Reset() {
	*x = RefreshProjectCLsRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshProjectCLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshProjectCLsRequest) ProtoMessage() {}

func (x *RefreshProjectCLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshProjectCLsRequest.ProtoReflect.Descriptor instead.
func (*RefreshProjectCLsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{13}
}

func (x *RefreshProjectCLsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

type RefreshProjectCLsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map from CL ID to the EVersion in Datastore before the refresh.
	ClVersions    map[int64]int64 `protobuf:"bytes,1,rep,name=cl_versions,json=clVersions,proto3" json:"cl_versions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshProjectCLsResponse) Reset() {
	*x = RefreshProjectCLsResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshProjectCLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshProjectCLsResponse) ProtoMessage() {}

func (x *RefreshProjectCLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshProjectCLsResponse.ProtoReflect.Descriptor instead.
func (*RefreshProjectCLsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{14}
}

func (x *RefreshProjectCLsResponse) GetClVersions() map[int64]int64 {
	if x != nil {
		return x.ClVersions
	}
	return nil
}

type SendProjectEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Event         *prjpb.Event           `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendProjectEventRequest) Reset() {
	*x = SendProjectEventRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendProjectEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendProjectEventRequest) ProtoMessage() {}

func (x *SendProjectEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendProjectEventRequest.ProtoReflect.Descriptor instead.
func (*SendProjectEventRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{15}
}

func (x *SendProjectEventRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SendProjectEventRequest) GetEvent() *prjpb.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type SendRunEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           string                 `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	Event         *eventpb.Event         `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendRunEventRequest) Reset() {
	*x = SendRunEventRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendRunEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRunEventRequest) ProtoMessage() {}

func (x *SendRunEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRunEventRequest.ProtoReflect.Descriptor instead.
func (*SendRunEventRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{16}
}

func (x *SendRunEventRequest) GetRun() string {
	if x != nil {
		return x.Run
	}
	return ""
}

func (x *SendRunEventRequest) GetEvent() *eventpb.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type SearchRunsRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	PageSize  int32                  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string                 `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. If omitted, scans across all active projects.
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Optional. Returns Runs with the given status, only.
	Status run.Status `protobuf:"varint,4,opt,name=status,proto3,enum=cv.internal.run.Status" json:"status,omitempty"`
	// Optional. Limits Runs referencing the given CL.
	Cl *GetCLRequest `protobuf:"bytes,5,opt,name=cl,proto3" json:"cl,omitempty"`
	// Optional. Limits Runs by mode.
	Mode          string `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRunsRequest) Reset() {
	*x = SearchRunsRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRunsRequest) ProtoMessage() {}

func (x *SearchRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRunsRequest.ProtoReflect.Descriptor instead.
func (*SearchRunsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{17}
}

func (x *SearchRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SearchRunsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SearchRunsRequest) GetStatus() run.Status {
	if x != nil {
		return x.Status
	}
	return run.Status(0)
}

func (x *SearchRunsRequest) GetCl() *GetCLRequest {
	if x != nil {
		return x.Cl
	}
	return nil
}

func (x *SearchRunsRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type RunsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Runs          []*GetRunResponse      `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunsResponse) Reset() {
	*x = RunsResponse{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunsResponse) ProtoMessage() {}

func (x *RunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunsResponse.ProtoReflect.Descriptor instead.
func (*RunsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{18}
}

func (x *RunsResponse) GetRuns() []*GetRunResponse {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *RunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ScheduleTaskRequest struct {
	state                protoimpl.MessageState              `protogen:"open.v1"`
	UpdateCl             *changelist.UpdateCLTask            `protobuf:"bytes,13,opt,name=update_cl,json=updateCl,proto3" json:"update_cl,omitempty"`
	BatchUpdateCl        *changelist.BatchUpdateCLTask       `protobuf:"bytes,14,opt,name=batch_update_cl,json=batchUpdateCl,proto3" json:"batch_update_cl,omitempty"`
	BatchOnClUpdated     *changelist.BatchOnCLUpdatedTask    `protobuf:"bytes,15,opt,name=batch_on_cl_updated,json=batchOnClUpdated,proto3" json:"batch_on_cl_updated,omitempty"`
	RefreshProjectConfig *refresher.RefreshProjectConfigTask `protobuf:"bytes,1,opt,name=refresh_project_config,json=refreshProjectConfig,proto3" json:"refresh_project_config,omitempty"`
	PollGerrit           *poller.PollGerritTask              `protobuf:"bytes,2,opt,name=poll_gerrit,json=pollGerrit,proto3" json:"poll_gerrit,omitempty"`
	ManageProject        *prjpb.ManageProjectTask            `protobuf:"bytes,5,opt,name=manage_project,json=manageProject,proto3" json:"manage_project,omitempty"`
	KickManageProject    *prjpb.KickManageProjectTask        `protobuf:"bytes,6,opt,name=kick_manage_project,json=kickManageProject,proto3" json:"kick_manage_project,omitempty"`
	PurgeCl              *prjpb.PurgeCLTask                  `protobuf:"bytes,7,opt,name=purge_cl,json=purgeCl,proto3" json:"purge_cl,omitempty"`
	ExportRunToBq        *bq.ExportRunToBQTask               `protobuf:"bytes,8,opt,name=export_run_to_bq,json=exportRunToBq,proto3" json:"export_run_to_bq,omitempty"`
	ManageRun            *eventpb.ManageRunTask              `protobuf:"bytes,9,opt,name=manage_run,json=manageRun,proto3" json:"manage_run,omitempty"`
	KickManageRun        *eventpb.KickManageRunTask          `protobuf:"bytes,10,opt,name=kick_manage_run,json=kickManageRun,proto3" json:"kick_manage_run,omitempty"`
	ManageRunLongOp      *eventpb.ManageRunLongOpTask        `protobuf:"bytes,12,opt,name=manage_run_long_op,json=manageRunLongOp,proto3" json:"manage_run_long_op,omitempty"`
	// Optional.
	DeduplicationKey string `protobuf:"bytes,11,opt,name=deduplication_key,json=deduplicationKey,proto3" json:"deduplication_key,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ScheduleTaskRequest) Reset() {
	*x = ScheduleTaskRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScheduleTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTaskRequest) ProtoMessage() {}

func (x *ScheduleTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTaskRequest.ProtoReflect.Descriptor instead.
func (*ScheduleTaskRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{19}
}

func (x *ScheduleTaskRequest) GetUpdateCl() *changelist.UpdateCLTask {
	if x != nil {
		return x.UpdateCl
	}
	return nil
}

func (x *ScheduleTaskRequest) GetBatchUpdateCl() *changelist.BatchUpdateCLTask {
	if x != nil {
		return x.BatchUpdateCl
	}
	return nil
}

func (x *ScheduleTaskRequest) GetBatchOnClUpdated() *changelist.BatchOnCLUpdatedTask {
	if x != nil {
		return x.BatchOnClUpdated
	}
	return nil
}

func (x *ScheduleTaskRequest) GetRefreshProjectConfig() *refresher.RefreshProjectConfigTask {
	if x != nil {
		return x.RefreshProjectConfig
	}
	return nil
}

func (x *ScheduleTaskRequest) GetPollGerrit() *poller.PollGerritTask {
	if x != nil {
		return x.PollGerrit
	}
	return nil
}

func (x *ScheduleTaskRequest) GetManageProject() *prjpb.ManageProjectTask {
	if x != nil {
		return x.ManageProject
	}
	return nil
}

func (x *ScheduleTaskRequest) GetKickManageProject() *prjpb.KickManageProjectTask {
	if x != nil {
		return x.KickManageProject
	}
	return nil
}

func (x *ScheduleTaskRequest) GetPurgeCl() *prjpb.PurgeCLTask {
	if x != nil {
		return x.PurgeCl
	}
	return nil
}

func (x *ScheduleTaskRequest) GetExportRunToBq() *bq.ExportRunToBQTask {
	if x != nil {
		return x.ExportRunToBq
	}
	return nil
}

func (x *ScheduleTaskRequest) GetManageRun() *eventpb.ManageRunTask {
	if x != nil {
		return x.ManageRun
	}
	return nil
}

func (x *ScheduleTaskRequest) GetKickManageRun() *eventpb.KickManageRunTask {
	if x != nil {
		return x.KickManageRun
	}
	return nil
}

func (x *ScheduleTaskRequest) GetManageRunLongOp() *eventpb.ManageRunLongOpTask {
	if x != nil {
		return x.ManageRunLongOp
	}
	return nil
}

func (x *ScheduleTaskRequest) GetDeduplicationKey() string {
	if x != nil {
		return x.DeduplicationKey
	}
	return ""
}

type DSMLaunchJobRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of migration, must be registered in admin/dsmapper.go.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSMLaunchJobRequest) Reset() {
	*x = DSMLaunchJobRequest{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSMLaunchJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSMLaunchJobRequest) ProtoMessage() {}

func (x *DSMLaunchJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSMLaunchJobRequest.ProtoReflect.Descriptor instead.
func (*DSMLaunchJobRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{20}
}

func (x *DSMLaunchJobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DSMJobID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSMJobID) Reset() {
	*x = DSMJobID{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSMJobID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSMJobID) ProtoMessage() {}

func (x *DSMJobID) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSMJobID.ProtoReflect.Descriptor instead.
func (*DSMJobID) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{21}
}

func (x *DSMJobID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DSMJob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name as registered is admin/dsmapper.go.
	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Info          *dsmapperpb.JobInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSMJob) Reset() {
	*x = DSMJob{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSMJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSMJob) ProtoMessage() {}

func (x *DSMJob) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSMJob.ProtoReflect.Descriptor instead.
func (*DSMJob) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{22}
}

func (x *DSMJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DSMJob) GetInfo() *dsmapperpb.JobInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRunResponse_CL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId    string                 `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Detail        *changelist.Snapshot   `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	Trigger       *run.Trigger           `protobuf:"bytes,4,opt,name=trigger,proto3" json:"trigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRunResponse_CL) Reset() {
	*x = GetRunResponse_CL{}
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRunResponse_CL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunResponse_CL) ProtoMessage() {}

func (x *GetRunResponse_CL) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunResponse_CL.ProtoReflect.Descriptor instead.
func (*GetRunResponse_CL) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetRunResponse_CL) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetRunResponse_CL) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *GetRunResponse_CL) GetDetail() *changelist.Snapshot {
	if x != nil {
		return x.Detail
	}
	return nil
}

func (x *GetRunResponse_CL) GetTrigger() *run.Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

var File_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDesc = string([]byte{
	0x0a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x63, 0x76,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x64, 0x73, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x2f, 0x64, 0x73, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69,
	0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63,
	0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2f, 0x70, 0x72, 0x6a, 0x63, 0x66, 0x67, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63,
	0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6a, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63,
	0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6a, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6a, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6a, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6a, 0x70, 0x62, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63,
	0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x62,
	0x71, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x72, 0x75, 0x6e, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63,
	0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70,
	0x62, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8d,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6a, 0x70, 0x62, 0x2e, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6a, 0x70, 0x62,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb3,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x78, 0x22, 0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x72, 0x6a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6a,
	0x70, 0x62, 0x2e, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6a,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6a, 0x70, 0x62, 0x2e, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x22, 0x21, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x75, 0x6e, 0x22, 0xba, 0x09, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e,
	0x0a, 0x03, 0x63, 0x6c, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x76,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x4c, 0x52, 0x03, 0x63, 0x6c, 0x73, 0x12, 0x32,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x73,
	0x52, 0x07, 0x74, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x49, 0x0a, 0x10, 0x6f, 0x6e, 0x67,
	0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x6e,
	0x67, 0x4f, 0x70, 0x73, 0x52, 0x0e, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x6e,
	0x67, 0x4f, 0x70, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x73, 0x5f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x73, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x3a, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a,
	0xa3, 0x01, 0x0a, 0x02, 0x43, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0f, 0x10,
	0x10, 0x22, 0x5e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x55, 0x72,
	0x6c, 0x22, 0x8f, 0x03, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x75, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x49, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x4c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x18, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x4c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x0b, 0x63, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x17, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6a, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6a, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x34,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72,
	0x75, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x02, 0x63, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x02, 0x63, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x75,
	0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc0, 0x08, 0x0a, 0x13, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x4c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x12, 0x51, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x4c,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x12, 0x5b, 0x0a, 0x13, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4f,
	0x6e, 0x43, 0x4c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x10,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6e, 0x43, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x74, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6a, 0x63, 0x66, 0x67, 0x2e, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x67,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x76,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x47, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x47, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x76, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6a, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6a, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6a, 0x70, 0x62, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x11, 0x6b, 0x69,
	0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x44, 0x0a, 0x08, 0x70, 0x75, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6a, 0x70, 0x62,
	0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x43, 0x4c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x70, 0x75,
	0x72, 0x67, 0x65, 0x43, 0x6c, 0x12, 0x4e, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75,
	0x6e, 0x2e, 0x62, 0x71, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6e, 0x54, 0x6f,
	0x42, 0x51, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x75,
	0x6e, 0x54, 0x6f, 0x42, 0x71, 0x12, 0x45, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x52, 0x0a, 0x0f,
	0x6b, 0x69, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e,
	0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e,
	0x12, 0x59, 0x0a, 0x12, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x75, 0x6e, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e,
	0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x4f, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x64,
	0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x29, 0x0a, 0x13, 0x44, 0x53, 0x4d, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x08, 0x44, 0x53, 0x4d, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x4f, 0x0a, 0x06, 0x44, 0x53, 0x4d, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x64, 0x73, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x32, 0xad, 0x0d, 0x0a, 0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x69, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x30, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x47,
	0x65, 0x74, 0x43, 0x4c, 0x12, 0x27, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x2c, 0x2e,
	0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x76,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x44, 0x53, 0x4d, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x53, 0x4d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x53, 0x4d, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x09, 0x44, 0x53, 0x4d,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x53, 0x4d, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x1a, 0x21, 0x2e, 0x63, 0x76,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x53, 0x4d, 0x4a, 0x6f, 0x62, 0x12, 0x4a,
	0x0a, 0x0b, 0x44, 0x53, 0x4d, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x2e,
	0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x53, 0x4d, 0x4a, 0x6f, 0x62,
	0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7e, 0x0a, 0x11, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x4c, 0x73, 0x12,
	0x33, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5e, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x56, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2e, 0x2e, 0x63, 0x76, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x0c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x2e, 0x63, 0x76, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x4f, 0x70, 0x73, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x70, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x4f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x38, 0x5a, 0x36, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescData []byte
)

func file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDesc), len(file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDescData
}

var file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_goTypes = []any{
	(*GetProjectRequest)(nil),                  // 0: cv.internal.rpc.admin.api.GetProjectRequest
	(*GetProjectResponse)(nil),                 // 1: cv.internal.rpc.admin.api.GetProjectResponse
	(*GetProjectLogsRequest)(nil),              // 2: cv.internal.rpc.admin.api.GetProjectLogsRequest
	(*GetProjectLogsResponse)(nil),             // 3: cv.internal.rpc.admin.api.GetProjectLogsResponse
	(*ProjectLog)(nil),                         // 4: cv.internal.rpc.admin.api.ProjectLog
	(*GetRunRequest)(nil),                      // 5: cv.internal.rpc.admin.api.GetRunRequest
	(*GetRunResponse)(nil),                     // 6: cv.internal.rpc.admin.api.GetRunResponse
	(*GetCLRequest)(nil),                       // 7: cv.internal.rpc.admin.api.GetCLRequest
	(*GetCLResponse)(nil),                      // 8: cv.internal.rpc.admin.api.GetCLResponse
	(*GetPollerRequest)(nil),                   // 9: cv.internal.rpc.admin.api.GetPollerRequest
	(*GetPollerResponse)(nil),                  // 10: cv.internal.rpc.admin.api.GetPollerResponse
	(*DeleteProjectEventsRequest)(nil),         // 11: cv.internal.rpc.admin.api.DeleteProjectEventsRequest
	(*DeleteProjectEventsResponse)(nil),        // 12: cv.internal.rpc.admin.api.DeleteProjectEventsResponse
	(*RefreshProjectCLsRequest)(nil),           // 13: cv.internal.rpc.admin.api.RefreshProjectCLsRequest
	(*RefreshProjectCLsResponse)(nil),          // 14: cv.internal.rpc.admin.api.RefreshProjectCLsResponse
	(*SendProjectEventRequest)(nil),            // 15: cv.internal.rpc.admin.api.SendProjectEventRequest
	(*SendRunEventRequest)(nil),                // 16: cv.internal.rpc.admin.api.SendRunEventRequest
	(*SearchRunsRequest)(nil),                  // 17: cv.internal.rpc.admin.api.SearchRunsRequest
	(*RunsResponse)(nil),                       // 18: cv.internal.rpc.admin.api.RunsResponse
	(*ScheduleTaskRequest)(nil),                // 19: cv.internal.rpc.admin.api.ScheduleTaskRequest
	(*DSMLaunchJobRequest)(nil),                // 20: cv.internal.rpc.admin.api.DSMLaunchJobRequest
	(*DSMJobID)(nil),                           // 21: cv.internal.rpc.admin.api.DSMJobID
	(*DSMJob)(nil),                             // 22: cv.internal.rpc.admin.api.DSMJob
	(*GetRunResponse_CL)(nil),                  // 23: cv.internal.rpc.admin.api.GetRunResponse.CL
	nil,                                        // 24: cv.internal.rpc.admin.api.DeleteProjectEventsResponse.EventsEntry
	nil,                                        // 25: cv.internal.rpc.admin.api.RefreshProjectCLsResponse.ClVersionsEntry
	(*prjpb.PState)(nil),                       // 26: cv.internal.prjmanager.prjpb.PState
	(*prjpb.Event)(nil),                        // 27: cv.internal.prjmanager.prjpb.Event
	(*timestamppb.Timestamp)(nil),              // 28: google.protobuf.Timestamp
	(*prjpb.LogReasons)(nil),                   // 29: cv.internal.prjmanager.prjpb.LogReasons
	(run.Status)(0),                            // 30: cv.internal.run.Status
	(*run.Options)(nil),                        // 31: cv.internal.run.Options
	(*run.Tryjobs)(nil),                        // 32: cv.internal.run.Tryjobs
	(*run.OngoingLongOps)(nil),                 // 33: cv.internal.run.OngoingLongOps
	(*run.Submission)(nil),                     // 34: cv.internal.run.Submission
	(*run.LogEntry)(nil),                       // 35: cv.internal.run.LogEntry
	(*eventpb.Event)(nil),                      // 36: cv.internal.run.eventpb.Event
	(*changelist.Snapshot)(nil),                // 37: cv.internal.changelist.Snapshot
	(*changelist.ApplicableConfig)(nil),        // 38: cv.internal.changelist.ApplicableConfig
	(*changelist.Access)(nil),                  // 39: cv.internal.changelist.Access
	(*poller.QueryStates)(nil),                 // 40: cv.internal.gerrit.poller.QueryStates
	(*changelist.UpdateCLTask)(nil),            // 41: cv.internal.changelist.UpdateCLTask
	(*changelist.BatchUpdateCLTask)(nil),       // 42: cv.internal.changelist.BatchUpdateCLTask
	(*changelist.BatchOnCLUpdatedTask)(nil),    // 43: cv.internal.changelist.BatchOnCLUpdatedTask
	(*refresher.RefreshProjectConfigTask)(nil), // 44: cv.internal.configs.prjcfg.refresher.RefreshProjectConfigTask
	(*poller.PollGerritTask)(nil),              // 45: cv.internal.gerrit.poller.PollGerritTask
	(*prjpb.ManageProjectTask)(nil),            // 46: cv.internal.prjmanager.prjpb.ManageProjectTask
	(*prjpb.KickManageProjectTask)(nil),        // 47: cv.internal.prjmanager.prjpb.KickManageProjectTask
	(*prjpb.PurgeCLTask)(nil),                  // 48: cv.internal.prjmanager.prjpb.PurgeCLTask
	(*bq.ExportRunToBQTask)(nil),               // 49: cv.internal.run.bq.ExportRunToBQTask
	(*eventpb.ManageRunTask)(nil),              // 50: cv.internal.run.eventpb.ManageRunTask
	(*eventpb.KickManageRunTask)(nil),          // 51: cv.internal.run.eventpb.KickManageRunTask
	(*eventpb.ManageRunLongOpTask)(nil),        // 52: cv.internal.run.eventpb.ManageRunLongOpTask
	(*dsmapperpb.JobInfo)(nil),                 // 53: luci.server.dsmapper.JobInfo
	(*run.Trigger)(nil),                        // 54: cv.internal.run.Trigger
	(*quotapb.GetAccountsRequest)(nil),         // 55: go.chromium.org.luci.server.quota.quotapb.GetAccountsRequest
	(*quotapb.ApplyOpsRequest)(nil),            // 56: go.chromium.org.luci.server.quota.quotapb.ApplyOpsRequest
	(*emptypb.Empty)(nil),                      // 57: google.protobuf.Empty
	(*quotapb.GetAccountsResponse)(nil),        // 58: go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse
	(*quotapb.ApplyOpsResponse)(nil),           // 59: go.chromium.org.luci.server.quota.quotapb.ApplyOpsResponse
}
var file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_depIdxs = []int32{
	26, // 0: cv.internal.rpc.admin.api.GetProjectResponse.state:type_name -> cv.internal.prjmanager.prjpb.PState
	27, // 1: cv.internal.rpc.admin.api.GetProjectResponse.events:type_name -> cv.internal.prjmanager.prjpb.Event
	4,  // 2: cv.internal.rpc.admin.api.GetProjectLogsResponse.logs:type_name -> cv.internal.rpc.admin.api.ProjectLog
	26, // 3: cv.internal.rpc.admin.api.ProjectLog.state:type_name -> cv.internal.prjmanager.prjpb.PState
	28, // 4: cv.internal.rpc.admin.api.ProjectLog.update_time:type_name -> google.protobuf.Timestamp
	29, // 5: cv.internal.rpc.admin.api.ProjectLog.reasons:type_name -> cv.internal.prjmanager.prjpb.LogReasons
	30, // 6: cv.internal.rpc.admin.api.GetRunResponse.status:type_name -> cv.internal.run.Status
	28, // 7: cv.internal.rpc.admin.api.GetRunResponse.create_time:type_name -> google.protobuf.Timestamp
	28, // 8: cv.internal.rpc.admin.api.GetRunResponse.start_time:type_name -> google.protobuf.Timestamp
	28, // 9: cv.internal.rpc.admin.api.GetRunResponse.update_time:type_name -> google.protobuf.Timestamp
	28, // 10: cv.internal.rpc.admin.api.GetRunResponse.end_time:type_name -> google.protobuf.Timestamp
	23, // 11: cv.internal.rpc.admin.api.GetRunResponse.cls:type_name -> cv.internal.rpc.admin.api.GetRunResponse.CL
	31, // 12: cv.internal.rpc.admin.api.GetRunResponse.options:type_name -> cv.internal.run.Options
	32, // 13: cv.internal.rpc.admin.api.GetRunResponse.tryjobs:type_name -> cv.internal.run.Tryjobs
	33, // 14: cv.internal.rpc.admin.api.GetRunResponse.ongoing_long_ops:type_name -> cv.internal.run.OngoingLongOps
	34, // 15: cv.internal.rpc.admin.api.GetRunResponse.submission:type_name -> cv.internal.run.Submission
	28, // 16: cv.internal.rpc.admin.api.GetRunResponse.latest_cls_refresh:type_name -> google.protobuf.Timestamp
	35, // 17: cv.internal.rpc.admin.api.GetRunResponse.log_entries:type_name -> cv.internal.run.LogEntry
	36, // 18: cv.internal.rpc.admin.api.GetRunResponse.events:type_name -> cv.internal.run.eventpb.Event
	28, // 19: cv.internal.rpc.admin.api.GetCLResponse.update_time:type_name -> google.protobuf.Timestamp
	37, // 20: cv.internal.rpc.admin.api.GetCLResponse.snapshot:type_name -> cv.internal.changelist.Snapshot
	38, // 21: cv.internal.rpc.admin.api.GetCLResponse.applicable_config:type_name -> cv.internal.changelist.ApplicableConfig
	39, // 22: cv.internal.rpc.admin.api.GetCLResponse.access:type_name -> cv.internal.changelist.Access
	28, // 23: cv.internal.rpc.admin.api.GetPollerResponse.update_time:type_name -> google.protobuf.Timestamp
	40, // 24: cv.internal.rpc.admin.api.GetPollerResponse.query_states:type_name -> cv.internal.gerrit.poller.QueryStates
	24, // 25: cv.internal.rpc.admin.api.DeleteProjectEventsResponse.events:type_name -> cv.internal.rpc.admin.api.DeleteProjectEventsResponse.EventsEntry
	25, // 26: cv.internal.rpc.admin.api.RefreshProjectCLsResponse.cl_versions:type_name -> cv.internal.rpc.admin.api.RefreshProjectCLsResponse.ClVersionsEntry
	27, // 27: cv.internal.rpc.admin.api.SendProjectEventRequest.event:type_name -> cv.internal.prjmanager.prjpb.Event
	36, // 28: cv.internal.rpc.admin.api.SendRunEventRequest.event:type_name -> cv.internal.run.eventpb.Event
	30, // 29: cv.internal.rpc.admin.api.SearchRunsRequest.status:type_name -> cv.internal.run.Status
	7,  // 30: cv.internal.rpc.admin.api.SearchRunsRequest.cl:type_name -> cv.internal.rpc.admin.api.GetCLRequest
	6,  // 31: cv.internal.rpc.admin.api.RunsResponse.runs:type_name -> cv.internal.rpc.admin.api.GetRunResponse
	41, // 32: cv.internal.rpc.admin.api.ScheduleTaskRequest.update_cl:type_name -> cv.internal.changelist.UpdateCLTask
	42, // 33: cv.internal.rpc.admin.api.ScheduleTaskRequest.batch_update_cl:type_name -> cv.internal.changelist.BatchUpdateCLTask
	43, // 34: cv.internal.rpc.admin.api.ScheduleTaskRequest.batch_on_cl_updated:type_name -> cv.internal.changelist.BatchOnCLUpdatedTask
	44, // 35: cv.internal.rpc.admin.api.ScheduleTaskRequest.refresh_project_config:type_name -> cv.internal.configs.prjcfg.refresher.RefreshProjectConfigTask
	45, // 36: cv.internal.rpc.admin.api.ScheduleTaskRequest.poll_gerrit:type_name -> cv.internal.gerrit.poller.PollGerritTask
	46, // 37: cv.internal.rpc.admin.api.ScheduleTaskRequest.manage_project:type_name -> cv.internal.prjmanager.prjpb.ManageProjectTask
	47, // 38: cv.internal.rpc.admin.api.ScheduleTaskRequest.kick_manage_project:type_name -> cv.internal.prjmanager.prjpb.KickManageProjectTask
	48, // 39: cv.internal.rpc.admin.api.ScheduleTaskRequest.purge_cl:type_name -> cv.internal.prjmanager.prjpb.PurgeCLTask
	49, // 40: cv.internal.rpc.admin.api.ScheduleTaskRequest.export_run_to_bq:type_name -> cv.internal.run.bq.ExportRunToBQTask
	50, // 41: cv.internal.rpc.admin.api.ScheduleTaskRequest.manage_run:type_name -> cv.internal.run.eventpb.ManageRunTask
	51, // 42: cv.internal.rpc.admin.api.ScheduleTaskRequest.kick_manage_run:type_name -> cv.internal.run.eventpb.KickManageRunTask
	52, // 43: cv.internal.rpc.admin.api.ScheduleTaskRequest.manage_run_long_op:type_name -> cv.internal.run.eventpb.ManageRunLongOpTask
	53, // 44: cv.internal.rpc.admin.api.DSMJob.info:type_name -> luci.server.dsmapper.JobInfo
	37, // 45: cv.internal.rpc.admin.api.GetRunResponse.CL.detail:type_name -> cv.internal.changelist.Snapshot
	54, // 46: cv.internal.rpc.admin.api.GetRunResponse.CL.trigger:type_name -> cv.internal.run.Trigger
	0,  // 47: cv.internal.rpc.admin.api.Admin.GetProject:input_type -> cv.internal.rpc.admin.api.GetProjectRequest
	2,  // 48: cv.internal.rpc.admin.api.Admin.GetProjectLogs:input_type -> cv.internal.rpc.admin.api.GetProjectLogsRequest
	5,  // 49: cv.internal.rpc.admin.api.Admin.GetRun:input_type -> cv.internal.rpc.admin.api.GetRunRequest
	7,  // 50: cv.internal.rpc.admin.api.Admin.GetCL:input_type -> cv.internal.rpc.admin.api.GetCLRequest
	9,  // 51: cv.internal.rpc.admin.api.Admin.GetPoller:input_type -> cv.internal.rpc.admin.api.GetPollerRequest
	17, // 52: cv.internal.rpc.admin.api.Admin.SearchRuns:input_type -> cv.internal.rpc.admin.api.SearchRunsRequest
	20, // 53: cv.internal.rpc.admin.api.Admin.DSMLaunchJob:input_type -> cv.internal.rpc.admin.api.DSMLaunchJobRequest
	21, // 54: cv.internal.rpc.admin.api.Admin.DSMGetJob:input_type -> cv.internal.rpc.admin.api.DSMJobID
	21, // 55: cv.internal.rpc.admin.api.Admin.DSMAbortJob:input_type -> cv.internal.rpc.admin.api.DSMJobID
	13, // 56: cv.internal.rpc.admin.api.Admin.RefreshProjectCLs:input_type -> cv.internal.rpc.admin.api.RefreshProjectCLsRequest
	11, // 57: cv.internal.rpc.admin.api.Admin.DeleteProjectEvents:input_type -> cv.internal.rpc.admin.api.DeleteProjectEventsRequest
	15, // 58: cv.internal.rpc.admin.api.Admin.SendProjectEvent:input_type -> cv.internal.rpc.admin.api.SendProjectEventRequest
	16, // 59: cv.internal.rpc.admin.api.Admin.SendRunEvent:input_type -> cv.internal.rpc.admin.api.SendRunEventRequest
	19, // 60: cv.internal.rpc.admin.api.Admin.ScheduleTask:input_type -> cv.internal.rpc.admin.api.ScheduleTaskRequest
	55, // 61: cv.internal.rpc.admin.api.Admin.GetQuotaAccounts:input_type -> go.chromium.org.luci.server.quota.quotapb.GetAccountsRequest
	56, // 62: cv.internal.rpc.admin.api.Admin.ApplyQuotaOps:input_type -> go.chromium.org.luci.server.quota.quotapb.ApplyOpsRequest
	1,  // 63: cv.internal.rpc.admin.api.Admin.GetProject:output_type -> cv.internal.rpc.admin.api.GetProjectResponse
	3,  // 64: cv.internal.rpc.admin.api.Admin.GetProjectLogs:output_type -> cv.internal.rpc.admin.api.GetProjectLogsResponse
	6,  // 65: cv.internal.rpc.admin.api.Admin.GetRun:output_type -> cv.internal.rpc.admin.api.GetRunResponse
	8,  // 66: cv.internal.rpc.admin.api.Admin.GetCL:output_type -> cv.internal.rpc.admin.api.GetCLResponse
	10, // 67: cv.internal.rpc.admin.api.Admin.GetPoller:output_type -> cv.internal.rpc.admin.api.GetPollerResponse
	18, // 68: cv.internal.rpc.admin.api.Admin.SearchRuns:output_type -> cv.internal.rpc.admin.api.RunsResponse
	21, // 69: cv.internal.rpc.admin.api.Admin.DSMLaunchJob:output_type -> cv.internal.rpc.admin.api.DSMJobID
	22, // 70: cv.internal.rpc.admin.api.Admin.DSMGetJob:output_type -> cv.internal.rpc.admin.api.DSMJob
	57, // 71: cv.internal.rpc.admin.api.Admin.DSMAbortJob:output_type -> google.protobuf.Empty
	14, // 72: cv.internal.rpc.admin.api.Admin.RefreshProjectCLs:output_type -> cv.internal.rpc.admin.api.RefreshProjectCLsResponse
	12, // 73: cv.internal.rpc.admin.api.Admin.DeleteProjectEvents:output_type -> cv.internal.rpc.admin.api.DeleteProjectEventsResponse
	57, // 74: cv.internal.rpc.admin.api.Admin.SendProjectEvent:output_type -> google.protobuf.Empty
	57, // 75: cv.internal.rpc.admin.api.Admin.SendRunEvent:output_type -> google.protobuf.Empty
	57, // 76: cv.internal.rpc.admin.api.Admin.ScheduleTask:output_type -> google.protobuf.Empty
	58, // 77: cv.internal.rpc.admin.api.Admin.GetQuotaAccounts:output_type -> go.chromium.org.luci.server.quota.quotapb.GetAccountsResponse
	59, // 78: cv.internal.rpc.admin.api.Admin.ApplyQuotaOps:output_type -> go.chromium.org.luci.server.quota.quotapb.ApplyOpsResponse
	63, // [63:79] is the sub-list for method output_type
	47, // [47:63] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_init() }
func file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_init() {
	if File_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDesc), len(file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto = out.File
	file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_goTypes = nil
	file_go_chromium_org_luci_cv_internal_rpc_admin_api_admin_proto_depIdxs = nil
}
