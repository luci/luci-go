// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/cv/internal/rpc/admin/api/admin.proto

package adminpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	run "go.chromium.org/luci/cv/internal/run"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = run.Status(0)
)

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectRequestMultiError, or nil if none found.
func (m *GetProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	if len(errors) > 0 {
		return GetProjectRequestMultiError(errors)
	}

	return nil
}

// GetProjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectRequestMultiError) AllErrors() []error { return m }

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResponseMultiError, or nil if none found.
func (m *GetProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProjectResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProjectResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProjectResponseMultiError(errors)
	}

	return nil
}

// GetProjectResponseMultiError is an error wrapping multiple validation errors
// returned by GetProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResponseMultiError) AllErrors() []error { return m }

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on GetProjectLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectLogsRequestMultiError, or nil if none found.
func (m *GetProjectLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for Project

	// no validation rules for EversionMin

	// no validation rules for EversionMax

	if len(errors) > 0 {
		return GetProjectLogsRequestMultiError(errors)
	}

	return nil
}

// GetProjectLogsRequestMultiError is an error wrapping multiple validation
// errors returned by GetProjectLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProjectLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectLogsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectLogsRequestMultiError) AllErrors() []error { return m }

// GetProjectLogsRequestValidationError is the validation error returned by
// GetProjectLogsRequest.Validate if the designated constraints aren't met.
type GetProjectLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectLogsRequestValidationError) ErrorName() string {
	return "GetProjectLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectLogsRequestValidationError{}

// Validate checks the field values on GetProjectLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectLogsResponseMultiError, or nil if none found.
func (m *GetProjectLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetProjectLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetProjectLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectLogsResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetProjectLogsResponseMultiError(errors)
	}

	return nil
}

// GetProjectLogsResponseMultiError is an error wrapping multiple validation
// errors returned by GetProjectLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProjectLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectLogsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectLogsResponseMultiError) AllErrors() []error { return m }

// GetProjectLogsResponseValidationError is the validation error returned by
// GetProjectLogsResponse.Validate if the designated constraints aren't met.
type GetProjectLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectLogsResponseValidationError) ErrorName() string {
	return "GetProjectLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectLogsResponseValidationError{}

// Validate checks the field values on ProjectLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProjectLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProjectLogMultiError, or
// nil if none found.
func (m *ProjectLog) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Eversion

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectLogValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectLogValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectLogValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectLogValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectLogValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectLogValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReasons()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectLogValidationError{
					field:  "Reasons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectLogValidationError{
					field:  "Reasons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReasons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectLogValidationError{
				field:  "Reasons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectLogMultiError(errors)
	}

	return nil
}

// ProjectLogMultiError is an error wrapping multiple validation errors
// returned by ProjectLog.ValidateAll() if the designated constraints aren't met.
type ProjectLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectLogMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectLogMultiError) AllErrors() []error { return m }

// ProjectLogValidationError is the validation error returned by
// ProjectLog.Validate if the designated constraints aren't met.
type ProjectLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLogValidationError) ErrorName() string { return "ProjectLogValidationError" }

// Error satisfies the builtin error interface
func (e ProjectLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLogValidationError{}

// Validate checks the field values on GetRunRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRunRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRunRequestMultiError, or
// nil if none found.
func (m *GetRunRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Run

	if len(errors) > 0 {
		return GetRunRequestMultiError(errors)
	}

	return nil
}

// GetRunRequestMultiError is an error wrapping multiple validation errors
// returned by GetRunRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRunRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunRequestMultiError) AllErrors() []error { return m }

// GetRunRequestValidationError is the validation error returned by
// GetRunRequest.Validate if the designated constraints aren't met.
type GetRunRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunRequestValidationError) ErrorName() string { return "GetRunRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRunRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunRequestValidationError{}

// Validate checks the field values on GetRunResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRunResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRunResponseMultiError,
// or nil if none found.
func (m *GetRunResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Eversion

	// no validation rules for Mode

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Owner

	// no validation rules for CreatedBy

	// no validation rules for BilledTo

	// no validation rules for ConfigGroupId

	for idx, item := range m.GetCls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRunResponseValidationError{
						field:  fmt.Sprintf("Cls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRunResponseValidationError{
						field:  fmt.Sprintf("Cls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRunResponseValidationError{
					field:  fmt.Sprintf("Cls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTryjobs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Tryjobs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Tryjobs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTryjobs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "Tryjobs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOngoingLongOps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "OngoingLongOps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "OngoingLongOps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOngoingLongOps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "OngoingLongOps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSubmission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "Submission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLatestClsRefresh()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "LatestClsRefresh",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponseValidationError{
					field:  "LatestClsRefresh",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLatestClsRefresh()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponseValidationError{
				field:  "LatestClsRefresh",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLogEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRunResponseValidationError{
						field:  fmt.Sprintf("LogEntries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRunResponseValidationError{
						field:  fmt.Sprintf("LogEntries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRunResponseValidationError{
					field:  fmt.Sprintf("LogEntries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRunResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRunResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRunResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRunResponseMultiError(errors)
	}

	return nil
}

// GetRunResponseMultiError is an error wrapping multiple validation errors
// returned by GetRunResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRunResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunResponseMultiError) AllErrors() []error { return m }

// GetRunResponseValidationError is the validation error returned by
// GetRunResponse.Validate if the designated constraints aren't met.
type GetRunResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunResponseValidationError) ErrorName() string { return "GetRunResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRunResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunResponseValidationError{}

// Validate checks the field values on GetCLRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCLRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCLRequestMultiError, or
// nil if none found.
func (m *GetCLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ExternalId

	// no validation rules for GerritUrl

	if len(errors) > 0 {
		return GetCLRequestMultiError(errors)
	}

	return nil
}

// GetCLRequestMultiError is an error wrapping multiple validation errors
// returned by GetCLRequest.ValidateAll() if the designated constraints aren't met.
type GetCLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCLRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCLRequestMultiError) AllErrors() []error { return m }

// GetCLRequestValidationError is the validation error returned by
// GetCLRequest.Validate if the designated constraints aren't met.
type GetCLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCLRequestValidationError) ErrorName() string { return "GetCLRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCLRequestValidationError{}

// Validate checks the field values on GetCLResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCLResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCLResponseMultiError, or
// nil if none found.
func (m *GetCLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Eversion

	// no validation rules for ExternalId

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLResponseValidationError{
				field:  "Snapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetApplicableConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "ApplicableConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "ApplicableConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplicableConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLResponseValidationError{
				field:  "ApplicableConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLResponseValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCLResponseMultiError(errors)
	}

	return nil
}

// GetCLResponseMultiError is an error wrapping multiple validation errors
// returned by GetCLResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCLResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCLResponseMultiError) AllErrors() []error { return m }

// GetCLResponseValidationError is the validation error returned by
// GetCLResponse.Validate if the designated constraints aren't met.
type GetCLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCLResponseValidationError) ErrorName() string { return "GetCLResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCLResponseValidationError{}

// Validate checks the field values on GetPollerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPollerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPollerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPollerRequestMultiError, or nil if none found.
func (m *GetPollerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPollerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	if len(errors) > 0 {
		return GetPollerRequestMultiError(errors)
	}

	return nil
}

// GetPollerRequestMultiError is an error wrapping multiple validation errors
// returned by GetPollerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPollerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPollerRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPollerRequestMultiError) AllErrors() []error { return m }

// GetPollerRequestValidationError is the validation error returned by
// GetPollerRequest.Validate if the designated constraints aren't met.
type GetPollerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollerRequestValidationError) ErrorName() string { return "GetPollerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPollerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollerRequestValidationError{}

// Validate checks the field values on GetPollerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPollerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPollerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPollerResponseMultiError, or nil if none found.
func (m *GetPollerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPollerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Eversion

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPollerResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPollerResponseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPollerResponseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConfigHash

	if all {
		switch v := interface{}(m.GetQueryStates()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPollerResponseValidationError{
					field:  "QueryStates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPollerResponseValidationError{
					field:  "QueryStates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueryStates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPollerResponseValidationError{
				field:  "QueryStates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPollerResponseMultiError(errors)
	}

	return nil
}

// GetPollerResponseMultiError is an error wrapping multiple validation errors
// returned by GetPollerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPollerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPollerResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPollerResponseMultiError) AllErrors() []error { return m }

// GetPollerResponseValidationError is the validation error returned by
// GetPollerResponse.Validate if the designated constraints aren't met.
type GetPollerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollerResponseValidationError) ErrorName() string {
	return "GetPollerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPollerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollerResponseValidationError{}

// Validate checks the field values on DeleteProjectEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectEventsRequestMultiError, or nil if none found.
func (m *DeleteProjectEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	// no validation rules for Limit

	if len(errors) > 0 {
		return DeleteProjectEventsRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectEventsRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectEventsRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectEventsRequestMultiError) AllErrors() []error { return m }

// DeleteProjectEventsRequestValidationError is the validation error returned
// by DeleteProjectEventsRequest.Validate if the designated constraints aren't met.
type DeleteProjectEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectEventsRequestValidationError) ErrorName() string {
	return "DeleteProjectEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectEventsRequestValidationError{}

// Validate checks the field values on DeleteProjectEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectEventsResponseMultiError, or nil if none found.
func (m *DeleteProjectEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Events

	if len(errors) > 0 {
		return DeleteProjectEventsResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectEventsResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectEventsResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectEventsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectEventsResponseMultiError) AllErrors() []error { return m }

// DeleteProjectEventsResponseValidationError is the validation error returned
// by DeleteProjectEventsResponse.Validate if the designated constraints
// aren't met.
type DeleteProjectEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectEventsResponseValidationError) ErrorName() string {
	return "DeleteProjectEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectEventsResponseValidationError{}

// Validate checks the field values on RefreshProjectCLsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshProjectCLsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshProjectCLsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshProjectCLsRequestMultiError, or nil if none found.
func (m *RefreshProjectCLsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshProjectCLsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	if len(errors) > 0 {
		return RefreshProjectCLsRequestMultiError(errors)
	}

	return nil
}

// RefreshProjectCLsRequestMultiError is an error wrapping multiple validation
// errors returned by RefreshProjectCLsRequest.ValidateAll() if the designated
// constraints aren't met.
type RefreshProjectCLsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshProjectCLsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshProjectCLsRequestMultiError) AllErrors() []error { return m }

// RefreshProjectCLsRequestValidationError is the validation error returned by
// RefreshProjectCLsRequest.Validate if the designated constraints aren't met.
type RefreshProjectCLsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshProjectCLsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshProjectCLsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshProjectCLsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshProjectCLsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshProjectCLsRequestValidationError) ErrorName() string {
	return "RefreshProjectCLsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshProjectCLsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshProjectCLsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshProjectCLsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshProjectCLsRequestValidationError{}

// Validate checks the field values on RefreshProjectCLsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshProjectCLsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshProjectCLsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshProjectCLsResponseMultiError, or nil if none found.
func (m *RefreshProjectCLsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshProjectCLsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClVersions

	if len(errors) > 0 {
		return RefreshProjectCLsResponseMultiError(errors)
	}

	return nil
}

// RefreshProjectCLsResponseMultiError is an error wrapping multiple validation
// errors returned by RefreshProjectCLsResponse.ValidateAll() if the
// designated constraints aren't met.
type RefreshProjectCLsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshProjectCLsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshProjectCLsResponseMultiError) AllErrors() []error { return m }

// RefreshProjectCLsResponseValidationError is the validation error returned by
// RefreshProjectCLsResponse.Validate if the designated constraints aren't met.
type RefreshProjectCLsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshProjectCLsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshProjectCLsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshProjectCLsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshProjectCLsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshProjectCLsResponseValidationError) ErrorName() string {
	return "RefreshProjectCLsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshProjectCLsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshProjectCLsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshProjectCLsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshProjectCLsResponseValidationError{}

// Validate checks the field values on SendProjectEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendProjectEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendProjectEventRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendProjectEventRequestMultiError, or nil if none found.
func (m *SendProjectEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendProjectEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendProjectEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendProjectEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendProjectEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendProjectEventRequestMultiError(errors)
	}

	return nil
}

// SendProjectEventRequestMultiError is an error wrapping multiple validation
// errors returned by SendProjectEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SendProjectEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendProjectEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendProjectEventRequestMultiError) AllErrors() []error { return m }

// SendProjectEventRequestValidationError is the validation error returned by
// SendProjectEventRequest.Validate if the designated constraints aren't met.
type SendProjectEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendProjectEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendProjectEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendProjectEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendProjectEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendProjectEventRequestValidationError) ErrorName() string {
	return "SendProjectEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendProjectEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendProjectEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendProjectEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendProjectEventRequestValidationError{}

// Validate checks the field values on SendRunEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendRunEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendRunEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendRunEventRequestMultiError, or nil if none found.
func (m *SendRunEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendRunEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Run

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendRunEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendRunEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendRunEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendRunEventRequestMultiError(errors)
	}

	return nil
}

// SendRunEventRequestMultiError is an error wrapping multiple validation
// errors returned by SendRunEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SendRunEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendRunEventRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendRunEventRequestMultiError) AllErrors() []error { return m }

// SendRunEventRequestValidationError is the validation error returned by
// SendRunEventRequest.Validate if the designated constraints aren't met.
type SendRunEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendRunEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendRunEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendRunEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendRunEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendRunEventRequestValidationError) ErrorName() string {
	return "SendRunEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendRunEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendRunEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendRunEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendRunEventRequestValidationError{}

// Validate checks the field values on SearchRunsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SearchRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchRunsRequestMultiError, or nil if none found.
func (m *SearchRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for Project

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchRunsRequestValidationError{
					field:  "Cl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchRunsRequestValidationError{
					field:  "Cl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchRunsRequestValidationError{
				field:  "Cl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Mode

	if len(errors) > 0 {
		return SearchRunsRequestMultiError(errors)
	}

	return nil
}

// SearchRunsRequestMultiError is an error wrapping multiple validation errors
// returned by SearchRunsRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchRunsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchRunsRequestMultiError) AllErrors() []error { return m }

// SearchRunsRequestValidationError is the validation error returned by
// SearchRunsRequest.Validate if the designated constraints aren't met.
type SearchRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchRunsRequestValidationError) ErrorName() string {
	return "SearchRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchRunsRequestValidationError{}

// Validate checks the field values on RunsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunsResponseMultiError, or
// nil if none found.
func (m *RunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunsResponseValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return RunsResponseMultiError(errors)
	}

	return nil
}

// RunsResponseMultiError is an error wrapping multiple validation errors
// returned by RunsResponse.ValidateAll() if the designated constraints aren't met.
type RunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunsResponseMultiError) AllErrors() []error { return m }

// RunsResponseValidationError is the validation error returned by
// RunsResponse.Validate if the designated constraints aren't met.
type RunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunsResponseValidationError) ErrorName() string { return "RunsResponseValidationError" }

// Error satisfies the builtin error interface
func (e RunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunsResponseValidationError{}

// Validate checks the field values on ScheduleTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScheduleTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleTaskRequestMultiError, or nil if none found.
func (m *ScheduleTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUpdateCl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "UpdateCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "UpdateCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateCl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "UpdateCl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBatchUpdateCl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "BatchUpdateCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "BatchUpdateCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchUpdateCl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "BatchUpdateCl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetBatchOnClUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "BatchOnClUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "BatchOnClUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBatchOnClUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "BatchOnClUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRefreshProjectConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "RefreshProjectConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "RefreshProjectConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRefreshProjectConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "RefreshProjectConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPollGerrit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "PollGerrit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "PollGerrit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPollGerrit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "PollGerrit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManageProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ManageProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ManageProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManageProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "ManageProject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKickManageProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "KickManageProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "KickManageProject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKickManageProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "KickManageProject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPurgeCl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "PurgeCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "PurgeCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurgeCl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "PurgeCl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExportRunToBq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ExportRunToBq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ExportRunToBq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExportRunToBq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "ExportRunToBq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManageRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ManageRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ManageRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManageRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "ManageRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetKickManageRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "KickManageRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "KickManageRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKickManageRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "KickManageRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetManageRunLongOp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ManageRunLongOp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleTaskRequestValidationError{
					field:  "ManageRunLongOp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetManageRunLongOp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleTaskRequestValidationError{
				field:  "ManageRunLongOp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DeduplicationKey

	if len(errors) > 0 {
		return ScheduleTaskRequestMultiError(errors)
	}

	return nil
}

// ScheduleTaskRequestMultiError is an error wrapping multiple validation
// errors returned by ScheduleTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type ScheduleTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleTaskRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleTaskRequestMultiError) AllErrors() []error { return m }

// ScheduleTaskRequestValidationError is the validation error returned by
// ScheduleTaskRequest.Validate if the designated constraints aren't met.
type ScheduleTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleTaskRequestValidationError) ErrorName() string {
	return "ScheduleTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScheduleTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleTaskRequestValidationError{}

// Validate checks the field values on DSMLaunchJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DSMLaunchJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DSMLaunchJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DSMLaunchJobRequestMultiError, or nil if none found.
func (m *DSMLaunchJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DSMLaunchJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DSMLaunchJobRequestMultiError(errors)
	}

	return nil
}

// DSMLaunchJobRequestMultiError is an error wrapping multiple validation
// errors returned by DSMLaunchJobRequest.ValidateAll() if the designated
// constraints aren't met.
type DSMLaunchJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DSMLaunchJobRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DSMLaunchJobRequestMultiError) AllErrors() []error { return m }

// DSMLaunchJobRequestValidationError is the validation error returned by
// DSMLaunchJobRequest.Validate if the designated constraints aren't met.
type DSMLaunchJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DSMLaunchJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DSMLaunchJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DSMLaunchJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DSMLaunchJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DSMLaunchJobRequestValidationError) ErrorName() string {
	return "DSMLaunchJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DSMLaunchJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDSMLaunchJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DSMLaunchJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DSMLaunchJobRequestValidationError{}

// Validate checks the field values on DSMJobID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DSMJobID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DSMJobID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DSMJobIDMultiError, or nil
// if none found.
func (m *DSMJobID) ValidateAll() error {
	return m.validate(true)
}

func (m *DSMJobID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DSMJobIDMultiError(errors)
	}

	return nil
}

// DSMJobIDMultiError is an error wrapping multiple validation errors returned
// by DSMJobID.ValidateAll() if the designated constraints aren't met.
type DSMJobIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DSMJobIDMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DSMJobIDMultiError) AllErrors() []error { return m }

// DSMJobIDValidationError is the validation error returned by
// DSMJobID.Validate if the designated constraints aren't met.
type DSMJobIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DSMJobIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DSMJobIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DSMJobIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DSMJobIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DSMJobIDValidationError) ErrorName() string { return "DSMJobIDValidationError" }

// Error satisfies the builtin error interface
func (e DSMJobIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDSMJobID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DSMJobIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DSMJobIDValidationError{}

// Validate checks the field values on DSMJob with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DSMJob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DSMJob with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DSMJobMultiError, or nil if none found.
func (m *DSMJob) ValidateAll() error {
	return m.validate(true)
}

func (m *DSMJob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DSMJobValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DSMJobValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DSMJobValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DSMJobMultiError(errors)
	}

	return nil
}

// DSMJobMultiError is an error wrapping multiple validation errors returned by
// DSMJob.ValidateAll() if the designated constraints aren't met.
type DSMJobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DSMJobMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DSMJobMultiError) AllErrors() []error { return m }

// DSMJobValidationError is the validation error returned by DSMJob.Validate if
// the designated constraints aren't met.
type DSMJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DSMJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DSMJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DSMJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DSMJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DSMJobValidationError) ErrorName() string { return "DSMJobValidationError" }

// Error satisfies the builtin error interface
func (e DSMJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDSMJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DSMJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DSMJobValidationError{}

// Validate checks the field values on GetRunResponse_CL with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRunResponse_CL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRunResponse_CL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRunResponse_CLMultiError, or nil if none found.
func (m *GetRunResponse_CL) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRunResponse_CL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ExternalId

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponse_CLValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponse_CLValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponse_CLValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRunResponse_CLValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRunResponse_CLValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRunResponse_CLValidationError{
				field:  "Trigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRunResponse_CLMultiError(errors)
	}

	return nil
}

// GetRunResponse_CLMultiError is an error wrapping multiple validation errors
// returned by GetRunResponse_CL.ValidateAll() if the designated constraints
// aren't met.
type GetRunResponse_CLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRunResponse_CLMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRunResponse_CLMultiError) AllErrors() []error { return m }

// GetRunResponse_CLValidationError is the validation error returned by
// GetRunResponse_CL.Validate if the designated constraints aren't met.
type GetRunResponse_CLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRunResponse_CLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRunResponse_CLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRunResponse_CLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRunResponse_CLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRunResponse_CLValidationError) ErrorName() string {
	return "GetRunResponse_CLValidationError"
}

// Error satisfies the builtin error interface
func (e GetRunResponse_CLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRunResponse_CL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRunResponse_CLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRunResponse_CLValidationError{}
