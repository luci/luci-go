// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/cv/internal/prjmanager/prjpb/storage.proto

package prjpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	gerrit "go.chromium.org/luci/cv/internal/gerrit"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = gerrit.Whom(0)
)

// Validate checks the field values on PState with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PState with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PStateMultiError, or nil if none found.
func (m *PState) ValidateAll() error {
	return m.validate(true)
}

func (m *PState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LuciProject

	// no validation rules for Status

	// no validation rules for ConfigHash

	for idx, item := range m.GetPcls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("Pcls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("Pcls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PStateValidationError{
					field:  fmt.Sprintf("Pcls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetComponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("Components[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PStateValidationError{
					field:  fmt.Sprintf("Components[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPurgingCls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("PurgingCls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("PurgingCls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PStateValidationError{
					field:  fmt.Sprintf("PurgingCls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTriggeringClDeps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("TriggeringClDeps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("TriggeringClDeps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PStateValidationError{
					field:  fmt.Sprintf("TriggeringClDeps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RepartitionRequired

	for idx, item := range m.GetCreatedPruns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("CreatedPruns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PStateValidationError{
						field:  fmt.Sprintf("CreatedPruns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PStateValidationError{
					field:  fmt.Sprintf("CreatedPruns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNextEvalTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PStateValidationError{
					field:  "NextEvalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PStateValidationError{
					field:  "NextEvalTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextEvalTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PStateValidationError{
				field:  "NextEvalTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PStateMultiError(errors)
	}

	return nil
}

// PStateMultiError is an error wrapping multiple validation errors returned by
// PState.ValidateAll() if the designated constraints aren't met.
type PStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PStateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PStateMultiError) AllErrors() []error { return m }

// PStateValidationError is the validation error returned by PState.Validate if
// the designated constraints aren't met.
type PStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PStateValidationError) ErrorName() string { return "PStateValidationError" }

// Error satisfies the builtin error interface
func (e PStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PStateValidationError{}

// Validate checks the field values on LogReasons with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogReasons) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogReasons with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogReasonsMultiError, or
// nil if none found.
func (m *LogReasons) ValidateAll() error {
	return m.validate(true)
}

func (m *LogReasons) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogReasonsMultiError(errors)
	}

	return nil
}

// LogReasonsMultiError is an error wrapping multiple validation errors
// returned by LogReasons.ValidateAll() if the designated constraints aren't met.
type LogReasonsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogReasonsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogReasonsMultiError) AllErrors() []error { return m }

// LogReasonsValidationError is the validation error returned by
// LogReasons.Validate if the designated constraints aren't met.
type LogReasonsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogReasonsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogReasonsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogReasonsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogReasonsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogReasonsValidationError) ErrorName() string { return "LogReasonsValidationError" }

// Error satisfies the builtin error interface
func (e LogReasonsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogReasons.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogReasonsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogReasonsValidationError{}

// Validate checks the field values on PCL with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *PCL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PCL with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PCLMultiError, or nil if none found.
func (m *PCL) ValidateAll() error {
	return m.validate(true)
}

func (m *PCL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Clid

	// no validation rules for Eversion

	// no validation rules for Status

	for idx, item := range m.GetDeps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PCLValidationError{
						field:  fmt.Sprintf("Deps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PCLValidationError{
						field:  fmt.Sprintf("Deps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PCLValidationError{
					field:  fmt.Sprintf("Deps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTriggers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PCLValidationError{
					field:  "Triggers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PCLValidationError{
					field:  "Triggers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PCLValidationError{
				field:  "Triggers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Submitted

	// no validation rules for Submittable

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PCLValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PCLValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PCLValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPurgeReasons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PCLValidationError{
						field:  fmt.Sprintf("PurgeReasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PCLValidationError{
						field:  fmt.Sprintf("PurgeReasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PCLValidationError{
					field:  fmt.Sprintf("PurgeReasons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOutdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PCLValidationError{
					field:  "Outdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PCLValidationError{
					field:  "Outdated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PCLValidationError{
				field:  "Outdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PCLMultiError(errors)
	}

	return nil
}

// PCLMultiError is an error wrapping multiple validation errors returned by
// PCL.ValidateAll() if the designated constraints aren't met.
type PCLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PCLMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PCLMultiError) AllErrors() []error { return m }

// PCLValidationError is the validation error returned by PCL.Validate if the
// designated constraints aren't met.
type PCLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PCLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PCLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PCLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PCLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PCLValidationError) ErrorName() string { return "PCLValidationError" }

// Error satisfies the builtin error interface
func (e PCLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPCL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PCLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PCLValidationError{}

// Validate checks the field values on PRun with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *PRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PRun with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PRunMultiError, or nil if none found.
func (m *PRun) ValidateAll() error {
	return m.validate(true)
}

func (m *PRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Mode

	// no validation rules for RootClid

	if len(errors) > 0 {
		return PRunMultiError(errors)
	}

	return nil
}

// PRunMultiError is an error wrapping multiple validation errors returned by
// PRun.ValidateAll() if the designated constraints aren't met.
type PRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PRunMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PRunMultiError) AllErrors() []error { return m }

// PRunValidationError is the validation error returned by PRun.Validate if the
// designated constraints aren't met.
type PRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PRunValidationError) ErrorName() string { return "PRunValidationError" }

// Error satisfies the builtin error interface
func (e PRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PRunValidationError{}

// Validate checks the field values on Component with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Component) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Component with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComponentMultiError, or nil
// if none found.
func (m *Component) ValidateAll() error {
	return m.validate(true)
}

func (m *Component) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDecisionTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentValidationError{
					field:  "DecisionTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDecisionTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentValidationError{
				field:  "DecisionTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPruns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComponentValidationError{
						field:  fmt.Sprintf("Pruns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComponentValidationError{
						field:  fmt.Sprintf("Pruns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentValidationError{
					field:  fmt.Sprintf("Pruns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TriageRequired

	if len(errors) > 0 {
		return ComponentMultiError(errors)
	}

	return nil
}

// ComponentMultiError is an error wrapping multiple validation errors returned
// by Component.ValidateAll() if the designated constraints aren't met.
type ComponentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentMultiError) AllErrors() []error { return m }

// ComponentValidationError is the validation error returned by
// Component.Validate if the designated constraints aren't met.
type ComponentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentValidationError) ErrorName() string { return "ComponentValidationError" }

// Error satisfies the builtin error interface
func (e ComponentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentValidationError{}

// Validate checks the field values on PurgingCL with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PurgingCL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurgingCL with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PurgingCLMultiError, or nil
// if none found.
func (m *PurgingCL) ValidateAll() error {
	return m.validate(true)
}

func (m *PurgingCL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Clid

	// no validation rules for OperationId

	if all {
		switch v := interface{}(m.GetDeadline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgingCLValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgingCLValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgingCLValidationError{
				field:  "Deadline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgingCLValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgingCLValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgingCLValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.ApplyTo.(type) {
	case *PurgingCL_Triggers:
		if v == nil {
			err := PurgingCLValidationError{
				field:  "ApplyTo",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTriggers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PurgingCLValidationError{
						field:  "Triggers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PurgingCLValidationError{
						field:  "Triggers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PurgingCLValidationError{
					field:  "Triggers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PurgingCL_AllActiveTriggers:
		if v == nil {
			err := PurgingCLValidationError{
				field:  "ApplyTo",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AllActiveTriggers
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PurgingCLMultiError(errors)
	}

	return nil
}

// PurgingCLMultiError is an error wrapping multiple validation errors returned
// by PurgingCL.ValidateAll() if the designated constraints aren't met.
type PurgingCLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurgingCLMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurgingCLMultiError) AllErrors() []error { return m }

// PurgingCLValidationError is the validation error returned by
// PurgingCL.Validate if the designated constraints aren't met.
type PurgingCLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgingCLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgingCLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgingCLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgingCLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgingCLValidationError) ErrorName() string { return "PurgingCLValidationError" }

// Error satisfies the builtin error interface
func (e PurgingCLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgingCL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgingCLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgingCLValidationError{}

// Validate checks the field values on TriggeringCLDeps with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggeringCLDeps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggeringCLDeps with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggeringCLDepsMultiError, or nil if none found.
func (m *TriggeringCLDeps) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggeringCLDeps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginClid

	// no validation rules for OperationId

	if all {
		switch v := interface{}(m.GetDeadline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggeringCLDepsValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggeringCLDepsValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggeringCLDepsValidationError{
				field:  "Deadline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTrigger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggeringCLDepsValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggeringCLDepsValidationError{
					field:  "Trigger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTrigger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggeringCLDepsValidationError{
				field:  "Trigger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConfigGroupName

	if len(errors) > 0 {
		return TriggeringCLDepsMultiError(errors)
	}

	return nil
}

// TriggeringCLDepsMultiError is an error wrapping multiple validation errors
// returned by TriggeringCLDeps.ValidateAll() if the designated constraints
// aren't met.
type TriggeringCLDepsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggeringCLDepsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggeringCLDepsMultiError) AllErrors() []error { return m }

// TriggeringCLDepsValidationError is the validation error returned by
// TriggeringCLDeps.Validate if the designated constraints aren't met.
type TriggeringCLDepsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggeringCLDepsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggeringCLDepsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggeringCLDepsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggeringCLDepsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggeringCLDepsValidationError) ErrorName() string { return "TriggeringCLDepsValidationError" }

// Error satisfies the builtin error interface
func (e TriggeringCLDepsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggeringCLDeps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggeringCLDepsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggeringCLDepsValidationError{}

// Validate checks the field values on PurgeReason with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PurgeReason) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurgeReason with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PurgeReasonMultiError, or
// nil if none found.
func (m *PurgeReason) ValidateAll() error {
	return m.validate(true)
}

func (m *PurgeReason) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgeReasonValidationError{
					field:  "ClError",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgeReasonValidationError{
					field:  "ClError",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgeReasonValidationError{
				field:  "ClError",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.ApplyTo.(type) {
	case *PurgeReason_Triggers:
		if v == nil {
			err := PurgeReasonValidationError{
				field:  "ApplyTo",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTriggers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PurgeReasonValidationError{
						field:  "Triggers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PurgeReasonValidationError{
						field:  "Triggers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTriggers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PurgeReasonValidationError{
					field:  "Triggers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *PurgeReason_AllActiveTriggers:
		if v == nil {
			err := PurgeReasonValidationError{
				field:  "ApplyTo",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AllActiveTriggers
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PurgeReasonMultiError(errors)
	}

	return nil
}

// PurgeReasonMultiError is an error wrapping multiple validation errors
// returned by PurgeReason.ValidateAll() if the designated constraints aren't met.
type PurgeReasonMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurgeReasonMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurgeReasonMultiError) AllErrors() []error { return m }

// PurgeReasonValidationError is the validation error returned by
// PurgeReason.Validate if the designated constraints aren't met.
type PurgeReasonValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgeReasonValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgeReasonValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgeReasonValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgeReasonValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgeReasonValidationError) ErrorName() string { return "PurgeReasonValidationError" }

// Error satisfies the builtin error interface
func (e PurgeReasonValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgeReason.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgeReasonValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgeReasonValidationError{}

// Validate checks the field values on PurgingCL_Notification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurgingCL_Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurgingCL_Notification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurgingCL_NotificationMultiError, or nil if none found.
func (m *PurgingCL_Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *PurgingCL_Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PurgingCL_NotificationMultiError(errors)
	}

	return nil
}

// PurgingCL_NotificationMultiError is an error wrapping multiple validation
// errors returned by PurgingCL_Notification.ValidateAll() if the designated
// constraints aren't met.
type PurgingCL_NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurgingCL_NotificationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurgingCL_NotificationMultiError) AllErrors() []error { return m }

// PurgingCL_NotificationValidationError is the validation error returned by
// PurgingCL_Notification.Validate if the designated constraints aren't met.
type PurgingCL_NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgingCL_NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgingCL_NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgingCL_NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgingCL_NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgingCL_NotificationValidationError) ErrorName() string {
	return "PurgingCL_NotificationValidationError"
}

// Error satisfies the builtin error interface
func (e PurgingCL_NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgingCL_Notification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgingCL_NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgingCL_NotificationValidationError{}
