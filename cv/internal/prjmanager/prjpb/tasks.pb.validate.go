// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/cv/internal/prjmanager/prjpb/tasks.proto

package prjpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ManageProjectTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ManageProjectTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageProjectTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManageProjectTaskMultiError, or nil if none found.
func (m *ManageProjectTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageProjectTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LuciProject

	if all {
		switch v := interface{}(m.GetEta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ManageProjectTaskValidationError{
					field:  "Eta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ManageProjectTaskValidationError{
					field:  "Eta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ManageProjectTaskValidationError{
				field:  "Eta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ManageProjectTaskMultiError(errors)
	}

	return nil
}

// ManageProjectTaskMultiError is an error wrapping multiple validation errors
// returned by ManageProjectTask.ValidateAll() if the designated constraints
// aren't met.
type ManageProjectTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageProjectTaskMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageProjectTaskMultiError) AllErrors() []error { return m }

// ManageProjectTaskValidationError is the validation error returned by
// ManageProjectTask.Validate if the designated constraints aren't met.
type ManageProjectTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageProjectTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageProjectTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageProjectTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageProjectTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageProjectTaskValidationError) ErrorName() string {
	return "ManageProjectTaskValidationError"
}

// Error satisfies the builtin error interface
func (e ManageProjectTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageProjectTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageProjectTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageProjectTaskValidationError{}

// Validate checks the field values on KickManageProjectTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KickManageProjectTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickManageProjectTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KickManageProjectTaskMultiError, or nil if none found.
func (m *KickManageProjectTask) ValidateAll() error {
	return m.validate(true)
}

func (m *KickManageProjectTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LuciProject

	if all {
		switch v := interface{}(m.GetEta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KickManageProjectTaskValidationError{
					field:  "Eta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KickManageProjectTaskValidationError{
					field:  "Eta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KickManageProjectTaskValidationError{
				field:  "Eta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return KickManageProjectTaskMultiError(errors)
	}

	return nil
}

// KickManageProjectTaskMultiError is an error wrapping multiple validation
// errors returned by KickManageProjectTask.ValidateAll() if the designated
// constraints aren't met.
type KickManageProjectTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickManageProjectTaskMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickManageProjectTaskMultiError) AllErrors() []error { return m }

// KickManageProjectTaskValidationError is the validation error returned by
// KickManageProjectTask.Validate if the designated constraints aren't met.
type KickManageProjectTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickManageProjectTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickManageProjectTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickManageProjectTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickManageProjectTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickManageProjectTaskValidationError) ErrorName() string {
	return "KickManageProjectTaskValidationError"
}

// Error satisfies the builtin error interface
func (e KickManageProjectTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickManageProjectTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickManageProjectTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickManageProjectTaskValidationError{}

// Validate checks the field values on PurgeCLTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PurgeCLTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurgeCLTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PurgeCLTaskMultiError, or
// nil if none found.
func (m *PurgeCLTask) ValidateAll() error {
	return m.validate(true)
}

func (m *PurgeCLTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LuciProject

	if all {
		switch v := interface{}(m.GetPurgingCl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PurgeCLTaskValidationError{
					field:  "PurgingCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PurgeCLTaskValidationError{
					field:  "PurgingCl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurgingCl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PurgeCLTaskValidationError{
				field:  "PurgingCl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPurgeReasons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PurgeCLTaskValidationError{
						field:  fmt.Sprintf("PurgeReasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PurgeCLTaskValidationError{
						field:  fmt.Sprintf("PurgeReasons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PurgeCLTaskValidationError{
					field:  fmt.Sprintf("PurgeReasons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PurgeCLTaskMultiError(errors)
	}

	return nil
}

// PurgeCLTaskMultiError is an error wrapping multiple validation errors
// returned by PurgeCLTask.ValidateAll() if the designated constraints aren't met.
type PurgeCLTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurgeCLTaskMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurgeCLTaskMultiError) AllErrors() []error { return m }

// PurgeCLTaskValidationError is the validation error returned by
// PurgeCLTask.Validate if the designated constraints aren't met.
type PurgeCLTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurgeCLTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurgeCLTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurgeCLTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurgeCLTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurgeCLTaskValidationError) ErrorName() string { return "PurgeCLTaskValidationError" }

// Error satisfies the builtin error interface
func (e PurgeCLTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurgeCLTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurgeCLTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurgeCLTaskValidationError{}

// Validate checks the field values on TriggeringCLDepsTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggeringCLDepsTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggeringCLDepsTask with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggeringCLDepsTaskMultiError, or nil if none found.
func (m *TriggeringCLDepsTask) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggeringCLDepsTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LuciProject

	if all {
		switch v := interface{}(m.GetTriggeringClDeps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggeringCLDepsTaskValidationError{
					field:  "TriggeringClDeps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggeringCLDepsTaskValidationError{
					field:  "TriggeringClDeps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggeringClDeps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggeringCLDepsTaskValidationError{
				field:  "TriggeringClDeps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggeringCLDepsTaskMultiError(errors)
	}

	return nil
}

// TriggeringCLDepsTaskMultiError is an error wrapping multiple validation
// errors returned by TriggeringCLDepsTask.ValidateAll() if the designated
// constraints aren't met.
type TriggeringCLDepsTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggeringCLDepsTaskMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggeringCLDepsTaskMultiError) AllErrors() []error { return m }

// TriggeringCLDepsTaskValidationError is the validation error returned by
// TriggeringCLDepsTask.Validate if the designated constraints aren't met.
type TriggeringCLDepsTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggeringCLDepsTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggeringCLDepsTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggeringCLDepsTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggeringCLDepsTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggeringCLDepsTaskValidationError) ErrorName() string {
	return "TriggeringCLDepsTaskValidationError"
}

// Error satisfies the builtin error interface
func (e TriggeringCLDepsTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggeringCLDepsTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggeringCLDepsTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggeringCLDepsTaskValidationError{}
