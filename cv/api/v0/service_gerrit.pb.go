// Copyright 2023 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.30.2
// source: go.chromium.org/luci/cv/api/v0/service_gerrit.proto

package cvpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCLRunInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GerritChange is the change that Gerrit is currently rendering.
	GerritChange  *GerritChange `protobuf:"bytes,1,opt,name=gerrit_change,json=gerritChange,proto3" json:"gerrit_change,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCLRunInfoRequest) Reset() {
	*x = GetCLRunInfoRequest{}
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCLRunInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLRunInfoRequest) ProtoMessage() {}

func (x *GetCLRunInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLRunInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCLRunInfoRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescGZIP(), []int{0}
}

func (x *GetCLRunInfoRequest) GetGerritChange() *GerritChange {
	if x != nil {
		return x.GerritChange
	}
	return nil
}

type GetCLRunInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RunsAsOrigin are the ongoing runs originating from this CL.
	//
	// Typically, there would only be 1 that is the Run triggered by the
	// CQ vote on this CL.
	RunsAsOrigin []*GetCLRunInfoResponse_RunInfo `protobuf:"bytes,1,rep,name=runs_as_origin,json=runsAsOrigin,proto3" json:"runs_as_origin,omitempty"`
	// RunsAsDep are the ongoing runs that involves this CL but not originates
	// from the CL.
	//
	// Those Runs should be triggered by the CL that transitively depends on this
	// CL.
	RunsAsDep []*GetCLRunInfoResponse_RunInfo `protobuf:"bytes,2,rep,name=runs_as_dep,json=runsAsDep,proto3" json:"runs_as_dep,omitempty"`
	// DepChangeInfos are the information about the CLs that this CL depends on.
	//
	// If the developer ends up voting CQ+1/+2 on this CL, these would be all the
	// CLs that will be involved in the Run.
	//
	// Note that only active CLs will be returned.
	DepChangeInfos []*GetCLRunInfoResponse_DepChangeInfo `protobuf:"bytes,3,rep,name=dep_change_infos,json=depChangeInfos,proto3" json:"dep_change_infos,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetCLRunInfoResponse) Reset() {
	*x = GetCLRunInfoResponse{}
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCLRunInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLRunInfoResponse) ProtoMessage() {}

func (x *GetCLRunInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLRunInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCLRunInfoResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescGZIP(), []int{1}
}

func (x *GetCLRunInfoResponse) GetRunsAsOrigin() []*GetCLRunInfoResponse_RunInfo {
	if x != nil {
		return x.RunsAsOrigin
	}
	return nil
}

func (x *GetCLRunInfoResponse) GetRunsAsDep() []*GetCLRunInfoResponse_RunInfo {
	if x != nil {
		return x.RunsAsDep
	}
	return nil
}

func (x *GetCLRunInfoResponse) GetDepChangeInfos() []*GetCLRunInfoResponse_DepChangeInfo {
	if x != nil {
		return x.DepChangeInfos
	}
	return nil
}

type GetCLRunInfoResponse_RunInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Run.
	//
	// The format of an ID is "projects/$luci-project/runs/$id", where
	// - luci-project is the name of the LUCI project the Run belongs to
	// - id is an opaque key unique in the LUCI project.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The time when the Run was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The time when the Run was started.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The change that receives the vote and triggers this Run.
	OriginChange *GerritChange `protobuf:"bytes,4,opt,name=origin_change,json=originChange,proto3" json:"origin_change,omitempty"`
	// The mode of the Run.
	Mode          string `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCLRunInfoResponse_RunInfo) Reset() {
	*x = GetCLRunInfoResponse_RunInfo{}
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCLRunInfoResponse_RunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLRunInfoResponse_RunInfo) ProtoMessage() {}

func (x *GetCLRunInfoResponse_RunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLRunInfoResponse_RunInfo.ProtoReflect.Descriptor instead.
func (*GetCLRunInfoResponse_RunInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetCLRunInfoResponse_RunInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCLRunInfoResponse_RunInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GetCLRunInfoResponse_RunInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetCLRunInfoResponse_RunInfo) GetOriginChange() *GerritChange {
	if x != nil {
		return x.OriginChange
	}
	return nil
}

func (x *GetCLRunInfoResponse_RunInfo) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type GetCLRunInfoResponse_DepChangeInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GerritChange describes the dependency CL.
	GerritChange *GerritChange `protobuf:"bytes,1,opt,name=gerrit_change,json=gerritChange,proto3" json:"gerrit_change,omitempty"`
	// Runs are ongoing Runs that involves the dependency CLs.
	Runs []*GetCLRunInfoResponse_RunInfo `protobuf:"bytes,2,rep,name=runs,proto3" json:"runs,omitempty"`
	// ChangeOwner is the owner of the dependency CL.
	ChangeOwner   string `protobuf:"bytes,3,opt,name=change_owner,json=changeOwner,proto3" json:"change_owner,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCLRunInfoResponse_DepChangeInfo) Reset() {
	*x = GetCLRunInfoResponse_DepChangeInfo{}
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCLRunInfoResponse_DepChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCLRunInfoResponse_DepChangeInfo) ProtoMessage() {}

func (x *GetCLRunInfoResponse_DepChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCLRunInfoResponse_DepChangeInfo.ProtoReflect.Descriptor instead.
func (*GetCLRunInfoResponse_DepChangeInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescGZIP(), []int{1, 1}
}

func (x *GetCLRunInfoResponse_DepChangeInfo) GetGerritChange() *GerritChange {
	if x != nil {
		return x.GerritChange
	}
	return nil
}

func (x *GetCLRunInfoResponse_DepChangeInfo) GetRuns() []*GetCLRunInfoResponse_RunInfo {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *GetCLRunInfoResponse_DepChangeInfo) GetChangeOwner() string {
	if x != nil {
		return x.ChangeOwner
	}
	return ""
}

var File_go_chromium_org_luci_cv_api_v0_service_gerrit_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDesc = string([]byte{
	0x0a, 0x33, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x75,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x4c,
	0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x0d, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x43, 0x4c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x76, 0x2e, 0x76,
	0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x72, 0x75, 0x6e, 0x73, 0x41, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0b,
	0x72, 0x75, 0x6e, 0x73, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52,
	0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x73, 0x41, 0x73, 0x44, 0x65,
	0x70, 0x12, 0x53, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x76,
	0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0d, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x70,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c,
	0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x32, 0x5c, 0x0a, 0x11, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52, 0x75,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x4c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x76, 0x2e, 0x76, 0x30, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x4c, 0x52,
	0x75, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25,
	0x5a, 0x23, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30,
	0x3b, 0x63, 0x76, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescData []byte
)

func file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDesc), len(file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDescData
}

var file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_goTypes = []any{
	(*GetCLRunInfoRequest)(nil),                // 0: cv.v0.GetCLRunInfoRequest
	(*GetCLRunInfoResponse)(nil),               // 1: cv.v0.GetCLRunInfoResponse
	(*GetCLRunInfoResponse_RunInfo)(nil),       // 2: cv.v0.GetCLRunInfoResponse.RunInfo
	(*GetCLRunInfoResponse_DepChangeInfo)(nil), // 3: cv.v0.GetCLRunInfoResponse.DepChangeInfo
	(*GerritChange)(nil),                       // 4: cv.v0.GerritChange
	(*timestamppb.Timestamp)(nil),              // 5: google.protobuf.Timestamp
}
var file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_depIdxs = []int32{
	4,  // 0: cv.v0.GetCLRunInfoRequest.gerrit_change:type_name -> cv.v0.GerritChange
	2,  // 1: cv.v0.GetCLRunInfoResponse.runs_as_origin:type_name -> cv.v0.GetCLRunInfoResponse.RunInfo
	2,  // 2: cv.v0.GetCLRunInfoResponse.runs_as_dep:type_name -> cv.v0.GetCLRunInfoResponse.RunInfo
	3,  // 3: cv.v0.GetCLRunInfoResponse.dep_change_infos:type_name -> cv.v0.GetCLRunInfoResponse.DepChangeInfo
	5,  // 4: cv.v0.GetCLRunInfoResponse.RunInfo.create_time:type_name -> google.protobuf.Timestamp
	5,  // 5: cv.v0.GetCLRunInfoResponse.RunInfo.start_time:type_name -> google.protobuf.Timestamp
	4,  // 6: cv.v0.GetCLRunInfoResponse.RunInfo.origin_change:type_name -> cv.v0.GerritChange
	4,  // 7: cv.v0.GetCLRunInfoResponse.DepChangeInfo.gerrit_change:type_name -> cv.v0.GerritChange
	2,  // 8: cv.v0.GetCLRunInfoResponse.DepChangeInfo.runs:type_name -> cv.v0.GetCLRunInfoResponse.RunInfo
	0,  // 9: cv.v0.GerritIntegration.GetCLRunInfo:input_type -> cv.v0.GetCLRunInfoRequest
	1,  // 10: cv.v0.GerritIntegration.GetCLRunInfo:output_type -> cv.v0.GetCLRunInfoResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_init() }
func file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_init() {
	if File_go_chromium_org_luci_cv_api_v0_service_gerrit_proto != nil {
		return
	}
	file_go_chromium_org_luci_cv_api_v0_run_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDesc), len(file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_cv_api_v0_service_gerrit_proto = out.File
	file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_goTypes = nil
	file_go_chromium_org_luci_cv_api_v0_service_gerrit_proto_depIdxs = nil
}
