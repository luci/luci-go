// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/cv/api/v0/service_gerrit.proto

package cvpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCLRunInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCLRunInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCLRunInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCLRunInfoRequestMultiError, or nil if none found.
func (m *GetCLRunInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCLRunInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGerritChange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLRunInfoRequestValidationError{
					field:  "GerritChange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLRunInfoRequestValidationError{
					field:  "GerritChange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGerritChange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLRunInfoRequestValidationError{
				field:  "GerritChange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCLRunInfoRequestMultiError(errors)
	}

	return nil
}

// GetCLRunInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetCLRunInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCLRunInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCLRunInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCLRunInfoRequestMultiError) AllErrors() []error { return m }

// GetCLRunInfoRequestValidationError is the validation error returned by
// GetCLRunInfoRequest.Validate if the designated constraints aren't met.
type GetCLRunInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCLRunInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCLRunInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCLRunInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCLRunInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCLRunInfoRequestValidationError) ErrorName() string {
	return "GetCLRunInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCLRunInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCLRunInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCLRunInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCLRunInfoRequestValidationError{}

// Validate checks the field values on GetCLRunInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCLRunInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCLRunInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCLRunInfoResponseMultiError, or nil if none found.
func (m *GetCLRunInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCLRunInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRunsAsOrigin() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCLRunInfoResponseValidationError{
						field:  fmt.Sprintf("RunsAsOrigin[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCLRunInfoResponseValidationError{
						field:  fmt.Sprintf("RunsAsOrigin[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCLRunInfoResponseValidationError{
					field:  fmt.Sprintf("RunsAsOrigin[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRunsAsDep() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCLRunInfoResponseValidationError{
						field:  fmt.Sprintf("RunsAsDep[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCLRunInfoResponseValidationError{
						field:  fmt.Sprintf("RunsAsDep[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCLRunInfoResponseValidationError{
					field:  fmt.Sprintf("RunsAsDep[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDepChangeInfos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCLRunInfoResponseValidationError{
						field:  fmt.Sprintf("DepChangeInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCLRunInfoResponseValidationError{
						field:  fmt.Sprintf("DepChangeInfos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCLRunInfoResponseValidationError{
					field:  fmt.Sprintf("DepChangeInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCLRunInfoResponseMultiError(errors)
	}

	return nil
}

// GetCLRunInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetCLRunInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCLRunInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCLRunInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCLRunInfoResponseMultiError) AllErrors() []error { return m }

// GetCLRunInfoResponseValidationError is the validation error returned by
// GetCLRunInfoResponse.Validate if the designated constraints aren't met.
type GetCLRunInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCLRunInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCLRunInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCLRunInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCLRunInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCLRunInfoResponseValidationError) ErrorName() string {
	return "GetCLRunInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCLRunInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCLRunInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCLRunInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCLRunInfoResponseValidationError{}

// Validate checks the field values on GetCLRunInfoResponse_RunInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCLRunInfoResponse_RunInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCLRunInfoResponse_RunInfo with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCLRunInfoResponse_RunInfoMultiError, or nil if none found.
func (m *GetCLRunInfoResponse_RunInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCLRunInfoResponse_RunInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_RunInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_RunInfoValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLRunInfoResponse_RunInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_RunInfoValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_RunInfoValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLRunInfoResponse_RunInfoValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOriginChange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_RunInfoValidationError{
					field:  "OriginChange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_RunInfoValidationError{
					field:  "OriginChange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOriginChange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLRunInfoResponse_RunInfoValidationError{
				field:  "OriginChange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Mode

	if len(errors) > 0 {
		return GetCLRunInfoResponse_RunInfoMultiError(errors)
	}

	return nil
}

// GetCLRunInfoResponse_RunInfoMultiError is an error wrapping multiple
// validation errors returned by GetCLRunInfoResponse_RunInfo.ValidateAll() if
// the designated constraints aren't met.
type GetCLRunInfoResponse_RunInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCLRunInfoResponse_RunInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCLRunInfoResponse_RunInfoMultiError) AllErrors() []error { return m }

// GetCLRunInfoResponse_RunInfoValidationError is the validation error returned
// by GetCLRunInfoResponse_RunInfo.Validate if the designated constraints
// aren't met.
type GetCLRunInfoResponse_RunInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCLRunInfoResponse_RunInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCLRunInfoResponse_RunInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCLRunInfoResponse_RunInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCLRunInfoResponse_RunInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCLRunInfoResponse_RunInfoValidationError) ErrorName() string {
	return "GetCLRunInfoResponse_RunInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetCLRunInfoResponse_RunInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCLRunInfoResponse_RunInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCLRunInfoResponse_RunInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCLRunInfoResponse_RunInfoValidationError{}

// Validate checks the field values on GetCLRunInfoResponse_DepChangeInfo with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetCLRunInfoResponse_DepChangeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCLRunInfoResponse_DepChangeInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetCLRunInfoResponse_DepChangeInfoMultiError, or nil if none found.
func (m *GetCLRunInfoResponse_DepChangeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCLRunInfoResponse_DepChangeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGerritChange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_DepChangeInfoValidationError{
					field:  "GerritChange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCLRunInfoResponse_DepChangeInfoValidationError{
					field:  "GerritChange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGerritChange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCLRunInfoResponse_DepChangeInfoValidationError{
				field:  "GerritChange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCLRunInfoResponse_DepChangeInfoValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCLRunInfoResponse_DepChangeInfoValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCLRunInfoResponse_DepChangeInfoValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ChangeOwner

	if len(errors) > 0 {
		return GetCLRunInfoResponse_DepChangeInfoMultiError(errors)
	}

	return nil
}

// GetCLRunInfoResponse_DepChangeInfoMultiError is an error wrapping multiple
// validation errors returned by
// GetCLRunInfoResponse_DepChangeInfo.ValidateAll() if the designated
// constraints aren't met.
type GetCLRunInfoResponse_DepChangeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCLRunInfoResponse_DepChangeInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCLRunInfoResponse_DepChangeInfoMultiError) AllErrors() []error { return m }

// GetCLRunInfoResponse_DepChangeInfoValidationError is the validation error
// returned by GetCLRunInfoResponse_DepChangeInfo.Validate if the designated
// constraints aren't met.
type GetCLRunInfoResponse_DepChangeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCLRunInfoResponse_DepChangeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCLRunInfoResponse_DepChangeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCLRunInfoResponse_DepChangeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCLRunInfoResponse_DepChangeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCLRunInfoResponse_DepChangeInfoValidationError) ErrorName() string {
	return "GetCLRunInfoResponse_DepChangeInfoValidationError"
}

// Error satisfies the builtin error interface
func (e GetCLRunInfoResponse_DepChangeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCLRunInfoResponse_DepChangeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCLRunInfoResponse_DepChangeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCLRunInfoResponse_DepChangeInfoValidationError{}
