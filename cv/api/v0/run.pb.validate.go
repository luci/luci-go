// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: go.chromium.org/luci/cv/api/v0/run.proto

package cvpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Run with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Run) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Run with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RunMultiError, or nil if none found.
func (m *Run) ValidateAll() error {
	return m.validate(true)
}

func (m *Run) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for Eversion

	// no validation rules for Mode

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Owner

	// no validation rules for CreatedBy

	// no validation rules for BilledTo

	for idx, item := range m.GetCls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunValidationError{
						field:  fmt.Sprintf("Cls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunValidationError{
						field:  fmt.Sprintf("Cls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunValidationError{
					field:  fmt.Sprintf("Cls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTryjobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunValidationError{
						field:  fmt.Sprintf("Tryjobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunValidationError{
						field:  fmt.Sprintf("Tryjobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunValidationError{
					field:  fmt.Sprintf("Tryjobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTryjobInvocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RunValidationError{
						field:  fmt.Sprintf("TryjobInvocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RunValidationError{
						field:  fmt.Sprintf("TryjobInvocations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RunValidationError{
					field:  fmt.Sprintf("TryjobInvocations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSubmission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunValidationError{
				field:  "Submission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunMultiError(errors)
	}

	return nil
}

// RunMultiError is an error wrapping multiple validation errors returned by
// Run.ValidateAll() if the designated constraints aren't met.
type RunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunMultiError) AllErrors() []error { return m }

// RunValidationError is the validation error returned by Run.Validate if the
// designated constraints aren't met.
type RunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunValidationError) ErrorName() string { return "RunValidationError" }

// Error satisfies the builtin error interface
func (e RunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunValidationError{}

// Validate checks the field values on GerritChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GerritChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GerritChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GerritChangeMultiError, or
// nil if none found.
func (m *GerritChange) ValidateAll() error {
	return m.validate(true)
}

func (m *GerritChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Change

	// no validation rules for Patchset

	if len(errors) > 0 {
		return GerritChangeMultiError(errors)
	}

	return nil
}

// GerritChangeMultiError is an error wrapping multiple validation errors
// returned by GerritChange.ValidateAll() if the designated constraints aren't met.
type GerritChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GerritChangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GerritChangeMultiError) AllErrors() []error { return m }

// GerritChangeValidationError is the validation error returned by
// GerritChange.Validate if the designated constraints aren't met.
type GerritChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GerritChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GerritChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GerritChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GerritChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GerritChangeValidationError) ErrorName() string { return "GerritChangeValidationError" }

// Error satisfies the builtin error interface
func (e GerritChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGerritChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GerritChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GerritChangeValidationError{}

// Validate checks the field values on Run_Submission with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Run_Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Run_Submission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Run_SubmissionMultiError,
// or nil if none found.
func (m *Run_Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *Run_Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Run_SubmissionMultiError(errors)
	}

	return nil
}

// Run_SubmissionMultiError is an error wrapping multiple validation errors
// returned by Run_Submission.ValidateAll() if the designated constraints
// aren't met.
type Run_SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Run_SubmissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Run_SubmissionMultiError) AllErrors() []error { return m }

// Run_SubmissionValidationError is the validation error returned by
// Run_Submission.Validate if the designated constraints aren't met.
type Run_SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Run_SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Run_SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Run_SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Run_SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Run_SubmissionValidationError) ErrorName() string { return "Run_SubmissionValidationError" }

// Error satisfies the builtin error interface
func (e Run_SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRun_Submission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Run_SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Run_SubmissionValidationError{}
