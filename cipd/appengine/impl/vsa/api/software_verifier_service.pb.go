// Copyright 2025 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is mostly a duplication of the softwareverifier interface from
// internal bcid/softwareverifier/v1/software_verifier_service.proto.
// If/when this original proto/API becomes public, remove this copy.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v6.32.0
// source: go.chromium.org/luci/cipd/appengine/impl/vsa/api/software_verifier_service.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Caller supplied identification of their intent for the verification.
// NOTE: The values are what the callers "promise" to handle verification
// response. They do NOT change response, i.e. non-compliant artifacts will
// always get "disallowed" decision.
type VerificationContext_VerificationPurpose int32

const (
	// The default value.
	// An alias of `VERIFY_FOR_ENFORCEMENT`, for backward compatibility of
	// client who does not set the field.
	VerificationContext_DEFAULT VerificationContext_VerificationPurpose = 0
	// The verification is requested by an unenforced client.
	// * This is production traffic, and may be used for future policy testing
	// and automation;
	// * all verification (allowed or rejected) will be reported to SCILo.
	VerificationContext_VERIFY_FOR_LOGGING VerificationContext_VerificationPurpose = 3
)

// Enum value maps for VerificationContext_VerificationPurpose.
var (
	VerificationContext_VerificationPurpose_name = map[int32]string{
		0: "DEFAULT",
		3: "VERIFY_FOR_LOGGING",
	}
	VerificationContext_VerificationPurpose_value = map[string]int32{
		"DEFAULT":            0,
		"VERIFY_FOR_LOGGING": 3,
	}
)

func (x VerificationContext_VerificationPurpose) Enum() *VerificationContext_VerificationPurpose {
	p := new(VerificationContext_VerificationPurpose)
	*p = x
	return p
}

func (x VerificationContext_VerificationPurpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationContext_VerificationPurpose) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_enumTypes[0].Descriptor()
}

func (VerificationContext_VerificationPurpose) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_enumTypes[0]
}

func (x VerificationContext_VerificationPurpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationContext_VerificationPurpose.Descriptor instead.
func (VerificationContext_VerificationPurpose) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP(), []int{0, 0}
}

// The stage type of an artifact occurrence on the software supply chain.
type VerificationContext_OccurrenceStageType int32

const (
	// Legacy client will leave this field unspecified.
	VerificationContext_OCCURRENCE_STAGE_TYPE_UNSPECIFIED VerificationContext_OccurrenceStageType = 0
	// Represents the artifact(s) is observed, but verifier has no info
	// about the stage of it.
	VerificationContext_OBSERVED VerificationContext_OccurrenceStageType = 4
)

// Enum value maps for VerificationContext_OccurrenceStageType.
var (
	VerificationContext_OccurrenceStageType_name = map[int32]string{
		0: "OCCURRENCE_STAGE_TYPE_UNSPECIFIED",
		4: "OBSERVED",
	}
	VerificationContext_OccurrenceStageType_value = map[string]int32{
		"OCCURRENCE_STAGE_TYPE_UNSPECIFIED": 0,
		"OBSERVED":                          4,
	}
)

func (x VerificationContext_OccurrenceStageType) Enum() *VerificationContext_OccurrenceStageType {
	p := new(VerificationContext_OccurrenceStageType)
	*p = x
	return p
}

func (x VerificationContext_OccurrenceStageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationContext_OccurrenceStageType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_enumTypes[1].Descriptor()
}

func (VerificationContext_OccurrenceStageType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_enumTypes[1]
}

func (x VerificationContext_OccurrenceStageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationContext_OccurrenceStageType.Descriptor instead.
func (VerificationContext_OccurrenceStageType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP(), []int{0, 1}
}

// Performs verification of various software artifacts.
// Checks include (but may not be limited to):
// * Was the artifact produced by a trusted build process?
// * Was the artifact built from the expected build rule?
// * Is the source code used to build the artifact trustworthy?
//
// Caller-supplied context information about the Verify*Request.
type VerificationContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Caller provided verification purpose.
	VerificationPurpose VerificationContext_VerificationPurpose `protobuf:"varint,1,opt,name=verification_purpose,json=verificationPurpose,proto3,enum=cipd.impl.vsa.VerificationContext_VerificationPurpose" json:"verification_purpose,omitempty"`
	// Caller provided enforcement point identifier.
	// This value is reported to SCILo, and can be used for querying.
	EnforcementPointName string `protobuf:"bytes,2,opt,name=enforcement_point_name,json=enforcementPointName,proto3" json:"enforcement_point_name,omitempty"`
	// Caller provided software supply chain stage classificiation.
	OccurrenceStage VerificationContext_OccurrenceStageType `protobuf:"varint,3,opt,name=occurrence_stage,json=occurrenceStage,proto3,enum=cipd.impl.vsa.VerificationContext_OccurrenceStageType" json:"occurrence_stage,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VerificationContext) Reset() {
	*x = VerificationContext{}
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerificationContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationContext) ProtoMessage() {}

func (x *VerificationContext) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationContext.ProtoReflect.Descriptor instead.
func (*VerificationContext) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP(), []int{0}
}

func (x *VerificationContext) GetVerificationPurpose() VerificationContext_VerificationPurpose {
	if x != nil {
		return x.VerificationPurpose
	}
	return VerificationContext_DEFAULT
}

func (x *VerificationContext) GetEnforcementPointName() string {
	if x != nil {
		return x.EnforcementPointName
	}
	return ""
}

func (x *VerificationContext) GetOccurrenceStage() VerificationContext_OccurrenceStageType {
	if x != nil {
		return x.OccurrenceStage
	}
	return VerificationContext_OCCURRENCE_STAGE_TYPE_UNSPECIFIED
}

// Information about the artifacts to be verified.
// Includes hashes of the artifacts that were computed by the caller and
// attestations for verifying them.
type ArtifactInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of attestations about the artifact(s).
	//
	// Attestations are DSSE formatted JSON lines.
	//
	// Each attestation must occupy exactly one text line, with multiple
	// attestations delimited by newlines.
	//
	// Each entry of this field may contain one or multiple attestations.
	Attestations []string `protobuf:"bytes,3,rep,name=attestations,proto3" json:"attestations,omitempty"`
	// One or more artifacts to verify with the provided attestations.
	//
	// If more than one artifact is specified, verifier will only use
	// attestations that list *all* artifacts as their subjects.
	//
	// Mutually exclusive with the `digests` and `content_hash` fields.
	Artifacts     []*ArtifactInfo_ArtifactDescriptor `protobuf:"bytes,5,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactInfo) Reset() {
	*x = ArtifactInfo{}
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactInfo) ProtoMessage() {}

func (x *ArtifactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactInfo.ProtoReflect.Descriptor instead.
func (*ArtifactInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP(), []int{1}
}

func (x *ArtifactInfo) GetAttestations() []string {
	if x != nil {
		return x.Attestations
	}
	return nil
}

func (x *ArtifactInfo) GetArtifacts() []*ArtifactInfo_ArtifactDescriptor {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

// Answers the question "Is the artifact with the `content_hash` and these
// `attestations` allowed to be used with `resource`.
type VerifySoftwareArtifactRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource this verification request is asking about.
	// e.g. "chrome_app://chrome/desktop-5c0tCh".
	// Used to lookup the policy to apply to the artifact.
	ResourceToVerify string `protobuf:"bytes,1,opt,name=resource_to_verify,json=resourceToVerify,proto3" json:"resource_to_verify,omitempty"`
	// Information about the artifact being verified.
	ArtifactInfo *ArtifactInfo `protobuf:"bytes,2,opt,name=artifact_info,json=artifactInfo,proto3" json:"artifact_info,omitempty"`
	// Additional context information.
	Context       *VerificationContext `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifySoftwareArtifactRequest) Reset() {
	*x = VerifySoftwareArtifactRequest{}
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifySoftwareArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySoftwareArtifactRequest) ProtoMessage() {}

func (x *VerifySoftwareArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySoftwareArtifactRequest.ProtoReflect.Descriptor instead.
func (*VerifySoftwareArtifactRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP(), []int{2}
}

func (x *VerifySoftwareArtifactRequest) GetResourceToVerify() string {
	if x != nil {
		return x.ResourceToVerify
	}
	return ""
}

func (x *VerifySoftwareArtifactRequest) GetArtifactInfo() *ArtifactInfo {
	if x != nil {
		return x.ArtifactInfo
	}
	return nil
}

func (x *VerifySoftwareArtifactRequest) GetContext() *VerificationContext {
	if x != nil {
		return x.Context
	}
	return nil
}

// The response to VerifySoftwareArtifactRequest.
type VerifySoftwareArtifactResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, this request should be allowed because it passed the rules.
	Allowed bool `protobuf:"varint,1,opt,name=allowed,proto3" json:"allowed,omitempty"`
	// If not 'allowed', the text that should be logged and/or shown to the end
	// user.
	RejectionMessage string `protobuf:"bytes,2,opt,name=rejection_message,json=rejectionMessage,proto3" json:"rejection_message,omitempty"`
	// Contains DSSE wrapped JSONL line of Verification Summary Attestations
	// (VSA).For more details about the JSONL attestation bundle format, see:
	// https://github.com/in-toto/attestation/blob/main/spec/v1/bundle.md.
	VerificationSummary string `protobuf:"bytes,3,opt,name=verification_summary,json=verificationSummary,proto3" json:"verification_summary,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VerifySoftwareArtifactResponse) Reset() {
	*x = VerifySoftwareArtifactResponse{}
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifySoftwareArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySoftwareArtifactResponse) ProtoMessage() {}

func (x *VerifySoftwareArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySoftwareArtifactResponse.ProtoReflect.Descriptor instead.
func (*VerifySoftwareArtifactResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP(), []int{3}
}

func (x *VerifySoftwareArtifactResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *VerifySoftwareArtifactResponse) GetRejectionMessage() string {
	if x != nil {
		return x.RejectionMessage
	}
	return ""
}

func (x *VerifySoftwareArtifactResponse) GetVerificationSummary() string {
	if x != nil {
		return x.VerificationSummary
	}
	return ""
}

// Information about an artifact to be verified.
type ArtifactInfo_ArtifactDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An optional display text for an artifact.
	// Only used for diagnostic purposes, e.g. show which artifact is missing
	// from an attestation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The digests of the artifact.
	// For a list of supported digest types, see:
	// https://github.com/in-toto/attestation/blob/main/spec/v1/digest_set.md
	Digests       map[string]string `protobuf:"bytes,2,rep,name=digests,proto3" json:"digests,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactInfo_ArtifactDescriptor) Reset() {
	*x = ArtifactInfo_ArtifactDescriptor{}
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactInfo_ArtifactDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactInfo_ArtifactDescriptor) ProtoMessage() {}

func (x *ArtifactInfo_ArtifactDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactInfo_ArtifactDescriptor.ProtoReflect.Descriptor instead.
func (*ArtifactInfo_ArtifactDescriptor) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ArtifactInfo_ArtifactDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactInfo_ArtifactDescriptor) GetDigests() map[string]string {
	if x != nil {
		return x.Digests
	}
	return nil
}

var File_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDesc = string([]byte{
	0x0a, 0x50, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x69, 0x70, 0x64, 0x2f, 0x61, 0x70, 0x70, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x2f, 0x76, 0x73, 0x61, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x63, 0x69, 0x70, 0x64, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x76, 0x73,
	0x61, 0x22, 0xc5, 0x03, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x69, 0x0a, 0x14, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x69, 0x70, 0x64, 0x2e, 0x69,
	0x6d, 0x70, 0x6c, 0x2e, 0x76, 0x73, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x52,
	0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x69, 0x70, 0x64, 0x2e, 0x69, 0x6d, 0x70, 0x6c,
	0x2e, 0x76, 0x73, 0x61, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x4c, 0x4f, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22,
	0x04, 0x08, 0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x04, 0x10, 0x04, 0x22, 0x5c, 0x0a, 0x13, 0x4f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x43, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x04, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x22, 0x04, 0x08,
	0x02, 0x10, 0x02, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x22, 0xd0, 0x02, 0x0a, 0x0c, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c,
	0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x69, 0x70, 0x64, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x76, 0x73,
	0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0xbb, 0x01, 0x0a,
	0x12, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x69, 0x70, 0x64, 0x2e,
	0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x76, 0x73, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xcd, 0x01, 0x0a,
	0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x40, 0x0a, 0x0d,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x69, 0x70, 0x64, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e,
	0x76, 0x73, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x69, 0x70, 0x64, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x76, 0x73, 0x61, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x9a, 0x01, 0x0a,
	0x1e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x63, 0x69, 0x70, 0x64, 0x2f, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x2f, 0x76, 0x73, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescData []byte
)

func file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDesc), len(file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDescData
}

var file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_goTypes = []any{
	(VerificationContext_VerificationPurpose)(0), // 0: cipd.impl.vsa.VerificationContext.VerificationPurpose
	(VerificationContext_OccurrenceStageType)(0), // 1: cipd.impl.vsa.VerificationContext.OccurrenceStageType
	(*VerificationContext)(nil),                  // 2: cipd.impl.vsa.VerificationContext
	(*ArtifactInfo)(nil),                         // 3: cipd.impl.vsa.ArtifactInfo
	(*VerifySoftwareArtifactRequest)(nil),        // 4: cipd.impl.vsa.VerifySoftwareArtifactRequest
	(*VerifySoftwareArtifactResponse)(nil),       // 5: cipd.impl.vsa.VerifySoftwareArtifactResponse
	(*ArtifactInfo_ArtifactDescriptor)(nil),      // 6: cipd.impl.vsa.ArtifactInfo.ArtifactDescriptor
	nil,                                          // 7: cipd.impl.vsa.ArtifactInfo.ArtifactDescriptor.DigestsEntry
}
var file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_depIdxs = []int32{
	0, // 0: cipd.impl.vsa.VerificationContext.verification_purpose:type_name -> cipd.impl.vsa.VerificationContext.VerificationPurpose
	1, // 1: cipd.impl.vsa.VerificationContext.occurrence_stage:type_name -> cipd.impl.vsa.VerificationContext.OccurrenceStageType
	6, // 2: cipd.impl.vsa.ArtifactInfo.artifacts:type_name -> cipd.impl.vsa.ArtifactInfo.ArtifactDescriptor
	3, // 3: cipd.impl.vsa.VerifySoftwareArtifactRequest.artifact_info:type_name -> cipd.impl.vsa.ArtifactInfo
	2, // 4: cipd.impl.vsa.VerifySoftwareArtifactRequest.context:type_name -> cipd.impl.vsa.VerificationContext
	7, // 5: cipd.impl.vsa.ArtifactInfo.ArtifactDescriptor.digests:type_name -> cipd.impl.vsa.ArtifactInfo.ArtifactDescriptor.DigestsEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() {
	file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_init()
}
func file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_init() {
	if File_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDesc), len(file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto = out.File
	file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_goTypes = nil
	file_go_chromium_org_luci_cipd_appengine_impl_vsa_api_software_verifier_service_proto_depIdxs = nil
}
