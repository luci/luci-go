// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cipd.config;

option go_package = "go.chromium.org/luci/cipd/api/config/v1;api";


// A schema for the bootstrap.cfg config file.
//
// It defines a list of packages that contain executables that should be
// accessible via direct download URLs.
message BootstrapConfigFile {
  // A list of all known bootstrap packages, will be scanned in order.
  repeated BootstrapConfig bootstrap_config = 1;
}


// BootstrapConfig defines a set of bootstrap packages under a single prefix.
//
// Each package should contain exactly one file (presumable an executable). It
// will be extracted and put into the storage, to allow the CIPD backend to
// generate direct download URLs to it. This is useful to allow clients to
// directly download such binaries.
message BootstrapConfig {
  // The package prefix of matching packages e.g. "infra/tools/my-tool".
  string prefix = 1;
}


// A schema for the prefixes.cfg config file.
//
// It defines prefix-level metadata maintained centrally in the service config.
message PrefixesConfigFile {
  // A list of per-prefix entries.
  //
  // Duplicates by `path` are not allowed.
  repeated Prefix prefix = 1;
}


// A metadata to apply to a prefix (and all packages under it).
//
// Prefixes can be nested. A child prefix inherits values of fields from its
// parent. Details of this inheritance depend on the field and each field
// documents it separately.
message Prefix {
  // The prefix path (e.g. "infra/tools") or "/" to indicate the root.
  string path = 1;

  // ID of the customer LUCI project that nominally owns the prefix.
  //
  // Currently used to lookup what Cloud project to bill GCS calls to.
  //
  // If not set, gets inherited from the parent. If none of the ancestors set
  // this, GCS calls are billed to CIPD's own project.
  string owning_luci_project = 2;

  // Controls billing of GCS calls to a customer project.
  //
  // If not set, gets inherited from the parent. If none of the ancestors set
  // this, the default is to bill 100% of GCS calls to the Cloud project
  // associated with `owning_luci_project`, if any.
  message Billing {
    // Disables billing to a customer LUCI project.
    bool disable_user_project_billing = 1;

    // A percent of requests to bill to the LUCI project's billing account.
    //
    // Range [1, 100]. Values outside this range are an error. Unset means 100%.
    int32 percent_of_calls_to_bill = 2;
  }
  Billing billing = 3;
}
