// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/tree_status/proto/config/config.proto

package configpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Config is the service-wide configuration data for TreeStatus.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Represents mapping between tree name and its data.
	// Note: each tree name in use should have exactly 1 TreeNameConfig.
	// If a tree name have more than 1 TreeNameConfig, the validation of this
	// config will result in an error.
	// If a tree name does not have a corresponding TreeNameConfig, accessing the
	// tree will be denied.
	Trees         []*Tree `protobuf:"bytes,1,rep,name=trees,proto3" json:"trees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_go_chromium_org_luci_tree_status_proto_config_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_tree_status_proto_config_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetTrees() []*Tree {
	if x != nil {
		return x.Trees
	}
	return nil
}

// This represent a mapping between a tree name and its data.
// Next ID: 5.
type Tree struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LUCI Tree Status tree name, e.g. "chromium", "devtools", "fuchsia-stem"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Names of the LUCI projects that the tree name applies to.
	// For example, "v8" tree can be applied to both "v8" and "v8-internal" projects.
	// This mapping will be used to display tree status in LUCI UI side bar.
	// The first project in this list is the primary project. This means:
	//  1. Its "<project>:<subrealm>" realm will be used to check
	//     for ACL for the tree, if the flag "use_default_acls" is unset.
	//  2. If the tree is access without a LUCI project context, the primary project
	//     will be displayed at the top left of LUCI UI.
	Projects []string `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
	// Optional.
	// Determines the realm in the primary project (i.e. projects[0]) that
	// the tree is deemed to reside in for ACLing purposes.
	// If unset, defaults to `@project` (project-scoped) realm.
	// This is to support multiple trees per project.
	// Only applies if use_default_acls is not in use.
	Subrealm string `protobuf:"bytes,4,opt,name=subrealm,proto3" json:"subrealm,omitempty"`
	// If this flag is set, it will use the default ACLs:
	//   - Read permission without PII: Authenticated users.
	//   - Read permission with PII: Googlers.
	//   - Write permission: Googlers.
	//
	// If this flag is set, the ACLs will be checked against the "<primary_project>:<subrealm>" realm.
	// If this flag is unset, and the projects fields it empty, this will result in PERMISSION_DENIED
	// error when accessing the tree.
	// Please see the "projects" field for more information.
	UseDefaultAcls bool `protobuf:"varint,3,opt,name=use_default_acls,json=useDefaultAcls,proto3" json:"use_default_acls,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Tree) Reset() {
	*x = Tree{}
	mi := &file_go_chromium_org_luci_tree_status_proto_config_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_tree_status_proto_config_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *Tree) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tree) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *Tree) GetSubrealm() string {
	if x != nil {
		return x.Subrealm
	}
	return ""
}

func (x *Tree) GetUseDefaultAcls() bool {
	if x != nil {
		return x.UseDefaultAcls
	}
	return false
}

var File_go_chromium_org_luci_tree_status_proto_config_config_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDesc = string([]byte{
	0x0a, 0x3a, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6c, 0x75,
	0x63, 0x69, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3d, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x33, 0x0a, 0x05, 0x74, 0x72, 0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x74,
	0x72, 0x65, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x62, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63,
	0x6c, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75,
	0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x74, 0x72, 0x65, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescData []byte
)

func file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDesc), len(file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDescData
}

var file_go_chromium_org_luci_tree_status_proto_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_go_chromium_org_luci_tree_status_proto_config_config_proto_goTypes = []any{
	(*Config)(nil), // 0: luci.tree_status.config.Config
	(*Tree)(nil),   // 1: luci.tree_status.config.Tree
}
var file_go_chromium_org_luci_tree_status_proto_config_config_proto_depIdxs = []int32{
	1, // 0: luci.tree_status.config.Config.trees:type_name -> luci.tree_status.config.Tree
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_tree_status_proto_config_config_proto_init() }
func file_go_chromium_org_luci_tree_status_proto_config_config_proto_init() {
	if File_go_chromium_org_luci_tree_status_proto_config_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDesc), len(file_go_chromium_org_luci_tree_status_proto_config_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_tree_status_proto_config_config_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_tree_status_proto_config_config_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_tree_status_proto_config_config_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_tree_status_proto_config_config_proto = out.File
	file_go_chromium_org_luci_tree_status_proto_config_config_proto_goTypes = nil
	file_go_chromium_org_luci_tree_status_proto_config_config_proto_depIdxs = nil
}
