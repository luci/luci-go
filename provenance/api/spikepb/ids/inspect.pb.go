// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/provenance/api/spikepb/ids/inspect.proto

package idspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InspectionReportRequest encapsulates a policies inspect report to Spike.
type InspectionReportRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier for Spike to use to associate a report to a policy.
	// Since there might be multiple policies running at the same time,
	// Spike needs to know which policy is reporting what.
	PolicySignature string `protobuf:"bytes,1,opt,name=policy_signature,json=policySignature,proto3" json:"policy_signature,omitempty"`
	// Details will have the information policy wants to export. It will
	// have unique information depending upon the policy.
	//
	// For example, network proxy will have `NetworkActivityLog `information
	// from google3/security/bcid/proto/software/network_proxy.proto.
	// Processing of this information will be at Spike, i.e. Spike will
	// learn how to interpret a particular type of report.
	Details *Details `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	// Identifier of a build.
	BuildId   string                 `protobuf:"bytes,3,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Provenance critical dictates whether this inspection report needs is
	// needed for generating provenance.
	ProvenanceCritical bool `protobuf:"varint,5,opt,name=provenance_critical,json=provenanceCritical,proto3" json:"provenance_critical,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InspectionReportRequest) Reset() {
	*x = InspectionReportRequest{}
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InspectionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectionReportRequest) ProtoMessage() {}

func (x *InspectionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectionReportRequest.ProtoReflect.Descriptor instead.
func (*InspectionReportRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescGZIP(), []int{0}
}

func (x *InspectionReportRequest) GetPolicySignature() string {
	if x != nil {
		return x.PolicySignature
	}
	return ""
}

func (x *InspectionReportRequest) GetDetails() *Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *InspectionReportRequest) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *InspectionReportRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *InspectionReportRequest) GetProvenanceCritical() bool {
	if x != nil {
		return x.ProvenanceCritical
	}
	return false
}

// Details will have the information policy wants to export. It will have unique
// information depending upon the policy.
type Details struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Material:
	//
	//	*Details_Sample
	//	*Details_NetworkProxy
	Material      isDetails_Material `protobuf_oneof:"material"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Details) Reset() {
	*x = Details{}
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescGZIP(), []int{1}
}

func (x *Details) GetMaterial() isDetails_Material {
	if x != nil {
		return x.Material
	}
	return nil
}

func (x *Details) GetSample() *Sample {
	if x != nil {
		if x, ok := x.Material.(*Details_Sample); ok {
			return x.Sample
		}
	}
	return nil
}

func (x *Details) GetNetworkProxy() *NetworkProxy {
	if x != nil {
		if x, ok := x.Material.(*Details_NetworkProxy); ok {
			return x.NetworkProxy
		}
	}
	return nil
}

type isDetails_Material interface {
	isDetails_Material()
}

type Details_Sample struct {
	// Sample is an example policy for SPEE demonstration.
	Sample *Sample `protobuf:"bytes,1,opt,name=sample,proto3,oneof"`
}

type Details_NetworkProxy struct {
	// NetworkProxy is BCID owned network proxy tool capable of enforcing
	// network isolation policies.
	NetworkProxy *NetworkProxy `protobuf:"bytes,2,opt,name=network_proxy,json=networkProxy,proto3,oneof"`
}

func (*Details_Sample) isDetails_Material() {}

func (*Details_NetworkProxy) isDetails_Material() {}

// NetworkProxy provides a transparent proxy between build process and the
// internet. Read more at: go/luci-network-proxy (Google-internal).
//
// Information received from this policy will be included in SLSA provenance.
type NetworkProxy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URI of the request observed at the proxy.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Optional digest of a material downloaded with the network request.
	Digest        string `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkProxy) Reset() {
	*x = NetworkProxy{}
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkProxy) ProtoMessage() {}

func (x *NetworkProxy) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkProxy.ProtoReflect.Descriptor instead.
func (*NetworkProxy) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkProxy) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *NetworkProxy) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type Sample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          bool                   `protobuf:"varint,1,opt,name=ping,proto3" json:"ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sample) Reset() {
	*x = Sample{}
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescGZIP(), []int{3}
}

func (x *Sample) GetPing() bool {
	if x != nil {
		return x.Ping
	}
	return false
}

var File_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDesc = string([]byte{
	0x0a, 0x3d, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x70, 0x62, 0x2f, 0x69, 0x64,
	0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x69, 0x64, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf8, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x69, 0x64, 0x73, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x69, 0x64, 0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x69, 0x64, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x0a, 0x0a, 0x08,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x38, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x67,
	0x32, 0x59, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x4e, 0x0a, 0x10, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x22, 0x2e, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x2e, 0x69, 0x64, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x70, 0x62, 0x2f, 0x69, 0x64, 0x73, 0x3b, 0x69,
	0x64, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescData []byte
)

func file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDesc), len(file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDescData
}

var file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_goTypes = []any{
	(*InspectionReportRequest)(nil), // 0: spike.ids.InspectionReportRequest
	(*Details)(nil),                 // 1: spike.ids.Details
	(*NetworkProxy)(nil),            // 2: spike.ids.NetworkProxy
	(*Sample)(nil),                  // 3: spike.ids.Sample
	(*timestamppb.Timestamp)(nil),   // 4: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 5: google.protobuf.Empty
}
var file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_depIdxs = []int32{
	1, // 0: spike.ids.InspectionReportRequest.details:type_name -> spike.ids.Details
	4, // 1: spike.ids.InspectionReportRequest.timestamp:type_name -> google.protobuf.Timestamp
	3, // 2: spike.ids.Details.sample:type_name -> spike.ids.Sample
	2, // 3: spike.ids.Details.network_proxy:type_name -> spike.ids.NetworkProxy
	0, // 4: spike.ids.Inspect.InspectionReport:input_type -> spike.ids.InspectionReportRequest
	5, // 5: spike.ids.Inspect.InspectionReport:output_type -> google.protobuf.Empty
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_init() }
func file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_init() {
	if File_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto != nil {
		return
	}
	file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes[1].OneofWrappers = []any{
		(*Details_Sample)(nil),
		(*Details_NetworkProxy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDesc), len(file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto = out.File
	file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_goTypes = nil
	file_go_chromium_org_luci_provenance_api_spikepb_ids_inspect_proto_depIdxs = nil
}
