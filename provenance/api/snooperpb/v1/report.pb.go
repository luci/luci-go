// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: go.chromium.org/luci/provenance/api/snooperpb/v1/report.proto

package snooperpb

import (
	repopb "go.chromium.org/luci/cipd/api/cipd/v1/repopb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicator to task status. This is used to annotate logs when a task starts
// ends or reaches a certain "interesting" stage.
//
// This is crucial to enforce security policies based on current state of the
// task. For example, more restrictive network connections can be applied when a
// task reaches `compile` stage.
//
// Below is a brief rationale behind each steps:
//   - STARTED: provenance of an artifact captures sources that goes into a
//     build. A single compute resource typically outlives a task, in
//     other words, a single machine can run multiple tasks in it's
//     lifetime. Task start indicates the capturing time window began.
//   - FETCH: typically a task depends on a bunch of dependencies that are
//     fetched to set up the environment before compiling the artifact.
//     Fetch indicates that the task is currently installing these deps.
//   - COMPILE: ideally in compile step, there shouldn't be any new fetching.
//   - UPLOAD: after finishing compilation, this step indicates built artifacts
//     are being uploaded to its destination. A single task can have
//     multiple produced artifacts.
//   - UPLOAD_COMPLETE: it indicates all produced artifacts have been uploaded.
//     This is crucial to closing the capturing time window for
//     provenance generation.
//   - TEST: often a task runs regression tests after an artifact has been
//     produced. Some times requirements around this tests is an open
//     environment which might not be safe for other task phases. To
//     support effective tests, some policies can be lifted at this stage.
//     (Although it is highly encouraged to schedule tests on a separate
//     machine when possible to minimize risks of cross-contamination).
//   - COMPLETE: complete indicates whether a task execution finished. This is
//     crucial for server to set as this creates a clear boundary
//     between subsequent tasks on a same machine.
type TaskStage int32

const (
	TaskStage_STAGE_UNSPECIFIED TaskStage = 0
	TaskStage_STARTED           TaskStage = 1
	TaskStage_FETCH             TaskStage = 2
	TaskStage_COMPILE           TaskStage = 3
	TaskStage_UPLOAD            TaskStage = 4
	TaskStage_UPLOAD_COMPLETE   TaskStage = 5
	TaskStage_TEST              TaskStage = 6
	TaskStage_COMPLETE          TaskStage = 7
)

// Enum value maps for TaskStage.
var (
	TaskStage_name = map[int32]string{
		0: "STAGE_UNSPECIFIED",
		1: "STARTED",
		2: "FETCH",
		3: "COMPILE",
		4: "UPLOAD",
		5: "UPLOAD_COMPLETE",
		6: "TEST",
		7: "COMPLETE",
	}
	TaskStage_value = map[string]int32{
		"STAGE_UNSPECIFIED": 0,
		"STARTED":           1,
		"FETCH":             2,
		"COMPILE":           3,
		"UPLOAD":            4,
		"UPLOAD_COMPLETE":   5,
		"TEST":              6,
		"COMPLETE":          7,
	}
)

func (x TaskStage) Enum() *TaskStage {
	p := new(TaskStage)
	*p = x
	return p
}

func (x TaskStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStage) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_enumTypes[0].Descriptor()
}

func (TaskStage) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_enumTypes[0]
}

func (x TaskStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStage.Descriptor instead.
func (TaskStage) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{0}
}

// Identifies storage location of a particular artifact. This will be used to
// attach provenance:
//   - GCS: provenance will be uploaded alongside the artifact.
//   - CIPD: provenance will be added to package metadata.
//
// Currently we support provenance for two types of artifacts (gcs, cipd).
type Artifact struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*Artifact_Gcs
	//	*Artifact_Cipd
	Kind          isArtifact_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{0}
}

func (x *Artifact) GetKind() isArtifact_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Artifact) GetGcs() string {
	if x != nil {
		if x, ok := x.Kind.(*Artifact_Gcs); ok {
			return x.Gcs
		}
	}
	return ""
}

func (x *Artifact) GetCipd() *Artifact_CIPD {
	if x != nil {
		if x, ok := x.Kind.(*Artifact_Cipd); ok {
			return x.Cipd
		}
	}
	return nil
}

type isArtifact_Kind interface {
	isArtifact_Kind()
}

type Artifact_Gcs struct {
	// Artifacts stored on Google Cloud Storage, e.g. Chrome binaries.
	// Identifier of artifact's storage location, e.g.
	// gs://example-bucket/app/1.2.3.4/mac64/bin.dmg
	Gcs string `protobuf:"bytes,1,opt,name=gcs,proto3,oneof"`
}

type Artifact_Cipd struct {
	Cipd *Artifact_CIPD `protobuf:"bytes,2,opt,name=cipd,proto3,oneof"`
}

func (*Artifact_Gcs) isArtifact_Kind() {}

func (*Artifact_Cipd) isArtifact_Kind() {}

type CipdReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier to map multiple reports to a machine/task. This is
	// going to be the hash(access_token) used by bots to make requests
	// to luci services.
	RequestorId string `protobuf:"bytes,1,opt,name=requestor_id,json=requestorId,proto3" json:"requestor_id,omitempty"`
	// URL ("https://...") of the CIPD backend that hosts the package.
	ServiceUrl string `protobuf:"bytes,7,opt,name=service_url,json=serviceUrl,proto3" json:"service_url,omitempty"`
	// CIPD package name requested/installed on the machine.
	PackageName string `protobuf:"bytes,2,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// Unique identifier of the package instance, a.k.a. instance_id.
	Iid string `protobuf:"bytes,3,opt,name=iid,proto3" json:"iid,omitempty"`
	// CIPD tags attached to the deployed package.
	Tags []*repopb.Tag `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// CIPD refs attached to the deployed package.
	Refs []*repopb.Ref `protobuf:"bytes,5,rep,name=refs,proto3" json:"refs,omitempty"`
	// Event timestamp. This is local to the service, not necessarily same as
	// the reflected recorded timestamp on the logs.
	EventTs       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=event_ts,json=eventTs,proto3" json:"event_ts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CipdReport) Reset() {
	*x = CipdReport{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CipdReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CipdReport) ProtoMessage() {}

func (x *CipdReport) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CipdReport.ProtoReflect.Descriptor instead.
func (*CipdReport) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{1}
}

func (x *CipdReport) GetRequestorId() string {
	if x != nil {
		return x.RequestorId
	}
	return ""
}

func (x *CipdReport) GetServiceUrl() string {
	if x != nil {
		return x.ServiceUrl
	}
	return ""
}

func (x *CipdReport) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *CipdReport) GetIid() string {
	if x != nil {
		return x.Iid
	}
	return ""
}

func (x *CipdReport) GetTags() []*repopb.Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CipdReport) GetRefs() []*repopb.Ref {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *CipdReport) GetEventTs() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTs
	}
	return nil
}

type GcsReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier to map multiple reports to a machine/task. This is
	// going to be a build identifier.
	RequestorId string `protobuf:"bytes,1,opt,name=requestor_id,json=requestorId,proto3" json:"requestor_id,omitempty"`
	// GCS URI for the artifact downloaded on the machine.
	GcsUri string `protobuf:"bytes,2,opt,name=gcs_uri,json=gcsUri,proto3" json:"gcs_uri,omitempty"`
	// Digest of the downloaded artifact.
	Digest string `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	// Event timestamp. This is local to the service, not necessarily same as
	// the reflected recorded timestamp on the logs.
	EventTs       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=event_ts,json=eventTs,proto3" json:"event_ts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GcsReport) Reset() {
	*x = GcsReport{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GcsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsReport) ProtoMessage() {}

func (x *GcsReport) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsReport.ProtoReflect.Descriptor instead.
func (*GcsReport) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{2}
}

func (x *GcsReport) GetRequestorId() string {
	if x != nil {
		return x.RequestorId
	}
	return ""
}

func (x *GcsReport) GetGcsUri() string {
	if x != nil {
		return x.GcsUri
	}
	return ""
}

func (x *GcsReport) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *GcsReport) GetEventTs() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTs
	}
	return nil
}

type GitReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier to map multiple reports to a machine/task. Reporter do not
	// need to set this. It is used by the server to group reports together and
	// bind them to a single task.
	RequestorId string `protobuf:"bytes,1,opt,name=requestor_id,json=requestorId,proto3" json:"requestor_id,omitempty"`
	// Git repository URL.
	Repo string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	// Commit that was fetched for this repo.
	Commit string `protobuf:"bytes,3,opt,name=commit,proto3" json:"commit,omitempty"`
	// This is coming from an upstream dependency, although a checkout can be
	// uniquely attributed by a repo and a commit, they don't often produce
	// measurable inputs for security policy.
	// For example, a git repo may have multiple refs/branches and only some of
	// them may have `Code Review` required.
	//
	// To make a security policy decision about a particular commit, sometimes
	// it is useful to know which branch/ref the commit is associated with, note
	// a single commit can be associated with multiple branches, but the highest
	// security policy will always be enforced.
	// Scenario:
	// Git repo: "http://repo.git"
	// Commit  : "deadbeef"
	// Refs    : ["refs/heads/main", "refs/feature/experimental"]
	// In this example, the particular commit belongs to two branches, one does
	// not have mandatory code review (experimental) but the other does.
	//
	// Irrespective of the order of where the commit belonged first, it is
	// certain that the change was reviewed as this was merged to main branch.
	Refs string `protobuf:"bytes,4,opt,name=refs,proto3" json:"refs,omitempty"`
	// Event timestamp. This is local to the service, not necessarily same as
	// the reflected recorded timestamp on the logs.
	EventTs       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=event_ts,json=eventTs,proto3" json:"event_ts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GitReport) Reset() {
	*x = GitReport{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GitReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitReport) ProtoMessage() {}

func (x *GitReport) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitReport.ProtoReflect.Descriptor instead.
func (*GitReport) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{3}
}

func (x *GitReport) GetRequestorId() string {
	if x != nil {
		return x.RequestorId
	}
	return ""
}

func (x *GitReport) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *GitReport) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *GitReport) GetRefs() string {
	if x != nil {
		return x.Refs
	}
	return ""
}

func (x *GitReport) GetEventTs() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTs
	}
	return nil
}

type ReportTaskStageRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	TaskStage TaskStage              `protobuf:"varint,1,opt,name=task_stage,json=taskStage,proto3,enum=provenance.snooperpb.TaskStage" json:"task_stage,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Recipe is essentially the entry point for the given task, it can be a
	// `build_rule` or a custom executable (like `luci recipes`) that dictates
	// workflow of a task.
	//
	// (Required) when reporting a task start.
	Recipe string `protobuf:"bytes,3,opt,name=recipe,proto3" json:"recipe,omitempty"`
	// Process ID of the task that self-reports task stages. It is used by the
	// server to periodically check health of running task and assert a close
	// approximation of task end time.
	//
	// Accuracy on task end time estimation can vary between implementations, it
	// directly depends on frequency at which provenance server checks status of
	// reported pid.
	//
	// (Required) when reported a task start.
	Pid           int64 `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportTaskStageRequest) Reset() {
	*x = ReportTaskStageRequest{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportTaskStageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskStageRequest) ProtoMessage() {}

func (x *ReportTaskStageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskStageRequest.ProtoReflect.Descriptor instead.
func (*ReportTaskStageRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{4}
}

func (x *ReportTaskStageRequest) GetTaskStage() TaskStage {
	if x != nil {
		return x.TaskStage
	}
	return TaskStage_STAGE_UNSPECIFIED
}

func (x *ReportTaskStageRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ReportTaskStageRequest) GetRecipe() string {
	if x != nil {
		return x.Recipe
	}
	return ""
}

func (x *ReportTaskStageRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type ReportArtifactDigestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// SHA256 digest of artifact.
	Digest string `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// Identifies storage location of a particular artifact. This is used
	// by Spike to attach provenance:
	//   - GCS: provenance will be uploaded alongside the artifact.
	//   - CIPD: provenance will be added to package metadata.
	Artifact *Artifact `protobuf:"bytes,2,opt,name=artifact,proto3" json:"artifact,omitempty"`
	// If set, identifies that the artifact is an SBOM for other artifacts,
	// identified by SHA256 digest.
	SbomSubjects  []string `protobuf:"bytes,3,rep,name=sbom_subjects,json=sbomSubjects,proto3" json:"sbom_subjects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportArtifactDigestRequest) Reset() {
	*x = ReportArtifactDigestRequest{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportArtifactDigestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportArtifactDigestRequest) ProtoMessage() {}

func (x *ReportArtifactDigestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportArtifactDigestRequest.ProtoReflect.Descriptor instead.
func (*ReportArtifactDigestRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{5}
}

func (x *ReportArtifactDigestRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *ReportArtifactDigestRequest) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *ReportArtifactDigestRequest) GetSbomSubjects() []string {
	if x != nil {
		return x.SbomSubjects
	}
	return nil
}

type ReportCipdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cipd_report will consist of package name, instance_id of a cipd package.
	CipdReport    *CipdReport `protobuf:"bytes,1,opt,name=cipd_report,json=cipdReport,proto3" json:"cipd_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportCipdRequest) Reset() {
	*x = ReportCipdRequest{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportCipdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCipdRequest) ProtoMessage() {}

func (x *ReportCipdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCipdRequest.ProtoReflect.Descriptor instead.
func (*ReportCipdRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{6}
}

func (x *ReportCipdRequest) GetCipdReport() *CipdReport {
	if x != nil {
		return x.CipdReport
	}
	return nil
}

type ReportGitRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// git_report will consist of repo name, git hash of checked out repo.
	GitReport     *GitReport `protobuf:"bytes,1,opt,name=git_report,json=gitReport,proto3" json:"git_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportGitRequest) Reset() {
	*x = ReportGitRequest{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportGitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportGitRequest) ProtoMessage() {}

func (x *ReportGitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportGitRequest.ProtoReflect.Descriptor instead.
func (*ReportGitRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{7}
}

func (x *ReportGitRequest) GetGitReport() *GitReport {
	if x != nil {
		return x.GitReport
	}
	return nil
}

type ReportGcsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// gcs_report will consist of gcs uri, hash of downloaded artifact.
	GcsReport     *GcsReport `protobuf:"bytes,1,opt,name=gcs_report,json=gcsReport,proto3" json:"gcs_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportGcsRequest) Reset() {
	*x = ReportGcsRequest{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportGcsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportGcsRequest) ProtoMessage() {}

func (x *ReportGcsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportGcsRequest.ProtoReflect.Descriptor instead.
func (*ReportGcsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{8}
}

func (x *ReportGcsRequest) GetGcsReport() *GcsReport {
	if x != nil {
		return x.GcsReport
	}
	return nil
}

type ReportPIDRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Process ID to track execution of a task running. It is used by the
	// server to periodically check health of running task and assert a close
	// approximation of task end time.
	//
	// Accuracy on task end time estimation can vary between implementations, it
	// directly depends on frequency at which provenance server checks status of
	// reported pid.
	Pid int64 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Reporter of the pid request. In the client of provenance server, this
	// should be automatically assigned by something similar to Go lang's native
	// os.Executable().
	//
	// This can be used to define an allowlist of reporters for this action.
	Reporter      string `protobuf:"bytes,2,opt,name=reporter,proto3" json:"reporter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportPIDRequest) Reset() {
	*x = ReportPIDRequest{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportPIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPIDRequest) ProtoMessage() {}

func (x *ReportPIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPIDRequest.ProtoReflect.Descriptor instead.
func (*ReportPIDRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{9}
}

func (x *ReportPIDRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ReportPIDRequest) GetReporter() string {
	if x != nil {
		return x.Reporter
	}
	return ""
}

// Artifacts stored on CIPD. This defaults to prod instance of CIPD.
type Artifact_CIPD struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifies a hierarchical package. This will be the absolute name
	// of a package (including path).
	PackageName string `protobuf:"bytes,1,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	// Unique identifier of an instance of a package.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// CIPD backend host (dev/prod) where the artifact is stored.
	// If not provided, default is CIPD prod host.
	Host          string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Artifact_CIPD) Reset() {
	*x = Artifact_CIPD{}
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Artifact_CIPD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact_CIPD) ProtoMessage() {}

func (x *Artifact_CIPD) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact_CIPD.ProtoReflect.Descriptor instead.
func (*Artifact_CIPD) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Artifact_CIPD) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *Artifact_CIPD) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Artifact_CIPD) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

var File_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto protoreflect.FileDescriptor

const file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDesc = "" +
	"\n" +
	"=go.chromium.org/luci/provenance/api/snooperpb/v1/report.proto\x12\x14provenance.snooperpb\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a0go.chromium.org/luci/cipd/api/cipd/v1/repo.proto\"\xc1\x01\n" +
	"\bArtifact\x12\x12\n" +
	"\x03gcs\x18\x01 \x01(\tH\x00R\x03gcs\x129\n" +
	"\x04cipd\x18\x02 \x01(\v2#.provenance.snooperpb.Artifact.CIPDH\x00R\x04cipd\x1a^\n" +
	"\x04CIPD\x12!\n" +
	"\fpackage_name\x18\x01 \x01(\tR\vpackageName\x12\x1f\n" +
	"\vinstance_id\x18\x02 \x01(\tR\n" +
	"instanceId\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04hostB\x06\n" +
	"\x04kind\"\xfa\x01\n" +
	"\n" +
	"CipdReport\x12!\n" +
	"\frequestor_id\x18\x01 \x01(\tR\vrequestorId\x12\x1f\n" +
	"\vservice_url\x18\a \x01(\tR\n" +
	"serviceUrl\x12!\n" +
	"\fpackage_name\x18\x02 \x01(\tR\vpackageName\x12\x10\n" +
	"\x03iid\x18\x03 \x01(\tR\x03iid\x12\x1d\n" +
	"\x04tags\x18\x04 \x03(\v2\t.cipd.TagR\x04tags\x12\x1d\n" +
	"\x04refs\x18\x05 \x03(\v2\t.cipd.RefR\x04refs\x125\n" +
	"\bevent_ts\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\aeventTs\"\x96\x01\n" +
	"\tGcsReport\x12!\n" +
	"\frequestor_id\x18\x01 \x01(\tR\vrequestorId\x12\x17\n" +
	"\agcs_uri\x18\x02 \x01(\tR\x06gcsUri\x12\x16\n" +
	"\x06digest\x18\x03 \x01(\tR\x06digest\x125\n" +
	"\bevent_ts\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\aeventTs\"\xa5\x01\n" +
	"\tGitReport\x12!\n" +
	"\frequestor_id\x18\x01 \x01(\tR\vrequestorId\x12\x12\n" +
	"\x04repo\x18\x02 \x01(\tR\x04repo\x12\x16\n" +
	"\x06commit\x18\x03 \x01(\tR\x06commit\x12\x12\n" +
	"\x04refs\x18\x04 \x01(\tR\x04refs\x125\n" +
	"\bevent_ts\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aeventTs\"\xbc\x01\n" +
	"\x16ReportTaskStageRequest\x12>\n" +
	"\n" +
	"task_stage\x18\x01 \x01(\x0e2\x1f.provenance.snooperpb.TaskStageR\ttaskStage\x128\n" +
	"\ttimestamp\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x16\n" +
	"\x06recipe\x18\x03 \x01(\tR\x06recipe\x12\x10\n" +
	"\x03pid\x18\x04 \x01(\x03R\x03pid\"\x96\x01\n" +
	"\x1bReportArtifactDigestRequest\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\x12:\n" +
	"\bartifact\x18\x02 \x01(\v2\x1e.provenance.snooperpb.ArtifactR\bartifact\x12#\n" +
	"\rsbom_subjects\x18\x03 \x03(\tR\fsbomSubjects\"V\n" +
	"\x11ReportCipdRequest\x12A\n" +
	"\vcipd_report\x18\x01 \x01(\v2 .provenance.snooperpb.CipdReportR\n" +
	"cipdReport\"R\n" +
	"\x10ReportGitRequest\x12>\n" +
	"\n" +
	"git_report\x18\x01 \x01(\v2\x1f.provenance.snooperpb.GitReportR\tgitReport\"R\n" +
	"\x10ReportGcsRequest\x12>\n" +
	"\n" +
	"gcs_report\x18\x01 \x01(\v2\x1f.provenance.snooperpb.GcsReportR\tgcsReport\"@\n" +
	"\x10ReportPIDRequest\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\x03R\x03pid\x12\x1a\n" +
	"\breporter\x18\x02 \x01(\tR\breporter*\x80\x01\n" +
	"\tTaskStage\x12\x15\n" +
	"\x11STAGE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aSTARTED\x10\x01\x12\t\n" +
	"\x05FETCH\x10\x02\x12\v\n" +
	"\aCOMPILE\x10\x03\x12\n" +
	"\n" +
	"\x06UPLOAD\x10\x04\x12\x13\n" +
	"\x0fUPLOAD_COMPLETE\x10\x05\x12\b\n" +
	"\x04TEST\x10\x06\x12\f\n" +
	"\bCOMPLETE\x10\a2\xfe\x03\n" +
	"\n" +
	"SelfReport\x12M\n" +
	"\n" +
	"ReportCipd\x12'.provenance.snooperpb.ReportCipdRequest\x1a\x16.google.protobuf.Empty\x12K\n" +
	"\tReportGit\x12&.provenance.snooperpb.ReportGitRequest\x1a\x16.google.protobuf.Empty\x12K\n" +
	"\tReportGcs\x12&.provenance.snooperpb.ReportGcsRequest\x1a\x16.google.protobuf.Empty\x12W\n" +
	"\x0fReportTaskStage\x12,.provenance.snooperpb.ReportTaskStageRequest\x1a\x16.google.protobuf.Empty\x12K\n" +
	"\tReportPID\x12&.provenance.snooperpb.ReportPIDRequest\x1a\x16.google.protobuf.Empty\x12a\n" +
	"\x14ReportArtifactDigest\x121.provenance.snooperpb.ReportArtifactDigestRequest\x1a\x16.google.protobuf.EmptyB<Z:go.chromium.org/luci/provenance/api/snooperpb/v1;snooperpbb\x06proto3"

var (
	file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescData []byte
)

func file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDesc), len(file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDescData
}

var file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_goTypes = []any{
	(TaskStage)(0),                      // 0: provenance.snooperpb.TaskStage
	(*Artifact)(nil),                    // 1: provenance.snooperpb.Artifact
	(*CipdReport)(nil),                  // 2: provenance.snooperpb.CipdReport
	(*GcsReport)(nil),                   // 3: provenance.snooperpb.GcsReport
	(*GitReport)(nil),                   // 4: provenance.snooperpb.GitReport
	(*ReportTaskStageRequest)(nil),      // 5: provenance.snooperpb.ReportTaskStageRequest
	(*ReportArtifactDigestRequest)(nil), // 6: provenance.snooperpb.ReportArtifactDigestRequest
	(*ReportCipdRequest)(nil),           // 7: provenance.snooperpb.ReportCipdRequest
	(*ReportGitRequest)(nil),            // 8: provenance.snooperpb.ReportGitRequest
	(*ReportGcsRequest)(nil),            // 9: provenance.snooperpb.ReportGcsRequest
	(*ReportPIDRequest)(nil),            // 10: provenance.snooperpb.ReportPIDRequest
	(*Artifact_CIPD)(nil),               // 11: provenance.snooperpb.Artifact.CIPD
	(*repopb.Tag)(nil),                  // 12: cipd.Tag
	(*repopb.Ref)(nil),                  // 13: cipd.Ref
	(*timestamppb.Timestamp)(nil),       // 14: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),               // 15: google.protobuf.Empty
}
var file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_depIdxs = []int32{
	11, // 0: provenance.snooperpb.Artifact.cipd:type_name -> provenance.snooperpb.Artifact.CIPD
	12, // 1: provenance.snooperpb.CipdReport.tags:type_name -> cipd.Tag
	13, // 2: provenance.snooperpb.CipdReport.refs:type_name -> cipd.Ref
	14, // 3: provenance.snooperpb.CipdReport.event_ts:type_name -> google.protobuf.Timestamp
	14, // 4: provenance.snooperpb.GcsReport.event_ts:type_name -> google.protobuf.Timestamp
	14, // 5: provenance.snooperpb.GitReport.event_ts:type_name -> google.protobuf.Timestamp
	0,  // 6: provenance.snooperpb.ReportTaskStageRequest.task_stage:type_name -> provenance.snooperpb.TaskStage
	14, // 7: provenance.snooperpb.ReportTaskStageRequest.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 8: provenance.snooperpb.ReportArtifactDigestRequest.artifact:type_name -> provenance.snooperpb.Artifact
	2,  // 9: provenance.snooperpb.ReportCipdRequest.cipd_report:type_name -> provenance.snooperpb.CipdReport
	4,  // 10: provenance.snooperpb.ReportGitRequest.git_report:type_name -> provenance.snooperpb.GitReport
	3,  // 11: provenance.snooperpb.ReportGcsRequest.gcs_report:type_name -> provenance.snooperpb.GcsReport
	7,  // 12: provenance.snooperpb.SelfReport.ReportCipd:input_type -> provenance.snooperpb.ReportCipdRequest
	8,  // 13: provenance.snooperpb.SelfReport.ReportGit:input_type -> provenance.snooperpb.ReportGitRequest
	9,  // 14: provenance.snooperpb.SelfReport.ReportGcs:input_type -> provenance.snooperpb.ReportGcsRequest
	5,  // 15: provenance.snooperpb.SelfReport.ReportTaskStage:input_type -> provenance.snooperpb.ReportTaskStageRequest
	10, // 16: provenance.snooperpb.SelfReport.ReportPID:input_type -> provenance.snooperpb.ReportPIDRequest
	6,  // 17: provenance.snooperpb.SelfReport.ReportArtifactDigest:input_type -> provenance.snooperpb.ReportArtifactDigestRequest
	15, // 18: provenance.snooperpb.SelfReport.ReportCipd:output_type -> google.protobuf.Empty
	15, // 19: provenance.snooperpb.SelfReport.ReportGit:output_type -> google.protobuf.Empty
	15, // 20: provenance.snooperpb.SelfReport.ReportGcs:output_type -> google.protobuf.Empty
	15, // 21: provenance.snooperpb.SelfReport.ReportTaskStage:output_type -> google.protobuf.Empty
	15, // 22: provenance.snooperpb.SelfReport.ReportPID:output_type -> google.protobuf.Empty
	15, // 23: provenance.snooperpb.SelfReport.ReportArtifactDigest:output_type -> google.protobuf.Empty
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_init() }
func file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_init() {
	if File_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto != nil {
		return
	}
	file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes[0].OneofWrappers = []any{
		(*Artifact_Gcs)(nil),
		(*Artifact_Cipd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDesc), len(file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto = out.File
	file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_goTypes = nil
	file_go_chromium_org_luci_provenance_api_snooperpb_v1_report_proto_depIdxs = nil
}
