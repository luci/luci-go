// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.29.3
// source: infra/unifiedfleet/api/v1/models/chromeos/lab/dolos.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { OSRPM } from "./rpm.pb";

export const protobufPackage = "unifiedfleet.api.v1.models.chromeos.lab";

/**
 * Major hardware revision for Dolos
 * Next Tag: 2
 */
export enum DolosHWMajorRevision {
  /** DOLOS_UNSPECIFIED - Default unset value */
  DOLOS_UNSPECIFIED = 0,
  DOLOS_V1 = 1,
}

export function dolosHWMajorRevisionFromJSON(object: any): DolosHWMajorRevision {
  switch (object) {
    case 0:
    case "DOLOS_UNSPECIFIED":
      return DolosHWMajorRevision.DOLOS_UNSPECIFIED;
    case 1:
    case "DOLOS_V1":
      return DolosHWMajorRevision.DOLOS_V1;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum DolosHWMajorRevision");
  }
}

export function dolosHWMajorRevisionToJSON(object: DolosHWMajorRevision): string {
  switch (object) {
    case DolosHWMajorRevision.DOLOS_UNSPECIFIED:
      return "DOLOS_UNSPECIFIED";
    case DolosHWMajorRevision.DOLOS_V1:
      return "DOLOS_V1";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum DolosHWMajorRevision");
  }
}

/** Next Tag: 7 */
export interface Dolos {
  /** Serial used to identify device over USB */
  readonly serialCable: string;
  /** Serial of the cable_cable */
  readonly serialUsb: string;
  /** Hardware revision */
  readonly hwMajorRevision: DolosHWMajorRevision;
  /** Dolos firmware version */
  readonly fwVersion: string;
  /** Hostname of the host machine the dolos connected to via USB cable. */
  readonly hostname: string;
  /** RPM that controls the power source for Dolos. */
  readonly rpm: OSRPM | undefined;
}

function createBaseDolos(): Dolos {
  return { serialCable: "", serialUsb: "", hwMajorRevision: 0, fwVersion: "", hostname: "", rpm: undefined };
}

export const Dolos: MessageFns<Dolos> = {
  encode(message: Dolos, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.serialCable !== "") {
      writer.uint32(10).string(message.serialCable);
    }
    if (message.serialUsb !== "") {
      writer.uint32(18).string(message.serialUsb);
    }
    if (message.hwMajorRevision !== 0) {
      writer.uint32(24).int32(message.hwMajorRevision);
    }
    if (message.fwVersion !== "") {
      writer.uint32(34).string(message.fwVersion);
    }
    if (message.hostname !== "") {
      writer.uint32(42).string(message.hostname);
    }
    if (message.rpm !== undefined) {
      OSRPM.encode(message.rpm, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dolos {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDolos() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serialCable = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.serialUsb = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hwMajorRevision = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fwVersion = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hostname = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rpm = OSRPM.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dolos {
    return {
      serialCable: isSet(object.serialCable) ? globalThis.String(object.serialCable) : "",
      serialUsb: isSet(object.serialUsb) ? globalThis.String(object.serialUsb) : "",
      hwMajorRevision: isSet(object.hwMajorRevision) ? dolosHWMajorRevisionFromJSON(object.hwMajorRevision) : 0,
      fwVersion: isSet(object.fwVersion) ? globalThis.String(object.fwVersion) : "",
      hostname: isSet(object.hostname) ? globalThis.String(object.hostname) : "",
      rpm: isSet(object.rpm) ? OSRPM.fromJSON(object.rpm) : undefined,
    };
  },

  toJSON(message: Dolos): unknown {
    const obj: any = {};
    if (message.serialCable !== "") {
      obj.serialCable = message.serialCable;
    }
    if (message.serialUsb !== "") {
      obj.serialUsb = message.serialUsb;
    }
    if (message.hwMajorRevision !== 0) {
      obj.hwMajorRevision = dolosHWMajorRevisionToJSON(message.hwMajorRevision);
    }
    if (message.fwVersion !== "") {
      obj.fwVersion = message.fwVersion;
    }
    if (message.hostname !== "") {
      obj.hostname = message.hostname;
    }
    if (message.rpm !== undefined) {
      obj.rpm = OSRPM.toJSON(message.rpm);
    }
    return obj;
  },

  create(base?: DeepPartial<Dolos>): Dolos {
    return Dolos.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dolos>): Dolos {
    const message = createBaseDolos() as any;
    message.serialCable = object.serialCable ?? "";
    message.serialUsb = object.serialUsb ?? "";
    message.hwMajorRevision = object.hwMajorRevision ?? 0;
    message.fwVersion = object.fwVersion ?? "";
    message.hostname = object.hostname ?? "";
    message.rpm = (object.rpm !== undefined && object.rpm !== null) ? OSRPM.fromPartial(object.rpm) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
