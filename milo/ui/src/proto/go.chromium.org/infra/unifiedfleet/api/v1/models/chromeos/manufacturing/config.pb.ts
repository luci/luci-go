// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.1
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/chromeos/manufacturing/config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ConfigID } from "./config_id.pb";

export const protobufPackage = "unifiedfleet.api.v1.models.chromeos.manufacturing";

/**
 * These are the configs that's provided in manufacture stage of a ChromeOS device.
 * Next Tag: 7
 */
export interface ManufacturingConfig {
  readonly manufacturingId: ConfigID | undefined;
  readonly devicePhase: ManufacturingConfig_Phase;
  /** @deprecated */
  readonly cr50Phase: ManufacturingConfig_CR50Phase;
  /**
   * Detected based on the cr50 RW version that the DUT is running on.
   *
   * @deprecated
   */
  readonly cr50KeyEnv: ManufacturingConfig_CR50KeyEnv;
  /** wifi chip that is installed on the DUT in manufacturing stage. */
  readonly wifiChip: string;
  /** Save repeated hwid components obtained from hwid service */
  readonly hwidComponent: readonly string[];
  /** Indicate if stylus, touchpad, touchscreen exist for a DUT */
  readonly stylus: boolean;
  readonly touchpad: boolean;
  readonly touchscreen: boolean;
}

/** phase for the device. Next Tag: 9 */
export enum ManufacturingConfig_Phase {
  PHASE_INVALID = 0,
  PHASE_EVT = 1,
  PHASE_EVT2 = 2,
  PHASE_DVT = 3,
  PHASE_DVT2 = 4,
  PHASE_PVT = 5,
  PHASE_PVT2 = 6,
  PHASE_PVT3 = 7,
  PHASE_MP = 8,
}

export function manufacturingConfig_PhaseFromJSON(object: any): ManufacturingConfig_Phase {
  switch (object) {
    case 0:
    case "PHASE_INVALID":
      return ManufacturingConfig_Phase.PHASE_INVALID;
    case 1:
    case "PHASE_EVT":
      return ManufacturingConfig_Phase.PHASE_EVT;
    case 2:
    case "PHASE_EVT2":
      return ManufacturingConfig_Phase.PHASE_EVT2;
    case 3:
    case "PHASE_DVT":
      return ManufacturingConfig_Phase.PHASE_DVT;
    case 4:
    case "PHASE_DVT2":
      return ManufacturingConfig_Phase.PHASE_DVT2;
    case 5:
    case "PHASE_PVT":
      return ManufacturingConfig_Phase.PHASE_PVT;
    case 6:
    case "PHASE_PVT2":
      return ManufacturingConfig_Phase.PHASE_PVT2;
    case 7:
    case "PHASE_PVT3":
      return ManufacturingConfig_Phase.PHASE_PVT3;
    case 8:
    case "PHASE_MP":
      return ManufacturingConfig_Phase.PHASE_MP;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ManufacturingConfig_Phase");
  }
}

export function manufacturingConfig_PhaseToJSON(object: ManufacturingConfig_Phase): string {
  switch (object) {
    case ManufacturingConfig_Phase.PHASE_INVALID:
      return "PHASE_INVALID";
    case ManufacturingConfig_Phase.PHASE_EVT:
      return "PHASE_EVT";
    case ManufacturingConfig_Phase.PHASE_EVT2:
      return "PHASE_EVT2";
    case ManufacturingConfig_Phase.PHASE_DVT:
      return "PHASE_DVT";
    case ManufacturingConfig_Phase.PHASE_DVT2:
      return "PHASE_DVT2";
    case ManufacturingConfig_Phase.PHASE_PVT:
      return "PHASE_PVT";
    case ManufacturingConfig_Phase.PHASE_PVT2:
      return "PHASE_PVT2";
    case ManufacturingConfig_Phase.PHASE_PVT3:
      return "PHASE_PVT3";
    case ManufacturingConfig_Phase.PHASE_MP:
      return "PHASE_MP";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ManufacturingConfig_Phase");
  }
}

/**
 * phases for cr50 module. Next Tag: 3
 * Deprecated. Use DutState proto instead.
 */
export enum ManufacturingConfig_CR50Phase {
  CR50_PHASE_INVALID = 0,
  CR50_PHASE_PREPVT = 1,
  CR50_PHASE_PVT = 2,
}

export function manufacturingConfig_CR50PhaseFromJSON(object: any): ManufacturingConfig_CR50Phase {
  switch (object) {
    case 0:
    case "CR50_PHASE_INVALID":
      return ManufacturingConfig_CR50Phase.CR50_PHASE_INVALID;
    case 1:
    case "CR50_PHASE_PREPVT":
      return ManufacturingConfig_CR50Phase.CR50_PHASE_PREPVT;
    case 2:
    case "CR50_PHASE_PVT":
      return ManufacturingConfig_CR50Phase.CR50_PHASE_PVT;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ManufacturingConfig_CR50Phase");
  }
}

export function manufacturingConfig_CR50PhaseToJSON(object: ManufacturingConfig_CR50Phase): string {
  switch (object) {
    case ManufacturingConfig_CR50Phase.CR50_PHASE_INVALID:
      return "CR50_PHASE_INVALID";
    case ManufacturingConfig_CR50Phase.CR50_PHASE_PREPVT:
      return "CR50_PHASE_PREPVT";
    case ManufacturingConfig_CR50Phase.CR50_PHASE_PVT:
      return "CR50_PHASE_PVT";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ManufacturingConfig_CR50Phase");
  }
}

/**
 * key env for cr50 RW version. Next Tag: 3
 * Deprecated. Use DutState proto instead.
 */
export enum ManufacturingConfig_CR50KeyEnv {
  CR50_KEYENV_INVALID = 0,
  CR50_KEYENV_PROD = 1,
  CR50_KEYENV_DEV = 2,
}

export function manufacturingConfig_CR50KeyEnvFromJSON(object: any): ManufacturingConfig_CR50KeyEnv {
  switch (object) {
    case 0:
    case "CR50_KEYENV_INVALID":
      return ManufacturingConfig_CR50KeyEnv.CR50_KEYENV_INVALID;
    case 1:
    case "CR50_KEYENV_PROD":
      return ManufacturingConfig_CR50KeyEnv.CR50_KEYENV_PROD;
    case 2:
    case "CR50_KEYENV_DEV":
      return ManufacturingConfig_CR50KeyEnv.CR50_KEYENV_DEV;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ManufacturingConfig_CR50KeyEnv");
  }
}

export function manufacturingConfig_CR50KeyEnvToJSON(object: ManufacturingConfig_CR50KeyEnv): string {
  switch (object) {
    case ManufacturingConfig_CR50KeyEnv.CR50_KEYENV_INVALID:
      return "CR50_KEYENV_INVALID";
    case ManufacturingConfig_CR50KeyEnv.CR50_KEYENV_PROD:
      return "CR50_KEYENV_PROD";
    case ManufacturingConfig_CR50KeyEnv.CR50_KEYENV_DEV:
      return "CR50_KEYENV_DEV";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ManufacturingConfig_CR50KeyEnv");
  }
}

/** Message contains all ChromeOS manufacturing configs. */
export interface ManufacturingConfigList {
  readonly value: readonly ManufacturingConfig[];
}

function createBaseManufacturingConfig(): ManufacturingConfig {
  return {
    manufacturingId: undefined,
    devicePhase: 0,
    cr50Phase: 0,
    cr50KeyEnv: 0,
    wifiChip: "",
    hwidComponent: [],
    stylus: false,
    touchpad: false,
    touchscreen: false,
  };
}

export const ManufacturingConfig: MessageFns<ManufacturingConfig> = {
  encode(message: ManufacturingConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.manufacturingId !== undefined) {
      ConfigID.encode(message.manufacturingId, writer.uint32(10).fork()).join();
    }
    if (message.devicePhase !== 0) {
      writer.uint32(16).int32(message.devicePhase);
    }
    if (message.cr50Phase !== 0) {
      writer.uint32(24).int32(message.cr50Phase);
    }
    if (message.cr50KeyEnv !== 0) {
      writer.uint32(32).int32(message.cr50KeyEnv);
    }
    if (message.wifiChip !== "") {
      writer.uint32(42).string(message.wifiChip);
    }
    for (const v of message.hwidComponent) {
      writer.uint32(50).string(v!);
    }
    if (message.stylus !== false) {
      writer.uint32(56).bool(message.stylus);
    }
    if (message.touchpad !== false) {
      writer.uint32(64).bool(message.touchpad);
    }
    if (message.touchscreen !== false) {
      writer.uint32(72).bool(message.touchscreen);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManufacturingConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManufacturingConfig() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.manufacturingId = ConfigID.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.devicePhase = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.cr50Phase = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.cr50KeyEnv = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.wifiChip = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.hwidComponent.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.stylus = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.touchpad = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.touchscreen = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManufacturingConfig {
    return {
      manufacturingId: isSet(object.manufacturingId) ? ConfigID.fromJSON(object.manufacturingId) : undefined,
      devicePhase: isSet(object.devicePhase) ? manufacturingConfig_PhaseFromJSON(object.devicePhase) : 0,
      cr50Phase: isSet(object.cr50Phase) ? manufacturingConfig_CR50PhaseFromJSON(object.cr50Phase) : 0,
      cr50KeyEnv: isSet(object.cr50KeyEnv) ? manufacturingConfig_CR50KeyEnvFromJSON(object.cr50KeyEnv) : 0,
      wifiChip: isSet(object.wifiChip) ? globalThis.String(object.wifiChip) : "",
      hwidComponent: globalThis.Array.isArray(object?.hwidComponent)
        ? object.hwidComponent.map((e: any) => globalThis.String(e))
        : [],
      stylus: isSet(object.stylus) ? globalThis.Boolean(object.stylus) : false,
      touchpad: isSet(object.touchpad) ? globalThis.Boolean(object.touchpad) : false,
      touchscreen: isSet(object.touchscreen) ? globalThis.Boolean(object.touchscreen) : false,
    };
  },

  toJSON(message: ManufacturingConfig): unknown {
    const obj: any = {};
    if (message.manufacturingId !== undefined) {
      obj.manufacturingId = ConfigID.toJSON(message.manufacturingId);
    }
    if (message.devicePhase !== 0) {
      obj.devicePhase = manufacturingConfig_PhaseToJSON(message.devicePhase);
    }
    if (message.cr50Phase !== 0) {
      obj.cr50Phase = manufacturingConfig_CR50PhaseToJSON(message.cr50Phase);
    }
    if (message.cr50KeyEnv !== 0) {
      obj.cr50KeyEnv = manufacturingConfig_CR50KeyEnvToJSON(message.cr50KeyEnv);
    }
    if (message.wifiChip !== "") {
      obj.wifiChip = message.wifiChip;
    }
    if (message.hwidComponent?.length) {
      obj.hwidComponent = message.hwidComponent;
    }
    if (message.stylus !== false) {
      obj.stylus = message.stylus;
    }
    if (message.touchpad !== false) {
      obj.touchpad = message.touchpad;
    }
    if (message.touchscreen !== false) {
      obj.touchscreen = message.touchscreen;
    }
    return obj;
  },

  create(base?: DeepPartial<ManufacturingConfig>): ManufacturingConfig {
    return ManufacturingConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManufacturingConfig>): ManufacturingConfig {
    const message = createBaseManufacturingConfig() as any;
    message.manufacturingId = (object.manufacturingId !== undefined && object.manufacturingId !== null)
      ? ConfigID.fromPartial(object.manufacturingId)
      : undefined;
    message.devicePhase = object.devicePhase ?? 0;
    message.cr50Phase = object.cr50Phase ?? 0;
    message.cr50KeyEnv = object.cr50KeyEnv ?? 0;
    message.wifiChip = object.wifiChip ?? "";
    message.hwidComponent = object.hwidComponent?.map((e) => e) || [];
    message.stylus = object.stylus ?? false;
    message.touchpad = object.touchpad ?? false;
    message.touchscreen = object.touchscreen ?? false;
    return message;
  },
};

function createBaseManufacturingConfigList(): ManufacturingConfigList {
  return { value: [] };
}

export const ManufacturingConfigList: MessageFns<ManufacturingConfigList> = {
  encode(message: ManufacturingConfigList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.value) {
      ManufacturingConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManufacturingConfigList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManufacturingConfigList() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value.push(ManufacturingConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManufacturingConfigList {
    return {
      value: globalThis.Array.isArray(object?.value)
        ? object.value.map((e: any) => ManufacturingConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ManufacturingConfigList): unknown {
    const obj: any = {};
    if (message.value?.length) {
      obj.value = message.value.map((e) => ManufacturingConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ManufacturingConfigList>): ManufacturingConfigList {
    return ManufacturingConfigList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ManufacturingConfigList>): ManufacturingConfigList {
    const message = createBaseManufacturingConfigList() as any;
    message.value = object.value?.map((e) => ManufacturingConfig.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
