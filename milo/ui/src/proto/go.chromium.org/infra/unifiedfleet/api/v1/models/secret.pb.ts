// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.1
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/secret.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "unifiedfleet.api.v1.models";

/**
 * Next Tag: 3
 * DefaultWifi is the default wifi setting in a scope indicated by the name.
 */
export interface DefaultWifi {
  /**
   * The resource name of a default wifi setting in a scope.
   * Format: defaultwifis/{defaultwifi}
   * The default wifi is named after the zone name or pool name, but in lower
   * case to follow https://google.aip.dev/122.
   * If the name starts with "zone_", we think it's for a UFS zone as all UFS
   * zones are prefixed with "ZONE_". Otherwise, it's for a DUT pool.
   * Example: "defaultwifis/zone_sfo36_os" (for a UFS zone),
   * Example: "defaultwifis/wifi-pool" (for a DUT pool).
   */
  readonly name: string;
  readonly wifiSecret: Secret | undefined;
}

/**
 * Next Tag: 3
 * Secret is the secret stored/managed in the Secret Manager of a GCP
 * project.
 */
export interface Secret {
  /** The GCP project storing the secret, default is 'unifiedfleet', i.e. UFS. */
  readonly projectId: string;
  /** The secret name in the Secret Manager. */
  readonly secretName: string;
}

function createBaseDefaultWifi(): DefaultWifi {
  return { name: "", wifiSecret: undefined };
}

export const DefaultWifi: MessageFns<DefaultWifi> = {
  encode(message: DefaultWifi, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.wifiSecret !== undefined) {
      Secret.encode(message.wifiSecret, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DefaultWifi {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDefaultWifi() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.wifiSecret = Secret.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DefaultWifi {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      wifiSecret: isSet(object.wifiSecret) ? Secret.fromJSON(object.wifiSecret) : undefined,
    };
  },

  toJSON(message: DefaultWifi): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.wifiSecret !== undefined) {
      obj.wifiSecret = Secret.toJSON(message.wifiSecret);
    }
    return obj;
  },

  create(base?: DeepPartial<DefaultWifi>): DefaultWifi {
    return DefaultWifi.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DefaultWifi>): DefaultWifi {
    const message = createBaseDefaultWifi() as any;
    message.name = object.name ?? "";
    message.wifiSecret = (object.wifiSecret !== undefined && object.wifiSecret !== null)
      ? Secret.fromPartial(object.wifiSecret)
      : undefined;
    return message;
  },
};

function createBaseSecret(): Secret {
  return { projectId: "", secretName: "" };
}

export const Secret: MessageFns<Secret> = {
  encode(message: Secret, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.secretName !== "") {
      writer.uint32(18).string(message.secretName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secret {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecret() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secretName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secret {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      secretName: isSet(object.secretName) ? globalThis.String(object.secretName) : "",
    };
  },

  toJSON(message: Secret): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.secretName !== "") {
      obj.secretName = message.secretName;
    }
    return obj;
  },

  create(base?: DeepPartial<Secret>): Secret {
    return Secret.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secret>): Secret {
    const message = createBaseSecret() as any;
    message.projectId = object.projectId ?? "";
    message.secretName = object.secretName ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
