// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.1
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/chassis_x.proto

/* eslint-disable */

export const protobufPackage = "unifiedfleet.api.v1.models";

/**
 * Copied from https://source.corp.google.com/piper///depot/google3/java/com/google/chrome/crosbuilds/common/proto/device.proto
 * and edited
 * TODO(b/297076502): Automate changes with Copybara
 */

export enum ChassisXBrandType {
  UNKNOWN = 0,
  /** @deprecated */
  NO_BRAND = 1,
  /** @deprecated */
  MIXED = 2,
  /** @deprecated */
  ALL_BRANDED = 3,
  NON_X = 4,
  HARD_BRANDED = 5,
  SOFT_BRANDED_LEGACY = 6,
  SOFT_BRANDED_WAIVER = 7,
  NA = 8,
}

export function chassisXBrandTypeFromJSON(object: any): ChassisXBrandType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ChassisXBrandType.UNKNOWN;
    case 1:
    case "NO_BRAND":
      return ChassisXBrandType.NO_BRAND;
    case 2:
    case "MIXED":
      return ChassisXBrandType.MIXED;
    case 3:
    case "ALL_BRANDED":
      return ChassisXBrandType.ALL_BRANDED;
    case 4:
    case "NON_X":
      return ChassisXBrandType.NON_X;
    case 5:
    case "HARD_BRANDED":
      return ChassisXBrandType.HARD_BRANDED;
    case 6:
    case "SOFT_BRANDED_LEGACY":
      return ChassisXBrandType.SOFT_BRANDED_LEGACY;
    case 7:
    case "SOFT_BRANDED_WAIVER":
      return ChassisXBrandType.SOFT_BRANDED_WAIVER;
    case 8:
    case "NA":
      return ChassisXBrandType.NA;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ChassisXBrandType");
  }
}

export function chassisXBrandTypeToJSON(object: ChassisXBrandType): string {
  switch (object) {
    case ChassisXBrandType.UNKNOWN:
      return "UNKNOWN";
    case ChassisXBrandType.NO_BRAND:
      return "NO_BRAND";
    case ChassisXBrandType.MIXED:
      return "MIXED";
    case ChassisXBrandType.ALL_BRANDED:
      return "ALL_BRANDED";
    case ChassisXBrandType.NON_X:
      return "NON_X";
    case ChassisXBrandType.HARD_BRANDED:
      return "HARD_BRANDED";
    case ChassisXBrandType.SOFT_BRANDED_LEGACY:
      return "SOFT_BRANDED_LEGACY";
    case ChassisXBrandType.SOFT_BRANDED_WAIVER:
      return "SOFT_BRANDED_WAIVER";
    case ChassisXBrandType.NA:
      return "NA";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ChassisXBrandType");
  }
}
