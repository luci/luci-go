// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.0
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/peripherals.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp.pb";
import { State, stateFromJSON, stateToJSON } from "./state.pb";

export const protobufPackage = "unifiedfleet.api.v1.models";

export interface KVM {
  /**
   * Unique serial_number or asset tag
   * The format will be kvms/{kvm}
   */
  readonly name: string;
  readonly macAddress: string;
  /**
   * Should match one of the predefined Chrome Platforms.
   * Refers to ChromePlatform name
   */
  readonly chromePlatform: string;
  readonly capacityPort: number;
  /** Record the last update timestamp of this KVM (In UTC timezone) */
  readonly updateTime:
    | string
    | undefined;
  /** Refers to Rack name */
  readonly rack: string;
  /** tags user can attach for easy querying/searching */
  readonly tags: readonly string[];
  /** Refers to Zone */
  readonly zone: string;
  /** A description of this kvm. */
  readonly description: string;
  /** State of the kvm */
  readonly resourceState: State;
}

/** Refer to one port of a given KVM */
export interface KVMInterface {
  /** Refers to KVM name */
  readonly kvm: string;
  readonly portName: string;
}

export interface RPM {
  /**
   * Unique serial_number or asset tag
   * The format will be rpms/{rpm}
   */
  readonly name: string;
  readonly macAddress: string;
  readonly capacityPort: number;
  /**
   * Just for record here, can be added later if needed
   * To be recorded: model, manufacturer, amperage, voltage
   * Record the last update timestamp of this RPM (In UTC timezone)
   */
  readonly updateTime:
    | string
    | undefined;
  /** Refers to Rack name */
  readonly rack: string;
  /** tags user can attach for easy querying/searching */
  readonly tags: readonly string[];
  /** Refers to Zone */
  readonly zone: string;
  /** State of the rpm */
  readonly resourceState: State;
  /** A description of this rpm. */
  readonly description: string;
}

/** Refer to one port of a given RPM */
export interface RPMInterface {
  /** Refers to RPM name */
  readonly rpm: string;
  readonly portName: string;
}

export interface Switch {
  /**
   * Unique serial_number or asset tag
   * The format will be switches/{switch}
   */
  readonly name: string;
  /**
   * Switch can have a mac address and remotely controlled, but it’s hard to
   * get the mac_address for it and we don’t use it for now.
   * Commenting here as we don’t forget this if we’re able/want to track
   * its mac_address.
   * More info can be recorded for switch if available, e.g.
   * model, manufacturer
   */
  readonly capacityPort: number;
  /** Record the last update timestamp of this Switch (In UTC timezone) */
  readonly updateTime:
    | string
    | undefined;
  /** Usually describe the model of the switch */
  readonly description: string;
  /** Refers to Rack name */
  readonly rack: string;
  /** tags user can attach for easy querying/searching */
  readonly tags: readonly string[];
  /** Refers to Zone */
  readonly zone: string;
  /** State of the switch */
  readonly resourceState: State;
}

/** Refer to one port of a given switch */
export interface SwitchInterface {
  /** Refers to Switch name */
  readonly switch: string;
  readonly portName: string;
}

export interface Drac {
  /**
   * Unique serial_number or asset tag
   * The format will be dracs/{drac}
   */
  readonly name: string;
  readonly displayName: string;
  readonly macAddress: string;
  readonly switchInterface: SwitchInterface | undefined;
  readonly password: string;
  /** Record the last update timestamp of this Drac (In UTC timezone) */
  readonly updateTime:
    | string
    | undefined;
  /** Refers to Machine name */
  readonly machine: string;
  /** Refers to Rack name */
  readonly rack: string;
  /** tags user can attach for easy querying/searching */
  readonly tags: readonly string[];
  /** Refers to Zone */
  readonly zone: string;
  /** State of the drac */
  readonly resourceState: State;
}

function createBaseKVM(): KVM {
  return {
    name: "",
    macAddress: "",
    chromePlatform: "",
    capacityPort: 0,
    updateTime: undefined,
    rack: "",
    tags: [],
    zone: "",
    description: "",
    resourceState: 0,
  };
}

export const KVM: MessageFns<KVM> = {
  encode(message: KVM, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.macAddress !== "") {
      writer.uint32(18).string(message.macAddress);
    }
    if (message.chromePlatform !== "") {
      writer.uint32(26).string(message.chromePlatform);
    }
    if (message.capacityPort !== 0) {
      writer.uint32(32).int32(message.capacityPort);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(42).fork()).join();
    }
    if (message.rack !== "") {
      writer.uint32(58).string(message.rack);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    if (message.zone !== "") {
      writer.uint32(82).string(message.zone);
    }
    if (message.description !== "") {
      writer.uint32(90).string(message.description);
    }
    if (message.resourceState !== 0) {
      writer.uint32(96).int32(message.resourceState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KVM {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKVM() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.macAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chromePlatform = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.capacityPort = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.rack = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.zone = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.resourceState = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KVM {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      macAddress: isSet(object.macAddress) ? globalThis.String(object.macAddress) : "",
      chromePlatform: isSet(object.chromePlatform) ? globalThis.String(object.chromePlatform) : "",
      capacityPort: isSet(object.capacityPort) ? globalThis.Number(object.capacityPort) : 0,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      rack: isSet(object.rack) ? globalThis.String(object.rack) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      resourceState: isSet(object.resourceState) ? stateFromJSON(object.resourceState) : 0,
    };
  },

  toJSON(message: KVM): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.macAddress !== "") {
      obj.macAddress = message.macAddress;
    }
    if (message.chromePlatform !== "") {
      obj.chromePlatform = message.chromePlatform;
    }
    if (message.capacityPort !== 0) {
      obj.capacityPort = Math.round(message.capacityPort);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.rack !== "") {
      obj.rack = message.rack;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.resourceState !== 0) {
      obj.resourceState = stateToJSON(message.resourceState);
    }
    return obj;
  },

  create(base?: DeepPartial<KVM>): KVM {
    return KVM.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KVM>): KVM {
    const message = createBaseKVM() as any;
    message.name = object.name ?? "";
    message.macAddress = object.macAddress ?? "";
    message.chromePlatform = object.chromePlatform ?? "";
    message.capacityPort = object.capacityPort ?? 0;
    message.updateTime = object.updateTime ?? undefined;
    message.rack = object.rack ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.zone = object.zone ?? "";
    message.description = object.description ?? "";
    message.resourceState = object.resourceState ?? 0;
    return message;
  },
};

function createBaseKVMInterface(): KVMInterface {
  return { kvm: "", portName: "" };
}

export const KVMInterface: MessageFns<KVMInterface> = {
  encode(message: KVMInterface, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kvm !== "") {
      writer.uint32(10).string(message.kvm);
    }
    if (message.portName !== "") {
      writer.uint32(26).string(message.portName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KVMInterface {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKVMInterface() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.kvm = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.portName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KVMInterface {
    return {
      kvm: isSet(object.kvm) ? globalThis.String(object.kvm) : "",
      portName: isSet(object.portName) ? globalThis.String(object.portName) : "",
    };
  },

  toJSON(message: KVMInterface): unknown {
    const obj: any = {};
    if (message.kvm !== "") {
      obj.kvm = message.kvm;
    }
    if (message.portName !== "") {
      obj.portName = message.portName;
    }
    return obj;
  },

  create(base?: DeepPartial<KVMInterface>): KVMInterface {
    return KVMInterface.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<KVMInterface>): KVMInterface {
    const message = createBaseKVMInterface() as any;
    message.kvm = object.kvm ?? "";
    message.portName = object.portName ?? "";
    return message;
  },
};

function createBaseRPM(): RPM {
  return {
    name: "",
    macAddress: "",
    capacityPort: 0,
    updateTime: undefined,
    rack: "",
    tags: [],
    zone: "",
    resourceState: 0,
    description: "",
  };
}

export const RPM: MessageFns<RPM> = {
  encode(message: RPM, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.macAddress !== "") {
      writer.uint32(18).string(message.macAddress);
    }
    if (message.capacityPort !== 0) {
      writer.uint32(24).int32(message.capacityPort);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    if (message.rack !== "") {
      writer.uint32(50).string(message.rack);
    }
    for (const v of message.tags) {
      writer.uint32(58).string(v!);
    }
    if (message.zone !== "") {
      writer.uint32(82).string(message.zone);
    }
    if (message.resourceState !== 0) {
      writer.uint32(88).int32(message.resourceState);
    }
    if (message.description !== "") {
      writer.uint32(98).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RPM {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRPM() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.macAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.capacityPort = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rack = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.zone = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.resourceState = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RPM {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      macAddress: isSet(object.macAddress) ? globalThis.String(object.macAddress) : "",
      capacityPort: isSet(object.capacityPort) ? globalThis.Number(object.capacityPort) : 0,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      rack: isSet(object.rack) ? globalThis.String(object.rack) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      resourceState: isSet(object.resourceState) ? stateFromJSON(object.resourceState) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: RPM): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.macAddress !== "") {
      obj.macAddress = message.macAddress;
    }
    if (message.capacityPort !== 0) {
      obj.capacityPort = Math.round(message.capacityPort);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.rack !== "") {
      obj.rack = message.rack;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.resourceState !== 0) {
      obj.resourceState = stateToJSON(message.resourceState);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<RPM>): RPM {
    return RPM.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RPM>): RPM {
    const message = createBaseRPM() as any;
    message.name = object.name ?? "";
    message.macAddress = object.macAddress ?? "";
    message.capacityPort = object.capacityPort ?? 0;
    message.updateTime = object.updateTime ?? undefined;
    message.rack = object.rack ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.zone = object.zone ?? "";
    message.resourceState = object.resourceState ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseRPMInterface(): RPMInterface {
  return { rpm: "", portName: "" };
}

export const RPMInterface: MessageFns<RPMInterface> = {
  encode(message: RPMInterface, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rpm !== "") {
      writer.uint32(10).string(message.rpm);
    }
    if (message.portName !== "") {
      writer.uint32(26).string(message.portName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RPMInterface {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRPMInterface() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rpm = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.portName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RPMInterface {
    return {
      rpm: isSet(object.rpm) ? globalThis.String(object.rpm) : "",
      portName: isSet(object.portName) ? globalThis.String(object.portName) : "",
    };
  },

  toJSON(message: RPMInterface): unknown {
    const obj: any = {};
    if (message.rpm !== "") {
      obj.rpm = message.rpm;
    }
    if (message.portName !== "") {
      obj.portName = message.portName;
    }
    return obj;
  },

  create(base?: DeepPartial<RPMInterface>): RPMInterface {
    return RPMInterface.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RPMInterface>): RPMInterface {
    const message = createBaseRPMInterface() as any;
    message.rpm = object.rpm ?? "";
    message.portName = object.portName ?? "";
    return message;
  },
};

function createBaseSwitch(): Switch {
  return {
    name: "",
    capacityPort: 0,
    updateTime: undefined,
    description: "",
    rack: "",
    tags: [],
    zone: "",
    resourceState: 0,
  };
}

export const Switch: MessageFns<Switch> = {
  encode(message: Switch, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.capacityPort !== 0) {
      writer.uint32(16).int32(message.capacityPort);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.rack !== "") {
      writer.uint32(50).string(message.rack);
    }
    for (const v of message.tags) {
      writer.uint32(58).string(v!);
    }
    if (message.zone !== "") {
      writer.uint32(74).string(message.zone);
    }
    if (message.resourceState !== 0) {
      writer.uint32(80).int32(message.resourceState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Switch {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwitch() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.capacityPort = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rack = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.zone = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.resourceState = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Switch {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      capacityPort: isSet(object.capacityPort) ? globalThis.Number(object.capacityPort) : 0,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      rack: isSet(object.rack) ? globalThis.String(object.rack) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      resourceState: isSet(object.resourceState) ? stateFromJSON(object.resourceState) : 0,
    };
  },

  toJSON(message: Switch): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.capacityPort !== 0) {
      obj.capacityPort = Math.round(message.capacityPort);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.rack !== "") {
      obj.rack = message.rack;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.resourceState !== 0) {
      obj.resourceState = stateToJSON(message.resourceState);
    }
    return obj;
  },

  create(base?: DeepPartial<Switch>): Switch {
    return Switch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Switch>): Switch {
    const message = createBaseSwitch() as any;
    message.name = object.name ?? "";
    message.capacityPort = object.capacityPort ?? 0;
    message.updateTime = object.updateTime ?? undefined;
    message.description = object.description ?? "";
    message.rack = object.rack ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.zone = object.zone ?? "";
    message.resourceState = object.resourceState ?? 0;
    return message;
  },
};

function createBaseSwitchInterface(): SwitchInterface {
  return { switch: "", portName: "" };
}

export const SwitchInterface: MessageFns<SwitchInterface> = {
  encode(message: SwitchInterface, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.switch !== "") {
      writer.uint32(10).string(message.switch);
    }
    if (message.portName !== "") {
      writer.uint32(26).string(message.portName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SwitchInterface {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSwitchInterface() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.switch = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.portName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SwitchInterface {
    return {
      switch: isSet(object.switch) ? globalThis.String(object.switch) : "",
      portName: isSet(object.portName) ? globalThis.String(object.portName) : "",
    };
  },

  toJSON(message: SwitchInterface): unknown {
    const obj: any = {};
    if (message.switch !== "") {
      obj.switch = message.switch;
    }
    if (message.portName !== "") {
      obj.portName = message.portName;
    }
    return obj;
  },

  create(base?: DeepPartial<SwitchInterface>): SwitchInterface {
    return SwitchInterface.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SwitchInterface>): SwitchInterface {
    const message = createBaseSwitchInterface() as any;
    message.switch = object.switch ?? "";
    message.portName = object.portName ?? "";
    return message;
  },
};

function createBaseDrac(): Drac {
  return {
    name: "",
    displayName: "",
    macAddress: "",
    switchInterface: undefined,
    password: "",
    updateTime: undefined,
    machine: "",
    rack: "",
    tags: [],
    zone: "",
    resourceState: 0,
  };
}

export const Drac: MessageFns<Drac> = {
  encode(message: Drac, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.macAddress !== "") {
      writer.uint32(26).string(message.macAddress);
    }
    if (message.switchInterface !== undefined) {
      SwitchInterface.encode(message.switchInterface, writer.uint32(34).fork()).join();
    }
    if (message.password !== "") {
      writer.uint32(42).string(message.password);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.machine !== "") {
      writer.uint32(58).string(message.machine);
    }
    if (message.rack !== "") {
      writer.uint32(74).string(message.rack);
    }
    for (const v of message.tags) {
      writer.uint32(82).string(v!);
    }
    if (message.zone !== "") {
      writer.uint32(98).string(message.zone);
    }
    if (message.resourceState !== 0) {
      writer.uint32(104).int32(message.resourceState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Drac {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDrac() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.macAddress = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.switchInterface = SwitchInterface.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.machine = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.rack = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.zone = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.resourceState = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Drac {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      macAddress: isSet(object.macAddress) ? globalThis.String(object.macAddress) : "",
      switchInterface: isSet(object.switchInterface) ? SwitchInterface.fromJSON(object.switchInterface) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      machine: isSet(object.machine) ? globalThis.String(object.machine) : "",
      rack: isSet(object.rack) ? globalThis.String(object.rack) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      zone: isSet(object.zone) ? globalThis.String(object.zone) : "",
      resourceState: isSet(object.resourceState) ? stateFromJSON(object.resourceState) : 0,
    };
  },

  toJSON(message: Drac): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.macAddress !== "") {
      obj.macAddress = message.macAddress;
    }
    if (message.switchInterface !== undefined) {
      obj.switchInterface = SwitchInterface.toJSON(message.switchInterface);
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.machine !== "") {
      obj.machine = message.machine;
    }
    if (message.rack !== "") {
      obj.rack = message.rack;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.zone !== "") {
      obj.zone = message.zone;
    }
    if (message.resourceState !== 0) {
      obj.resourceState = stateToJSON(message.resourceState);
    }
    return obj;
  },

  create(base?: DeepPartial<Drac>): Drac {
    return Drac.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Drac>): Drac {
    const message = createBaseDrac() as any;
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.macAddress = object.macAddress ?? "";
    message.switchInterface = (object.switchInterface !== undefined && object.switchInterface !== null)
      ? SwitchInterface.fromPartial(object.switchInterface)
      : undefined;
    message.password = object.password ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.machine = object.machine ?? "";
    message.rack = object.rack ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.zone = object.zone ?? "";
    message.resourceState = object.resourceState ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
