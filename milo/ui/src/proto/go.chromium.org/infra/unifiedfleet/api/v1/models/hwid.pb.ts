// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/hwid.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "unifiedfleet.api.v1.models";

/** The response message for `HwidService.GetDutLabel`. */
export interface GetDutLabelResponse {
  /** The DUT labels decoded from the HWID string. */
  readonly dutLabel: DutLabel | undefined;
}

/**
 * A set of labels representing the features of the device, can be revealed
 * by decoding the HWID string.
 */
export interface DutLabel {
  /** Possible labels in the labels field. */
  readonly possibleLabels: readonly string[];
  /** NOLINT */
  readonly labels: readonly DutLabel_Label[];
}

/** All labels extracted from the HWID string. */
export interface DutLabel_Label {
  /** Name of the label, will always exist in the field of `possible_labels`. */
  readonly name: string;
  /** The value of this label. */
  readonly value: string;
}

export interface HwidData {
  readonly sku: string;
  readonly variant: string;
  readonly hwid: string;
  readonly dutLabel: DutLabel | undefined;
  readonly stylus: boolean;
  readonly touchpad: boolean;
  readonly touchscreen: boolean;
  readonly raccEnabledStatus: string;
}

function createBaseGetDutLabelResponse(): GetDutLabelResponse {
  return { dutLabel: undefined };
}

export const GetDutLabelResponse: MessageFns<GetDutLabelResponse> = {
  encode(message: GetDutLabelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dutLabel !== undefined) {
      DutLabel.encode(message.dutLabel, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDutLabelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDutLabelResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dutLabel = DutLabel.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDutLabelResponse {
    return { dutLabel: isSet(object.dutLabel) ? DutLabel.fromJSON(object.dutLabel) : undefined };
  },

  toJSON(message: GetDutLabelResponse): unknown {
    const obj: any = {};
    if (message.dutLabel !== undefined) {
      obj.dutLabel = DutLabel.toJSON(message.dutLabel);
    }
    return obj;
  },

  create(base?: DeepPartial<GetDutLabelResponse>): GetDutLabelResponse {
    return GetDutLabelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDutLabelResponse>): GetDutLabelResponse {
    const message = createBaseGetDutLabelResponse() as any;
    message.dutLabel = (object.dutLabel !== undefined && object.dutLabel !== null)
      ? DutLabel.fromPartial(object.dutLabel)
      : undefined;
    return message;
  },
};

function createBaseDutLabel(): DutLabel {
  return { possibleLabels: [], labels: [] };
}

export const DutLabel: MessageFns<DutLabel> = {
  encode(message: DutLabel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.possibleLabels) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.labels) {
      DutLabel_Label.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DutLabel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDutLabel() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.possibleLabels.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.labels.push(DutLabel_Label.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DutLabel {
    return {
      possibleLabels: globalThis.Array.isArray(object?.possibleLabels)
        ? object.possibleLabels.map((e: any) => globalThis.String(e))
        : [],
      labels: globalThis.Array.isArray(object?.labels) ? object.labels.map((e: any) => DutLabel_Label.fromJSON(e)) : [],
    };
  },

  toJSON(message: DutLabel): unknown {
    const obj: any = {};
    if (message.possibleLabels?.length) {
      obj.possibleLabels = message.possibleLabels;
    }
    if (message.labels?.length) {
      obj.labels = message.labels.map((e) => DutLabel_Label.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DutLabel>): DutLabel {
    return DutLabel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DutLabel>): DutLabel {
    const message = createBaseDutLabel() as any;
    message.possibleLabels = object.possibleLabels?.map((e) => e) || [];
    message.labels = object.labels?.map((e) => DutLabel_Label.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDutLabel_Label(): DutLabel_Label {
  return { name: "", value: "" };
}

export const DutLabel_Label: MessageFns<DutLabel_Label> = {
  encode(message: DutLabel_Label, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DutLabel_Label {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDutLabel_Label() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DutLabel_Label {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DutLabel_Label): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DutLabel_Label>): DutLabel_Label {
    return DutLabel_Label.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DutLabel_Label>): DutLabel_Label {
    const message = createBaseDutLabel_Label() as any;
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseHwidData(): HwidData {
  return {
    sku: "",
    variant: "",
    hwid: "",
    dutLabel: undefined,
    stylus: false,
    touchpad: false,
    touchscreen: false,
    raccEnabledStatus: "",
  };
}

export const HwidData: MessageFns<HwidData> = {
  encode(message: HwidData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(10).string(message.sku);
    }
    if (message.variant !== "") {
      writer.uint32(18).string(message.variant);
    }
    if (message.hwid !== "") {
      writer.uint32(26).string(message.hwid);
    }
    if (message.dutLabel !== undefined) {
      DutLabel.encode(message.dutLabel, writer.uint32(34).fork()).join();
    }
    if (message.stylus !== false) {
      writer.uint32(40).bool(message.stylus);
    }
    if (message.touchpad !== false) {
      writer.uint32(48).bool(message.touchpad);
    }
    if (message.touchscreen !== false) {
      writer.uint32(56).bool(message.touchscreen);
    }
    if (message.raccEnabledStatus !== "") {
      writer.uint32(66).string(message.raccEnabledStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HwidData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHwidData() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.variant = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.hwid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dutLabel = DutLabel.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.stylus = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.touchpad = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.touchscreen = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.raccEnabledStatus = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HwidData {
    return {
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      variant: isSet(object.variant) ? globalThis.String(object.variant) : "",
      hwid: isSet(object.hwid) ? globalThis.String(object.hwid) : "",
      dutLabel: isSet(object.dutLabel) ? DutLabel.fromJSON(object.dutLabel) : undefined,
      stylus: isSet(object.stylus) ? globalThis.Boolean(object.stylus) : false,
      touchpad: isSet(object.touchpad) ? globalThis.Boolean(object.touchpad) : false,
      touchscreen: isSet(object.touchscreen) ? globalThis.Boolean(object.touchscreen) : false,
      raccEnabledStatus: isSet(object.raccEnabledStatus) ? globalThis.String(object.raccEnabledStatus) : "",
    };
  },

  toJSON(message: HwidData): unknown {
    const obj: any = {};
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.variant !== "") {
      obj.variant = message.variant;
    }
    if (message.hwid !== "") {
      obj.hwid = message.hwid;
    }
    if (message.dutLabel !== undefined) {
      obj.dutLabel = DutLabel.toJSON(message.dutLabel);
    }
    if (message.stylus !== false) {
      obj.stylus = message.stylus;
    }
    if (message.touchpad !== false) {
      obj.touchpad = message.touchpad;
    }
    if (message.touchscreen !== false) {
      obj.touchscreen = message.touchscreen;
    }
    if (message.raccEnabledStatus !== "") {
      obj.raccEnabledStatus = message.raccEnabledStatus;
    }
    return obj;
  },

  create(base?: DeepPartial<HwidData>): HwidData {
    return HwidData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HwidData>): HwidData {
    const message = createBaseHwidData() as any;
    message.sku = object.sku ?? "";
    message.variant = object.variant ?? "";
    message.hwid = object.hwid ?? "";
    message.dutLabel = (object.dutLabel !== undefined && object.dutLabel !== null)
      ? DutLabel.fromPartial(object.dutLabel)
      : undefined;
    message.stylus = object.stylus ?? false;
    message.touchpad = object.touchpad ?? false;
    message.touchscreen = object.touchscreen ?? false;
    message.raccEnabledStatus = object.raccEnabledStatus ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
