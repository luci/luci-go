// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/rack.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp.pb";
import { Location } from "./location.pb";
import { KVM, RPM, Switch } from "./peripherals.pb";
import { State, stateFromJSON, stateToJSON } from "./state.pb";

export const protobufPackage = "unifiedfleet.api.v1.models";

/**
 * Rack refers to the racks which are placed in
 * Chrome Browser lab and Chrome OS lab. Machines and Pheripherals
 * are placed in the Racks.
 */
export interface Rack {
  /**
   * Unique (fake probably) asset tag
   * The format will be racks/XXX
   */
  readonly name: string;
  /**
   * The Breadboard Number for rack.
   * Reference: https://moma.corp.google.com/glossary?q=bbnum
   */
  readonly bbnum: number;
  readonly location:
    | Location
    | undefined;
  /** Indicates the Rack Unit capacity of the rack. */
  readonly capacityRu: number;
  readonly chromeBrowserRack?: ChromeBrowserRack | undefined;
  readonly chromeosRack?:
    | ChromeOSRack
    | undefined;
  /** Record the last update timestamp of this Rack (In UTC timezone) */
  readonly updateTime:
    | string
    | undefined;
  /** Record the ACL info of the rack */
  readonly realm: string;
  /** tags user can attach for easy querying/searching */
  readonly tags: readonly string[];
  /** A description of this rack. */
  readonly description: string;
  /** State of the rack */
  readonly resourceState: State;
}

/** ChromeBrowserRack refers to the rack in Chrome Browser lab */
export interface ChromeBrowserRack {
  readonly rpmObjects: readonly RPM[];
  readonly kvmObjects: readonly KVM[];
  readonly switchObjects: readonly Switch[];
}

/** ChromeOSRack refers to the rack in Chrome Browser lab */
export interface ChromeOSRack {
  readonly switchObjects: readonly Switch[];
}

function createBaseRack(): Rack {
  return {
    name: "",
    bbnum: 0,
    location: undefined,
    capacityRu: 0,
    chromeBrowserRack: undefined,
    chromeosRack: undefined,
    updateTime: undefined,
    realm: "",
    tags: [],
    description: "",
    resourceState: 0,
  };
}

export const Rack: MessageFns<Rack> = {
  encode(message: Rack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.bbnum !== 0) {
      writer.uint32(104).int32(message.bbnum);
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(18).fork()).join();
    }
    if (message.capacityRu !== 0) {
      writer.uint32(24).int32(message.capacityRu);
    }
    if (message.chromeBrowserRack !== undefined) {
      ChromeBrowserRack.encode(message.chromeBrowserRack, writer.uint32(34).fork()).join();
    }
    if (message.chromeosRack !== undefined) {
      ChromeOSRack.encode(message.chromeosRack, writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.realm !== "") {
      writer.uint32(58).string(message.realm);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    if (message.description !== "") {
      writer.uint32(90).string(message.description);
    }
    if (message.resourceState !== 0) {
      writer.uint32(96).int32(message.resourceState);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Rack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRack() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.bbnum = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.capacityRu = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chromeBrowserRack = ChromeBrowserRack.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chromeosRack = ChromeOSRack.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.realm = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.resourceState = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Rack {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      bbnum: isSet(object.bbnum) ? globalThis.Number(object.bbnum) : 0,
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      capacityRu: isSet(object.capacityRu) ? globalThis.Number(object.capacityRu) : 0,
      chromeBrowserRack: isSet(object.chromeBrowserRack)
        ? ChromeBrowserRack.fromJSON(object.chromeBrowserRack)
        : undefined,
      chromeosRack: isSet(object.chromeosRack) ? ChromeOSRack.fromJSON(object.chromeosRack) : undefined,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      realm: isSet(object.realm) ? globalThis.String(object.realm) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      resourceState: isSet(object.resourceState) ? stateFromJSON(object.resourceState) : 0,
    };
  },

  toJSON(message: Rack): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.bbnum !== 0) {
      obj.bbnum = Math.round(message.bbnum);
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.capacityRu !== 0) {
      obj.capacityRu = Math.round(message.capacityRu);
    }
    if (message.chromeBrowserRack !== undefined) {
      obj.chromeBrowserRack = ChromeBrowserRack.toJSON(message.chromeBrowserRack);
    }
    if (message.chromeosRack !== undefined) {
      obj.chromeosRack = ChromeOSRack.toJSON(message.chromeosRack);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.realm !== "") {
      obj.realm = message.realm;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.resourceState !== 0) {
      obj.resourceState = stateToJSON(message.resourceState);
    }
    return obj;
  },

  create(base?: DeepPartial<Rack>): Rack {
    return Rack.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Rack>): Rack {
    const message = createBaseRack() as any;
    message.name = object.name ?? "";
    message.bbnum = object.bbnum ?? 0;
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.capacityRu = object.capacityRu ?? 0;
    message.chromeBrowserRack = (object.chromeBrowserRack !== undefined && object.chromeBrowserRack !== null)
      ? ChromeBrowserRack.fromPartial(object.chromeBrowserRack)
      : undefined;
    message.chromeosRack = (object.chromeosRack !== undefined && object.chromeosRack !== null)
      ? ChromeOSRack.fromPartial(object.chromeosRack)
      : undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.realm = object.realm ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.description = object.description ?? "";
    message.resourceState = object.resourceState ?? 0;
    return message;
  },
};

function createBaseChromeBrowserRack(): ChromeBrowserRack {
  return { rpmObjects: [], kvmObjects: [], switchObjects: [] };
}

export const ChromeBrowserRack: MessageFns<ChromeBrowserRack> = {
  encode(message: ChromeBrowserRack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rpmObjects) {
      RPM.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.kvmObjects) {
      KVM.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.switchObjects) {
      Switch.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChromeBrowserRack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChromeBrowserRack() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rpmObjects.push(RPM.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.kvmObjects.push(KVM.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.switchObjects.push(Switch.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChromeBrowserRack {
    return {
      rpmObjects: globalThis.Array.isArray(object?.rpmObjects)
        ? object.rpmObjects.map((e: any) => RPM.fromJSON(e))
        : [],
      kvmObjects: globalThis.Array.isArray(object?.kvmObjects)
        ? object.kvmObjects.map((e: any) => KVM.fromJSON(e))
        : [],
      switchObjects: globalThis.Array.isArray(object?.switchObjects)
        ? object.switchObjects.map((e: any) => Switch.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ChromeBrowserRack): unknown {
    const obj: any = {};
    if (message.rpmObjects?.length) {
      obj.rpmObjects = message.rpmObjects.map((e) => RPM.toJSON(e));
    }
    if (message.kvmObjects?.length) {
      obj.kvmObjects = message.kvmObjects.map((e) => KVM.toJSON(e));
    }
    if (message.switchObjects?.length) {
      obj.switchObjects = message.switchObjects.map((e) => Switch.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChromeBrowserRack>): ChromeBrowserRack {
    return ChromeBrowserRack.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChromeBrowserRack>): ChromeBrowserRack {
    const message = createBaseChromeBrowserRack() as any;
    message.rpmObjects = object.rpmObjects?.map((e) => RPM.fromPartial(e)) || [];
    message.kvmObjects = object.kvmObjects?.map((e) => KVM.fromPartial(e)) || [];
    message.switchObjects = object.switchObjects?.map((e) => Switch.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChromeOSRack(): ChromeOSRack {
  return { switchObjects: [] };
}

export const ChromeOSRack: MessageFns<ChromeOSRack> = {
  encode(message: ChromeOSRack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.switchObjects) {
      Switch.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChromeOSRack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChromeOSRack() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.switchObjects.push(Switch.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChromeOSRack {
    return {
      switchObjects: globalThis.Array.isArray(object?.switchObjects)
        ? object.switchObjects.map((e: any) => Switch.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ChromeOSRack): unknown {
    const obj: any = {};
    if (message.switchObjects?.length) {
      obj.switchObjects = message.switchObjects.map((e) => Switch.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChromeOSRack>): ChromeOSRack {
    return ChromeOSRack.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChromeOSRack>): ChromeOSRack {
    const message = createBaseChromeOSRack() as any;
    message.switchObjects = object.switchObjects?.map((e) => Switch.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
