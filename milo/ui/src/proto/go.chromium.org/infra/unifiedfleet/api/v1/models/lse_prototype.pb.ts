// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.0
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/lse_prototype.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp.pb";

export const protobufPackage = "unifiedfleet.api.v1.models";

/**
 * The supported peripheral type in LSE definition. The list is not completed
 * as we have many special setups in ChromeOS high-touch labs. Will add them later
 * when it comes to use.
 */
export enum PeripheralType {
  PERIPHERAL_TYPE_UNSPECIFIED = 0,
  PERIPHERAL_TYPE_SERVO = 1,
  PERIPHERAL_TYPE_LABSTATION = 2,
  PERIPHERAL_TYPE_RPM = 3,
  PERIPHERAL_TYPE_KVM = 4,
  PERIPHERAL_TYPE_SWITCH = 5,
  PERIPHERAL_TYPE_BLUETOOTH_BTPEERS = 6,
  PERIPHERAL_TYPE_WIFICELL = 7,
  PERIPHERAL_TYPE_CAMERA = 8,
}

export function peripheralTypeFromJSON(object: any): PeripheralType {
  switch (object) {
    case 0:
    case "PERIPHERAL_TYPE_UNSPECIFIED":
      return PeripheralType.PERIPHERAL_TYPE_UNSPECIFIED;
    case 1:
    case "PERIPHERAL_TYPE_SERVO":
      return PeripheralType.PERIPHERAL_TYPE_SERVO;
    case 2:
    case "PERIPHERAL_TYPE_LABSTATION":
      return PeripheralType.PERIPHERAL_TYPE_LABSTATION;
    case 3:
    case "PERIPHERAL_TYPE_RPM":
      return PeripheralType.PERIPHERAL_TYPE_RPM;
    case 4:
    case "PERIPHERAL_TYPE_KVM":
      return PeripheralType.PERIPHERAL_TYPE_KVM;
    case 5:
    case "PERIPHERAL_TYPE_SWITCH":
      return PeripheralType.PERIPHERAL_TYPE_SWITCH;
    case 6:
    case "PERIPHERAL_TYPE_BLUETOOTH_BTPEERS":
      return PeripheralType.PERIPHERAL_TYPE_BLUETOOTH_BTPEERS;
    case 7:
    case "PERIPHERAL_TYPE_WIFICELL":
      return PeripheralType.PERIPHERAL_TYPE_WIFICELL;
    case 8:
    case "PERIPHERAL_TYPE_CAMERA":
      return PeripheralType.PERIPHERAL_TYPE_CAMERA;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PeripheralType");
  }
}

export function peripheralTypeToJSON(object: PeripheralType): string {
  switch (object) {
    case PeripheralType.PERIPHERAL_TYPE_UNSPECIFIED:
      return "PERIPHERAL_TYPE_UNSPECIFIED";
    case PeripheralType.PERIPHERAL_TYPE_SERVO:
      return "PERIPHERAL_TYPE_SERVO";
    case PeripheralType.PERIPHERAL_TYPE_LABSTATION:
      return "PERIPHERAL_TYPE_LABSTATION";
    case PeripheralType.PERIPHERAL_TYPE_RPM:
      return "PERIPHERAL_TYPE_RPM";
    case PeripheralType.PERIPHERAL_TYPE_KVM:
      return "PERIPHERAL_TYPE_KVM";
    case PeripheralType.PERIPHERAL_TYPE_SWITCH:
      return "PERIPHERAL_TYPE_SWITCH";
    case PeripheralType.PERIPHERAL_TYPE_BLUETOOTH_BTPEERS:
      return "PERIPHERAL_TYPE_BLUETOOTH_BTPEERS";
    case PeripheralType.PERIPHERAL_TYPE_WIFICELL:
      return "PERIPHERAL_TYPE_WIFICELL";
    case PeripheralType.PERIPHERAL_TYPE_CAMERA:
      return "PERIPHERAL_TYPE_CAMERA";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum PeripheralType");
  }
}

/** The supported virtual type in LSE definition. */
export enum VirtualType {
  VIRTUAL_TYPE_UNSPECIFIED = 0,
  VIRTUAL_TYPE_VM = 1,
}

export function virtualTypeFromJSON(object: any): VirtualType {
  switch (object) {
    case 0:
    case "VIRTUAL_TYPE_UNSPECIFIED":
      return VirtualType.VIRTUAL_TYPE_UNSPECIFIED;
    case 1:
    case "VIRTUAL_TYPE_VM":
      return VirtualType.VIRTUAL_TYPE_VM;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum VirtualType");
  }
}

export function virtualTypeToJSON(object: VirtualType): string {
  switch (object) {
    case VirtualType.VIRTUAL_TYPE_UNSPECIFIED:
      return "VIRTUAL_TYPE_UNSPECIFIED";
    case VirtualType.VIRTUAL_TYPE_VM:
      return "VIRTUAL_TYPE_VM";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum VirtualType");
  }
}

export interface RackLSEPrototype {
  /**
   * A unique name for the RackLSEPrototype.
   * The format will be rackLSEPrototypes/XXX
   */
  readonly name: string;
  readonly peripheralRequirements: readonly PeripheralRequirement[];
  /** Record the last update timestamp of this RackLSEPrototype (In UTC timezone) */
  readonly updateTime:
    | string
    | undefined;
  /** tags user can attach for easy querying/search */
  readonly tags: readonly string[];
}

export interface MachineLSEPrototype {
  /**
   * A unique name for the MachineLSEPrototype.
   * The format will be machineLSEPrototypes/XXX
   */
  readonly name: string;
  /** peripheral_requirements.peripheral_type must be unique. */
  readonly peripheralRequirements: readonly PeripheralRequirement[];
  /**
   * Indicates the Rack Unit capacity of this setup, corresponding
   * to a Rack’s Rack Unit capacity.
   */
  readonly occupiedCapacityRu: number;
  /** Record the last update timestamp of this MachineLSEPrototype (In UTC timezone) */
  readonly updateTime: string | undefined;
  readonly virtualRequirements: readonly VirtualRequirement[];
  /** tags user can attach for easy querying/search */
  readonly tags: readonly string[];
}

/**
 * The requirement for peripherals of a LSE. Usually it’s predefined
 * by the designer of the test and lab, e.g. a test needs 2 cameras, 1 rpm,
 * 1 servo, and a labstation.
 * We probably also record cables as ChromeOS ACS lab wants to track the cable
 * usage also.
 */
export interface PeripheralRequirement {
  /**
   * It refers to the peripheral type that a LSE needs. The common use cases
   * include: kvm, switch, servo, rpm, labstation, camera, ...
   */
  readonly peripheralType: PeripheralType;
  /**
   * The minimum/maximum number of the peripherals that needed by a LSE, e.g.
   * A test needs 1-3 bluetooth bt peers to be set up.
   */
  readonly min: number;
  readonly max: number;
}

export interface VirtualRequirement {
  readonly virtualType: VirtualType;
  /** The minimum/maximum number of the vms that can be setup. */
  readonly min: number;
  readonly max: number;
}

function createBaseRackLSEPrototype(): RackLSEPrototype {
  return { name: "", peripheralRequirements: [], updateTime: undefined, tags: [] };
}

export const RackLSEPrototype: MessageFns<RackLSEPrototype> = {
  encode(message: RackLSEPrototype, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.peripheralRequirements) {
      PeripheralRequirement.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(26).fork()).join();
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RackLSEPrototype {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRackLSEPrototype() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.peripheralRequirements.push(PeripheralRequirement.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RackLSEPrototype {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      peripheralRequirements: globalThis.Array.isArray(object?.peripheralRequirements)
        ? object.peripheralRequirements.map((e: any) => PeripheralRequirement.fromJSON(e))
        : [],
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: RackLSEPrototype): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.peripheralRequirements?.length) {
      obj.peripheralRequirements = message.peripheralRequirements.map((e) => PeripheralRequirement.toJSON(e));
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create(base?: DeepPartial<RackLSEPrototype>): RackLSEPrototype {
    return RackLSEPrototype.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RackLSEPrototype>): RackLSEPrototype {
    const message = createBaseRackLSEPrototype() as any;
    message.name = object.name ?? "";
    message.peripheralRequirements = object.peripheralRequirements?.map((e) => PeripheralRequirement.fromPartial(e)) ||
      [];
    message.updateTime = object.updateTime ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseMachineLSEPrototype(): MachineLSEPrototype {
  return {
    name: "",
    peripheralRequirements: [],
    occupiedCapacityRu: 0,
    updateTime: undefined,
    virtualRequirements: [],
    tags: [],
  };
}

export const MachineLSEPrototype: MessageFns<MachineLSEPrototype> = {
  encode(message: MachineLSEPrototype, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.peripheralRequirements) {
      PeripheralRequirement.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.occupiedCapacityRu !== 0) {
      writer.uint32(24).int32(message.occupiedCapacityRu);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(34).fork()).join();
    }
    for (const v of message.virtualRequirements) {
      VirtualRequirement.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.tags) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MachineLSEPrototype {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMachineLSEPrototype() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.peripheralRequirements.push(PeripheralRequirement.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.occupiedCapacityRu = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.virtualRequirements.push(VirtualRequirement.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MachineLSEPrototype {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      peripheralRequirements: globalThis.Array.isArray(object?.peripheralRequirements)
        ? object.peripheralRequirements.map((e: any) => PeripheralRequirement.fromJSON(e))
        : [],
      occupiedCapacityRu: isSet(object.occupiedCapacityRu) ? globalThis.Number(object.occupiedCapacityRu) : 0,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      virtualRequirements: globalThis.Array.isArray(object?.virtualRequirements)
        ? object.virtualRequirements.map((e: any) => VirtualRequirement.fromJSON(e))
        : [],
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MachineLSEPrototype): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.peripheralRequirements?.length) {
      obj.peripheralRequirements = message.peripheralRequirements.map((e) => PeripheralRequirement.toJSON(e));
    }
    if (message.occupiedCapacityRu !== 0) {
      obj.occupiedCapacityRu = Math.round(message.occupiedCapacityRu);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.virtualRequirements?.length) {
      obj.virtualRequirements = message.virtualRequirements.map((e) => VirtualRequirement.toJSON(e));
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create(base?: DeepPartial<MachineLSEPrototype>): MachineLSEPrototype {
    return MachineLSEPrototype.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MachineLSEPrototype>): MachineLSEPrototype {
    const message = createBaseMachineLSEPrototype() as any;
    message.name = object.name ?? "";
    message.peripheralRequirements = object.peripheralRequirements?.map((e) => PeripheralRequirement.fromPartial(e)) ||
      [];
    message.occupiedCapacityRu = object.occupiedCapacityRu ?? 0;
    message.updateTime = object.updateTime ?? undefined;
    message.virtualRequirements = object.virtualRequirements?.map((e) => VirtualRequirement.fromPartial(e)) || [];
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBasePeripheralRequirement(): PeripheralRequirement {
  return { peripheralType: 0, min: 0, max: 0 };
}

export const PeripheralRequirement: MessageFns<PeripheralRequirement> = {
  encode(message: PeripheralRequirement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.peripheralType !== 0) {
      writer.uint32(8).int32(message.peripheralType);
    }
    if (message.min !== 0) {
      writer.uint32(16).int32(message.min);
    }
    if (message.max !== 0) {
      writer.uint32(24).int32(message.max);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PeripheralRequirement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePeripheralRequirement() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.peripheralType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.min = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.max = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PeripheralRequirement {
    return {
      peripheralType: isSet(object.peripheralType) ? peripheralTypeFromJSON(object.peripheralType) : 0,
      min: isSet(object.min) ? globalThis.Number(object.min) : 0,
      max: isSet(object.max) ? globalThis.Number(object.max) : 0,
    };
  },

  toJSON(message: PeripheralRequirement): unknown {
    const obj: any = {};
    if (message.peripheralType !== 0) {
      obj.peripheralType = peripheralTypeToJSON(message.peripheralType);
    }
    if (message.min !== 0) {
      obj.min = Math.round(message.min);
    }
    if (message.max !== 0) {
      obj.max = Math.round(message.max);
    }
    return obj;
  },

  create(base?: DeepPartial<PeripheralRequirement>): PeripheralRequirement {
    return PeripheralRequirement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PeripheralRequirement>): PeripheralRequirement {
    const message = createBasePeripheralRequirement() as any;
    message.peripheralType = object.peripheralType ?? 0;
    message.min = object.min ?? 0;
    message.max = object.max ?? 0;
    return message;
  },
};

function createBaseVirtualRequirement(): VirtualRequirement {
  return { virtualType: 0, min: 0, max: 0 };
}

export const VirtualRequirement: MessageFns<VirtualRequirement> = {
  encode(message: VirtualRequirement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.virtualType !== 0) {
      writer.uint32(8).int32(message.virtualType);
    }
    if (message.min !== 0) {
      writer.uint32(16).int32(message.min);
    }
    if (message.max !== 0) {
      writer.uint32(24).int32(message.max);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VirtualRequirement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVirtualRequirement() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.virtualType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.min = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.max = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VirtualRequirement {
    return {
      virtualType: isSet(object.virtualType) ? virtualTypeFromJSON(object.virtualType) : 0,
      min: isSet(object.min) ? globalThis.Number(object.min) : 0,
      max: isSet(object.max) ? globalThis.Number(object.max) : 0,
    };
  },

  toJSON(message: VirtualRequirement): unknown {
    const obj: any = {};
    if (message.virtualType !== 0) {
      obj.virtualType = virtualTypeToJSON(message.virtualType);
    }
    if (message.min !== 0) {
      obj.min = Math.round(message.min);
    }
    if (message.max !== 0) {
      obj.max = Math.round(message.max);
    }
    return obj;
  },

  create(base?: DeepPartial<VirtualRequirement>): VirtualRequirement {
    return VirtualRequirement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VirtualRequirement>): VirtualRequirement {
    const message = createBaseVirtualRequirement() as any;
    message.virtualType = object.virtualType ?? 0;
    message.min = object.min ?? 0;
    message.max = object.max ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
