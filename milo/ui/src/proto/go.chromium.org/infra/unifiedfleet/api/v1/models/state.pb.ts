// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/state.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp.pb";

export const protobufPackage = "unifiedfleet.api.v1.models";

/** Next tag: 16 */
export enum State {
  STATE_UNSPECIFIED = 0,
  /** STATE_REGISTERED - Equlavant to the concept in ChromeOS lab: needs_deploy */
  STATE_REGISTERED = 1,
  /**
   * STATE_DEPLOYED_PRE_SERVING - Deployed but not placed in prod. It's only a temporarily state for browser machine
   * as there's no service to push a deployed machine to prod automatically yet.
   */
  STATE_DEPLOYED_PRE_SERVING = 9,
  /** STATE_DEPLOYED_TESTING - Deployed to the prod infrastructure, but for testing. */
  STATE_DEPLOYED_TESTING = 2,
  /** STATE_SERVING - Deployed to the prod infrastructure, serving. */
  STATE_SERVING = 3,
  /** STATE_NEEDS_RESET - Deployed to the prod infrastructure, but required cleanup and verify the machine. */
  STATE_NEEDS_RESET = 10,
  /** STATE_NEEDS_REPAIR - Deployed to the prod infrastructure, but needs repair. */
  STATE_NEEDS_REPAIR = 5,
  /**
   * STATE_REPAIR_FAILED - Deployed to the prod infrastructure, but failed to be repaired in previous step
   * and required new attempt for repairing.
   */
  STATE_REPAIR_FAILED = 11,
  /** STATE_DISABLED - Deployed to the prod infrastructure, but get disabled. */
  STATE_DISABLED = 6,
  /** STATE_RESERVED - Deployed to the prod infrastructure, but get reserved (e.g. locked). */
  STATE_RESERVED = 7,
  /** STATE_DECOMMISSIONED - Decommissioned from the prod infrastructure, but still leave in UFS record. */
  STATE_DECOMMISSIONED = 8,
  /** STATE_DEPLOYING - Deploying the resource with required configs just before it is READY */
  STATE_DEPLOYING = 12,
  /** STATE_READY - Resource is ready for use or free to use */
  STATE_READY = 13,
  /** STATE_BUILD - Resource is in the process of being built out or assembled. */
  STATE_BUILD = 14,
  /**
   * STATE_MISSING - Resource is not detected and has gone missing. Possibly still physically
   * connected but needs a repair.
   */
  STATE_MISSING = 15,
}

export function stateFromJSON(object: any): State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return State.STATE_UNSPECIFIED;
    case 1:
    case "STATE_REGISTERED":
      return State.STATE_REGISTERED;
    case 9:
    case "STATE_DEPLOYED_PRE_SERVING":
      return State.STATE_DEPLOYED_PRE_SERVING;
    case 2:
    case "STATE_DEPLOYED_TESTING":
      return State.STATE_DEPLOYED_TESTING;
    case 3:
    case "STATE_SERVING":
      return State.STATE_SERVING;
    case 10:
    case "STATE_NEEDS_RESET":
      return State.STATE_NEEDS_RESET;
    case 5:
    case "STATE_NEEDS_REPAIR":
      return State.STATE_NEEDS_REPAIR;
    case 11:
    case "STATE_REPAIR_FAILED":
      return State.STATE_REPAIR_FAILED;
    case 6:
    case "STATE_DISABLED":
      return State.STATE_DISABLED;
    case 7:
    case "STATE_RESERVED":
      return State.STATE_RESERVED;
    case 8:
    case "STATE_DECOMMISSIONED":
      return State.STATE_DECOMMISSIONED;
    case 12:
    case "STATE_DEPLOYING":
      return State.STATE_DEPLOYING;
    case 13:
    case "STATE_READY":
      return State.STATE_READY;
    case 14:
    case "STATE_BUILD":
      return State.STATE_BUILD;
    case 15:
    case "STATE_MISSING":
      return State.STATE_MISSING;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum State");
  }
}

export function stateToJSON(object: State): string {
  switch (object) {
    case State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case State.STATE_REGISTERED:
      return "STATE_REGISTERED";
    case State.STATE_DEPLOYED_PRE_SERVING:
      return "STATE_DEPLOYED_PRE_SERVING";
    case State.STATE_DEPLOYED_TESTING:
      return "STATE_DEPLOYED_TESTING";
    case State.STATE_SERVING:
      return "STATE_SERVING";
    case State.STATE_NEEDS_RESET:
      return "STATE_NEEDS_RESET";
    case State.STATE_NEEDS_REPAIR:
      return "STATE_NEEDS_REPAIR";
    case State.STATE_REPAIR_FAILED:
      return "STATE_REPAIR_FAILED";
    case State.STATE_DISABLED:
      return "STATE_DISABLED";
    case State.STATE_RESERVED:
      return "STATE_RESERVED";
    case State.STATE_DECOMMISSIONED:
      return "STATE_DECOMMISSIONED";
    case State.STATE_DEPLOYING:
      return "STATE_DEPLOYING";
    case State.STATE_READY:
      return "STATE_READY";
    case State.STATE_BUILD:
      return "STATE_BUILD";
    case State.STATE_MISSING:
      return "STATE_MISSING";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum State");
  }
}

/**
 * There's no exposed API for users to directly retrieve a state record.
 *
 * Ideally, state record can only be modified internally by UFS after some essential
 * preconditions are fulfilled.
 *
 * Users will focus on the tasks triggered by any state change instead of the state
 * itself, e.g. once the state of a machine is changed to registered, lab admins will
 * know it by founding more machines are listed for waiting for further configurations,
 * instead of actively monitoring it by any tooling.
 */
export interface StateRecord {
  /**
   * The string resource_name could be an ID of a rack, machine, RPM and switches.
   * It can also be the ID of virtual concepts, e.g. LSE and vlan.
   * The format of the resource name will be “racks/XXX” or “rpms/XXX” to help to
   * distinguish the type of the resource.
   */
  readonly resourceName: string;
  readonly state: State;
  readonly user: string;
  readonly ticket: string;
  readonly description: string;
  /** Record the last update timestamp of this machine (In UTC timezone) */
  readonly updateTime:
    | string
    | undefined;
  /**
   * pending_requests records pending (queued) requests to change the state.
   * UFS uses this to manage conflicts and determine the eventual state if
   * needed.
   */
  readonly pendingRequests: readonly StateRequest[];
}

export interface StateRequest {
  /** i.e. requester email */
  readonly user: string;
  /** We may extend this proto message to include fields like 'reason', etc. */
  readonly state: State;
}

function createBaseStateRecord(): StateRecord {
  return {
    resourceName: "",
    state: 0,
    user: "",
    ticket: "",
    description: "",
    updateTime: undefined,
    pendingRequests: [],
  };
}

export const StateRecord: MessageFns<StateRecord> = {
  encode(message: StateRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceName !== "") {
      writer.uint32(10).string(message.resourceName);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.user !== "") {
      writer.uint32(26).string(message.user);
    }
    if (message.ticket !== "") {
      writer.uint32(34).string(message.ticket);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    for (const v of message.pendingRequests) {
      StateRequest.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateRecord() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resourceName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ticket = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.pendingRequests.push(StateRequest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StateRecord {
    return {
      resourceName: isSet(object.resourceName) ? globalThis.String(object.resourceName) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      ticket: isSet(object.ticket) ? globalThis.String(object.ticket) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      pendingRequests: globalThis.Array.isArray(object?.pendingRequests)
        ? object.pendingRequests.map((e: any) => StateRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StateRecord): unknown {
    const obj: any = {};
    if (message.resourceName !== "") {
      obj.resourceName = message.resourceName;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.ticket !== "") {
      obj.ticket = message.ticket;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.pendingRequests?.length) {
      obj.pendingRequests = message.pendingRequests.map((e) => StateRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StateRecord>): StateRecord {
    return StateRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateRecord>): StateRecord {
    const message = createBaseStateRecord() as any;
    message.resourceName = object.resourceName ?? "";
    message.state = object.state ?? 0;
    message.user = object.user ?? "";
    message.ticket = object.ticket ?? "";
    message.description = object.description ?? "";
    message.updateTime = object.updateTime ?? undefined;
    message.pendingRequests = object.pendingRequests?.map((e) => StateRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStateRequest(): StateRequest {
  return { user: "", state: 0 };
}

export const StateRequest: MessageFns<StateRequest> = {
  encode(message: StateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== "") {
      writer.uint32(10).string(message.user);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStateRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StateRequest {
    return {
      user: isSet(object.user) ? globalThis.String(object.user) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
    };
  },

  toJSON(message: StateRequest): unknown {
    const obj: any = {};
    if (message.user !== "") {
      obj.user = message.user;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<StateRequest>): StateRequest {
    return StateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StateRequest>): StateRequest {
    const message = createBaseStateRequest() as any;
    message.user = object.user ?? "";
    message.state = object.state ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
