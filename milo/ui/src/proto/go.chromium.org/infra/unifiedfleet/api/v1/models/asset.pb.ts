// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: go.chromium.org/infra/unifiedfleet/api/v1/models/asset.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp.pb";
import { AssetInfo } from "./assetinfo.pb";
import { Location } from "./location.pb";

export const protobufPackage = "unifiedfleet.api.v1.models";

/** AssetType determines the type of asset */
export enum AssetType {
  UNDEFINED = 0,
  DUT = 1,
  SERVO = 2,
  LABSTATION = 3,
  DEVBOARD = 4,
  SERVER = 5,
}

export function assetTypeFromJSON(object: any): AssetType {
  switch (object) {
    case 0:
    case "UNDEFINED":
      return AssetType.UNDEFINED;
    case 1:
    case "DUT":
      return AssetType.DUT;
    case 2:
    case "SERVO":
      return AssetType.SERVO;
    case 3:
    case "LABSTATION":
      return AssetType.LABSTATION;
    case 4:
    case "DEVBOARD":
      return AssetType.DEVBOARD;
    case 5:
    case "SERVER":
      return AssetType.SERVER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AssetType");
  }
}

export function assetTypeToJSON(object: AssetType): string {
  switch (object) {
    case AssetType.UNDEFINED:
      return "UNDEFINED";
    case AssetType.DUT:
      return "DUT";
    case AssetType.SERVO:
      return "SERVO";
    case AssetType.LABSTATION:
      return "LABSTATION";
    case AssetType.DEVBOARD:
      return "DEVBOARD";
    case AssetType.SERVER:
      return "SERVER";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum AssetType");
  }
}

/** Asset stores location and some basic info about the asset */
export interface asset {
  /** Asset tag or an unique identifier for the asset */
  readonly name: string;
  /** DUT, servo, labstation, etc,. */
  readonly type: AssetType;
  /** Model of the asset */
  readonly model: string;
  /** Last known location of the asset */
  readonly location:
    | Location
    | undefined;
  /** Some info about the asset */
  readonly info:
    | AssetInfo
    | undefined;
  /** Record the last update timestamp of this asset (In UTC timezone) */
  readonly updateTime:
    | string
    | undefined;
  /** ACL info of the asset */
  readonly realm: string;
  /** tags user can attach for easy querying/searching */
  readonly tags: readonly string[];
}

function createBaseasset(): asset {
  return {
    name: "",
    type: 0,
    model: "",
    location: undefined,
    info: undefined,
    updateTime: undefined,
    realm: "",
    tags: [],
  };
}

export const asset: MessageFns<asset> = {
  encode(message: asset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.model !== "") {
      writer.uint32(26).string(message.model);
    }
    if (message.location !== undefined) {
      Location.encode(message.location, writer.uint32(34).fork()).join();
    }
    if (message.info !== undefined) {
      AssetInfo.encode(message.info, writer.uint32(42).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.realm !== "") {
      writer.uint32(58).string(message.realm);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): asset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseasset() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.model = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.location = Location.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.info = AssetInfo.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.realm = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): asset {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? assetTypeFromJSON(object.type) : 0,
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      location: isSet(object.location) ? Location.fromJSON(object.location) : undefined,
      info: isSet(object.info) ? AssetInfo.fromJSON(object.info) : undefined,
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      realm: isSet(object.realm) ? globalThis.String(object.realm) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: asset): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = assetTypeToJSON(message.type);
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.location !== undefined) {
      obj.location = Location.toJSON(message.location);
    }
    if (message.info !== undefined) {
      obj.info = AssetInfo.toJSON(message.info);
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.realm !== "") {
      obj.realm = message.realm;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    return obj;
  },

  create(base?: DeepPartial<asset>): asset {
    return asset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<asset>): asset {
    const message = createBaseasset() as any;
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.model = object.model ?? "";
    message.location = (object.location !== undefined && object.location !== null)
      ? Location.fromPartial(object.location)
      : undefined;
    message.info = (object.info !== undefined && object.info !== null) ? AssetInfo.fromPartial(object.info) : undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.realm = object.realm ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
