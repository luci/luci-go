// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.0
// source: go.chromium.org/luci/common/proto/options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "luci";

/** Defining extensions is supported in proto2 syntax only. */

/**
 * Type of formatting to apply to a primitive field when converting a message to
 * TextPB
 */
export enum TextPBFieldFormat {
  /** DEFAULT - The default formatting for TextPB for the field */
  DEFAULT = 0,
  /**
   * JSON - Interpret the field's value as a JSON object and format it across multiple
   * lines, valid only for string fields
   */
  JSON = 1,
}

export function textPBFieldFormatFromJSON(object: any): TextPBFieldFormat {
  switch (object) {
    case 0:
    case "DEFAULT":
      return TextPBFieldFormat.DEFAULT;
    case 1:
    case "JSON":
      return TextPBFieldFormat.JSON;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TextPBFieldFormat");
  }
}

export function textPBFieldFormatToJSON(object: TextPBFieldFormat): string {
  switch (object) {
    case TextPBFieldFormat.DEFAULT:
      return "DEFAULT";
    case TextPBFieldFormat.JSON:
      return "JSON";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TextPBFieldFormat");
  }
}

export interface Metadata {
  /** URL to a human-readable proto schema definition doc. */
  readonly docUrl?: string | undefined;
}

function createBaseMetadata(): Metadata {
  return { docUrl: "" };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.docUrl !== undefined && message.docUrl !== "") {
      writer.uint32(10).string(message.docUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.docUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return { docUrl: isSet(object.docUrl) ? globalThis.String(object.docUrl) : "" };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.docUrl !== undefined && message.docUrl !== "") {
      obj.docUrl = message.docUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<Metadata>): Metadata {
    return Metadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Metadata>): Metadata {
    const message = createBaseMetadata() as any;
    message.docUrl = object.docUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
