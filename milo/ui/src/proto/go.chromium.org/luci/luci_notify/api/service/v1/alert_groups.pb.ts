// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: go.chromium.org/luci/luci_notify/api/service/v1/alert_groups.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../../../../../google/protobuf/empty.pb";
import { FieldMask } from "../../../../../../google/protobuf/field_mask.pb";
import { Timestamp } from "../../../../../../google/protobuf/timestamp.pb";

export const protobufPackage = "luci.notify.v1";

/** A group of alerts that are managed together. */
export interface AlertGroup {
  /**
   * The resource name of the alert group.
   * Format: rotations/{rotation}/alertGroups/{alert_group_id}
   */
  readonly name: string;
  /**
   * The human-readable name of the alert group.
   * Must not be empty.
   * Must not exceed 1024 bytes.
   */
  readonly displayName: string;
  /**
   * A message describing the status of the alert group.
   * Must not exceed 1MB.
   */
  readonly statusMessage: string;
  /**
   * The keys of the alerts in this group.
   * These correspond to the {key} part of an alert's name: alerts/{key}.
   */
  readonly alertKeys: readonly string[];
  /** The buganizer bug ID of bugs associated with this alert group. */
  readonly bugs: readonly string[];
  /** The time the alert group was last updated. */
  readonly updateTime:
    | string
    | undefined;
  /** The identity of the user who last updated the alert group. */
  readonly updatedBy: string;
  /**
   * A checksum of the alert group's state.
   * Used for optimistic concurrency control.
   */
  readonly etag: string;
}

export interface GetAlertGroupRequest {
  /**
   * The name of the alert group to retrieve.
   * Format: rotations/{rotation}/alertGroups/{alert_group_id}
   */
  readonly name: string;
}

export interface ListAlertGroupsRequest {
  /**
   * The parent, which owns this collection of alert groups.
   * Format: rotations/{rotation}
   */
  readonly parent: string;
  /**
   * The maximum number of alert groups to return. The service may return fewer
   * than this value.
   * If unspecified, at most 100 alert groups will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  readonly pageSize: number;
  /**
   * A page token, received from a previous `ListAlertGroups` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListAlertGroups` must
   * match the call that provided the page token.
   */
  readonly pageToken: string;
}

export interface ListAlertGroupsResponse {
  /** The alert groups. */
  readonly alertGroups: readonly AlertGroup[];
  /**
   * A token to retrieve the next page of results, or empty if there are no
   * more results.
   */
  readonly nextPageToken: string;
}

export interface CreateAlertGroupRequest {
  /**
   * The parent resource where this alert group will be created.
   * Format: rotations/{rotation}
   */
  readonly parent: string;
  /**
   * The ID to use for the alert group, which will become the final component of
   * the alert group's resource name.
   */
  readonly alertGroupId: string;
  /**
   * The alert group to create.
   * The `name` field must be empty.
   */
  readonly alertGroup: AlertGroup | undefined;
}

export interface UpdateAlertGroupRequest {
  /**
   * The alert group to update.
   * The alert group's `name` field is used to identify the alert group to be
   * updated.
   */
  readonly alertGroup:
    | AlertGroup
    | undefined;
  /** The list of fields to be updated. */
  readonly updateMask: readonly string[] | undefined;
}

export interface DeleteAlertGroupRequest {
  /**
   * The resource name of the alert group to delete.
   * Format: rotations/{rotation}/alertGroups/{alert_group_id}
   */
  readonly name: string;
}

function createBaseAlertGroup(): AlertGroup {
  return {
    name: "",
    displayName: "",
    statusMessage: "",
    alertKeys: [],
    bugs: [],
    updateTime: undefined,
    updatedBy: "",
    etag: "",
  };
}

export const AlertGroup: MessageFns<AlertGroup> = {
  encode(message: AlertGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.statusMessage !== "") {
      writer.uint32(26).string(message.statusMessage);
    }
    for (const v of message.alertKeys) {
      writer.uint32(34).string(v!);
    }
    writer.uint32(42).fork();
    for (const v of message.bugs) {
      writer.int64(v);
    }
    writer.join();
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).join();
    }
    if (message.updatedBy !== "") {
      writer.uint32(58).string(message.updatedBy);
    }
    if (message.etag !== "") {
      writer.uint32(66).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AlertGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAlertGroup() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.statusMessage = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.alertKeys.push(reader.string());
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.bugs.push(reader.int64().toString());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.bugs.push(reader.int64().toString());
            }

            continue;
          }

          break;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedBy = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.etag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AlertGroup {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      statusMessage: isSet(object.statusMessage) ? globalThis.String(object.statusMessage) : "",
      alertKeys: globalThis.Array.isArray(object?.alertKeys)
        ? object.alertKeys.map((e: any) => globalThis.String(e))
        : [],
      bugs: globalThis.Array.isArray(object?.bugs) ? object.bugs.map((e: any) => globalThis.String(e)) : [],
      updateTime: isSet(object.updateTime) ? globalThis.String(object.updateTime) : undefined,
      updatedBy: isSet(object.updatedBy) ? globalThis.String(object.updatedBy) : "",
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: AlertGroup): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.statusMessage !== "") {
      obj.statusMessage = message.statusMessage;
    }
    if (message.alertKeys?.length) {
      obj.alertKeys = message.alertKeys;
    }
    if (message.bugs?.length) {
      obj.bugs = message.bugs;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime;
    }
    if (message.updatedBy !== "") {
      obj.updatedBy = message.updatedBy;
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<AlertGroup>): AlertGroup {
    return AlertGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AlertGroup>): AlertGroup {
    const message = createBaseAlertGroup() as any;
    message.name = object.name ?? "";
    message.displayName = object.displayName ?? "";
    message.statusMessage = object.statusMessage ?? "";
    message.alertKeys = object.alertKeys?.map((e) => e) || [];
    message.bugs = object.bugs?.map((e) => e) || [];
    message.updateTime = object.updateTime ?? undefined;
    message.updatedBy = object.updatedBy ?? "";
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseGetAlertGroupRequest(): GetAlertGroupRequest {
  return { name: "" };
}

export const GetAlertGroupRequest: MessageFns<GetAlertGroupRequest> = {
  encode(message: GetAlertGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAlertGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAlertGroupRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAlertGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetAlertGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAlertGroupRequest>): GetAlertGroupRequest {
    return GetAlertGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAlertGroupRequest>): GetAlertGroupRequest {
    const message = createBaseGetAlertGroupRequest() as any;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListAlertGroupsRequest(): ListAlertGroupsRequest {
  return { parent: "", pageSize: 0, pageToken: "" };
}

export const ListAlertGroupsRequest: MessageFns<ListAlertGroupsRequest> = {
  encode(message: ListAlertGroupsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAlertGroupsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAlertGroupsRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAlertGroupsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListAlertGroupsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAlertGroupsRequest>): ListAlertGroupsRequest {
    return ListAlertGroupsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAlertGroupsRequest>): ListAlertGroupsRequest {
    const message = createBaseListAlertGroupsRequest() as any;
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListAlertGroupsResponse(): ListAlertGroupsResponse {
  return { alertGroups: [], nextPageToken: "" };
}

export const ListAlertGroupsResponse: MessageFns<ListAlertGroupsResponse> = {
  encode(message: ListAlertGroupsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.alertGroups) {
      AlertGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAlertGroupsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAlertGroupsResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.alertGroups.push(AlertGroup.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAlertGroupsResponse {
    return {
      alertGroups: globalThis.Array.isArray(object?.alertGroups)
        ? object.alertGroups.map((e: any) => AlertGroup.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListAlertGroupsResponse): unknown {
    const obj: any = {};
    if (message.alertGroups?.length) {
      obj.alertGroups = message.alertGroups.map((e) => AlertGroup.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAlertGroupsResponse>): ListAlertGroupsResponse {
    return ListAlertGroupsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAlertGroupsResponse>): ListAlertGroupsResponse {
    const message = createBaseListAlertGroupsResponse() as any;
    message.alertGroups = object.alertGroups?.map((e) => AlertGroup.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateAlertGroupRequest(): CreateAlertGroupRequest {
  return { parent: "", alertGroupId: "", alertGroup: undefined };
}

export const CreateAlertGroupRequest: MessageFns<CreateAlertGroupRequest> = {
  encode(message: CreateAlertGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.alertGroupId !== "") {
      writer.uint32(18).string(message.alertGroupId);
    }
    if (message.alertGroup !== undefined) {
      AlertGroup.encode(message.alertGroup, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateAlertGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateAlertGroupRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.alertGroupId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.alertGroup = AlertGroup.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateAlertGroupRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      alertGroupId: isSet(object.alertGroupId) ? globalThis.String(object.alertGroupId) : "",
      alertGroup: isSet(object.alertGroup) ? AlertGroup.fromJSON(object.alertGroup) : undefined,
    };
  },

  toJSON(message: CreateAlertGroupRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.alertGroupId !== "") {
      obj.alertGroupId = message.alertGroupId;
    }
    if (message.alertGroup !== undefined) {
      obj.alertGroup = AlertGroup.toJSON(message.alertGroup);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateAlertGroupRequest>): CreateAlertGroupRequest {
    return CreateAlertGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateAlertGroupRequest>): CreateAlertGroupRequest {
    const message = createBaseCreateAlertGroupRequest() as any;
    message.parent = object.parent ?? "";
    message.alertGroupId = object.alertGroupId ?? "";
    message.alertGroup = (object.alertGroup !== undefined && object.alertGroup !== null)
      ? AlertGroup.fromPartial(object.alertGroup)
      : undefined;
    return message;
  },
};

function createBaseUpdateAlertGroupRequest(): UpdateAlertGroupRequest {
  return { alertGroup: undefined, updateMask: undefined };
}

export const UpdateAlertGroupRequest: MessageFns<UpdateAlertGroupRequest> = {
  encode(message: UpdateAlertGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.alertGroup !== undefined) {
      AlertGroup.encode(message.alertGroup, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAlertGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAlertGroupRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.alertGroup = AlertGroup.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAlertGroupRequest {
    return {
      alertGroup: isSet(object.alertGroup) ? AlertGroup.fromJSON(object.alertGroup) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateAlertGroupRequest): unknown {
    const obj: any = {};
    if (message.alertGroup !== undefined) {
      obj.alertGroup = AlertGroup.toJSON(message.alertGroup);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAlertGroupRequest>): UpdateAlertGroupRequest {
    return UpdateAlertGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAlertGroupRequest>): UpdateAlertGroupRequest {
    const message = createBaseUpdateAlertGroupRequest() as any;
    message.alertGroup = (object.alertGroup !== undefined && object.alertGroup !== null)
      ? AlertGroup.fromPartial(object.alertGroup)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteAlertGroupRequest(): DeleteAlertGroupRequest {
  return { name: "" };
}

export const DeleteAlertGroupRequest: MessageFns<DeleteAlertGroupRequest> = {
  encode(message: DeleteAlertGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAlertGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAlertGroupRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAlertGroupRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteAlertGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteAlertGroupRequest>): DeleteAlertGroupRequest {
    return DeleteAlertGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteAlertGroupRequest>): DeleteAlertGroupRequest {
    const message = createBaseDeleteAlertGroupRequest() as any;
    message.name = object.name ?? "";
    return message;
  },
};

/** Service for managing groups of alerts. */
export interface AlertGroups {
  /** Gets an alert group. */
  GetAlertGroup(request: GetAlertGroupRequest): Promise<AlertGroup>;
  /** Lists alert groups. */
  ListAlertGroups(request: ListAlertGroupsRequest): Promise<ListAlertGroupsResponse>;
  /** Creates an alert group. */
  CreateAlertGroup(request: CreateAlertGroupRequest): Promise<AlertGroup>;
  /** Updates an alert group. */
  UpdateAlertGroup(request: UpdateAlertGroupRequest): Promise<AlertGroup>;
  /** Deletes an alert group. */
  DeleteAlertGroup(request: DeleteAlertGroupRequest): Promise<Empty>;
}

export const AlertGroupsServiceName = "luci.notify.v1.AlertGroups";
export class AlertGroupsClientImpl implements AlertGroups {
  static readonly DEFAULT_SERVICE = AlertGroupsServiceName;
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AlertGroupsServiceName;
    this.rpc = rpc;
    this.GetAlertGroup = this.GetAlertGroup.bind(this);
    this.ListAlertGroups = this.ListAlertGroups.bind(this);
    this.CreateAlertGroup = this.CreateAlertGroup.bind(this);
    this.UpdateAlertGroup = this.UpdateAlertGroup.bind(this);
    this.DeleteAlertGroup = this.DeleteAlertGroup.bind(this);
  }
  GetAlertGroup(request: GetAlertGroupRequest): Promise<AlertGroup> {
    const data = GetAlertGroupRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "GetAlertGroup", data);
    return promise.then((data) => AlertGroup.fromJSON(data));
  }

  ListAlertGroups(request: ListAlertGroupsRequest): Promise<ListAlertGroupsResponse> {
    const data = ListAlertGroupsRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "ListAlertGroups", data);
    return promise.then((data) => ListAlertGroupsResponse.fromJSON(data));
  }

  CreateAlertGroup(request: CreateAlertGroupRequest): Promise<AlertGroup> {
    const data = CreateAlertGroupRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "CreateAlertGroup", data);
    return promise.then((data) => AlertGroup.fromJSON(data));
  }

  UpdateAlertGroup(request: UpdateAlertGroupRequest): Promise<AlertGroup> {
    const data = UpdateAlertGroupRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "UpdateAlertGroup", data);
    return promise.then((data) => AlertGroup.fromJSON(data));
  }

  DeleteAlertGroup(request: DeleteAlertGroupRequest): Promise<Empty> {
    const data = DeleteAlertGroupRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "DeleteAlertGroup", data);
    return promise.then((data) => Empty.fromJSON(data));
  }
}

interface Rpc {
  request(service: string, method: string, data: unknown): Promise<unknown>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
