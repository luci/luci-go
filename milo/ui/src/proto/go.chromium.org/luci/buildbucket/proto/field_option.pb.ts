// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: go.chromium.org/luci/buildbucket/proto/field_option.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FieldBehavior, fieldBehaviorFromJSON, fieldBehaviorToJSON } from "../../../../google/api/field_behavior.pb";

export const protobufPackage = "buildbucket.v2";

export interface CreateBuildFieldOption {
  readonly fieldBehavior: FieldBehavior;
}

function createBaseCreateBuildFieldOption(): CreateBuildFieldOption {
  return { fieldBehavior: 0 };
}

export const CreateBuildFieldOption: MessageFns<CreateBuildFieldOption> = {
  encode(message: CreateBuildFieldOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fieldBehavior !== 0) {
      writer.uint32(8).int32(message.fieldBehavior);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBuildFieldOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBuildFieldOption() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fieldBehavior = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBuildFieldOption {
    return { fieldBehavior: isSet(object.fieldBehavior) ? fieldBehaviorFromJSON(object.fieldBehavior) : 0 };
  },

  toJSON(message: CreateBuildFieldOption): unknown {
    const obj: any = {};
    if (message.fieldBehavior !== 0) {
      obj.fieldBehavior = fieldBehaviorToJSON(message.fieldBehavior);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateBuildFieldOption>): CreateBuildFieldOption {
    return CreateBuildFieldOption.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateBuildFieldOption>): CreateBuildFieldOption {
    const message = createBaseCreateBuildFieldOption() as any;
    message.fieldBehavior = object.fieldBehavior ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
