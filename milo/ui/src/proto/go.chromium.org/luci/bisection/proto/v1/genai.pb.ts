// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.0
// source: go.chromium.org/luci/bisection/proto/v1/genai.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../google/protobuf/timestamp.pb";
import { GitilesCommit } from "../../../buildbucket/proto/common.pb";
import { AnalysisStatus, analysisStatusFromJSON, analysisStatusToJSON, SuspectVerificationDetails } from "./common.pb";

export const protobufPackage = "luci.bisection.v1";

export interface GenAiAnalysisResult {
  /** The status of the gen AI analysis. */
  readonly status: AnalysisStatus;
  /** Suspects found by the gen AI analysis. */
  readonly suspect:
    | GenAiSuspect
    | undefined;
  /** Start time of gen AI analysis. */
  readonly startTime:
    | string
    | undefined;
  /** End time of gen AI analysis. */
  readonly endTime: string | undefined;
}

export interface GenAiSuspect {
  /** A suspect revision of gen AI analysis. */
  readonly commit:
    | GitilesCommit
    | undefined;
  /** Review URL for the suspect commit. */
  readonly reviewUrl: string;
  /** Title of the review for the suspect commit. */
  readonly reviewTitle: string;
  /** True if the suspect is confirmed as the culprit by bisection. */
  readonly verified: boolean;
  /** The details of suspect verification for the suspect. */
  readonly verificationDetails: SuspectVerificationDetails | undefined;
}

function createBaseGenAiAnalysisResult(): GenAiAnalysisResult {
  return { status: 0, suspect: undefined, startTime: undefined, endTime: undefined };
}

export const GenAiAnalysisResult: MessageFns<GenAiAnalysisResult> = {
  encode(message: GenAiAnalysisResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.suspect !== undefined) {
      GenAiSuspect.encode(message.suspect, writer.uint32(18).fork()).join();
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(26).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenAiAnalysisResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenAiAnalysisResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.suspect = GenAiSuspect.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenAiAnalysisResult {
    return {
      status: isSet(object.status) ? analysisStatusFromJSON(object.status) : 0,
      suspect: isSet(object.suspect) ? GenAiSuspect.fromJSON(object.suspect) : undefined,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : undefined,
    };
  },

  toJSON(message: GenAiAnalysisResult): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = analysisStatusToJSON(message.status);
    }
    if (message.suspect !== undefined) {
      obj.suspect = GenAiSuspect.toJSON(message.suspect);
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime;
    }
    return obj;
  },

  create(base?: DeepPartial<GenAiAnalysisResult>): GenAiAnalysisResult {
    return GenAiAnalysisResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenAiAnalysisResult>): GenAiAnalysisResult {
    const message = createBaseGenAiAnalysisResult() as any;
    message.status = object.status ?? 0;
    message.suspect = (object.suspect !== undefined && object.suspect !== null)
      ? GenAiSuspect.fromPartial(object.suspect)
      : undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    return message;
  },
};

function createBaseGenAiSuspect(): GenAiSuspect {
  return { commit: undefined, reviewUrl: "", reviewTitle: "", verified: false, verificationDetails: undefined };
}

export const GenAiSuspect: MessageFns<GenAiSuspect> = {
  encode(message: GenAiSuspect, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commit !== undefined) {
      GitilesCommit.encode(message.commit, writer.uint32(10).fork()).join();
    }
    if (message.reviewUrl !== "") {
      writer.uint32(18).string(message.reviewUrl);
    }
    if (message.reviewTitle !== "") {
      writer.uint32(26).string(message.reviewTitle);
    }
    if (message.verified !== false) {
      writer.uint32(32).bool(message.verified);
    }
    if (message.verificationDetails !== undefined) {
      SuspectVerificationDetails.encode(message.verificationDetails, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenAiSuspect {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenAiSuspect() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commit = GitilesCommit.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reviewUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reviewTitle = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.verified = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.verificationDetails = SuspectVerificationDetails.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenAiSuspect {
    return {
      commit: isSet(object.commit) ? GitilesCommit.fromJSON(object.commit) : undefined,
      reviewUrl: isSet(object.reviewUrl) ? globalThis.String(object.reviewUrl) : "",
      reviewTitle: isSet(object.reviewTitle) ? globalThis.String(object.reviewTitle) : "",
      verified: isSet(object.verified) ? globalThis.Boolean(object.verified) : false,
      verificationDetails: isSet(object.verificationDetails)
        ? SuspectVerificationDetails.fromJSON(object.verificationDetails)
        : undefined,
    };
  },

  toJSON(message: GenAiSuspect): unknown {
    const obj: any = {};
    if (message.commit !== undefined) {
      obj.commit = GitilesCommit.toJSON(message.commit);
    }
    if (message.reviewUrl !== "") {
      obj.reviewUrl = message.reviewUrl;
    }
    if (message.reviewTitle !== "") {
      obj.reviewTitle = message.reviewTitle;
    }
    if (message.verified !== false) {
      obj.verified = message.verified;
    }
    if (message.verificationDetails !== undefined) {
      obj.verificationDetails = SuspectVerificationDetails.toJSON(message.verificationDetails);
    }
    return obj;
  },

  create(base?: DeepPartial<GenAiSuspect>): GenAiSuspect {
    return GenAiSuspect.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenAiSuspect>): GenAiSuspect {
    const message = createBaseGenAiSuspect() as any;
    message.commit = (object.commit !== undefined && object.commit !== null)
      ? GitilesCommit.fromPartial(object.commit)
      : undefined;
    message.reviewUrl = object.reviewUrl ?? "";
    message.reviewTitle = object.reviewTitle ?? "";
    message.verified = object.verified ?? false;
    message.verificationDetails = (object.verificationDetails !== undefined && object.verificationDetails !== null)
      ? SuspectVerificationDetails.fromPartial(object.verificationDetails)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
