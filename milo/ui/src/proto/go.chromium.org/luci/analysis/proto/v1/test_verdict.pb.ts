// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: go.chromium.org/luci/analysis/proto/v1/test_verdict.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration.pb";
import { Timestamp } from "../../../../../google/protobuf/timestamp.pb";
import { Changelist } from "./sources.pb";

export const protobufPackage = "luci.analysis.v1";

/**
 * Status of a test result.
 * It is a mirror of luci.resultdb.v1.TestStatus, but the right to evolve
 * it independently is reserved.
 */
export enum TestResultStatus {
  /**
   * TEST_RESULT_STATUS_UNSPECIFIED - Status was not specified.
   * Not to be used in actual test results; serves as a default value for an
   * unset field.
   */
  TEST_RESULT_STATUS_UNSPECIFIED = 0,
  /** PASS - The test case has passed. */
  PASS = 1,
  /**
   * FAIL - The test case has failed.
   * Suggests that the code under test is incorrect, but it is also possible
   * that the test is incorrect or it is a flake.
   */
  FAIL = 2,
  /**
   * CRASH - The test case has crashed during execution.
   * The outcome is inconclusive: the code under test might or might not be
   * correct, but the test+code is incorrect.
   */
  CRASH = 3,
  /**
   * ABORT - The test case has started, but was aborted before finishing.
   * A common reason: timeout.
   */
  ABORT = 4,
  /**
   * SKIP - The test case did not execute.
   * Examples:
   * - The execution of the collection of test cases, such as a test
   *   binary, was aborted prematurely and execution of some test cases was
   *   skipped.
   * - The test harness configuration specified that the test case MUST be
   *   skipped.
   */
  SKIP = 5,
}

export function testResultStatusFromJSON(object: any): TestResultStatus {
  switch (object) {
    case 0:
    case "TEST_RESULT_STATUS_UNSPECIFIED":
      return TestResultStatus.TEST_RESULT_STATUS_UNSPECIFIED;
    case 1:
    case "PASS":
      return TestResultStatus.PASS;
    case 2:
    case "FAIL":
      return TestResultStatus.FAIL;
    case 3:
    case "CRASH":
      return TestResultStatus.CRASH;
    case 4:
    case "ABORT":
      return TestResultStatus.ABORT;
    case 5:
    case "SKIP":
      return TestResultStatus.SKIP;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestResultStatus");
  }
}

export function testResultStatusToJSON(object: TestResultStatus): string {
  switch (object) {
    case TestResultStatus.TEST_RESULT_STATUS_UNSPECIFIED:
      return "TEST_RESULT_STATUS_UNSPECIFIED";
    case TestResultStatus.PASS:
      return "PASS";
    case TestResultStatus.FAIL:
      return "FAIL";
    case TestResultStatus.CRASH:
      return "CRASH";
    case TestResultStatus.ABORT:
      return "ABORT";
    case TestResultStatus.SKIP:
      return "SKIP";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestResultStatus");
  }
}

/**
 * Status of a test verdict.
 * It is a mirror of luci.resultdb.v1.TestVariantStatus.
 */
export enum TestVerdictStatus {
  /**
   * TEST_VERDICT_STATUS_UNSPECIFIED - a test verdict must not have this status.
   * This is only used when filtering verdicts.
   */
  TEST_VERDICT_STATUS_UNSPECIFIED = 0,
  /** UNEXPECTED - The test verdict has no exonerations, and all results are unexpected. */
  UNEXPECTED = 10,
  /** UNEXPECTEDLY_SKIPPED - The test verdict has no exonerations, and all results are unexpectedly skipped. */
  UNEXPECTEDLY_SKIPPED = 20,
  /**
   * FLAKY - The test verdict has no exonerations, and has both expected and unexpected
   * results.
   */
  FLAKY = 30,
  /** EXONERATED - The test verdict has one or more test exonerations. */
  EXONERATED = 40,
  /** EXPECTED - The test verdict has no exonerations, and all results are expected. */
  EXPECTED = 50,
}

export function testVerdictStatusFromJSON(object: any): TestVerdictStatus {
  switch (object) {
    case 0:
    case "TEST_VERDICT_STATUS_UNSPECIFIED":
      return TestVerdictStatus.TEST_VERDICT_STATUS_UNSPECIFIED;
    case 10:
    case "UNEXPECTED":
      return TestVerdictStatus.UNEXPECTED;
    case 20:
    case "UNEXPECTEDLY_SKIPPED":
      return TestVerdictStatus.UNEXPECTEDLY_SKIPPED;
    case 30:
    case "FLAKY":
      return TestVerdictStatus.FLAKY;
    case 40:
    case "EXONERATED":
      return TestVerdictStatus.EXONERATED;
    case 50:
    case "EXPECTED":
      return TestVerdictStatus.EXPECTED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdictStatus");
  }
}

export function testVerdictStatusToJSON(object: TestVerdictStatus): string {
  switch (object) {
    case TestVerdictStatus.TEST_VERDICT_STATUS_UNSPECIFIED:
      return "TEST_VERDICT_STATUS_UNSPECIFIED";
    case TestVerdictStatus.UNEXPECTED:
      return "UNEXPECTED";
    case TestVerdictStatus.UNEXPECTEDLY_SKIPPED:
      return "UNEXPECTEDLY_SKIPPED";
    case TestVerdictStatus.FLAKY:
      return "FLAKY";
    case TestVerdictStatus.EXONERATED:
      return "EXONERATED";
    case TestVerdictStatus.EXPECTED:
      return "EXPECTED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdictStatus");
  }
}

/**
 * A test verdict. The outcome of a test variant in an invocation.
 * As each test variant may be attempted multiple times within an invocation,
 * a test verdict can encapsulate multiple test results.
 */
export interface TestVerdict {
  /**
   * Unique identifier of the test.
   * This has the same value as luci.resultdb.v1.TestResult.test_id.
   */
  readonly testId: string;
  /** The hash of the variant. */
  readonly variantHash: string;
  /**
   * The ID of the top-level invocation that the test verdict belongs to when
   * ingested.
   */
  readonly invocationId: string;
  /**
   * Deprecated: Use status_v2 below instead.
   * The status of the test verdict.
   *
   * @deprecated
   */
  readonly status: TestVerdictStatus;
  /** The status of the test verdict (v2), e.g. passed, flaky, failed. */
  readonly statusV2: TestVerdict_Status;
  /** The status override applying to the verdict, e.g. if the test was exonerated. */
  readonly statusOverride: TestVerdict_StatusOverride;
  /**
   * The time the verdict's invocation was created in Spanner. This
   * is the start of the test verdict's retention period.
   */
  readonly partitionTime:
    | string
    | undefined;
  /**
   * The average duration of the PASSED test results included in the test
   * verdict.
   */
  readonly passedAvgDuration:
    | Duration
    | undefined;
  /**
   * The changelist(s) that were tested, if any. If there are more 10, only
   * the first 10 are returned here.
   */
  readonly changelists: readonly Changelist[];
}

/**
 * The test verdict status.
 * References to test statuses (passed, failed, skipped, execution_errored, precluded) in
 * the enum descriptions refer to TestResult.Status values.
 * A mirror of luci.resultdb.v1.TestVerdict.Status.
 */
export enum TestVerdict_Status {
  STATUS_UNSPECIFIED = 0,
  /** FAILED - The test has failing results and no passing results. */
  FAILED = 10,
  /**
   * EXECUTION_ERRORED - The test has execution errored results and no
   * passing, failing or skipped results.
   */
  EXECUTION_ERRORED = 20,
  /** PRECLUDED - The test has only precluded results. */
  PRECLUDED = 30,
  /** FLAKY - The test has both passing and failing results. */
  FLAKY = 40,
  /**
   * SKIPPED - The test skipped results and no passing or
   * failing results.
   */
  SKIPPED = 50,
  /** PASSED - The test has passing results and no failing results. */
  PASSED = 60,
}

export function testVerdict_StatusFromJSON(object: any): TestVerdict_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return TestVerdict_Status.STATUS_UNSPECIFIED;
    case 10:
    case "FAILED":
      return TestVerdict_Status.FAILED;
    case 20:
    case "EXECUTION_ERRORED":
      return TestVerdict_Status.EXECUTION_ERRORED;
    case 30:
    case "PRECLUDED":
      return TestVerdict_Status.PRECLUDED;
    case 40:
    case "FLAKY":
      return TestVerdict_Status.FLAKY;
    case 50:
    case "SKIPPED":
      return TestVerdict_Status.SKIPPED;
    case 60:
    case "PASSED":
      return TestVerdict_Status.PASSED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_Status");
  }
}

export function testVerdict_StatusToJSON(object: TestVerdict_Status): string {
  switch (object) {
    case TestVerdict_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case TestVerdict_Status.FAILED:
      return "FAILED";
    case TestVerdict_Status.EXECUTION_ERRORED:
      return "EXECUTION_ERRORED";
    case TestVerdict_Status.PRECLUDED:
      return "PRECLUDED";
    case TestVerdict_Status.FLAKY:
      return "FLAKY";
    case TestVerdict_Status.SKIPPED:
      return "SKIPPED";
    case TestVerdict_Status.PASSED:
      return "PASSED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_Status");
  }
}

/**
 * Overrides applying to the test verdict.
 * A mirror of luci.resultdb.v1.TestVerdict.StatusOverride.
 */
export enum TestVerdict_StatusOverride {
  STATUS_OVERRIDE_UNSPECIFIED = 0,
  /**
   * NOT_OVERRIDDEN - The test verdict is not overridden.
   *
   * To confirm a test is not exonerated prefer to check it is not EXONERATED
   * rather than check it is NOT_OVERRIDDEN, as this is safe in case of
   * extensions to this enum.
   */
  NOT_OVERRIDDEN = 1,
  /**
   * EXONERATED - The test variant has one or more exonerations, and the
   * test verdict status was FAILED, EXECUTION_ERRORED OR PRECLUDED.
   * An exoneration absolves the subject of the invocation (e.g. CL)
   * from blame and means means the verdict is no longer blocking.
   */
  EXONERATED = 2,
}

export function testVerdict_StatusOverrideFromJSON(object: any): TestVerdict_StatusOverride {
  switch (object) {
    case 0:
    case "STATUS_OVERRIDE_UNSPECIFIED":
      return TestVerdict_StatusOverride.STATUS_OVERRIDE_UNSPECIFIED;
    case 1:
    case "NOT_OVERRIDDEN":
      return TestVerdict_StatusOverride.NOT_OVERRIDDEN;
    case 2:
    case "EXONERATED":
      return TestVerdict_StatusOverride.EXONERATED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_StatusOverride");
  }
}

export function testVerdict_StatusOverrideToJSON(object: TestVerdict_StatusOverride): string {
  switch (object) {
    case TestVerdict_StatusOverride.STATUS_OVERRIDE_UNSPECIFIED:
      return "STATUS_OVERRIDE_UNSPECIFIED";
    case TestVerdict_StatusOverride.NOT_OVERRIDDEN:
      return "NOT_OVERRIDDEN";
    case TestVerdict_StatusOverride.EXONERATED:
      return "EXONERATED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_StatusOverride");
  }
}

function createBaseTestVerdict(): TestVerdict {
  return {
    testId: "",
    variantHash: "",
    invocationId: "",
    status: 0,
    statusV2: 0,
    statusOverride: 0,
    partitionTime: undefined,
    passedAvgDuration: undefined,
    changelists: [],
  };
}

export const TestVerdict: MessageFns<TestVerdict> = {
  encode(message: TestVerdict, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.testId !== "") {
      writer.uint32(10).string(message.testId);
    }
    if (message.variantHash !== "") {
      writer.uint32(18).string(message.variantHash);
    }
    if (message.invocationId !== "") {
      writer.uint32(26).string(message.invocationId);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.statusV2 !== 0) {
      writer.uint32(64).int32(message.statusV2);
    }
    if (message.statusOverride !== 0) {
      writer.uint32(72).int32(message.statusOverride);
    }
    if (message.partitionTime !== undefined) {
      Timestamp.encode(toTimestamp(message.partitionTime), writer.uint32(42).fork()).join();
    }
    if (message.passedAvgDuration !== undefined) {
      Duration.encode(message.passedAvgDuration, writer.uint32(50).fork()).join();
    }
    for (const v of message.changelists) {
      Changelist.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestVerdict {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestVerdict() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.testId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.variantHash = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.invocationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.statusV2 = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.statusOverride = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.partitionTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.passedAvgDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.changelists.push(Changelist.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestVerdict {
    return {
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      variantHash: isSet(object.variantHash) ? globalThis.String(object.variantHash) : "",
      invocationId: isSet(object.invocationId) ? globalThis.String(object.invocationId) : "",
      status: isSet(object.status) ? testVerdictStatusFromJSON(object.status) : 0,
      statusV2: isSet(object.statusV2) ? testVerdict_StatusFromJSON(object.statusV2) : 0,
      statusOverride: isSet(object.statusOverride) ? testVerdict_StatusOverrideFromJSON(object.statusOverride) : 0,
      partitionTime: isSet(object.partitionTime) ? globalThis.String(object.partitionTime) : undefined,
      passedAvgDuration: isSet(object.passedAvgDuration) ? Duration.fromJSON(object.passedAvgDuration) : undefined,
      changelists: globalThis.Array.isArray(object?.changelists)
        ? object.changelists.map((e: any) => Changelist.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TestVerdict): unknown {
    const obj: any = {};
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.variantHash !== "") {
      obj.variantHash = message.variantHash;
    }
    if (message.invocationId !== "") {
      obj.invocationId = message.invocationId;
    }
    if (message.status !== 0) {
      obj.status = testVerdictStatusToJSON(message.status);
    }
    if (message.statusV2 !== 0) {
      obj.statusV2 = testVerdict_StatusToJSON(message.statusV2);
    }
    if (message.statusOverride !== 0) {
      obj.statusOverride = testVerdict_StatusOverrideToJSON(message.statusOverride);
    }
    if (message.partitionTime !== undefined) {
      obj.partitionTime = message.partitionTime;
    }
    if (message.passedAvgDuration !== undefined) {
      obj.passedAvgDuration = Duration.toJSON(message.passedAvgDuration);
    }
    if (message.changelists?.length) {
      obj.changelists = message.changelists.map((e) => Changelist.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TestVerdict>): TestVerdict {
    return TestVerdict.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestVerdict>): TestVerdict {
    const message = createBaseTestVerdict() as any;
    message.testId = object.testId ?? "";
    message.variantHash = object.variantHash ?? "";
    message.invocationId = object.invocationId ?? "";
    message.status = object.status ?? 0;
    message.statusV2 = object.statusV2 ?? 0;
    message.statusOverride = object.statusOverride ?? 0;
    message.partitionTime = object.partitionTime ?? undefined;
    message.passedAvgDuration = (object.passedAvgDuration !== undefined && object.passedAvgDuration !== null)
      ? Duration.fromPartial(object.passedAvgDuration)
      : undefined;
    message.changelists = object.changelists?.map((e) => Changelist.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
