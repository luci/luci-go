// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.0
// source: go.chromium.org/luci/analysis/proto/v1/failure_reason.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "luci.analysis.v1";

/** Information about why a test failed. */
export interface FailureReason {
  /**
   * The error message that ultimately caused the test to fail. This should
   * only be the error message and should not include any stack traces.
   * An example would be the message from an Exception in a Java test.
   * In the case that a test failed due to multiple expectation failures, any
   * immediately fatal failure should be chosen, or otherwise the first
   * expectation failure.
   * If this field is empty, other fields may be used to cluster the failure
   * instead.
   *
   * The size of the message must be equal to or smaller than 1024 bytes in
   * UTF-8.
   */
  readonly primaryErrorMessage: string;
}

function createBaseFailureReason(): FailureReason {
  return { primaryErrorMessage: "" };
}

export const FailureReason: MessageFns<FailureReason> = {
  encode(message: FailureReason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.primaryErrorMessage !== "") {
      writer.uint32(10).string(message.primaryErrorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FailureReason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFailureReason() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.primaryErrorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FailureReason {
    return {
      primaryErrorMessage: isSet(object.primaryErrorMessage) ? globalThis.String(object.primaryErrorMessage) : "",
    };
  },

  toJSON(message: FailureReason): unknown {
    const obj: any = {};
    if (message.primaryErrorMessage !== "") {
      obj.primaryErrorMessage = message.primaryErrorMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<FailureReason>): FailureReason {
    return FailureReason.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FailureReason>): FailureReason {
    const message = createBaseFailureReason() as any;
    message.primaryErrorMessage = object.primaryErrorMessage ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
