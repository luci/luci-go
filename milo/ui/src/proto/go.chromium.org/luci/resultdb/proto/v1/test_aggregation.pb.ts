// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.2
// source: go.chromium.org/luci/resultdb/proto/v1/test_aggregation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AggregationLevel, aggregationLevelFromJSON, aggregationLevelToJSON, TestIdentifierPrefix } from "./common.pb";

export const protobufPackage = "luci.resultdb.v1";

export interface TestAggregation {
  /** The test identifier prefix represented by the test aggregate. */
  readonly id:
    | TestIdentifierPrefix
    | undefined;
  /**
   * The next (finer) aggregation level to use if drilling into this aggregate,
   * based on the currently defined scheme information.
   * Some schemes do not use one or both intermediate hierarchy levels, this
   * makes it easy to skip them.
   * If unset, no finer aggregation is available and the next finer level
   * is test verdicts.
   */
  readonly nextFinerLevel: AggregationLevel;
  /** The counts of test verdict statuses rolling up to this aggregation. */
  readonly verdictCounts: VerdictStatusCounts | undefined;
}

/** Counts of verdicts by base status. */
export interface VerdictStatusCounts {
  /**
   * Total number of failed verdicts.
   * Some of these may have been exonerated, see failed_exonerated for a breakout.
   */
  readonly failed: number;
  /** Total number of flaky verdicts. */
  readonly flaky: number;
  /** Total number of passed verdicts. */
  readonly passed: number;
  /** Total number of skipped verdicts. */
  readonly skipped: number;
  /**
   * Total number of infra failed verdicts.
   * Some of these may have been exonerated, see infra_failed_exonerated for a breakout.
   */
  readonly infraFailed: number;
  /**
   * Total number of failed verdicts with exonerations.
   * To work out how many failures have not been exonerated use
   * (failed - failed_exonerated).
   */
  readonly failedExonerated: number;
  /**
   * Total number of infra failed verdicts with exonerations.
   * To work out how many infra failures have not been exonerated use
   * (infra_failed - infra_failed_exonerated).
   */
  readonly infraFailedExonerated: number;
}

function createBaseTestAggregation(): TestAggregation {
  return { id: undefined, nextFinerLevel: 0, verdictCounts: undefined };
}

export const TestAggregation: MessageFns<TestAggregation> = {
  encode(message: TestAggregation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      TestIdentifierPrefix.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.nextFinerLevel !== 0) {
      writer.uint32(16).int32(message.nextFinerLevel);
    }
    if (message.verdictCounts !== undefined) {
      VerdictStatusCounts.encode(message.verdictCounts, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestAggregation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestAggregation() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = TestIdentifierPrefix.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nextFinerLevel = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.verdictCounts = VerdictStatusCounts.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestAggregation {
    return {
      id: isSet(object.id) ? TestIdentifierPrefix.fromJSON(object.id) : undefined,
      nextFinerLevel: isSet(object.nextFinerLevel) ? aggregationLevelFromJSON(object.nextFinerLevel) : 0,
      verdictCounts: isSet(object.verdictCounts) ? VerdictStatusCounts.fromJSON(object.verdictCounts) : undefined,
    };
  },

  toJSON(message: TestAggregation): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = TestIdentifierPrefix.toJSON(message.id);
    }
    if (message.nextFinerLevel !== 0) {
      obj.nextFinerLevel = aggregationLevelToJSON(message.nextFinerLevel);
    }
    if (message.verdictCounts !== undefined) {
      obj.verdictCounts = VerdictStatusCounts.toJSON(message.verdictCounts);
    }
    return obj;
  },

  create(base?: DeepPartial<TestAggregation>): TestAggregation {
    return TestAggregation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestAggregation>): TestAggregation {
    const message = createBaseTestAggregation() as any;
    message.id = (object.id !== undefined && object.id !== null)
      ? TestIdentifierPrefix.fromPartial(object.id)
      : undefined;
    message.nextFinerLevel = object.nextFinerLevel ?? 0;
    message.verdictCounts = (object.verdictCounts !== undefined && object.verdictCounts !== null)
      ? VerdictStatusCounts.fromPartial(object.verdictCounts)
      : undefined;
    return message;
  },
};

function createBaseVerdictStatusCounts(): VerdictStatusCounts {
  return { failed: 0, flaky: 0, passed: 0, skipped: 0, infraFailed: 0, failedExonerated: 0, infraFailedExonerated: 0 };
}

export const VerdictStatusCounts: MessageFns<VerdictStatusCounts> = {
  encode(message: VerdictStatusCounts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.failed !== 0) {
      writer.uint32(8).int32(message.failed);
    }
    if (message.flaky !== 0) {
      writer.uint32(16).int32(message.flaky);
    }
    if (message.passed !== 0) {
      writer.uint32(24).int32(message.passed);
    }
    if (message.skipped !== 0) {
      writer.uint32(32).int32(message.skipped);
    }
    if (message.infraFailed !== 0) {
      writer.uint32(40).int32(message.infraFailed);
    }
    if (message.failedExonerated !== 0) {
      writer.uint32(48).int32(message.failedExonerated);
    }
    if (message.infraFailedExonerated !== 0) {
      writer.uint32(56).int32(message.infraFailedExonerated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VerdictStatusCounts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerdictStatusCounts() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.failed = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.flaky = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.passed = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.skipped = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.infraFailed = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.failedExonerated = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.infraFailedExonerated = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerdictStatusCounts {
    return {
      failed: isSet(object.failed) ? globalThis.Number(object.failed) : 0,
      flaky: isSet(object.flaky) ? globalThis.Number(object.flaky) : 0,
      passed: isSet(object.passed) ? globalThis.Number(object.passed) : 0,
      skipped: isSet(object.skipped) ? globalThis.Number(object.skipped) : 0,
      infraFailed: isSet(object.infraFailed) ? globalThis.Number(object.infraFailed) : 0,
      failedExonerated: isSet(object.failedExonerated) ? globalThis.Number(object.failedExonerated) : 0,
      infraFailedExonerated: isSet(object.infraFailedExonerated) ? globalThis.Number(object.infraFailedExonerated) : 0,
    };
  },

  toJSON(message: VerdictStatusCounts): unknown {
    const obj: any = {};
    if (message.failed !== 0) {
      obj.failed = Math.round(message.failed);
    }
    if (message.flaky !== 0) {
      obj.flaky = Math.round(message.flaky);
    }
    if (message.passed !== 0) {
      obj.passed = Math.round(message.passed);
    }
    if (message.skipped !== 0) {
      obj.skipped = Math.round(message.skipped);
    }
    if (message.infraFailed !== 0) {
      obj.infraFailed = Math.round(message.infraFailed);
    }
    if (message.failedExonerated !== 0) {
      obj.failedExonerated = Math.round(message.failedExonerated);
    }
    if (message.infraFailedExonerated !== 0) {
      obj.infraFailedExonerated = Math.round(message.infraFailedExonerated);
    }
    return obj;
  },

  create(base?: DeepPartial<VerdictStatusCounts>): VerdictStatusCounts {
    return VerdictStatusCounts.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VerdictStatusCounts>): VerdictStatusCounts {
    const message = createBaseVerdictStatusCounts() as any;
    message.failed = object.failed ?? 0;
    message.flaky = object.flaky ?? 0;
    message.passed = object.passed ?? 0;
    message.skipped = object.skipped ?? 0;
    message.infraFailed = object.infraFailed ?? 0;
    message.failedExonerated = object.failedExonerated ?? 0;
    message.infraFailedExonerated = object.infraFailedExonerated ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
