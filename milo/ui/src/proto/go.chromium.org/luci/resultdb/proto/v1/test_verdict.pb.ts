// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.2
// source: go.chromium.org/luci/resultdb/proto/v1/test_verdict.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TestIdentifier } from "./common.pb";
import { TestMetadata } from "./test_metadata.pb";
import { TestExoneration, TestResult } from "./test_result.pb";

export const protobufPackage = "luci.resultdb.v1";

/**
 * A test verdict. The outcome of a test variant in an invocation.
 * As each test variant may be attempted multiple times within an invocation,
 * a test verdict can encapsulate multiple test results.
 */
export interface TestVerdict {
  /** The structured test variant identifier. */
  readonly testIdStructured:
    | TestIdentifier
    | undefined;
  /**
   * The flat test id, a unique identifier of the test in a LUCI project.
   * Regex: ^[[::print::]]{1,512}$
   *
   * This is the flat-form encoding of the test component of the structured test variant ID above.
   * See TestVariantIdentifier for details how a structured test identifier is converted
   * to flat test ID.
   */
  readonly testId: string;
  /** The status of the test verdict, e.g. failed, flaky, skipped. */
  readonly status: TestVerdict_Status;
  /** The status override, e.g. exonerated. */
  readonly statusOverride: TestVerdict_StatusOverride;
  /** The test results for the test verdict. */
  readonly results: readonly TestResult[];
  /** Test exonerations. */
  readonly exonerations: readonly TestExoneration[];
  /**
   * Information about the test at the time of its execution.
   *
   * All test results of the same test variant should report the same test
   * metadata. This RPC relies on this rule and returns test metadata from
   * *arbitrary* result of the test variant.
   */
  readonly testMetadata: TestMetadata | undefined;
}

/**
 * Status of a test verdict.
 * References to test statuses (pass, fail, skip, infra_fail) in
 * the enum descriptions refer to TestResultStatusV2 values.
 */
export enum TestVerdict_Status {
  /**
   * STATUS_UNSPECIFIED - A test verdict must not have this status.
   * This is only used when filtering verdicts.
   */
  STATUS_UNSPECIFIED = 0,
  /**
   * FAILED - The test variant has only failing result(s), after excluding
   * skips and infra fails. It has at least one such failing result.
   */
  FAILED = 10,
  /**
   * INFRA_FAILED - The test variant has only infra failed results.
   * This means there was a problem obtaining a result for the test.
   */
  INFRA_FAILED = 20,
  /** FLAKY - The test variant has both passing and failing results. */
  FLAKY = 30,
  /**
   * PASSED - The test variant has only passing result(s), after excluding
   * skips and infra fails. It has at least one such passing result.
   */
  PASSED = 40,
  /**
   * SKIPPED - The test variant has at least one skipped result. It has
   * no passing or failing results.
   */
  SKIPPED = 50,
}

export function testVerdict_StatusFromJSON(object: any): TestVerdict_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return TestVerdict_Status.STATUS_UNSPECIFIED;
    case 10:
    case "FAILED":
      return TestVerdict_Status.FAILED;
    case 20:
    case "INFRA_FAILED":
      return TestVerdict_Status.INFRA_FAILED;
    case 30:
    case "FLAKY":
      return TestVerdict_Status.FLAKY;
    case 40:
    case "PASSED":
      return TestVerdict_Status.PASSED;
    case 50:
    case "SKIPPED":
      return TestVerdict_Status.SKIPPED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_Status");
  }
}

export function testVerdict_StatusToJSON(object: TestVerdict_Status): string {
  switch (object) {
    case TestVerdict_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case TestVerdict_Status.FAILED:
      return "FAILED";
    case TestVerdict_Status.INFRA_FAILED:
      return "INFRA_FAILED";
    case TestVerdict_Status.FLAKY:
      return "FLAKY";
    case TestVerdict_Status.PASSED:
      return "PASSED";
    case TestVerdict_Status.SKIPPED:
      return "SKIPPED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_Status");
  }
}

/** Overrides applying to the test verdict. */
export enum TestVerdict_StatusOverride {
  STATUS_OVERRIDE_UNSPECIFIED = 0,
  /**
   * NONE - The test verdict is not overridden.
   *
   * To confirm a test is not exonerated prefer to check it is not EXONERATED
   * rather than that the override is NONE, as this is safe in case of
   * enum extension.
   */
  NONE = 1,
  /**
   * EXONERATED - The test variant has one or more exonerations, and the
   * test verdict status was FAILED or INFRA_FAILED.
   */
  EXONERATED = 2,
}

export function testVerdict_StatusOverrideFromJSON(object: any): TestVerdict_StatusOverride {
  switch (object) {
    case 0:
    case "STATUS_OVERRIDE_UNSPECIFIED":
      return TestVerdict_StatusOverride.STATUS_OVERRIDE_UNSPECIFIED;
    case 1:
    case "NONE":
      return TestVerdict_StatusOverride.NONE;
    case 2:
    case "EXONERATED":
      return TestVerdict_StatusOverride.EXONERATED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_StatusOverride");
  }
}

export function testVerdict_StatusOverrideToJSON(object: TestVerdict_StatusOverride): string {
  switch (object) {
    case TestVerdict_StatusOverride.STATUS_OVERRIDE_UNSPECIFIED:
      return "STATUS_OVERRIDE_UNSPECIFIED";
    case TestVerdict_StatusOverride.NONE:
      return "NONE";
    case TestVerdict_StatusOverride.EXONERATED:
      return "EXONERATED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestVerdict_StatusOverride");
  }
}

function createBaseTestVerdict(): TestVerdict {
  return {
    testIdStructured: undefined,
    testId: "",
    status: 0,
    statusOverride: 0,
    results: [],
    exonerations: [],
    testMetadata: undefined,
  };
}

export const TestVerdict: MessageFns<TestVerdict> = {
  encode(message: TestVerdict, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.testIdStructured !== undefined) {
      TestIdentifier.encode(message.testIdStructured, writer.uint32(10).fork()).join();
    }
    if (message.testId !== "") {
      writer.uint32(18).string(message.testId);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.statusOverride !== 0) {
      writer.uint32(48).int32(message.statusOverride);
    }
    for (const v of message.results) {
      TestResult.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.exonerations) {
      TestExoneration.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.testMetadata !== undefined) {
      TestMetadata.encode(message.testMetadata, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestVerdict {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestVerdict() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.testIdStructured = TestIdentifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.testId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.statusOverride = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.results.push(TestResult.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.exonerations.push(TestExoneration.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.testMetadata = TestMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestVerdict {
    return {
      testIdStructured: isSet(object.testIdStructured) ? TestIdentifier.fromJSON(object.testIdStructured) : undefined,
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      status: isSet(object.status) ? testVerdict_StatusFromJSON(object.status) : 0,
      statusOverride: isSet(object.statusOverride) ? testVerdict_StatusOverrideFromJSON(object.statusOverride) : 0,
      results: globalThis.Array.isArray(object?.results) ? object.results.map((e: any) => TestResult.fromJSON(e)) : [],
      exonerations: globalThis.Array.isArray(object?.exonerations)
        ? object.exonerations.map((e: any) => TestExoneration.fromJSON(e))
        : [],
      testMetadata: isSet(object.testMetadata) ? TestMetadata.fromJSON(object.testMetadata) : undefined,
    };
  },

  toJSON(message: TestVerdict): unknown {
    const obj: any = {};
    if (message.testIdStructured !== undefined) {
      obj.testIdStructured = TestIdentifier.toJSON(message.testIdStructured);
    }
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.status !== 0) {
      obj.status = testVerdict_StatusToJSON(message.status);
    }
    if (message.statusOverride !== 0) {
      obj.statusOverride = testVerdict_StatusOverrideToJSON(message.statusOverride);
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => TestResult.toJSON(e));
    }
    if (message.exonerations?.length) {
      obj.exonerations = message.exonerations.map((e) => TestExoneration.toJSON(e));
    }
    if (message.testMetadata !== undefined) {
      obj.testMetadata = TestMetadata.toJSON(message.testMetadata);
    }
    return obj;
  },

  create(base?: DeepPartial<TestVerdict>): TestVerdict {
    return TestVerdict.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestVerdict>): TestVerdict {
    const message = createBaseTestVerdict() as any;
    message.testIdStructured = (object.testIdStructured !== undefined && object.testIdStructured !== null)
      ? TestIdentifier.fromPartial(object.testIdStructured)
      : undefined;
    message.testId = object.testId ?? "";
    message.status = object.status ?? 0;
    message.statusOverride = object.statusOverride ?? 0;
    message.results = object.results?.map((e) => TestResult.fromPartial(e)) || [];
    message.exonerations = object.exonerations?.map((e) => TestExoneration.fromPartial(e)) || [];
    message.testMetadata = (object.testMetadata !== undefined && object.testMetadata !== null)
      ? TestMetadata.fromPartial(object.testMetadata)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
