// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.2
// source: go.chromium.org/luci/resultdb/proto/v1/artifact.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../google/protobuf/timestamp.pb";
import { TestIdentifierBase } from "./common.pb";
import { TestStatus, testStatusFromJSON, testStatusToJSON } from "./test_result.pb";

export const protobufPackage = "luci.resultdb.v1";

/**
 * A file produced during a build/test, typically a test artifact.
 * The parent resource is either a TestResult or an Invocation.
 *
 * An invocation-level artifact might be related to tests, or it might not, for
 * example it may be used to store build step logs when streaming support is
 * added.
 * Next id: 15.
 */
export interface Artifact {
  /**
   * Can be used to refer to this artifact.
   * Format:
   * - For invocation-level artifacts:
   *   "invocations/{INVOCATION_ID}/artifacts/{ARTIFACT_ID}".
   * - For test-result-level artifacts:
   *   "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}/artifacts/{ARTIFACT_ID}".
   * where URL_ESCAPED_TEST_ID is the test_id escaped with
   * https://golang.org/pkg/net/url/#PathEscape (see also https://aip.dev/122),
   * and ARTIFACT_ID is documented below.
   * Examples: "screenshot.png", "traces/a.txt".
   */
  readonly name: string;
  /**
   * The structured test identifier. Uniquely identifies the test that was run, excluding variant.
   *
   * This field is only populated for test-result-level artifacts.
   * MUST set if result_id is set.
   * MUST NOT set for legacy uploader where test id should be specified in the parent.
   */
  readonly testIdStructured:
    | TestIdentifierBase
    | undefined;
  /**
   * A unique identifier of the test in a LUCI project, excluding variant.
   * Regex: ^[[::print::]]{1,512}$
   *
   * This is the flat-form encoding of the test_id_structured above,
   * only populated for test-result-level artifacts.
   * See TestIdentifier for details how a structured test identifier is converted
   * to flat test ID.
   *
   * Output only.
   */
  readonly testId: string;
  /**
   * This field is only populated for test-result-level artifacts.
   * MUST set if test_id_structured is set.
   * MUST NOT set for legacy uploader where result id should be specified in the parent.
   */
  readonly resultId: string;
  /**
   * A local identifier of the artifact, unique within the parent resource.
   * MAY have slashes, but MUST NOT start with a slash.
   * SHOULD not use backslashes.
   * Regex: ^(?:[[:word:]]|\.)([\p{L}\p{M}\p{N}\p{P}\p{S}\p{Zs}]{0,254}[[:word:]])?$
   */
  readonly artifactId: string;
  /**
   * A signed short-lived URL to fetch the contents of the artifact.
   * See also fetch_url_expiration.
   */
  readonly fetchUrl: string;
  /** When fetch_url expires. If expired, re-request this Artifact. */
  readonly fetchUrlExpiration:
    | string
    | undefined;
  /**
   * Media type of the artifact.
   * Logs are typically "text/plain" and screenshots are typically "image/png".
   * Optional.
   */
  readonly contentType: string;
  /**
   * Size of the file.
   * Can be used in UI to decide between displaying the artifact inline or only
   * showing a link if it is too large.
   * If you are using the gcs_uri, this field is not verified, but only treated as a hint.
   */
  readonly sizeBytes: string;
  /**
   * Contents of the artifact.
   * This is INPUT_ONLY, and taken by BatchCreateArtifacts().
   * All getter RPCs, such as ListArtifacts(), do not populate values into
   * the field in the response.
   * If specified, `gcs_uri` must be empty.
   */
  readonly contents: Uint8Array;
  /** The GCS URI of the artifact if it's stored in GCS.  If specified, `contents` must be empty. */
  readonly gcsUri: string;
  /**
   * Status of the test result that the artifact belongs to.
   * This is only applicable for test-level artifacts, not invocation-level artifacts.
   * We need this field because when an artifact is created (for example, with BatchCreateArtifact),
   * the containing test result may or may not be created yet, as they
   * are created in different channels from result sink.
   * Having the test status here allows setting the correct status of artifact in BigQuery.
   */
  readonly testStatus: TestStatus;
  /** Indicates whether ListArtifactLines RPC can be used with this artifact. */
  readonly hasLines: boolean;
}

export interface ArtifactLine {
  /**
   * The position of this line in the artifact.
   * The numbers start from 1.
   */
  readonly number: string;
  /** The extracted timestamp of the log line. Extraction is best effort only. */
  readonly timestamp:
    | string
    | undefined;
  /** The extracted severity of the line. Extraction is best effort only. */
  readonly severity: ArtifactLine_Severity;
  /**
   * The content of the line as it is found in the log file.
   * Lines are split on the \n character and the character is included in the line content that immediately precedes it.
   * Empty lines will be included in the response.
   */
  readonly content: Uint8Array;
}

export enum ArtifactLine_Severity {
  SEVERITY_UNSPECIFIED = 0,
  VERBOSE = 10,
  TRACE = 20,
  DEBUG = 30,
  INFO = 40,
  NOTICE = 50,
  WARNING = 60,
  ERROR = 70,
  CRITICAL = 80,
  FATAL = 90,
}

export function artifactLine_SeverityFromJSON(object: any): ArtifactLine_Severity {
  switch (object) {
    case 0:
    case "SEVERITY_UNSPECIFIED":
      return ArtifactLine_Severity.SEVERITY_UNSPECIFIED;
    case 10:
    case "VERBOSE":
      return ArtifactLine_Severity.VERBOSE;
    case 20:
    case "TRACE":
      return ArtifactLine_Severity.TRACE;
    case 30:
    case "DEBUG":
      return ArtifactLine_Severity.DEBUG;
    case 40:
    case "INFO":
      return ArtifactLine_Severity.INFO;
    case 50:
    case "NOTICE":
      return ArtifactLine_Severity.NOTICE;
    case 60:
    case "WARNING":
      return ArtifactLine_Severity.WARNING;
    case 70:
    case "ERROR":
      return ArtifactLine_Severity.ERROR;
    case 80:
    case "CRITICAL":
      return ArtifactLine_Severity.CRITICAL;
    case 90:
    case "FATAL":
      return ArtifactLine_Severity.FATAL;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ArtifactLine_Severity");
  }
}

export function artifactLine_SeverityToJSON(object: ArtifactLine_Severity): string {
  switch (object) {
    case ArtifactLine_Severity.SEVERITY_UNSPECIFIED:
      return "SEVERITY_UNSPECIFIED";
    case ArtifactLine_Severity.VERBOSE:
      return "VERBOSE";
    case ArtifactLine_Severity.TRACE:
      return "TRACE";
    case ArtifactLine_Severity.DEBUG:
      return "DEBUG";
    case ArtifactLine_Severity.INFO:
      return "INFO";
    case ArtifactLine_Severity.NOTICE:
      return "NOTICE";
    case ArtifactLine_Severity.WARNING:
      return "WARNING";
    case ArtifactLine_Severity.ERROR:
      return "ERROR";
    case ArtifactLine_Severity.CRITICAL:
      return "CRITICAL";
    case ArtifactLine_Severity.FATAL:
      return "FATAL";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ArtifactLine_Severity");
  }
}

function createBaseArtifact(): Artifact {
  return {
    name: "",
    testIdStructured: undefined,
    testId: "",
    resultId: "",
    artifactId: "",
    fetchUrl: "",
    fetchUrlExpiration: undefined,
    contentType: "",
    sizeBytes: "0",
    contents: new Uint8Array(0),
    gcsUri: "",
    testStatus: 0,
    hasLines: false,
  };
}

export const Artifact: MessageFns<Artifact> = {
  encode(message: Artifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.testIdStructured !== undefined) {
      TestIdentifierBase.encode(message.testIdStructured, writer.uint32(98).fork()).join();
    }
    if (message.testId !== "") {
      writer.uint32(106).string(message.testId);
    }
    if (message.resultId !== "") {
      writer.uint32(114).string(message.resultId);
    }
    if (message.artifactId !== "") {
      writer.uint32(18).string(message.artifactId);
    }
    if (message.fetchUrl !== "") {
      writer.uint32(26).string(message.fetchUrl);
    }
    if (message.fetchUrlExpiration !== undefined) {
      Timestamp.encode(toTimestamp(message.fetchUrlExpiration), writer.uint32(34).fork()).join();
    }
    if (message.contentType !== "") {
      writer.uint32(42).string(message.contentType);
    }
    if (message.sizeBytes !== "0") {
      writer.uint32(48).int64(message.sizeBytes);
    }
    if (message.contents.length !== 0) {
      writer.uint32(58).bytes(message.contents);
    }
    if (message.gcsUri !== "") {
      writer.uint32(66).string(message.gcsUri);
    }
    if (message.testStatus !== 0) {
      writer.uint32(72).int32(message.testStatus);
    }
    if (message.hasLines !== false) {
      writer.uint32(88).bool(message.hasLines);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Artifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtifact() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.testIdStructured = TestIdentifierBase.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.testId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.resultId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.artifactId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fetchUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fetchUrlExpiration = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.sizeBytes = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.contents = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.gcsUri = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.testStatus = reader.int32() as any;
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.hasLines = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Artifact {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      testIdStructured: isSet(object.testIdStructured)
        ? TestIdentifierBase.fromJSON(object.testIdStructured)
        : undefined,
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      resultId: isSet(object.resultId) ? globalThis.String(object.resultId) : "",
      artifactId: isSet(object.artifactId) ? globalThis.String(object.artifactId) : "",
      fetchUrl: isSet(object.fetchUrl) ? globalThis.String(object.fetchUrl) : "",
      fetchUrlExpiration: isSet(object.fetchUrlExpiration) ? globalThis.String(object.fetchUrlExpiration) : undefined,
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      sizeBytes: isSet(object.sizeBytes) ? globalThis.String(object.sizeBytes) : "0",
      contents: isSet(object.contents) ? bytesFromBase64(object.contents) : new Uint8Array(0),
      gcsUri: isSet(object.gcsUri) ? globalThis.String(object.gcsUri) : "",
      testStatus: isSet(object.testStatus) ? testStatusFromJSON(object.testStatus) : 0,
      hasLines: isSet(object.hasLines) ? globalThis.Boolean(object.hasLines) : false,
    };
  },

  toJSON(message: Artifact): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.testIdStructured !== undefined) {
      obj.testIdStructured = TestIdentifierBase.toJSON(message.testIdStructured);
    }
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.resultId !== "") {
      obj.resultId = message.resultId;
    }
    if (message.artifactId !== "") {
      obj.artifactId = message.artifactId;
    }
    if (message.fetchUrl !== "") {
      obj.fetchUrl = message.fetchUrl;
    }
    if (message.fetchUrlExpiration !== undefined) {
      obj.fetchUrlExpiration = message.fetchUrlExpiration;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.sizeBytes !== "0") {
      obj.sizeBytes = message.sizeBytes;
    }
    if (message.contents.length !== 0) {
      obj.contents = base64FromBytes(message.contents);
    }
    if (message.gcsUri !== "") {
      obj.gcsUri = message.gcsUri;
    }
    if (message.testStatus !== 0) {
      obj.testStatus = testStatusToJSON(message.testStatus);
    }
    if (message.hasLines !== false) {
      obj.hasLines = message.hasLines;
    }
    return obj;
  },

  create(base?: DeepPartial<Artifact>): Artifact {
    return Artifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Artifact>): Artifact {
    const message = createBaseArtifact() as any;
    message.name = object.name ?? "";
    message.testIdStructured = (object.testIdStructured !== undefined && object.testIdStructured !== null)
      ? TestIdentifierBase.fromPartial(object.testIdStructured)
      : undefined;
    message.testId = object.testId ?? "";
    message.resultId = object.resultId ?? "";
    message.artifactId = object.artifactId ?? "";
    message.fetchUrl = object.fetchUrl ?? "";
    message.fetchUrlExpiration = object.fetchUrlExpiration ?? undefined;
    message.contentType = object.contentType ?? "";
    message.sizeBytes = object.sizeBytes ?? "0";
    message.contents = object.contents ?? new Uint8Array(0);
    message.gcsUri = object.gcsUri ?? "";
    message.testStatus = object.testStatus ?? 0;
    message.hasLines = object.hasLines ?? false;
    return message;
  },
};

function createBaseArtifactLine(): ArtifactLine {
  return { number: "0", timestamp: undefined, severity: 0, content: new Uint8Array(0) };
}

export const ArtifactLine: MessageFns<ArtifactLine> = {
  encode(message: ArtifactLine, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== "0") {
      writer.uint32(8).int64(message.number);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(18).fork()).join();
    }
    if (message.severity !== 0) {
      writer.uint32(24).int32(message.severity);
    }
    if (message.content.length !== 0) {
      writer.uint32(34).bytes(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArtifactLine {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtifactLine() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.number = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.severity = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArtifactLine {
    return {
      number: isSet(object.number) ? globalThis.String(object.number) : "0",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : undefined,
      severity: isSet(object.severity) ? artifactLine_SeverityFromJSON(object.severity) : 0,
      content: isSet(object.content) ? bytesFromBase64(object.content) : new Uint8Array(0),
    };
  },

  toJSON(message: ArtifactLine): unknown {
    const obj: any = {};
    if (message.number !== "0") {
      obj.number = message.number;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp;
    }
    if (message.severity !== 0) {
      obj.severity = artifactLine_SeverityToJSON(message.severity);
    }
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    return obj;
  },

  create(base?: DeepPartial<ArtifactLine>): ArtifactLine {
    return ArtifactLine.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArtifactLine>): ArtifactLine {
    const message = createBaseArtifactLine() as any;
    message.number = object.number ?? "0";
    message.timestamp = object.timestamp ?? undefined;
    message.severity = object.severity ?? 0;
    message.content = object.content ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
