// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: go.chromium.org/luci/resultdb/proto/v1/test_exoneration.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { TestIdentifier, Variant } from "./common.pb";

export const protobufPackage = "luci.resultdb.v1";

/** Reason why a test variant was exonerated. */
export enum ExonerationReason {
  /**
   * EXONERATION_REASON_UNSPECIFIED - Reason was not specified.
   * Not to be used in actual test exonerations; serves as a default value for
   * an unset field.
   */
  EXONERATION_REASON_UNSPECIFIED = 0,
  /**
   * OCCURS_ON_MAINLINE - Similar unexpected results were observed on a mainline branch
   * (i.e. against a build without unsubmitted changes applied).
   * (For avoidance of doubt, this includes both flakily and
   * deterministically occurring unexpected results.)
   * Applies to unexpected results in presubmit/CQ runs only.
   */
  OCCURS_ON_MAINLINE = 1,
  /**
   * OCCURS_ON_OTHER_CLS - Similar unexpected results were observed in presubmit run(s) for other,
   * unrelated CL(s). (This is suggestive of the issue being present
   * on mainline but is not confirmed as there are possible confounding
   * factors, like how tests are run on CLs vs how tests are run on
   * mainline branches.)
   * Applies to unexpected results in presubmit/CQ runs only.
   */
  OCCURS_ON_OTHER_CLS = 2,
  /**
   * NOT_CRITICAL - The tests are not critical to the test subject (e.g. CL) passing.
   * This could be because more data is being collected to determine if
   * the tests are stable enough to be made critical (as is often the
   * case for experimental test suites).
   * If information exists indicating the tests are producing unexpected
   * results, and the tests are not critical for that reason,
   * prefer more specific reasons OCCURS_ON_MAINLINE or OCCURS_ON_OTHER_CLS.
   */
  NOT_CRITICAL = 3,
  /**
   * UNEXPECTED_PASS - The test result was an unexpected pass. (Note that such an exoneration is
   * not automatically created for unexpected passes, unless the option is
   * specified to ResultSink or the project manually creates one).
   */
  UNEXPECTED_PASS = 4,
}

export function exonerationReasonFromJSON(object: any): ExonerationReason {
  switch (object) {
    case 0:
    case "EXONERATION_REASON_UNSPECIFIED":
      return ExonerationReason.EXONERATION_REASON_UNSPECIFIED;
    case 1:
    case "OCCURS_ON_MAINLINE":
      return ExonerationReason.OCCURS_ON_MAINLINE;
    case 2:
    case "OCCURS_ON_OTHER_CLS":
      return ExonerationReason.OCCURS_ON_OTHER_CLS;
    case 3:
    case "NOT_CRITICAL":
      return ExonerationReason.NOT_CRITICAL;
    case 4:
    case "UNEXPECTED_PASS":
      return ExonerationReason.UNEXPECTED_PASS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ExonerationReason");
  }
}

export function exonerationReasonToJSON(object: ExonerationReason): string {
  switch (object) {
    case ExonerationReason.EXONERATION_REASON_UNSPECIFIED:
      return "EXONERATION_REASON_UNSPECIFIED";
    case ExonerationReason.OCCURS_ON_MAINLINE:
      return "OCCURS_ON_MAINLINE";
    case ExonerationReason.OCCURS_ON_OTHER_CLS:
      return "OCCURS_ON_OTHER_CLS";
    case ExonerationReason.NOT_CRITICAL:
      return "NOT_CRITICAL";
    case ExonerationReason.UNEXPECTED_PASS:
      return "UNEXPECTED_PASS";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ExonerationReason");
  }
}

/**
 * Indicates that the test subject (e.g., a ChangeList in Gerrit) should not
 * be considered "at fault" for an failed result of a particular test variant.
 * This is often used in presubmit checks (like CQ) to prevent blaming a CL
 * for pre-existing or unrelated issues.
 * Next ID: 10.
 */
export interface TestExoneration {
  /**
   * Can be used to refer to this test exoneration, e.g. in
   * ResultDB.GetTestExoneration RPC.
   * Format:
   * invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/exonerations/{EXONERATION_ID}.
   * URL_ESCAPED_TEST_ID uses the flat test ID format.
   *
   * Output only.
   */
  readonly name: string;
  /** The structured identifier of the test that is being exonerated. */
  readonly testIdStructured:
    | TestIdentifier
    | undefined;
  /**
   * The flat test id of the test that is being exonerated.
   * Output only. (Except for legacy uploaders.)
   */
  readonly testId: string;
  /**
   * The variant of the test that is being exonerated.
   * Output only. (Except for legacy uploaders.)
   */
  readonly variant:
    | Variant
    | undefined;
  /**
   * Identifies an exoneration in a given invocation and test id.
   * It is server-generated.
   */
  readonly exonerationId: string;
  /**
   * Humnan readable reasoning behind the exoneration, in HTML.
   * MUST be sanitized before rendering in the browser.
   */
  readonly explanationHtml: string;
  /**
   * SHA256 hash of the module variant key-value pairs, hex-encoded.
   * See variant_hash on TestResult for more details.
   * Output only.
   */
  readonly variantHash: string;
  /**
   * Reasoning behind the exoneration, in machine-readable form.
   * Used to assist downstream analyses, such as automatic bug-filing.
   * This allow detection of e.g. critical tests failing in presubmit,
   * even if they are being exonerated because they fail on other CLs.
   */
  readonly reason: ExonerationReason;
  /**
   * Whether the test exoneration has been masked so that it includes only
   * metadata. The metadata fields for a TestExoneration are:
   * * name
   * * test_id_structured
   * * exoneration_id
   * * variant_hash
   * * explanation_html
   * * reason
   * * test_id (deprecated)
   * * variant (deprecated)
   *
   * This field is output only.
   */
  readonly isMasked: boolean;
}

function createBaseTestExoneration(): TestExoneration {
  return {
    name: "",
    testIdStructured: undefined,
    testId: "",
    variant: undefined,
    exonerationId: "",
    explanationHtml: "",
    variantHash: "",
    reason: 0,
    isMasked: false,
  };
}

export const TestExoneration: MessageFns<TestExoneration> = {
  encode(message: TestExoneration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.testIdStructured !== undefined) {
      TestIdentifier.encode(message.testIdStructured, writer.uint32(74).fork()).join();
    }
    if (message.testId !== "") {
      writer.uint32(18).string(message.testId);
    }
    if (message.variant !== undefined) {
      Variant.encode(message.variant, writer.uint32(26).fork()).join();
    }
    if (message.exonerationId !== "") {
      writer.uint32(34).string(message.exonerationId);
    }
    if (message.explanationHtml !== "") {
      writer.uint32(42).string(message.explanationHtml);
    }
    if (message.variantHash !== "") {
      writer.uint32(50).string(message.variantHash);
    }
    if (message.reason !== 0) {
      writer.uint32(56).int32(message.reason);
    }
    if (message.isMasked !== false) {
      writer.uint32(64).bool(message.isMasked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestExoneration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestExoneration() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.testIdStructured = TestIdentifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.testId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.variant = Variant.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.exonerationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.explanationHtml = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.variantHash = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isMasked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestExoneration {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      testIdStructured: isSet(object.testIdStructured) ? TestIdentifier.fromJSON(object.testIdStructured) : undefined,
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      variant: isSet(object.variant) ? Variant.fromJSON(object.variant) : undefined,
      exonerationId: isSet(object.exonerationId) ? globalThis.String(object.exonerationId) : "",
      explanationHtml: isSet(object.explanationHtml) ? globalThis.String(object.explanationHtml) : "",
      variantHash: isSet(object.variantHash) ? globalThis.String(object.variantHash) : "",
      reason: isSet(object.reason) ? exonerationReasonFromJSON(object.reason) : 0,
      isMasked: isSet(object.isMasked) ? globalThis.Boolean(object.isMasked) : false,
    };
  },

  toJSON(message: TestExoneration): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.testIdStructured !== undefined) {
      obj.testIdStructured = TestIdentifier.toJSON(message.testIdStructured);
    }
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.variant !== undefined) {
      obj.variant = Variant.toJSON(message.variant);
    }
    if (message.exonerationId !== "") {
      obj.exonerationId = message.exonerationId;
    }
    if (message.explanationHtml !== "") {
      obj.explanationHtml = message.explanationHtml;
    }
    if (message.variantHash !== "") {
      obj.variantHash = message.variantHash;
    }
    if (message.reason !== 0) {
      obj.reason = exonerationReasonToJSON(message.reason);
    }
    if (message.isMasked !== false) {
      obj.isMasked = message.isMasked;
    }
    return obj;
  },

  create(base?: DeepPartial<TestExoneration>): TestExoneration {
    return TestExoneration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestExoneration>): TestExoneration {
    const message = createBaseTestExoneration() as any;
    message.name = object.name ?? "";
    message.testIdStructured = (object.testIdStructured !== undefined && object.testIdStructured !== null)
      ? TestIdentifier.fromPartial(object.testIdStructured)
      : undefined;
    message.testId = object.testId ?? "";
    message.variant = (object.variant !== undefined && object.variant !== null)
      ? Variant.fromPartial(object.variant)
      : undefined;
    message.exonerationId = object.exonerationId ?? "";
    message.explanationHtml = object.explanationHtml ?? "";
    message.variantHash = object.variantHash ?? "";
    message.reason = object.reason ?? 0;
    message.isMasked = object.isMasked ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
