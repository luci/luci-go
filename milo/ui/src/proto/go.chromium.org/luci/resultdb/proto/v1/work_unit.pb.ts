// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: go.chromium.org/luci/resultdb/proto/v1/work_unit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../../../google/protobuf/struct.pb";
import { Timestamp } from "../../../../../google/protobuf/timestamp.pb";
import { StringPair } from "./common.pb";
import { Instructions } from "./instruction.pb";

export const protobufPackage = "luci.resultdb.v1";

/**
 * A process step that contributes results to a root invocation.
 * Work units contain test results, artifacts and exonerations. Work units may
 * also contain other work units and (legacy) invocations.
 */
export interface WorkUnit {
  /**
   * The resource name of this work unit.
   * Format: `rootInvocations/{ROOT_INVOCATION_ID}/workUnits/{WORK_UNIT_ID}`
   * See also https://aip.dev/122.
   *
   * Output only.
   */
  readonly name: string;
  /**
   * The work unit identifier. This identifier is unique within
   * an enclosing root invocation, but not necessarily globally unique.
   *
   * Output only.
   */
  readonly workUnitId: string;
  /**
   * Current state of the work unit.
   *
   * At creation time, this can be set to ACTIVE or FINALIZING (if all fields
   * are known at creation time). When updating or via the FinalizeWorkUnit
   * RPC, the state can also be updated from ACTIVE to FINALIZING.
   *
   * In all other cases, this field should be treated as output only. ResultDB
   * will automatically transition the work unit to FINALIZING when the provided
   * `deadline` expires (if the work unit is not already in FINALIZING state).
   * FINALIZING work units will transition onward to FINALIZED when all included
   * work units are FINALIZED.
   */
  readonly state: WorkUnit_State;
  /**
   * The realm of the work unit. This controls the ACLs that apply to the
   * work unit and its contents.
   *
   * For example, 'chromium:try'.
   *
   * See go/luci-authorization for more information.
   */
  readonly realm: string;
  /**
   * When the work unit was created.
   * Output only.
   */
  readonly createTime:
    | string
    | undefined;
  /**
   * LUCI identity (e.g. "user:<email>") who created the work unit.
   * Typically, a LUCI service account (e.g.
   * "user:cr-buildbucket@appspot.gserviceaccount.com"), but can also be a user
   * (e.g. "user:johndoe@example.com").
   *
   * Output only.
   */
  readonly creator: string;
  /**
   * When the work unit started to finalize, i.e. transitioned to FINALIZING
   * state. This means the work unit is immutable but directly or indirectly
   * included work units may not be.
   *
   * Output only.
   */
  readonly finalizeStartTime:
    | string
    | undefined;
  /**
   * When the work unit was finalized, i.e. transitioned to FINALIZED state.
   * If this field is set, implies that the work units is finalized. This
   * means the work units and directly or indirectly included work units
   * are immutable.
   *
   * Output only.
   */
  readonly finalizeTime:
    | string
    | undefined;
  /**
   * Timestamp when the work unit will be forcefully finalized.
   * Can be extended with UpdateWorkUnit until finalized.
   */
  readonly deadline:
    | string
    | undefined;
  /**
   * The parent resource of this work unit. This is typically
   * another work unit, except for the root work unit, for which
   * it is the root invocation.
   */
  readonly parent: string;
  /**
   * Resource names of child work units.
   *
   * This field only covers children; to find grandchildren, great
   * grandchildren, etc. traverse recursively.
   *
   * To create a new child work unit, use Recorder.CreateWorkUnit
   * and specify this work unit as the parent.
   *
   * Output only (append via (Batch)CreateWorkUnit(s)).
   */
  readonly childWorkUnits: readonly string[];
  /**
   * Resource names of child (legacy) invocations.
   *
   * This field only covers children; to find grandchildren, great
   * grandchildren, etc. traverse recursively.
   *
   * Output only (append via UpdateIncludedInvocations).
   */
  readonly childInvocations: readonly string[];
  /**
   * Full name of the resource that produced results in this work unit.
   * See also https://aip.dev/122#full-resource-names
   * Typical examples:
   * - Swarming task: "//chromium-swarm.appspot.com/tasks/deadbeef"
   * - Buildbucket build: "//cr-buildbucket.appspot.com/builds/1234567890".
   */
  readonly producerResource: string;
  /**
   * Work unit-level string key-value pairs.
   * A key can be repeated.
   *
   * Total size (as measured by proto.Size()) must be <= 16 KB.
   */
  readonly tags: readonly StringPair[];
  /**
   * Arbitrary JSON object that contains structured, domain-specific properties
   * of the work unit.
   *
   * The value must contain a field "@type" which is a URL/resource name that
   * uniquely identifies the type of the source protocol buffer message that
   * defines the schema of these properties. This string must contain at least
   * one "/" character. The last segment of the URL's path must represent the
   * fully qualified name of the type (e.g. foo.com/x/some.package.MyMessage).
   * See google.protobuf.Any for more information.
   *
   * N.B. We do not use google.protobuf.Any here to remove a requirement for
   * ResultDB to know the schema of customer-defined protos. We do however use
   * a format equivalent to google.protobuf.Any's JSON representation.
   *
   * The serialized size must be <= 16 KB.
   */
  readonly properties:
    | { readonly [key: string]: any }
    | undefined;
  /**
   * Additional JSON object(s) that contain additional structured data about the
   * work unit. Unlike `properties` this field is not included (denormalized)
   * in the test results export, it is only available in the finalized
   * work units BigQuery export.
   *
   * All google.protobuf.Struct values must contain a field '@type' which is
   * a URL/resource name that uniquely identifies the type of the source
   * protocol buffer message. This string must contain at least
   * one "/" character. The last segment of the URL's path must represent the
   * fully qualified name of the type (e.g. foo.com/x/some.package.MyMessage)
   *
   * ResultDB will not validate the contents with respect to this schema, but
   * downstream systems may depend on the '@type' field to inform how the
   * contents are interpreted.
   *
   * Each key is limited to 63 characters matching
   * ^[a-z]([a-z0-9_]{0,61}[a-z0-9])?$.
   * The size of each value is limited to <= 512 KB.
   * The total size of the map (as measured by proto.Size())
   * is limited to <= 2 MB.
   *
   * The following paths can be used for field masks:
   * * "extended_properties" to target the whole extended_properties,
   * * "extended_properties.some_key" to target one key of extended_properties.
   */
  readonly extendedProperties: { [key: string]: { readonly [key: string]: any } | undefined };
  /**
   * Reproduction instructions for steps and test results represented by
   * this work unit. It may also contain instructions for test results in
   * included work units.
   */
  readonly instructions:
    | Instructions
    | undefined;
  /**
   * Whether the work unit has been masked so that it includes only metadata.
   * The metadata fields for a WorkUnit are:
   * * name
   * * work_unit_id
   * * state
   * * realm
   * * create_time
   * * creator
   * * finalize_start_time
   * * finalize_time
   * * deadline
   * * parent
   * * child_work_units
   * * child_invocations
   * * producer_resource
   *
   * Output only.
   */
  readonly isMasked: boolean;
}

export enum WorkUnit_State {
  /** STATE_UNSPECIFIED - The default value. This value is used if the state is omitted. */
  STATE_UNSPECIFIED = 0,
  /** ACTIVE - The work unit is mutable. */
  ACTIVE = 1,
  /**
   * FINALIZING - The work unit is in the process of moving to the FINALIZED state.
   * This will happen automatically soon after all of its directly or
   * indirectly included work units become inactive.
   *
   * In this state, the work unit itself is immutable, but its
   * contained work units may still be mutable. When the work unit
   * is immutable, the work unit record may not be updated, and
   * no test results, exonerations or artifacts be created
   * inside it.
   */
  FINALIZING = 2,
  /**
   * FINALIZED - The work unit is immutable and no longer accepts new results
   * directly or indirectly.
   */
  FINALIZED = 3,
}

export function workUnit_StateFromJSON(object: any): WorkUnit_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return WorkUnit_State.STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return WorkUnit_State.ACTIVE;
    case 2:
    case "FINALIZING":
      return WorkUnit_State.FINALIZING;
    case 3:
    case "FINALIZED":
      return WorkUnit_State.FINALIZED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum WorkUnit_State");
  }
}

export function workUnit_StateToJSON(object: WorkUnit_State): string {
  switch (object) {
    case WorkUnit_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case WorkUnit_State.ACTIVE:
      return "ACTIVE";
    case WorkUnit_State.FINALIZING:
      return "FINALIZING";
    case WorkUnit_State.FINALIZED:
      return "FINALIZED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum WorkUnit_State");
  }
}

export interface WorkUnit_ExtendedPropertiesEntry {
  readonly key: string;
  readonly value: { readonly [key: string]: any } | undefined;
}

function createBaseWorkUnit(): WorkUnit {
  return {
    name: "",
    workUnitId: "",
    state: 0,
    realm: "",
    createTime: undefined,
    creator: "",
    finalizeStartTime: undefined,
    finalizeTime: undefined,
    deadline: undefined,
    parent: "",
    childWorkUnits: [],
    childInvocations: [],
    producerResource: "",
    tags: [],
    properties: undefined,
    extendedProperties: {},
    instructions: undefined,
    isMasked: false,
  };
}

export const WorkUnit: MessageFns<WorkUnit> = {
  encode(message: WorkUnit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.workUnitId !== "") {
      writer.uint32(18).string(message.workUnitId);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    if (message.realm !== "") {
      writer.uint32(34).string(message.realm);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(50).string(message.creator);
    }
    if (message.finalizeStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finalizeStartTime), writer.uint32(58).fork()).join();
    }
    if (message.finalizeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finalizeTime), writer.uint32(66).fork()).join();
    }
    if (message.deadline !== undefined) {
      Timestamp.encode(toTimestamp(message.deadline), writer.uint32(74).fork()).join();
    }
    if (message.parent !== "") {
      writer.uint32(82).string(message.parent);
    }
    for (const v of message.childWorkUnits) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.childInvocations) {
      writer.uint32(98).string(v!);
    }
    if (message.producerResource !== "") {
      writer.uint32(106).string(message.producerResource);
    }
    for (const v of message.tags) {
      StringPair.encode(v!, writer.uint32(114).fork()).join();
    }
    if (message.properties !== undefined) {
      Struct.encode(Struct.wrap(message.properties), writer.uint32(122).fork()).join();
    }
    Object.entries(message.extendedProperties).forEach(([key, value]) => {
      if (value !== undefined) {
        WorkUnit_ExtendedPropertiesEntry.encode({ key: key as any, value }, writer.uint32(130).fork()).join();
      }
    });
    if (message.instructions !== undefined) {
      Instructions.encode(message.instructions, writer.uint32(138).fork()).join();
    }
    if (message.isMasked !== false) {
      writer.uint32(144).bool(message.isMasked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkUnit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkUnit() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workUnitId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.realm = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.finalizeStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.finalizeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.deadline = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.childWorkUnits.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.childInvocations.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.producerResource = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.tags.push(StringPair.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.properties = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          const entry16 = WorkUnit_ExtendedPropertiesEntry.decode(reader, reader.uint32());
          if (entry16.value !== undefined) {
            message.extendedProperties[entry16.key] = entry16.value;
          }
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.instructions = Instructions.decode(reader, reader.uint32());
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.isMasked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkUnit {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      workUnitId: isSet(object.workUnitId) ? globalThis.String(object.workUnitId) : "",
      state: isSet(object.state) ? workUnit_StateFromJSON(object.state) : 0,
      realm: isSet(object.realm) ? globalThis.String(object.realm) : "",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      finalizeStartTime: isSet(object.finalizeStartTime) ? globalThis.String(object.finalizeStartTime) : undefined,
      finalizeTime: isSet(object.finalizeTime) ? globalThis.String(object.finalizeTime) : undefined,
      deadline: isSet(object.deadline) ? globalThis.String(object.deadline) : undefined,
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      childWorkUnits: globalThis.Array.isArray(object?.childWorkUnits)
        ? object.childWorkUnits.map((e: any) => globalThis.String(e))
        : [],
      childInvocations: globalThis.Array.isArray(object?.childInvocations)
        ? object.childInvocations.map((e: any) => globalThis.String(e))
        : [],
      producerResource: isSet(object.producerResource) ? globalThis.String(object.producerResource) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => StringPair.fromJSON(e)) : [],
      properties: isObject(object.properties) ? object.properties : undefined,
      extendedProperties: isObject(object.extendedProperties)
        ? Object.entries(object.extendedProperties).reduce<
          { [key: string]: { readonly [key: string]: any } | undefined }
        >((acc, [key, value]) => {
          acc[key] = value as { readonly [key: string]: any } | undefined;
          return acc;
        }, {})
        : {},
      instructions: isSet(object.instructions) ? Instructions.fromJSON(object.instructions) : undefined,
      isMasked: isSet(object.isMasked) ? globalThis.Boolean(object.isMasked) : false,
    };
  },

  toJSON(message: WorkUnit): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.workUnitId !== "") {
      obj.workUnitId = message.workUnitId;
    }
    if (message.state !== 0) {
      obj.state = workUnit_StateToJSON(message.state);
    }
    if (message.realm !== "") {
      obj.realm = message.realm;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.finalizeStartTime !== undefined) {
      obj.finalizeStartTime = message.finalizeStartTime;
    }
    if (message.finalizeTime !== undefined) {
      obj.finalizeTime = message.finalizeTime;
    }
    if (message.deadline !== undefined) {
      obj.deadline = message.deadline;
    }
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.childWorkUnits?.length) {
      obj.childWorkUnits = message.childWorkUnits;
    }
    if (message.childInvocations?.length) {
      obj.childInvocations = message.childInvocations;
    }
    if (message.producerResource !== "") {
      obj.producerResource = message.producerResource;
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => StringPair.toJSON(e));
    }
    if (message.properties !== undefined) {
      obj.properties = message.properties;
    }
    if (message.extendedProperties) {
      const entries = Object.entries(message.extendedProperties);
      if (entries.length > 0) {
        obj.extendedProperties = {};
        entries.forEach(([k, v]) => {
          obj.extendedProperties[k] = v;
        });
      }
    }
    if (message.instructions !== undefined) {
      obj.instructions = Instructions.toJSON(message.instructions);
    }
    if (message.isMasked !== false) {
      obj.isMasked = message.isMasked;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkUnit>): WorkUnit {
    return WorkUnit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkUnit>): WorkUnit {
    const message = createBaseWorkUnit() as any;
    message.name = object.name ?? "";
    message.workUnitId = object.workUnitId ?? "";
    message.state = object.state ?? 0;
    message.realm = object.realm ?? "";
    message.createTime = object.createTime ?? undefined;
    message.creator = object.creator ?? "";
    message.finalizeStartTime = object.finalizeStartTime ?? undefined;
    message.finalizeTime = object.finalizeTime ?? undefined;
    message.deadline = object.deadline ?? undefined;
    message.parent = object.parent ?? "";
    message.childWorkUnits = object.childWorkUnits?.map((e) => e) || [];
    message.childInvocations = object.childInvocations?.map((e) => e) || [];
    message.producerResource = object.producerResource ?? "";
    message.tags = object.tags?.map((e) => StringPair.fromPartial(e)) || [];
    message.properties = object.properties ?? undefined;
    message.extendedProperties = Object.entries(object.extendedProperties ?? {}).reduce<
      { [key: string]: { readonly [key: string]: any } | undefined }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value;
      }
      return acc;
    }, {});
    message.instructions = (object.instructions !== undefined && object.instructions !== null)
      ? Instructions.fromPartial(object.instructions)
      : undefined;
    message.isMasked = object.isMasked ?? false;
    return message;
  },
};

function createBaseWorkUnit_ExtendedPropertiesEntry(): WorkUnit_ExtendedPropertiesEntry {
  return { key: "", value: undefined };
}

export const WorkUnit_ExtendedPropertiesEntry: MessageFns<WorkUnit_ExtendedPropertiesEntry> = {
  encode(message: WorkUnit_ExtendedPropertiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Struct.encode(Struct.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkUnit_ExtendedPropertiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkUnit_ExtendedPropertiesEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkUnit_ExtendedPropertiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isObject(object.value) ? object.value : undefined,
    };
  },

  toJSON(message: WorkUnit_ExtendedPropertiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkUnit_ExtendedPropertiesEntry>): WorkUnit_ExtendedPropertiesEntry {
    return WorkUnit_ExtendedPropertiesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkUnit_ExtendedPropertiesEntry>): WorkUnit_ExtendedPropertiesEntry {
    const message = createBaseWorkUnit_ExtendedPropertiesEntry() as any;
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
