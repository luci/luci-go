// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: go.chromium.org/luci/resultdb/proto/v1/root_invocation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../../../google/protobuf/struct.pb";
import { Timestamp } from "../../../../../google/protobuf/timestamp.pb";
import { Sources, StringPair } from "./common.pb";

export const protobufPackage = "luci.resultdb.v1";

/**
 * A top-level container of test results.
 * Next ID: 20.
 */
export interface RootInvocation {
  /**
   * The resource name of this root invocation.
   * Format: `rootInvocations/{ROOT_INVOCATION_ID}`
   * See also https://aip.dev/122.
   *
   * Output only.
   */
  readonly name: string;
  /**
   * The root invocation ID.
   *
   * Output only.
   */
  readonly rootInvocationId: string;
  /**
   * Current finalization state of the root invocation. This is an output only
   * field and is based on the finalization state of the root work unit.
   */
  readonly finalizationState: RootInvocation_FinalizationState;
  /**
   * The overall state of the root invocation. This is an output only
   * field and is based on the state of the root work unit.
   *
   * See also: https://google.aip.dev/216.
   */
  readonly state: RootInvocation_State;
  /**
   * A summary of the final state of the root invocation, to be displayed on the UI.
   * MUST be escaped prior to rendering on the UI.
   *
   * This is an output only field and based on the summary of the root work unit.
   */
  readonly summaryMarkdown: string;
  /**
   * The realm of the root invocation. This controls the ACLs that apply to the
   * root invocation and its contents.
   *
   * For example, 'chromium:try'.
   *
   * See go/luci-authorization for more information.
   */
  readonly realm: string;
  /**
   * When the invocation was created.
   * Output only.
   */
  readonly createTime:
    | string
    | undefined;
  /**
   * LUCI identity (e.g. "user:<email>") who created the invocation.
   * Typically, a LUCI service account (e.g.
   * "user:cr-buildbucket@appspot.gserviceaccount.com"), but can also be a user
   * (e.g. "user:johndoe@example.com").
   *
   * Output only.
   */
  readonly creator: string;
  /**
   * When the work unit was last updated.
   * Output only.
   */
  readonly lastUpdated:
    | string
    | undefined;
  /**
   * When the invocation started to finalize, i.e. transitioned to a finalization
   * state of FINALIZING. This means the invocation is immutable but directly or
   * indirectly included invocations may not be.
   *
   * Output only.
   */
  readonly finalizeStartTime:
    | string
    | undefined;
  /**
   * When the invocation was finalized, i.e. transitioned to a finalization state
   * of FINALIZED.
   * If this field is set, implies that the invocation is finalized. This
   * means the invocation and directly or indirectly included invocations
   * are immutable.
   *
   * Output only.
   */
  readonly finalizeTime:
    | string
    | undefined;
  /**
   * Full name of the resource that produced results in this root invocation.
   * See also https://aip.dev/122#full-resource-names
   * Typical examples:
   * - Swarming task: "//chromium-swarm.appspot.com/tasks/deadbeef"
   * - Buildbucket build: "//cr-buildbucket.appspot.com/builds/1234567890".
   *
   * Total length limited to 2000 bytes. Resource names must be in Unicode
   * normalization form C.
   */
  readonly producerResource: string;
  /**
   * The code sources which were tested by this root invocation.
   * This is used to index test results for test history, and for
   * related analyses (e.g. culprit analysis / changepoint analyses).
   *
   * Required.
   */
  readonly sources:
    | Sources
    | undefined;
  /**
   * Root invocation-level string key-value pairs.
   * A key can be repeated.
   *
   * Total size (as measured by proto.Size()) must be <= 16 KB.
   */
  readonly tags: readonly StringPair[];
  /**
   * Arbitrary JSON object that contains structured, domain-specific properties
   * of the root invocation.
   *
   * The value must contain a field "@type" which is a URL/resource name that
   * uniquely identifies the type of the source protocol buffer message that
   * defines the schema of these properties. This string must contain at least
   * one "/" character. The last segment of the URL's path must represent the
   * fully qualified name of the type (e.g. foo.com/x/some.package.MyMessage).
   * See google.protobuf.Any for more information.
   *
   * N.B. We do not use google.protobuf.Any here to remove a requirement for
   * ResultDB to know the schema of customer-defined protos. We do however use
   * a format equivalent to google.protobuf.Any's JSON representation.
   *
   * The serialized size must be <= 16 KB.
   */
  readonly properties:
    | { readonly [key: string]: any }
    | undefined;
  /**
   * The test baseline that this root invocation should contribute to.
   *
   * This is a user-specified identifier. Typically, this identifier is generated
   * from the name of the source that generated the test result, such as the
   * builder name for Chromium. For example, `try:linux-rel`.
   *
   * The supported syntax for a baseline identifier is
   * ^[a-z0-9\-_.]{1,100}:[a-zA-Z0-9\-_.\(\) ]{1,128}$. This syntax was selected
   * to allow <buildbucket bucket name>:<buildbucket builder name> as a valid
   * baseline ID.
   *
   * Baselines are used to identify new tests; subtracting from the tests in the
   * root invocation the set of test variants in the baseline yields the new
   * tests run in the invocation. Those tests can then be e.g. subject to additional
   * presubmit checks, such as to validate they are not flaky.
   */
  readonly baselineId: string;
  /**
   * Controls the operation of streaming exports.
   *
   * Various clients (e.g. changepoint analysis, presubmit flake suppression
   * systems) rely on having timely access to test result data for their
   * performance and request uploaders set this field to `METADATA_FINAL`
   * as soon as practicable.
   *
   * Before METADATA_FINAL can be set, the following metadata fields on the
   * root invocation must have been populated with their final values:
   * - `sources`
   * TODO(nqmtuan): Add other fields here.
   *
   * This field is client owned. Consistent with https://google.aip.dev/129,
   * it will not be forced to METADATA_FINAL when the root invocation starts
   * to finalize (but exports will start anyway at this point, if they
   * were not started earlier).
   *
   * Required.
   */
  readonly streamingExportState: RootInvocation_StreamingExportState;
  /**
   * This checksum is computed by the server based on the value of other
   * fields, and may be sent on update requests to ensure the client
   * has an up-to-date value before proceeding.
   * See also https://google.aip.dev/154.
   */
  readonly etag: string;
}

/** Indicates whether the root invocation, and its work units, are immutable. */
export enum RootInvocation_FinalizationState {
  /** FINALIZATION_STATE_UNSPECIFIED - The default value. This value is used if the finalization state is omitted. */
  FINALIZATION_STATE_UNSPECIFIED = 0,
  /** ACTIVE - The root invocation is mutable. */
  ACTIVE = 1,
  /**
   * FINALIZING - The root invocation is in the process of moving to the FINALIZED state.
   * This will happen automatically as soon as the root work unit
   * becomes FINALIZING.
   *
   * In this state, the root invocation and root work unit records are immutable,
   * but its contained work units may still be mutable.
   */
  FINALIZING = 2,
  /**
   * FINALIZED - The root invocation is immutable and no longer accepts new results
   * directly or indirectly. This will happen automatically as soon as the
   * root work unit becomes FINALIZED.
   */
  FINALIZED = 3,
}

export function rootInvocation_FinalizationStateFromJSON(object: any): RootInvocation_FinalizationState {
  switch (object) {
    case 0:
    case "FINALIZATION_STATE_UNSPECIFIED":
      return RootInvocation_FinalizationState.FINALIZATION_STATE_UNSPECIFIED;
    case 1:
    case "ACTIVE":
      return RootInvocation_FinalizationState.ACTIVE;
    case 2:
    case "FINALIZING":
      return RootInvocation_FinalizationState.FINALIZING;
    case 3:
    case "FINALIZED":
      return RootInvocation_FinalizationState.FINALIZED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RootInvocation_FinalizationState");
  }
}

export function rootInvocation_FinalizationStateToJSON(object: RootInvocation_FinalizationState): string {
  switch (object) {
    case RootInvocation_FinalizationState.FINALIZATION_STATE_UNSPECIFIED:
      return "FINALIZATION_STATE_UNSPECIFIED";
    case RootInvocation_FinalizationState.ACTIVE:
      return "ACTIVE";
    case RootInvocation_FinalizationState.FINALIZING:
      return "FINALIZING";
    case RootInvocation_FinalizationState.FINALIZED:
      return "FINALIZED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RootInvocation_FinalizationState");
  }
}

/** The execution state of the root invocation. */
export enum RootInvocation_State {
  /** STATE_UNSPECIFIED - The default value. This value is unused. */
  STATE_UNSPECIFIED = 0,
  /** PENDING - The root invocation has not yet started running. */
  PENDING = 1,
  /** RUNNING - The root invocation is currently running. */
  RUNNING = 2,
  /**
   * SUCCEEDED - The root invocation completed successfully.
   *
   * This status means results are complete and correct, i.e.:
   * - all tests to be run (or skipped) were identified.
   * - test results were successfully uploaded to ResultDB
   *   for each such test.
   *
   * This status generally does not say anything about the test content;
   * tests could have FAILED, some could have even failed to
   * produce a result (EXECUTION_ERRORED).
   */
  SUCCEEDED = 3,
  /**
   * FAILED - The root invocation encountered an error, which was not resolved
   * by retry.
   *
   * This status means the results may be incomplete.
   */
  FAILED = 4,
  /**
   * CANCELLED - The root invocation never started or may be incomplete, because
   * an external factor requested its cancellation (e.g. presubmit
   * run was no longer needed).
   */
  CANCELLED = 5,
  /**
   * SKIPPED - The root invocation determined no tests need to be run.
   * For example, the build dependency graph indicates the CL did
   * not modify the module to be tested.
   * This status usually indicates no test results were uploaded.
   */
  SKIPPED = 6,
}

export function rootInvocation_StateFromJSON(object: any): RootInvocation_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return RootInvocation_State.STATE_UNSPECIFIED;
    case 1:
    case "PENDING":
      return RootInvocation_State.PENDING;
    case 2:
    case "RUNNING":
      return RootInvocation_State.RUNNING;
    case 3:
    case "SUCCEEDED":
      return RootInvocation_State.SUCCEEDED;
    case 4:
    case "FAILED":
      return RootInvocation_State.FAILED;
    case 5:
    case "CANCELLED":
      return RootInvocation_State.CANCELLED;
    case 6:
    case "SKIPPED":
      return RootInvocation_State.SKIPPED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RootInvocation_State");
  }
}

export function rootInvocation_StateToJSON(object: RootInvocation_State): string {
  switch (object) {
    case RootInvocation_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case RootInvocation_State.PENDING:
      return "PENDING";
    case RootInvocation_State.RUNNING:
      return "RUNNING";
    case RootInvocation_State.SUCCEEDED:
      return "SUCCEEDED";
    case RootInvocation_State.FAILED:
      return "FAILED";
    case RootInvocation_State.CANCELLED:
      return "CANCELLED";
    case RootInvocation_State.SKIPPED:
      return "SKIPPED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RootInvocation_State");
  }
}

/**
 * StreamingExportState controls the operation of streaming (low-latency)
 * exports from the root invocation. Streaming exports are designed to
 * commence while the root invocation is still running.
 */
export enum RootInvocation_StreamingExportState {
  /** STREAMING_EXPORT_STATE_UNSPECIFIED - The default value. Do not use this value. */
  STREAMING_EXPORT_STATE_UNSPECIFIED = 0,
  /**
   * WAIT_FOR_METADATA - The metadata fields on the root invocation have not yet been set (or
   * are not yet set to their final values). The streaming exports can
   * not start yet.
   *
   * While this option is set, test result exports to downstream clients
   * will be delayed. Please set this value to METADATA_FINAL as soon as
   * practicable.
   *
   * See documentation on `streaming_export_state` for a definition of
   * the metadata fields.
   */
  WAIT_FOR_METADATA = 1,
  /**
   * METADATA_FINAL - The metadata fields on the root invocation have been set and can be made
   * immutable. Streaming exports can commence.
   *
   * See documentation on `streaming_export_state` for a definition of
   * the metadata fields.
   */
  METADATA_FINAL = 2,
}

export function rootInvocation_StreamingExportStateFromJSON(object: any): RootInvocation_StreamingExportState {
  switch (object) {
    case 0:
    case "STREAMING_EXPORT_STATE_UNSPECIFIED":
      return RootInvocation_StreamingExportState.STREAMING_EXPORT_STATE_UNSPECIFIED;
    case 1:
    case "WAIT_FOR_METADATA":
      return RootInvocation_StreamingExportState.WAIT_FOR_METADATA;
    case 2:
    case "METADATA_FINAL":
      return RootInvocation_StreamingExportState.METADATA_FINAL;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RootInvocation_StreamingExportState");
  }
}

export function rootInvocation_StreamingExportStateToJSON(object: RootInvocation_StreamingExportState): string {
  switch (object) {
    case RootInvocation_StreamingExportState.STREAMING_EXPORT_STATE_UNSPECIFIED:
      return "STREAMING_EXPORT_STATE_UNSPECIFIED";
    case RootInvocation_StreamingExportState.WAIT_FOR_METADATA:
      return "WAIT_FOR_METADATA";
    case RootInvocation_StreamingExportState.METADATA_FINAL:
      return "METADATA_FINAL";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RootInvocation_StreamingExportState");
  }
}

/** A request message for the GetRootInvocation RPC. */
export interface GetRootInvocationRequest {
  /** The name of the root invocation to read, see RootInvocation.name. */
  readonly name: string;
}

function createBaseRootInvocation(): RootInvocation {
  return {
    name: "",
    rootInvocationId: "",
    finalizationState: 0,
    state: 0,
    summaryMarkdown: "",
    realm: "",
    createTime: undefined,
    creator: "",
    lastUpdated: undefined,
    finalizeStartTime: undefined,
    finalizeTime: undefined,
    producerResource: "",
    sources: undefined,
    tags: [],
    properties: undefined,
    baselineId: "",
    streamingExportState: 0,
    etag: "",
  };
}

export const RootInvocation: MessageFns<RootInvocation> = {
  encode(message: RootInvocation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.rootInvocationId !== "") {
      writer.uint32(18).string(message.rootInvocationId);
    }
    if (message.finalizationState !== 0) {
      writer.uint32(24).int32(message.finalizationState);
    }
    if (message.state !== 0) {
      writer.uint32(136).int32(message.state);
    }
    if (message.summaryMarkdown !== "") {
      writer.uint32(146).string(message.summaryMarkdown);
    }
    if (message.realm !== "") {
      writer.uint32(34).string(message.realm);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).join();
    }
    if (message.creator !== "") {
      writer.uint32(50).string(message.creator);
    }
    if (message.lastUpdated !== undefined) {
      Timestamp.encode(toTimestamp(message.lastUpdated), writer.uint32(162).fork()).join();
    }
    if (message.finalizeStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finalizeStartTime), writer.uint32(58).fork()).join();
    }
    if (message.finalizeTime !== undefined) {
      Timestamp.encode(toTimestamp(message.finalizeTime), writer.uint32(66).fork()).join();
    }
    if (message.producerResource !== "") {
      writer.uint32(82).string(message.producerResource);
    }
    if (message.sources !== undefined) {
      Sources.encode(message.sources, writer.uint32(90).fork()).join();
    }
    for (const v of message.tags) {
      StringPair.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.properties !== undefined) {
      Struct.encode(Struct.wrap(message.properties), writer.uint32(114).fork()).join();
    }
    if (message.baselineId !== "") {
      writer.uint32(122).string(message.baselineId);
    }
    if (message.streamingExportState !== 0) {
      writer.uint32(152).int32(message.streamingExportState);
    }
    if (message.etag !== "") {
      writer.uint32(130).string(message.etag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RootInvocation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRootInvocation() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rootInvocationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.finalizationState = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.summaryMarkdown = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.realm = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.lastUpdated = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.finalizeStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.finalizeTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.producerResource = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sources = Sources.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.tags.push(StringPair.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.properties = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.baselineId = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.streamingExportState = reader.int32() as any;
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.etag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RootInvocation {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      rootInvocationId: isSet(object.rootInvocationId) ? globalThis.String(object.rootInvocationId) : "",
      finalizationState: isSet(object.finalizationState)
        ? rootInvocation_FinalizationStateFromJSON(object.finalizationState)
        : 0,
      state: isSet(object.state) ? rootInvocation_StateFromJSON(object.state) : 0,
      summaryMarkdown: isSet(object.summaryMarkdown) ? globalThis.String(object.summaryMarkdown) : "",
      realm: isSet(object.realm) ? globalThis.String(object.realm) : "",
      createTime: isSet(object.createTime) ? globalThis.String(object.createTime) : undefined,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      lastUpdated: isSet(object.lastUpdated) ? globalThis.String(object.lastUpdated) : undefined,
      finalizeStartTime: isSet(object.finalizeStartTime) ? globalThis.String(object.finalizeStartTime) : undefined,
      finalizeTime: isSet(object.finalizeTime) ? globalThis.String(object.finalizeTime) : undefined,
      producerResource: isSet(object.producerResource) ? globalThis.String(object.producerResource) : "",
      sources: isSet(object.sources) ? Sources.fromJSON(object.sources) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => StringPair.fromJSON(e)) : [],
      properties: isObject(object.properties) ? object.properties : undefined,
      baselineId: isSet(object.baselineId) ? globalThis.String(object.baselineId) : "",
      streamingExportState: isSet(object.streamingExportState)
        ? rootInvocation_StreamingExportStateFromJSON(object.streamingExportState)
        : 0,
      etag: isSet(object.etag) ? globalThis.String(object.etag) : "",
    };
  },

  toJSON(message: RootInvocation): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.rootInvocationId !== "") {
      obj.rootInvocationId = message.rootInvocationId;
    }
    if (message.finalizationState !== 0) {
      obj.finalizationState = rootInvocation_FinalizationStateToJSON(message.finalizationState);
    }
    if (message.state !== 0) {
      obj.state = rootInvocation_StateToJSON(message.state);
    }
    if (message.summaryMarkdown !== "") {
      obj.summaryMarkdown = message.summaryMarkdown;
    }
    if (message.realm !== "") {
      obj.realm = message.realm;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.lastUpdated !== undefined) {
      obj.lastUpdated = message.lastUpdated;
    }
    if (message.finalizeStartTime !== undefined) {
      obj.finalizeStartTime = message.finalizeStartTime;
    }
    if (message.finalizeTime !== undefined) {
      obj.finalizeTime = message.finalizeTime;
    }
    if (message.producerResource !== "") {
      obj.producerResource = message.producerResource;
    }
    if (message.sources !== undefined) {
      obj.sources = Sources.toJSON(message.sources);
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => StringPair.toJSON(e));
    }
    if (message.properties !== undefined) {
      obj.properties = message.properties;
    }
    if (message.baselineId !== "") {
      obj.baselineId = message.baselineId;
    }
    if (message.streamingExportState !== 0) {
      obj.streamingExportState = rootInvocation_StreamingExportStateToJSON(message.streamingExportState);
    }
    if (message.etag !== "") {
      obj.etag = message.etag;
    }
    return obj;
  },

  create(base?: DeepPartial<RootInvocation>): RootInvocation {
    return RootInvocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RootInvocation>): RootInvocation {
    const message = createBaseRootInvocation() as any;
    message.name = object.name ?? "";
    message.rootInvocationId = object.rootInvocationId ?? "";
    message.finalizationState = object.finalizationState ?? 0;
    message.state = object.state ?? 0;
    message.summaryMarkdown = object.summaryMarkdown ?? "";
    message.realm = object.realm ?? "";
    message.createTime = object.createTime ?? undefined;
    message.creator = object.creator ?? "";
    message.lastUpdated = object.lastUpdated ?? undefined;
    message.finalizeStartTime = object.finalizeStartTime ?? undefined;
    message.finalizeTime = object.finalizeTime ?? undefined;
    message.producerResource = object.producerResource ?? "";
    message.sources = (object.sources !== undefined && object.sources !== null)
      ? Sources.fromPartial(object.sources)
      : undefined;
    message.tags = object.tags?.map((e) => StringPair.fromPartial(e)) || [];
    message.properties = object.properties ?? undefined;
    message.baselineId = object.baselineId ?? "";
    message.streamingExportState = object.streamingExportState ?? 0;
    message.etag = object.etag ?? "";
    return message;
  },
};

function createBaseGetRootInvocationRequest(): GetRootInvocationRequest {
  return { name: "" };
}

export const GetRootInvocationRequest: MessageFns<GetRootInvocationRequest> = {
  encode(message: GetRootInvocationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRootInvocationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRootInvocationRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRootInvocationRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRootInvocationRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRootInvocationRequest>): GetRootInvocationRequest {
    return GetRootInvocationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRootInvocationRequest>): GetRootInvocationRequest {
    const message = createBaseGetRootInvocationRequest() as any;
    message.name = object.name ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
