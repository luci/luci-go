// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: go.chromium.org/luci/resultdb/proto/v1/test_result.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration.pb";
import { Struct } from "../../../../../google/protobuf/struct.pb";
import { Timestamp } from "../../../../../google/protobuf/timestamp.pb";
import { StringPair, TestIdentifier, Variant } from "./common.pb";
import { FailureReason } from "./failure_reason.pb";
import { TestMetadata } from "./test_metadata.pb";

export const protobufPackage = "luci.resultdb.v1";

/**
 * DEPRECATED: Use TestResult.Status instead.
 * Machine-readable status of a test result.
 */
export enum TestStatus {
  /**
   * STATUS_UNSPECIFIED - Status was not specified.
   * Not to be used in actual test results; serves as a default value for an
   * unset field.
   */
  STATUS_UNSPECIFIED = 0,
  /** PASS - The test case has passed. */
  PASS = 1,
  /**
   * FAIL - The test case has failed.
   * Suggests that the code under test is incorrect, but it is also possible
   * that the test is incorrect or it is a flake.
   */
  FAIL = 2,
  /**
   * CRASH - The test case has crashed during execution.
   * The outcome is inconclusive: the code under test might or might not be
   * correct, but the test+code is incorrect.
   */
  CRASH = 3,
  /**
   * ABORT - The test case has started, but was aborted before finishing.
   * A common reason: timeout.
   */
  ABORT = 4,
  /**
   * SKIP - The test case did not execute.
   * Examples:
   * - The execution of the collection of test cases, such as a test
   *   binary, was aborted prematurely and execution of some test cases was
   *   skipped.
   * - The test harness configuration specified that the test case MUST be
   *   skipped.
   */
  SKIP = 5,
}

export function testStatusFromJSON(object: any): TestStatus {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return TestStatus.STATUS_UNSPECIFIED;
    case 1:
    case "PASS":
      return TestStatus.PASS;
    case 2:
    case "FAIL":
      return TestStatus.FAIL;
    case 3:
    case "CRASH":
      return TestStatus.CRASH;
    case 4:
    case "ABORT":
      return TestStatus.ABORT;
    case 5:
    case "SKIP":
      return TestStatus.SKIP;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestStatus");
  }
}

export function testStatusToJSON(object: TestStatus): string {
  switch (object) {
    case TestStatus.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case TestStatus.PASS:
      return "PASS";
    case TestStatus.FAIL:
      return "FAIL";
    case TestStatus.CRASH:
      return "CRASH";
    case TestStatus.ABORT:
      return "ABORT";
    case TestStatus.SKIP:
      return "SKIP";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestStatus");
  }
}

/**
 * DEPRECATED: Use SkippedReason.Kind instead.
 * Machine-readable reason that a test execution was skipped.
 * Only reasons actually used are listed here, if you need a new reason
 * please add it here and send a CL to the OWNERS.
 */
export enum SkipReason {
  /**
   * SKIP_REASON_UNSPECIFIED - Skip reason was not specified.
   * This represents an unset field which should be used for non-skip test
   * result statuses.  It can also be used if none of the other statuses
   * apply.
   */
  SKIP_REASON_UNSPECIFIED = 0,
  /**
   * AUTOMATICALLY_DISABLED_FOR_FLAKINESS - Disabled automatically in response to a test skipping policy that skips
   * flaky tests.
   * Used for ChromeOS CQ test filtering.
   */
  AUTOMATICALLY_DISABLED_FOR_FLAKINESS = 1,
}

export function skipReasonFromJSON(object: any): SkipReason {
  switch (object) {
    case 0:
    case "SKIP_REASON_UNSPECIFIED":
      return SkipReason.SKIP_REASON_UNSPECIFIED;
    case 1:
    case "AUTOMATICALLY_DISABLED_FOR_FLAKINESS":
      return SkipReason.AUTOMATICALLY_DISABLED_FOR_FLAKINESS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SkipReason");
  }
}

export function skipReasonToJSON(object: SkipReason): string {
  switch (object) {
    case SkipReason.SKIP_REASON_UNSPECIFIED:
      return "SKIP_REASON_UNSPECIFIED";
    case SkipReason.AUTOMATICALLY_DISABLED_FOR_FLAKINESS:
      return "AUTOMATICALLY_DISABLED_FOR_FLAKINESS";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SkipReason");
  }
}

/** Reason why a test variant was exonerated. */
export enum ExonerationReason {
  /**
   * EXONERATION_REASON_UNSPECIFIED - Reason was not specified.
   * Not to be used in actual test exonerations; serves as a default value for
   * an unset field.
   */
  EXONERATION_REASON_UNSPECIFIED = 0,
  /**
   * OCCURS_ON_MAINLINE - Similar unexpected results were observed on a mainline branch
   * (i.e. against a build without unsubmitted changes applied).
   * (For avoidance of doubt, this includes both flakily and
   * deterministically occurring unexpected results.)
   * Applies to unexpected results in presubmit/CQ runs only.
   */
  OCCURS_ON_MAINLINE = 1,
  /**
   * OCCURS_ON_OTHER_CLS - Similar unexpected results were observed in presubmit run(s) for other,
   * unrelated CL(s). (This is suggestive of the issue being present
   * on mainline but is not confirmed as there are possible confounding
   * factors, like how tests are run on CLs vs how tests are run on
   * mainline branches.)
   * Applies to unexpected results in presubmit/CQ runs only.
   */
  OCCURS_ON_OTHER_CLS = 2,
  /**
   * NOT_CRITICAL - The tests are not critical to the test subject (e.g. CL) passing.
   * This could be because more data is being collected to determine if
   * the tests are stable enough to be made critical (as is often the
   * case for experimental test suites).
   * If information exists indicating the tests are producing unexpected
   * results, and the tests are not critical for that reason,
   * prefer more specific reasons OCCURS_ON_MAINLINE or OCCURS_ON_OTHER_CLS.
   */
  NOT_CRITICAL = 3,
  /**
   * UNEXPECTED_PASS - The test result was an unexpected pass. (Note that such an exoneration is
   * not automatically created for unexpected passes, unless the option is
   * specified to ResultSink or the project manually creates one).
   */
  UNEXPECTED_PASS = 4,
}

export function exonerationReasonFromJSON(object: any): ExonerationReason {
  switch (object) {
    case 0:
    case "EXONERATION_REASON_UNSPECIFIED":
      return ExonerationReason.EXONERATION_REASON_UNSPECIFIED;
    case 1:
    case "OCCURS_ON_MAINLINE":
      return ExonerationReason.OCCURS_ON_MAINLINE;
    case 2:
    case "OCCURS_ON_OTHER_CLS":
      return ExonerationReason.OCCURS_ON_OTHER_CLS;
    case 3:
    case "NOT_CRITICAL":
      return ExonerationReason.NOT_CRITICAL;
    case 4:
    case "UNEXPECTED_PASS":
      return ExonerationReason.UNEXPECTED_PASS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ExonerationReason");
  }
}

export function exonerationReasonToJSON(object: ExonerationReason): string {
  switch (object) {
    case ExonerationReason.EXONERATION_REASON_UNSPECIFIED:
      return "EXONERATION_REASON_UNSPECIFIED";
    case ExonerationReason.OCCURS_ON_MAINLINE:
      return "OCCURS_ON_MAINLINE";
    case ExonerationReason.OCCURS_ON_OTHER_CLS:
      return "OCCURS_ON_OTHER_CLS";
    case ExonerationReason.NOT_CRITICAL:
      return "NOT_CRITICAL";
    case ExonerationReason.UNEXPECTED_PASS:
      return "UNEXPECTED_PASS";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum ExonerationReason");
  }
}

/**
 * A result of a functional test case.
 * Often a single test case is executed multiple times and has multiple results,
 * a single test suite has multiple test cases,
 * and the same test suite can be executed in different variants
 * (OS, GPU, compile flags, etc).
 *
 * This message does not specify the test id.
 * It should be available in the message that embeds this message.
 *
 * Next id: 23.
 */
export interface TestResult {
  /**
   * Can be used to refer to this test result, e.g. in ResultDB.GetTestResult
   * RPC.
   * Format:
   * "invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/results/{RESULT_ID}".
   * where URL_ESCAPED_TEST_ID is test_id escaped with
   * https://golang.org/pkg/net/url/#PathEscape See also https://aip.dev/122.
   *
   * Output only.
   */
  readonly name: string;
  /**
   * The structured test identifier.
   *
   * Uniquely identifies the test that was run, including the specific way of running that
   * test, e.g. build configuration, CPU architecture, OS.
   *
   * When uploading results, this should be specified in preference
   * to test_id and variant. (Uploading test_id and variant is supported only for
   * legacy uploaders).
   */
  readonly testIdStructured:
    | TestIdentifier
    | undefined;
  /**
   * A unique identifier of the test in a LUCI project, excluding variant.
   * Regex: ^[[::print::]]{1,512}$
   *
   * This is the flat-form encoding of the structured test variant ID above,
   * excluding information about the specific way of running test (e.g. build configuration,
   * CPU architecture). Such information is captured separately in the `variant` field below.
   *
   * See TestIdentifier for details how a structured test identifier is converted
   * to flat test ID.
   *
   * Output only. (Except for legacy uploaders.)
   */
  readonly testId: string;
  /**
   * Identifies a test result in a given invocation and test id.
   * Regex: ^[a-z0-9\-_.]{1,32}$
   */
  readonly resultId: string;
  /**
   * Description of one specific way of running the test,
   * e.g. build configuration, CPU architecture, OS.
   *
   * Output only. (Except for legacy uploaders.)
   */
  readonly variant:
    | Variant
    | undefined;
  /**
   * DEPRECATED: Replaced by `status_v2` enum.
   *
   * Whether the result of test case execution is expected.
   * In a typical Chromium CL, 99%+ of test results are expected.
   * Users are typically interested only in the unexpected results.
   *
   * An unexpected result != test case failure. There are test cases that are
   * expected to fail/skip/crash. The test harness compares the actual status
   * with the expected one(s) and this field is the result of the comparison.
   *
   * @deprecated
   */
  readonly expected: boolean;
  /**
   * DEPRECATED: Replaced by `status_v2` enum.
   *
   * Machine-readable status of the test case.
   * MUST NOT be STATUS_UNSPECIFIED.
   *
   * @deprecated
   */
  readonly status: TestStatus;
  /**
   * Machine-readable status of the test case (v2).
   * MUST NOT be STATUS_UNSPECIFIED.
   */
  readonly statusV2: TestResult_Status;
  /**
   * Human-readable explanation of the result, in HTML.
   * MUST be sanitized before rendering in the browser.
   *
   * The size of the summary must be equal to or smaller than 4096 bytes in
   * UTF-8.
   *
   * Supports artifact embedding using custom tags:
   * * <text-artifact> renders contents of an artifact as text.
   *   Usage:
   *   * To embed result level artifact: <text-artifact
   *   artifact-id="<artifact_id>">
   *   * To embed invocation level artifact: <text-artifact
   *   artifact-id="<artifact_id>" inv-level>
   */
  readonly summaryHtml: string;
  /** The point in time when the test case started to execute. */
  readonly startTime:
    | string
    | undefined;
  /**
   * Duration of the test case execution.
   * MUST be equal to or greater than 0.
   */
  readonly duration:
    | Duration
    | undefined;
  /**
   * Metadata for this test result.
   * It might describe this particular execution or the test case.
   * A key can be repeated.
   */
  readonly tags: readonly StringPair[];
  /**
   * Hash of the variant.
   * hex(sha256(sorted(''.join('%s:%s\n' for k, v in variant.items())))).
   *
   * Output only.
   */
  readonly variantHash: string;
  /** Information about the test at the time of its execution. */
  readonly testMetadata:
    | TestMetadata
    | undefined;
  /**
   * Information about the test failure.
   *
   * MUST be set (and only set) when status_v2 is FAILED.
   */
  readonly failureReason:
    | FailureReason
    | undefined;
  /**
   * Arbitrary JSON object that contains structured, domain-specific properties
   * of the test result.
   *
   * The serialized size must be <= 8 KB.
   */
  readonly properties:
    | { readonly [key: string]: any }
    | undefined;
  /**
   * Whether the test result has been masked so that it includes only metadata.
   * The metadata fields for a TestResult are:
   * * name
   * * test_id
   * * result_id
   * * expected
   * * status
   * * start_time
   * * duration
   * * variant_hash
   * * failure_reason.primary_error_message (truncated to 140 characters)
   * * skip_reason
   *
   * Output only.
   */
  readonly isMasked: boolean;
  /**
   * Deprecated: Replaced by skipped_reason message.
   * Reasoning behind a test skip, in machine-readable form.
   * Used to assist downstream analyses, such as automatic bug-filing.
   * MUST not be set unless status is SKIP.
   *
   * @deprecated
   */
  readonly skipReason: SkipReason;
  /**
   * Reason why a test was skipped.
   * The contents of this message should help the user answer:
   * Why was my test skipped? What can I do to stop it being skipped?
   *
   * MUST be set (and only set) when status_v2 is SKIPPED.
   */
  readonly skippedReason:
    | SkippedReason
    | undefined;
  /** Test result framework-specific data model elements. */
  readonly frameworkExtensions: FrameworkExtensions | undefined;
}

/**
 * The machine-readable test result statuses (v2).
 *
 * These high-level categories are further refined:
 * - for failing tests, by the failure_reason.kind.
 * - for skipped tests, by the skipped_reason.kind.
 *
 * Web test users: Refer to framework_extensions.web_tests for the original
 * test status reported by the web test harness. The status in this
 * field is the logical test status, not the original status. E.g. for
 * an expected failure, we record PASSED, not FAILED.
 */
export enum TestResult_Status {
  /** STATUS_UNSPECIFIED - Status was not specified. Do not use. */
  STATUS_UNSPECIFIED = 0,
  /** PASSED - The test case has passed. */
  PASSED = 1,
  /**
   * FAILED - The test case has failed.
   * Suggests that the code under test is incorrect, but it is also possible
   * that the test is incorrect or it is a flake.
   *
   * If a test failed to complete due to an error that is not the fault of
   * this test's content, use the status EXECUTION_ERRORED (for errors specific
   * to this test) or PRECLUDED (for errors at a higher-level) instead.
   *
   * If you specify this status, you must also populate the failure_reason.kind field.
   */
  FAILED = 2,
  /**
   * SKIPPED - The test case did not, *and should not*, run to completion in this
   * configuration.
   *
   * For example:
   * - The test is disabled in code
   * - The test assumptions are not met (e.g. JUnit assumption failure
   *   or Tast test hardware dependency unmet)
   * - The test was not stable enough to in presubmit right now.
   *
   * If a test was not run or not run to completion due to an error, use the
   * status EXECUTION_ERRORED (for test-level errors) or PRECLUDED
   * (for higher-level errors) instead.
   *
   * If you specify this status, you must also populate the skipped_reason field.
   */
  SKIPPED = 3,
  /**
   * EXECUTION_ERRORED - The test did not run to completion, because an infrastructure error
   * precluded it from doing so.
   *
   * Infrastructure here is broadly defined, to mean "not the content
   * of this test".
   *
   * For example:
   * - The test ran, but the result file could not be parsed.
   * - A file this test depends on could not be downloaded.
   *
   * Sometimes it is ambiguous whether test content is at fault or not.
   * For example, loss of SSH connection during the test could be because
   * the test caused a kernel panic or because of a flaky ethernet adapter.
   * Judgement is required. If unsure, use EXECUTION_ERRORED status instead
   * of FAIL to avoid falsely inflating the flakiness rate of a test.
   *
   * Results with this status should be ignored when calculating the flake
   * and failure rates of the test.
   *
   * Currently, there is no dedicated 'reason' field for this status;
   * please just include a suitable description in the result `summary_html`.
   */
  EXECUTION_ERRORED = 4,
  /**
   * PRECLUDED - The test did not run to completion, because its execution is precluded
   * by an error at a higher-level. For example, a work unit-level timeout.
   *
   * If you report this status, you must report an error on the containing
   * work unit. If this restriction is changed in future to allow preclusion
   * by other sources (e.g. a class fixture failed to setup so the tests in
   * using it could not run), a preclusion reason field will be added to
   * capture this.
   *
   * Results with this status should be ignored when calculating the flake
   * and failure rates of the test.
   *
   * Currently, there is no dedicated 'reason' field for this status; please
   * include a suitable description in the result `summary_html`.
   */
  PRECLUDED = 5,
}

export function testResult_StatusFromJSON(object: any): TestResult_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return TestResult_Status.STATUS_UNSPECIFIED;
    case 1:
    case "PASSED":
      return TestResult_Status.PASSED;
    case 2:
    case "FAILED":
      return TestResult_Status.FAILED;
    case 3:
    case "SKIPPED":
      return TestResult_Status.SKIPPED;
    case 4:
    case "EXECUTION_ERRORED":
      return TestResult_Status.EXECUTION_ERRORED;
    case 5:
    case "PRECLUDED":
      return TestResult_Status.PRECLUDED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestResult_Status");
  }
}

export function testResult_StatusToJSON(object: TestResult_Status): string {
  switch (object) {
    case TestResult_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case TestResult_Status.PASSED:
      return "PASSED";
    case TestResult_Status.FAILED:
      return "FAILED";
    case TestResult_Status.SKIPPED:
      return "SKIPPED";
    case TestResult_Status.EXECUTION_ERRORED:
      return "EXECUTION_ERRORED";
    case TestResult_Status.PRECLUDED:
      return "PRECLUDED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestResult_Status");
  }
}

/**
 * SkippedReason helps a developer answer the questions:
 * - Why was this test skipped?
 * - How do I stop it being skipped?
 */
export interface SkippedReason {
  readonly kind: SkippedReason_Kind;
  /**
   * A human-readable message providing more context or details about why the
   * test was skipped. Limited to 1024 bytes of printable UTF-8.
   *
   * Required for skip kinds DEMOTED and OTHER, optional otherwise.
   *
   * For DISABLED_AT_DECLARATION, useful information would be:
   * - For Tast, the Tast-provided skip reason (detailing the declared
   *   hardware/software dependencies that were unmet).
   *
   * For SKIPPED_BY_TEST_BODY, useful information would be:
   * - For JUnit, the JUnit assumption failure that led to the skip.
   * - For GoogleTest, the file and line where the GTEST_SKIP() macro was
   *   invoked and the message passed to it.
   *
   * For DEMOTED and OTHER, the criteria that led to the skip
   * and how the user might get the test running again.
   */
  readonly reasonMessage: string;
}

/**
 * Provides structured explanation for why a test was skipped.
 * It must be populated when the status is SKIP.
 * Open to extension.
 */
export enum SkippedReason_Kind {
  /** KIND_UNSPECIFIED - Skipped reason was not specified. Do not use this value. */
  KIND_UNSPECIFIED = 0,
  /**
   * DISABLED_AT_DECLARATION - Skipped by an annotation at the test declaration site.
   *
   * This includes:
   * - JUnit4 @Ignore,
   * - JUnit5 @Disabled, @DisabledIf/For/On... @EnabledIf/For/On...
   *   annotations.
   * - GoogleTest DISABLED_ text prefix.
   * - Tast test skips from the declared software or hardware
   *   dependencies being unsatisfied at runtime.
   * and similar statically defined annotations at the test
   * declaration site.
   */
  DISABLED_AT_DECLARATION = 1,
  /**
   * SKIPPED_BY_TEST_BODY - Test body began to run but determined the test should
   * not finish. For example, the test did not detect a valid
   * environment meeting the test assumptions.
   *
   * This covers:
   * - a JUnit4 or JUnit5 assumption failure in the body of a test,
   *   from Assume.assumeThat(...) and similar methods.
   * - Use of the GTEST_SKIP() macro within the body of a test.
   * - Golang's t.Skip(...) in the body of a test.
   */
  SKIPPED_BY_TEST_BODY = 2,
  /**
   * DEMOTED - Used to indicate the test was skipped due to presubmit demotion
   * (e.g. because the test was too flaky).
   *
   * You must specify a human-readable detail message if you use this status.
   * Please explain the criteria that was met and how the user should get the
   * test undemoted or reference a link that explains more.
   */
  DEMOTED = 3,
  /**
   * OTHER - The test was skipped by some other reason.
   *
   * This includes:
   * - Blink web tests disabled in an expectation file.
   *
   * You must specify a human-readable detail message if you use this status.
   */
  OTHER = 4,
}

export function skippedReason_KindFromJSON(object: any): SkippedReason_Kind {
  switch (object) {
    case 0:
    case "KIND_UNSPECIFIED":
      return SkippedReason_Kind.KIND_UNSPECIFIED;
    case 1:
    case "DISABLED_AT_DECLARATION":
      return SkippedReason_Kind.DISABLED_AT_DECLARATION;
    case 2:
    case "SKIPPED_BY_TEST_BODY":
      return SkippedReason_Kind.SKIPPED_BY_TEST_BODY;
    case 3:
    case "DEMOTED":
      return SkippedReason_Kind.DEMOTED;
    case 4:
    case "OTHER":
      return SkippedReason_Kind.OTHER;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SkippedReason_Kind");
  }
}

export function skippedReason_KindToJSON(object: SkippedReason_Kind): string {
  switch (object) {
    case SkippedReason_Kind.KIND_UNSPECIFIED:
      return "KIND_UNSPECIFIED";
    case SkippedReason_Kind.DISABLED_AT_DECLARATION:
      return "DISABLED_AT_DECLARATION";
    case SkippedReason_Kind.SKIPPED_BY_TEST_BODY:
      return "SKIPPED_BY_TEST_BODY";
    case SkippedReason_Kind.DEMOTED:
      return "DEMOTED";
    case SkippedReason_Kind.OTHER:
      return "OTHER";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum SkippedReason_Kind");
  }
}

/**
 * Additional information about the test result in source test
 * framework-specific format. Data fields may be added here
 * before there is sufficient examples to create a standardised
 * representation, or to support bespoke harness-specific features.
 */
export interface FrameworkExtensions {
  /**
   * The test status produced by the blink web test harness.
   * This field supports web test rebaselining.
   */
  readonly webTest: WebTest | undefined;
}

/** Web Platform Test specific result data. */
export interface WebTest {
  /**
   * Whether the test produced the expected result. Failed results may be
   * expected and passed results unexpected, depending on if we expected
   * the implementation (e.g. Blink) to conform with the web platform feature
   * at this time.
   * See https://chromium.googlesource.com/chromium/src/+/HEAD/docs/testing/web_test_expectations.md.
   * See https://web-platform-tests.org/tools/wptrunner/docs/expectation.html.
   */
  readonly isExpected: boolean;
  /** The status of the test result. */
  readonly status: WebTest_Status;
}

/** An enumeration of web test status values. */
export enum WebTest_Status {
  /**
   * STATUS_UNSPECIFIED - Status was not specified.
   * Not to be used in actual test results; serves as a default value for an
   * unset field.
   */
  STATUS_UNSPECIFIED = 0,
  /** PASS - The test case has passed. */
  PASS = 1,
  /** FAIL - The test case has failed. */
  FAIL = 2,
  /** CRASH - The test case has crashed during execution. */
  CRASH = 3,
  /** TIMEOUT - The test timed out. */
  TIMEOUT = 4,
  /** SKIP - The test case did not execute. */
  SKIP = 5,
}

export function webTest_StatusFromJSON(object: any): WebTest_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return WebTest_Status.STATUS_UNSPECIFIED;
    case 1:
    case "PASS":
      return WebTest_Status.PASS;
    case 2:
    case "FAIL":
      return WebTest_Status.FAIL;
    case 3:
    case "CRASH":
      return WebTest_Status.CRASH;
    case 4:
    case "TIMEOUT":
      return WebTest_Status.TIMEOUT;
    case 5:
    case "SKIP":
      return WebTest_Status.SKIP;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum WebTest_Status");
  }
}

export function webTest_StatusToJSON(object: WebTest_Status): string {
  switch (object) {
    case WebTest_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case WebTest_Status.PASS:
      return "PASS";
    case WebTest_Status.FAIL:
      return "FAIL";
    case WebTest_Status.CRASH:
      return "CRASH";
    case WebTest_Status.TIMEOUT:
      return "TIMEOUT";
    case WebTest_Status.SKIP:
      return "SKIP";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum WebTest_Status");
  }
}

/**
 * Indicates the test subject (e.g. a CL) is absolved from blame
 * for an unexpected result of a test variant.
 * For example, the test variant fails both with and without CL, so it is not
 * CL's fault.
 * Next ID: 10.
 */
export interface TestExoneration {
  /**
   * Can be used to refer to this test exoneration, e.g. in
   * ResultDB.GetTestExoneration RPC.
   * Format:
   * invocations/{INVOCATION_ID}/tests/{URL_ESCAPED_TEST_ID}/exonerations/{EXONERATION_ID}.
   * URL_ESCAPED_TEST_ID is test_variant.test_id escaped with
   * https://golang.org/pkg/net/url/#PathEscape See also https://aip.dev/122.
   *
   * Output only.
   */
  readonly name: string;
  /**
   * The structured test identifier.
   *
   * Uniquely identifies the test that was run, including the specific way of running that
   * test, e.g. build configuration, CPU architecture, OS.
   *
   * When uploading results, this should be specified in preference
   * to test_id and variant. (Uploading test_id and variant is supported only for
   * legacy uploaders).
   */
  readonly testIdStructured:
    | TestIdentifier
    | undefined;
  /**
   * A unique identifier of the test in a LUCI project, excluding variant.
   * Regex: ^[[::print::]]{1,512}$
   *
   * This is the flat-form encoding of the structured test variant ID above,
   * excluding information about the specific way of running test (e.g. build configuration,
   * CPU architecture). Such information is captured separately in the `variant` field below.
   *
   * See TestIdentifier for details how a structured test identifier is converted
   * to flat test ID.
   *
   * Output only. (Except for legacy uploaders.)
   */
  readonly testId: string;
  /**
   * Description of one specific way of running the test,
   * e.g. build configuration, CPU architecture, OS.
   *
   * Output only. (Except for legacy uploaders.)
   */
  readonly variant:
    | Variant
    | undefined;
  /**
   * Identifies an exoneration in a given invocation and test id.
   * It is server-generated.
   */
  readonly exonerationId: string;
  /**
   * Reasoning behind the exoneration, in HTML.
   * MUST be sanitized before rendering in the browser.
   */
  readonly explanationHtml: string;
  /**
   * Hash of the variant.
   * hex(sha256(sorted(''.join('%s:%s\n' for k, v in variant.items())))).
   */
  readonly variantHash: string;
  /**
   * Reasoning behind the exoneration, in machine-readable form.
   * Used to assist downstream analyses, such as automatic bug-filing.
   * This allow detection of e.g. critical tests failing in presubmit,
   * even if they are being exonerated because they fail on other CLs.
   */
  readonly reason: ExonerationReason;
  /**
   * Whether the test exoneration has been masked so that it includes only
   * metadata. The metadata fields for a TestExoneration are:
   * * name
   * * test_id
   * * exoneration_id
   * * variant_hash
   * * explanation_html
   * * reason
   *
   * Output only.
   */
  readonly isMasked: boolean;
}

function createBaseTestResult(): TestResult {
  return {
    name: "",
    testIdStructured: undefined,
    testId: "",
    resultId: "",
    variant: undefined,
    expected: false,
    status: 0,
    statusV2: 0,
    summaryHtml: "",
    startTime: undefined,
    duration: undefined,
    tags: [],
    variantHash: "",
    testMetadata: undefined,
    failureReason: undefined,
    properties: undefined,
    isMasked: false,
    skipReason: 0,
    skippedReason: undefined,
    frameworkExtensions: undefined,
  };
}

export const TestResult: MessageFns<TestResult> = {
  encode(message: TestResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.testIdStructured !== undefined) {
      TestIdentifier.encode(message.testIdStructured, writer.uint32(154).fork()).join();
    }
    if (message.testId !== "") {
      writer.uint32(18).string(message.testId);
    }
    if (message.resultId !== "") {
      writer.uint32(26).string(message.resultId);
    }
    if (message.variant !== undefined) {
      Variant.encode(message.variant, writer.uint32(34).fork()).join();
    }
    if (message.expected !== false) {
      writer.uint32(40).bool(message.expected);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.statusV2 !== 0) {
      writer.uint32(160).int32(message.statusV2);
    }
    if (message.summaryHtml !== "") {
      writer.uint32(58).string(message.summaryHtml);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(66).fork()).join();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(74).fork()).join();
    }
    for (const v of message.tags) {
      StringPair.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.variantHash !== "") {
      writer.uint32(98).string(message.variantHash);
    }
    if (message.testMetadata !== undefined) {
      TestMetadata.encode(message.testMetadata, writer.uint32(106).fork()).join();
    }
    if (message.failureReason !== undefined) {
      FailureReason.encode(message.failureReason, writer.uint32(114).fork()).join();
    }
    if (message.properties !== undefined) {
      Struct.encode(Struct.wrap(message.properties), writer.uint32(122).fork()).join();
    }
    if (message.isMasked !== false) {
      writer.uint32(128).bool(message.isMasked);
    }
    if (message.skipReason !== 0) {
      writer.uint32(144).int32(message.skipReason);
    }
    if (message.skippedReason !== undefined) {
      SkippedReason.encode(message.skippedReason, writer.uint32(170).fork()).join();
    }
    if (message.frameworkExtensions !== undefined) {
      FrameworkExtensions.encode(message.frameworkExtensions, writer.uint32(178).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.testIdStructured = TestIdentifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.testId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resultId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.variant = Variant.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.expected = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.statusV2 = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.summaryHtml = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.tags.push(StringPair.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.variantHash = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.testMetadata = TestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.failureReason = FailureReason.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.properties = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.isMasked = reader.bool();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.skipReason = reader.int32() as any;
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.skippedReason = SkippedReason.decode(reader, reader.uint32());
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.frameworkExtensions = FrameworkExtensions.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestResult {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      testIdStructured: isSet(object.testIdStructured) ? TestIdentifier.fromJSON(object.testIdStructured) : undefined,
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      resultId: isSet(object.resultId) ? globalThis.String(object.resultId) : "",
      variant: isSet(object.variant) ? Variant.fromJSON(object.variant) : undefined,
      expected: isSet(object.expected) ? globalThis.Boolean(object.expected) : false,
      status: isSet(object.status) ? testStatusFromJSON(object.status) : 0,
      statusV2: isSet(object.statusV2) ? testResult_StatusFromJSON(object.statusV2) : 0,
      summaryHtml: isSet(object.summaryHtml) ? globalThis.String(object.summaryHtml) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => StringPair.fromJSON(e)) : [],
      variantHash: isSet(object.variantHash) ? globalThis.String(object.variantHash) : "",
      testMetadata: isSet(object.testMetadata) ? TestMetadata.fromJSON(object.testMetadata) : undefined,
      failureReason: isSet(object.failureReason) ? FailureReason.fromJSON(object.failureReason) : undefined,
      properties: isObject(object.properties) ? object.properties : undefined,
      isMasked: isSet(object.isMasked) ? globalThis.Boolean(object.isMasked) : false,
      skipReason: isSet(object.skipReason) ? skipReasonFromJSON(object.skipReason) : 0,
      skippedReason: isSet(object.skippedReason) ? SkippedReason.fromJSON(object.skippedReason) : undefined,
      frameworkExtensions: isSet(object.frameworkExtensions)
        ? FrameworkExtensions.fromJSON(object.frameworkExtensions)
        : undefined,
    };
  },

  toJSON(message: TestResult): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.testIdStructured !== undefined) {
      obj.testIdStructured = TestIdentifier.toJSON(message.testIdStructured);
    }
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.resultId !== "") {
      obj.resultId = message.resultId;
    }
    if (message.variant !== undefined) {
      obj.variant = Variant.toJSON(message.variant);
    }
    if (message.expected !== false) {
      obj.expected = message.expected;
    }
    if (message.status !== 0) {
      obj.status = testStatusToJSON(message.status);
    }
    if (message.statusV2 !== 0) {
      obj.statusV2 = testResult_StatusToJSON(message.statusV2);
    }
    if (message.summaryHtml !== "") {
      obj.summaryHtml = message.summaryHtml;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime;
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => StringPair.toJSON(e));
    }
    if (message.variantHash !== "") {
      obj.variantHash = message.variantHash;
    }
    if (message.testMetadata !== undefined) {
      obj.testMetadata = TestMetadata.toJSON(message.testMetadata);
    }
    if (message.failureReason !== undefined) {
      obj.failureReason = FailureReason.toJSON(message.failureReason);
    }
    if (message.properties !== undefined) {
      obj.properties = message.properties;
    }
    if (message.isMasked !== false) {
      obj.isMasked = message.isMasked;
    }
    if (message.skipReason !== 0) {
      obj.skipReason = skipReasonToJSON(message.skipReason);
    }
    if (message.skippedReason !== undefined) {
      obj.skippedReason = SkippedReason.toJSON(message.skippedReason);
    }
    if (message.frameworkExtensions !== undefined) {
      obj.frameworkExtensions = FrameworkExtensions.toJSON(message.frameworkExtensions);
    }
    return obj;
  },

  create(base?: DeepPartial<TestResult>): TestResult {
    return TestResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestResult>): TestResult {
    const message = createBaseTestResult() as any;
    message.name = object.name ?? "";
    message.testIdStructured = (object.testIdStructured !== undefined && object.testIdStructured !== null)
      ? TestIdentifier.fromPartial(object.testIdStructured)
      : undefined;
    message.testId = object.testId ?? "";
    message.resultId = object.resultId ?? "";
    message.variant = (object.variant !== undefined && object.variant !== null)
      ? Variant.fromPartial(object.variant)
      : undefined;
    message.expected = object.expected ?? false;
    message.status = object.status ?? 0;
    message.statusV2 = object.statusV2 ?? 0;
    message.summaryHtml = object.summaryHtml ?? "";
    message.startTime = object.startTime ?? undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.tags = object.tags?.map((e) => StringPair.fromPartial(e)) || [];
    message.variantHash = object.variantHash ?? "";
    message.testMetadata = (object.testMetadata !== undefined && object.testMetadata !== null)
      ? TestMetadata.fromPartial(object.testMetadata)
      : undefined;
    message.failureReason = (object.failureReason !== undefined && object.failureReason !== null)
      ? FailureReason.fromPartial(object.failureReason)
      : undefined;
    message.properties = object.properties ?? undefined;
    message.isMasked = object.isMasked ?? false;
    message.skipReason = object.skipReason ?? 0;
    message.skippedReason = (object.skippedReason !== undefined && object.skippedReason !== null)
      ? SkippedReason.fromPartial(object.skippedReason)
      : undefined;
    message.frameworkExtensions = (object.frameworkExtensions !== undefined && object.frameworkExtensions !== null)
      ? FrameworkExtensions.fromPartial(object.frameworkExtensions)
      : undefined;
    return message;
  },
};

function createBaseSkippedReason(): SkippedReason {
  return { kind: 0, reasonMessage: "" };
}

export const SkippedReason: MessageFns<SkippedReason> = {
  encode(message: SkippedReason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.reasonMessage !== "") {
      writer.uint32(18).string(message.reasonMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SkippedReason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSkippedReason() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reasonMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SkippedReason {
    return {
      kind: isSet(object.kind) ? skippedReason_KindFromJSON(object.kind) : 0,
      reasonMessage: isSet(object.reasonMessage) ? globalThis.String(object.reasonMessage) : "",
    };
  },

  toJSON(message: SkippedReason): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = skippedReason_KindToJSON(message.kind);
    }
    if (message.reasonMessage !== "") {
      obj.reasonMessage = message.reasonMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<SkippedReason>): SkippedReason {
    return SkippedReason.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SkippedReason>): SkippedReason {
    const message = createBaseSkippedReason() as any;
    message.kind = object.kind ?? 0;
    message.reasonMessage = object.reasonMessage ?? "";
    return message;
  },
};

function createBaseFrameworkExtensions(): FrameworkExtensions {
  return { webTest: undefined };
}

export const FrameworkExtensions: MessageFns<FrameworkExtensions> = {
  encode(message: FrameworkExtensions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.webTest !== undefined) {
      WebTest.encode(message.webTest, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FrameworkExtensions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFrameworkExtensions() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.webTest = WebTest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FrameworkExtensions {
    return { webTest: isSet(object.webTest) ? WebTest.fromJSON(object.webTest) : undefined };
  },

  toJSON(message: FrameworkExtensions): unknown {
    const obj: any = {};
    if (message.webTest !== undefined) {
      obj.webTest = WebTest.toJSON(message.webTest);
    }
    return obj;
  },

  create(base?: DeepPartial<FrameworkExtensions>): FrameworkExtensions {
    return FrameworkExtensions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FrameworkExtensions>): FrameworkExtensions {
    const message = createBaseFrameworkExtensions() as any;
    message.webTest = (object.webTest !== undefined && object.webTest !== null)
      ? WebTest.fromPartial(object.webTest)
      : undefined;
    return message;
  },
};

function createBaseWebTest(): WebTest {
  return { isExpected: false, status: 0 };
}

export const WebTest: MessageFns<WebTest> = {
  encode(message: WebTest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isExpected !== false) {
      writer.uint32(8).bool(message.isExpected);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebTest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebTest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isExpected = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebTest {
    return {
      isExpected: isSet(object.isExpected) ? globalThis.Boolean(object.isExpected) : false,
      status: isSet(object.status) ? webTest_StatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: WebTest): unknown {
    const obj: any = {};
    if (message.isExpected !== false) {
      obj.isExpected = message.isExpected;
    }
    if (message.status !== 0) {
      obj.status = webTest_StatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<WebTest>): WebTest {
    return WebTest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebTest>): WebTest {
    const message = createBaseWebTest() as any;
    message.isExpected = object.isExpected ?? false;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseTestExoneration(): TestExoneration {
  return {
    name: "",
    testIdStructured: undefined,
    testId: "",
    variant: undefined,
    exonerationId: "",
    explanationHtml: "",
    variantHash: "",
    reason: 0,
    isMasked: false,
  };
}

export const TestExoneration: MessageFns<TestExoneration> = {
  encode(message: TestExoneration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.testIdStructured !== undefined) {
      TestIdentifier.encode(message.testIdStructured, writer.uint32(74).fork()).join();
    }
    if (message.testId !== "") {
      writer.uint32(18).string(message.testId);
    }
    if (message.variant !== undefined) {
      Variant.encode(message.variant, writer.uint32(26).fork()).join();
    }
    if (message.exonerationId !== "") {
      writer.uint32(34).string(message.exonerationId);
    }
    if (message.explanationHtml !== "") {
      writer.uint32(42).string(message.explanationHtml);
    }
    if (message.variantHash !== "") {
      writer.uint32(50).string(message.variantHash);
    }
    if (message.reason !== 0) {
      writer.uint32(56).int32(message.reason);
    }
    if (message.isMasked !== false) {
      writer.uint32(64).bool(message.isMasked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestExoneration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestExoneration() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.testIdStructured = TestIdentifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.testId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.variant = Variant.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.exonerationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.explanationHtml = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.variantHash = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isMasked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestExoneration {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      testIdStructured: isSet(object.testIdStructured) ? TestIdentifier.fromJSON(object.testIdStructured) : undefined,
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      variant: isSet(object.variant) ? Variant.fromJSON(object.variant) : undefined,
      exonerationId: isSet(object.exonerationId) ? globalThis.String(object.exonerationId) : "",
      explanationHtml: isSet(object.explanationHtml) ? globalThis.String(object.explanationHtml) : "",
      variantHash: isSet(object.variantHash) ? globalThis.String(object.variantHash) : "",
      reason: isSet(object.reason) ? exonerationReasonFromJSON(object.reason) : 0,
      isMasked: isSet(object.isMasked) ? globalThis.Boolean(object.isMasked) : false,
    };
  },

  toJSON(message: TestExoneration): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.testIdStructured !== undefined) {
      obj.testIdStructured = TestIdentifier.toJSON(message.testIdStructured);
    }
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.variant !== undefined) {
      obj.variant = Variant.toJSON(message.variant);
    }
    if (message.exonerationId !== "") {
      obj.exonerationId = message.exonerationId;
    }
    if (message.explanationHtml !== "") {
      obj.explanationHtml = message.explanationHtml;
    }
    if (message.variantHash !== "") {
      obj.variantHash = message.variantHash;
    }
    if (message.reason !== 0) {
      obj.reason = exonerationReasonToJSON(message.reason);
    }
    if (message.isMasked !== false) {
      obj.isMasked = message.isMasked;
    }
    return obj;
  },

  create(base?: DeepPartial<TestExoneration>): TestExoneration {
    return TestExoneration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestExoneration>): TestExoneration {
    const message = createBaseTestExoneration() as any;
    message.name = object.name ?? "";
    message.testIdStructured = (object.testIdStructured !== undefined && object.testIdStructured !== null)
      ? TestIdentifier.fromPartial(object.testIdStructured)
      : undefined;
    message.testId = object.testId ?? "";
    message.variant = (object.variant !== undefined && object.variant !== null)
      ? Variant.fromPartial(object.variant)
      : undefined;
    message.exonerationId = object.exonerationId ?? "";
    message.explanationHtml = object.explanationHtml ?? "";
    message.variantHash = object.variantHash ?? "";
    message.reason = object.reason ?? 0;
    message.isMasked = object.isMasked ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
