// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.0
// source: go.chromium.org/luci/resultdb/sink/proto/v1/test_result.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../../google/protobuf/duration.pb";
import { Struct } from "../../../../../../google/protobuf/struct.pb";
import { Timestamp } from "../../../../../../google/protobuf/timestamp.pb";
import { StringPair, Variant } from "../../../proto/v1/common.pb";
import { FailureReason } from "../../../proto/v1/failure_reason.pb";
import { TestMetadata } from "../../../proto/v1/test_metadata.pb";
import { TestStatus, testStatusFromJSON, testStatusToJSON } from "../../../proto/v1/test_result.pb";

export const protobufPackage = "luci.resultsink.v1";

/**
 * A local equivalent of luci.resultdb.TestResult message
 * in ../../v1/test_result.proto.
 * See its comments for details.
 */
export interface TestResult {
  /** Equivalent of luci.resultdb.v1.TestResult.TestId. */
  readonly testId: string;
  /**
   * Equivalent of luci.resultdb.v1.TestResult.result_id.
   *
   * If omitted, a random, unique ID is generated..
   */
  readonly resultId: string;
  /** Equivalent of luci.resultdb.v1.TestResult.expected. */
  readonly expected: boolean;
  /** Equivalent of luci.resultdb.v1.TestResult.status. */
  readonly status: TestStatus;
  /** Equivalent of luci.resultdb.v1.TestResult.summary_html. */
  readonly summaryHtml: string;
  /** Equivalent of luci.resultdb.v1.TestResult.start_time. */
  readonly startTime:
    | string
    | undefined;
  /** Equivalent of luci.resultdb.v1.TestResult.duration. */
  readonly duration:
    | Duration
    | undefined;
  /** Equivalent of luci.resultdb.v1.TestResult.tags. */
  readonly tags: readonly StringPair[];
  /**
   * Artifacts to upload and associate with this test result.
   * The map key is an artifact id.
   */
  readonly artifacts: { [key: string]: Artifact };
  /** Equivalent of luci.resultdb.v1.TestResult.test_metadata. */
  readonly testMetadata:
    | TestMetadata
    | undefined;
  /** Equivalent of luci.resultdb.v1.TestResult.failure_reason. */
  readonly failureReason:
    | FailureReason
    | undefined;
  /**
   * Equivalent of luci.resultdb.v1.TestResult.variant.
   * The variant for all test cases should be passed by command line args to rdb
   * stream, however you can override or add to the variant on a per test case
   * basis using this field.
   */
  readonly variant:
    | Variant
    | undefined;
  /**
   * Arbitrary JSON object that contains structured, domain-specific properties
   * of the test result.
   *
   * The serialized size must be <= 8 KB.
   */
  readonly properties: { readonly [key: string]: any } | undefined;
}

export interface TestResult_ArtifactsEntry {
  readonly key: string;
  readonly value: Artifact | undefined;
}

/**
 * A local equivalent of luci.resultdb.Artifact message
 * in ../../rpc/v1/artifact.proto.
 * See its comments for details.
 * Does not have a name or artifact_id because they are represented by the
 * TestResult.artifacts map key.
 * Next id: 5
 */
export interface Artifact {
  /**
   * Absolute path to the artifact file on the same machine as the
   * ResultSink server.
   */
  readonly filePath?:
    | string
    | undefined;
  /**
   * Contents of the artifact. Useful when sending a file from a different
   * machine.
   * TODO(nodir, sajjadm): allow sending contents in chunks.
   */
  readonly contents?:
    | Uint8Array
    | undefined;
  /** The GCS URI of the artifact if it's stored in GCS. */
  readonly gcsUri?:
    | string
    | undefined;
  /** Equivalent of luci.resultdb.v1.Artifact.content_type. */
  readonly contentType: string;
}

/** A file with test results. */
export interface TestResultFile {
  /**
   * Absolute OS-native path to the results file on the same machine as the
   * ResultSink server.
   */
  readonly path: string;
  /** Format of the file. */
  readonly format: TestResultFile_Format;
}

/** A result file format. */
export enum TestResultFile_Format {
  /**
   * LUCI - The file is a sequence of TestResult JSON objects (not a JSON Array).
   * The default format.
   */
  LUCI = 0,
  /**
   * CHROMIUM_JSON_TEST_RESULTS - Chromium's JSON Test Results format
   * https://chromium.googlesource.com/chromium/src/+/master/docs/testing/json_test_results_format.md
   */
  CHROMIUM_JSON_TEST_RESULTS = 1,
  /**
   * GOOGLE_TEST - GTest format.
   * Not well documented.
   * Implementation:
   * https://cs.chromium.org/chromium/src/base/test/launcher/test_results_tracker.cc
   */
  GOOGLE_TEST = 2,
}

export function testResultFile_FormatFromJSON(object: any): TestResultFile_Format {
  switch (object) {
    case 0:
    case "LUCI":
      return TestResultFile_Format.LUCI;
    case 1:
    case "CHROMIUM_JSON_TEST_RESULTS":
      return TestResultFile_Format.CHROMIUM_JSON_TEST_RESULTS;
    case 2:
    case "GOOGLE_TEST":
      return TestResultFile_Format.GOOGLE_TEST;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestResultFile_Format");
  }
}

export function testResultFile_FormatToJSON(object: TestResultFile_Format): string {
  switch (object) {
    case TestResultFile_Format.LUCI:
      return "LUCI";
    case TestResultFile_Format.CHROMIUM_JSON_TEST_RESULTS:
      return "CHROMIUM_JSON_TEST_RESULTS";
    case TestResultFile_Format.GOOGLE_TEST:
      return "GOOGLE_TEST";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum TestResultFile_Format");
  }
}

function createBaseTestResult(): TestResult {
  return {
    testId: "",
    resultId: "",
    expected: false,
    status: 0,
    summaryHtml: "",
    startTime: undefined,
    duration: undefined,
    tags: [],
    artifacts: {},
    testMetadata: undefined,
    failureReason: undefined,
    variant: undefined,
    properties: undefined,
  };
}

export const TestResult: MessageFns<TestResult> = {
  encode(message: TestResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.testId !== "") {
      writer.uint32(10).string(message.testId);
    }
    if (message.resultId !== "") {
      writer.uint32(18).string(message.resultId);
    }
    if (message.expected !== false) {
      writer.uint32(24).bool(message.expected);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.summaryHtml !== "") {
      writer.uint32(42).string(message.summaryHtml);
    }
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(50).fork()).join();
    }
    if (message.duration !== undefined) {
      Duration.encode(message.duration, writer.uint32(58).fork()).join();
    }
    for (const v of message.tags) {
      StringPair.encode(v!, writer.uint32(66).fork()).join();
    }
    Object.entries(message.artifacts).forEach(([key, value]) => {
      TestResult_ArtifactsEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    if (message.testMetadata !== undefined) {
      TestMetadata.encode(message.testMetadata, writer.uint32(90).fork()).join();
    }
    if (message.failureReason !== undefined) {
      FailureReason.encode(message.failureReason, writer.uint32(98).fork()).join();
    }
    if (message.variant !== undefined) {
      Variant.encode(message.variant, writer.uint32(106).fork()).join();
    }
    if (message.properties !== undefined) {
      Struct.encode(Struct.wrap(message.properties), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.testId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resultId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expected = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.summaryHtml = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.duration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(StringPair.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = TestResult_ArtifactsEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.artifacts[entry9.key] = entry9.value;
          }
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.testMetadata = TestMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.failureReason = FailureReason.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.variant = Variant.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.properties = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestResult {
    return {
      testId: isSet(object.testId) ? globalThis.String(object.testId) : "",
      resultId: isSet(object.resultId) ? globalThis.String(object.resultId) : "",
      expected: isSet(object.expected) ? globalThis.Boolean(object.expected) : false,
      status: isSet(object.status) ? testStatusFromJSON(object.status) : 0,
      summaryHtml: isSet(object.summaryHtml) ? globalThis.String(object.summaryHtml) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,
      duration: isSet(object.duration) ? Duration.fromJSON(object.duration) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => StringPair.fromJSON(e)) : [],
      artifacts: isObject(object.artifacts)
        ? Object.entries(object.artifacts).reduce<{ [key: string]: Artifact }>((acc, [key, value]) => {
          acc[key] = Artifact.fromJSON(value);
          return acc;
        }, {})
        : {},
      testMetadata: isSet(object.testMetadata) ? TestMetadata.fromJSON(object.testMetadata) : undefined,
      failureReason: isSet(object.failureReason) ? FailureReason.fromJSON(object.failureReason) : undefined,
      variant: isSet(object.variant) ? Variant.fromJSON(object.variant) : undefined,
      properties: isObject(object.properties) ? object.properties : undefined,
    };
  },

  toJSON(message: TestResult): unknown {
    const obj: any = {};
    if (message.testId !== "") {
      obj.testId = message.testId;
    }
    if (message.resultId !== "") {
      obj.resultId = message.resultId;
    }
    if (message.expected !== false) {
      obj.expected = message.expected;
    }
    if (message.status !== 0) {
      obj.status = testStatusToJSON(message.status);
    }
    if (message.summaryHtml !== "") {
      obj.summaryHtml = message.summaryHtml;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime;
    }
    if (message.duration !== undefined) {
      obj.duration = Duration.toJSON(message.duration);
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => StringPair.toJSON(e));
    }
    if (message.artifacts) {
      const entries = Object.entries(message.artifacts);
      if (entries.length > 0) {
        obj.artifacts = {};
        entries.forEach(([k, v]) => {
          obj.artifacts[k] = Artifact.toJSON(v);
        });
      }
    }
    if (message.testMetadata !== undefined) {
      obj.testMetadata = TestMetadata.toJSON(message.testMetadata);
    }
    if (message.failureReason !== undefined) {
      obj.failureReason = FailureReason.toJSON(message.failureReason);
    }
    if (message.variant !== undefined) {
      obj.variant = Variant.toJSON(message.variant);
    }
    if (message.properties !== undefined) {
      obj.properties = message.properties;
    }
    return obj;
  },

  create(base?: DeepPartial<TestResult>): TestResult {
    return TestResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestResult>): TestResult {
    const message = createBaseTestResult() as any;
    message.testId = object.testId ?? "";
    message.resultId = object.resultId ?? "";
    message.expected = object.expected ?? false;
    message.status = object.status ?? 0;
    message.summaryHtml = object.summaryHtml ?? "";
    message.startTime = object.startTime ?? undefined;
    message.duration = (object.duration !== undefined && object.duration !== null)
      ? Duration.fromPartial(object.duration)
      : undefined;
    message.tags = object.tags?.map((e) => StringPair.fromPartial(e)) || [];
    message.artifacts = Object.entries(object.artifacts ?? {}).reduce<{ [key: string]: Artifact }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = Artifact.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.testMetadata = (object.testMetadata !== undefined && object.testMetadata !== null)
      ? TestMetadata.fromPartial(object.testMetadata)
      : undefined;
    message.failureReason = (object.failureReason !== undefined && object.failureReason !== null)
      ? FailureReason.fromPartial(object.failureReason)
      : undefined;
    message.variant = (object.variant !== undefined && object.variant !== null)
      ? Variant.fromPartial(object.variant)
      : undefined;
    message.properties = object.properties ?? undefined;
    return message;
  },
};

function createBaseTestResult_ArtifactsEntry(): TestResult_ArtifactsEntry {
  return { key: "", value: undefined };
}

export const TestResult_ArtifactsEntry: MessageFns<TestResult_ArtifactsEntry> = {
  encode(message: TestResult_ArtifactsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Artifact.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestResult_ArtifactsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestResult_ArtifactsEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Artifact.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestResult_ArtifactsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Artifact.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TestResult_ArtifactsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Artifact.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<TestResult_ArtifactsEntry>): TestResult_ArtifactsEntry {
    return TestResult_ArtifactsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestResult_ArtifactsEntry>): TestResult_ArtifactsEntry {
    const message = createBaseTestResult_ArtifactsEntry() as any;
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? Artifact.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseArtifact(): Artifact {
  return { filePath: undefined, contents: undefined, gcsUri: undefined, contentType: "" };
}

export const Artifact: MessageFns<Artifact> = {
  encode(message: Artifact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filePath !== undefined) {
      writer.uint32(10).string(message.filePath);
    }
    if (message.contents !== undefined) {
      writer.uint32(18).bytes(message.contents);
    }
    if (message.gcsUri !== undefined) {
      writer.uint32(34).string(message.gcsUri);
    }
    if (message.contentType !== "") {
      writer.uint32(26).string(message.contentType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Artifact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArtifact() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filePath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contents = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gcsUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Artifact {
    return {
      filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : undefined,
      contents: isSet(object.contents) ? bytesFromBase64(object.contents) : undefined,
      gcsUri: isSet(object.gcsUri) ? globalThis.String(object.gcsUri) : undefined,
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
    };
  },

  toJSON(message: Artifact): unknown {
    const obj: any = {};
    if (message.filePath !== undefined) {
      obj.filePath = message.filePath;
    }
    if (message.contents !== undefined) {
      obj.contents = base64FromBytes(message.contents);
    }
    if (message.gcsUri !== undefined) {
      obj.gcsUri = message.gcsUri;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    return obj;
  },

  create(base?: DeepPartial<Artifact>): Artifact {
    return Artifact.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Artifact>): Artifact {
    const message = createBaseArtifact() as any;
    message.filePath = object.filePath ?? undefined;
    message.contents = object.contents ?? undefined;
    message.gcsUri = object.gcsUri ?? undefined;
    message.contentType = object.contentType ?? "";
    return message;
  },
};

function createBaseTestResultFile(): TestResultFile {
  return { path: "", format: 0 };
}

export const TestResultFile: MessageFns<TestResultFile> = {
  encode(message: TestResultFile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.format !== 0) {
      writer.uint32(16).int32(message.format);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestResultFile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestResultFile() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.format = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestResultFile {
    return {
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      format: isSet(object.format) ? testResultFile_FormatFromJSON(object.format) : 0,
    };
  },

  toJSON(message: TestResultFile): unknown {
    const obj: any = {};
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.format !== 0) {
      obj.format = testResultFile_FormatToJSON(message.format);
    }
    return obj;
  },

  create(base?: DeepPartial<TestResultFile>): TestResultFile {
    return TestResultFile.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestResultFile>): TestResultFile {
    const message = createBaseTestResultFile() as any;
    message.path = object.path ?? "";
    message.format = object.format ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
