// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: go.chromium.org/chromiumos/config/proto/chromiumos/test/lab/api/cbi.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "chromiumos.test.lab.api";

/**
 * CBI (CROS Board Info) contains hardware identifiers stored in
 * EEPROM on the DUT (go/cros-board-info, go/cbi-auto-recovery-dd)
 */
export interface Cbi {
  /**
   * All CBI contents stored on the DUT (Up to 256 bytes represented
   * in hex format "0x43 0x42 0x49 00 0xff...") as read directly from the DUT
   * using the `ectool i2cxfer` utility.
   */
  readonly rawContents: string;
}

function createBaseCbi(): Cbi {
  return { rawContents: "" };
}

export const Cbi: MessageFns<Cbi> = {
  encode(message: Cbi, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rawContents !== "") {
      writer.uint32(10).string(message.rawContents);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Cbi {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCbi() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rawContents = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cbi {
    return { rawContents: isSet(object.rawContents) ? globalThis.String(object.rawContents) : "" };
  },

  toJSON(message: Cbi): unknown {
    const obj: any = {};
    if (message.rawContents !== "") {
      obj.rawContents = message.rawContents;
    }
    return obj;
  },

  create(base?: DeepPartial<Cbi>): Cbi {
    return Cbi.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Cbi>): Cbi {
    const message = createBaseCbi() as any;
    message.rawContents = object.rawContents ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
