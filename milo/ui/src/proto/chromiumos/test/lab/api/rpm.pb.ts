// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.2
// source: chromiumos/test/lab/api/rpm.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { IpEndpoint } from "./ip_endpoint.pb";

export const protobufPackage = "chromiumos.test.lab.api";

/** Next Tag: 3 */
export enum RPMType {
  RPM_TYPE_UNKNOWN = 0,
  RPM_TYPE_SENTRY = 1,
  RPM_TYPE_IP9850 = 2,
}

export function rPMTypeFromJSON(object: any): RPMType {
  switch (object) {
    case 0:
    case "RPM_TYPE_UNKNOWN":
      return RPMType.RPM_TYPE_UNKNOWN;
    case 1:
    case "RPM_TYPE_SENTRY":
      return RPMType.RPM_TYPE_SENTRY;
    case 2:
    case "RPM_TYPE_IP9850":
      return RPMType.RPM_TYPE_IP9850;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RPMType");
  }
}

export function rPMTypeToJSON(object: RPMType): string {
  switch (object) {
    case RPMType.RPM_TYPE_UNKNOWN:
      return "RPM_TYPE_UNKNOWN";
    case RPMType.RPM_TYPE_SENTRY:
      return "RPM_TYPE_SENTRY";
    case RPMType.RPM_TYPE_IP9850:
      return "RPM_TYPE_IP9850";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum RPMType");
  }
}

/** Remote power management capability for the device. */
export interface RPM {
  readonly present: boolean;
  /**
   * Address to the frontend service for accessing the RPM.
   * The frontend service is an HTTP service that supports XMLRPC calls.
   */
  readonly frontendAddress:
    | IpEndpoint
    | undefined;
  /** Hostname of a particular PDU that assigned to the DUT. */
  readonly powerUnitHostname:
    | IpEndpoint
    | undefined;
  /** Outlet name/number assigned to the DUT */
  readonly powerUnitOutlet: string;
  /** (Optional) Hydra hostname if the PDU access require a hydra. */
  readonly hydraHostname:
    | IpEndpoint
    | undefined;
  /** RPM type */
  readonly type: RPMType;
}

function createBaseRPM(): RPM {
  return {
    present: false,
    frontendAddress: undefined,
    powerUnitHostname: undefined,
    powerUnitOutlet: "",
    hydraHostname: undefined,
    type: 0,
  };
}

export const RPM: MessageFns<RPM> = {
  encode(message: RPM, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.present !== false) {
      writer.uint32(8).bool(message.present);
    }
    if (message.frontendAddress !== undefined) {
      IpEndpoint.encode(message.frontendAddress, writer.uint32(18).fork()).join();
    }
    if (message.powerUnitHostname !== undefined) {
      IpEndpoint.encode(message.powerUnitHostname, writer.uint32(26).fork()).join();
    }
    if (message.powerUnitOutlet !== "") {
      writer.uint32(34).string(message.powerUnitOutlet);
    }
    if (message.hydraHostname !== undefined) {
      IpEndpoint.encode(message.hydraHostname, writer.uint32(42).fork()).join();
    }
    if (message.type !== 0) {
      writer.uint32(48).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RPM {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRPM() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.present = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.frontendAddress = IpEndpoint.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.powerUnitHostname = IpEndpoint.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.powerUnitOutlet = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.hydraHostname = IpEndpoint.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RPM {
    return {
      present: isSet(object.present) ? globalThis.Boolean(object.present) : false,
      frontendAddress: isSet(object.frontendAddress) ? IpEndpoint.fromJSON(object.frontendAddress) : undefined,
      powerUnitHostname: isSet(object.powerUnitHostname) ? IpEndpoint.fromJSON(object.powerUnitHostname) : undefined,
      powerUnitOutlet: isSet(object.powerUnitOutlet) ? globalThis.String(object.powerUnitOutlet) : "",
      hydraHostname: isSet(object.hydraHostname) ? IpEndpoint.fromJSON(object.hydraHostname) : undefined,
      type: isSet(object.type) ? rPMTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: RPM): unknown {
    const obj: any = {};
    if (message.present !== false) {
      obj.present = message.present;
    }
    if (message.frontendAddress !== undefined) {
      obj.frontendAddress = IpEndpoint.toJSON(message.frontendAddress);
    }
    if (message.powerUnitHostname !== undefined) {
      obj.powerUnitHostname = IpEndpoint.toJSON(message.powerUnitHostname);
    }
    if (message.powerUnitOutlet !== "") {
      obj.powerUnitOutlet = message.powerUnitOutlet;
    }
    if (message.hydraHostname !== undefined) {
      obj.hydraHostname = IpEndpoint.toJSON(message.hydraHostname);
    }
    if (message.type !== 0) {
      obj.type = rPMTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<RPM>): RPM {
    return RPM.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RPM>): RPM {
    const message = createBaseRPM() as any;
    message.present = object.present ?? false;
    message.frontendAddress = (object.frontendAddress !== undefined && object.frontendAddress !== null)
      ? IpEndpoint.fromPartial(object.frontendAddress)
      : undefined;
    message.powerUnitHostname = (object.powerUnitHostname !== undefined && object.powerUnitHostname !== null)
      ? IpEndpoint.fromPartial(object.powerUnitHostname)
      : undefined;
    message.powerUnitOutlet = object.powerUnitOutlet ?? "";
    message.hydraHostname = (object.hydraHostname !== undefined && object.hydraHostname !== null)
      ? IpEndpoint.fromPartial(object.hydraHostname)
      : undefined;
    message.type = object.type ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
