// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v6.30.2
// source: chromiumos/test/api/device_leasing.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration.pb";
import { Timestamp } from "../../../google/protobuf/timestamp.pb";

export const protobufPackage = "chromiumos.test.api";

/** VMType specifies the type of VM that is requested and will be created. */
export enum VMType {
  VM_TYPE_UNSPECIFIED = 0,
  VM_TYPE_DUT = 1,
  VM_TYPE_DRONE = 2,
}

export function vMTypeFromJSON(object: any): VMType {
  switch (object) {
    case 0:
    case "VM_TYPE_UNSPECIFIED":
      return VMType.VM_TYPE_UNSPECIFIED;
    case 1:
    case "VM_TYPE_DUT":
      return VMType.VM_TYPE_DUT;
    case 2:
    case "VM_TYPE_DRONE":
      return VMType.VM_TYPE_DRONE;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum VMType");
  }
}

export function vMTypeToJSON(object: VMType): string {
  switch (object) {
    case VMType.VM_TYPE_UNSPECIFIED:
      return "VM_TYPE_UNSPECIFIED";
    case VMType.VM_TYPE_DUT:
      return "VM_TYPE_DUT";
    case VMType.VM_TYPE_DRONE:
      return "VM_TYPE_DRONE";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum VMType");
  }
}

/** NEXT TAG: 13 */
export interface VMRequirements {
  readonly gceImage: string;
  readonly gceRegion: string;
  readonly gceProject: string;
  /** Networking-related params */
  readonly gceNetwork: string;
  readonly gceSubnet: string;
  readonly subnetModeNetworkEnabled: boolean;
  readonly gceMachineType: string;
  readonly gceScope: string;
  /** Specified IP address for VM. If not, use ephemeral IP. */
  readonly gceIpAddress: string;
  readonly gceDiskSize: string;
  readonly gceMinCpuPlatform: string;
  readonly type: VMType;
}

export interface HardwareRequirements {
  /** A map for schedulable labels used to request a matching device. */
  readonly schedulableLabels: { [key: string]: HardwareRequirements_LabelValues };
}

export interface HardwareRequirements_LabelValues {
  readonly values: readonly string[];
}

export interface HardwareRequirements_SchedulableLabelsEntry {
  readonly key: string;
  readonly value: HardwareRequirements_LabelValues | undefined;
}

export interface ExtendLeaseRequest {
  /** Original lease_id obtained when the lease was created. */
  readonly leaseId: string;
  /**
   * Important to configure a good lifetime max for leases can not be extended
   * indefinitely. It is also important to ensure same limits as those for
   * LeaseDeviceRequest.duration or LeaseVMRequest.duration.
   */
  readonly extendDuration:
    | Duration
    | undefined;
  /**
   * Generated on the client side, shared across retries but pseudo-unique
   * across different logical requests. Requests with the same key will be
   * treated as duplicate of original request, return the same response.
   */
  readonly idempotencyKey: string;
}

export interface ExtendLeaseResponse {
  readonly leaseId: string;
  readonly expirationTime: string | undefined;
}

function createBaseVMRequirements(): VMRequirements {
  return {
    gceImage: "",
    gceRegion: "",
    gceProject: "",
    gceNetwork: "",
    gceSubnet: "",
    subnetModeNetworkEnabled: false,
    gceMachineType: "",
    gceScope: "",
    gceIpAddress: "",
    gceDiskSize: "0",
    gceMinCpuPlatform: "",
    type: 0,
  };
}

export const VMRequirements: MessageFns<VMRequirements> = {
  encode(message: VMRequirements, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gceImage !== "") {
      writer.uint32(10).string(message.gceImage);
    }
    if (message.gceRegion !== "") {
      writer.uint32(18).string(message.gceRegion);
    }
    if (message.gceProject !== "") {
      writer.uint32(26).string(message.gceProject);
    }
    if (message.gceNetwork !== "") {
      writer.uint32(34).string(message.gceNetwork);
    }
    if (message.gceSubnet !== "") {
      writer.uint32(42).string(message.gceSubnet);
    }
    if (message.subnetModeNetworkEnabled !== false) {
      writer.uint32(88).bool(message.subnetModeNetworkEnabled);
    }
    if (message.gceMachineType !== "") {
      writer.uint32(50).string(message.gceMachineType);
    }
    if (message.gceScope !== "") {
      writer.uint32(58).string(message.gceScope);
    }
    if (message.gceIpAddress !== "") {
      writer.uint32(66).string(message.gceIpAddress);
    }
    if (message.gceDiskSize !== "0") {
      writer.uint32(80).int64(message.gceDiskSize);
    }
    if (message.gceMinCpuPlatform !== "") {
      writer.uint32(98).string(message.gceMinCpuPlatform);
    }
    if (message.type !== 0) {
      writer.uint32(72).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VMRequirements {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVMRequirements() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gceImage = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gceRegion = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gceProject = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gceNetwork = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gceSubnet = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.subnetModeNetworkEnabled = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.gceMachineType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.gceScope = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.gceIpAddress = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.gceDiskSize = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.gceMinCpuPlatform = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VMRequirements {
    return {
      gceImage: isSet(object.gceImage) ? globalThis.String(object.gceImage) : "",
      gceRegion: isSet(object.gceRegion) ? globalThis.String(object.gceRegion) : "",
      gceProject: isSet(object.gceProject) ? globalThis.String(object.gceProject) : "",
      gceNetwork: isSet(object.gceNetwork) ? globalThis.String(object.gceNetwork) : "",
      gceSubnet: isSet(object.gceSubnet) ? globalThis.String(object.gceSubnet) : "",
      subnetModeNetworkEnabled: isSet(object.subnetModeNetworkEnabled)
        ? globalThis.Boolean(object.subnetModeNetworkEnabled)
        : false,
      gceMachineType: isSet(object.gceMachineType) ? globalThis.String(object.gceMachineType) : "",
      gceScope: isSet(object.gceScope) ? globalThis.String(object.gceScope) : "",
      gceIpAddress: isSet(object.gceIpAddress) ? globalThis.String(object.gceIpAddress) : "",
      gceDiskSize: isSet(object.gceDiskSize) ? globalThis.String(object.gceDiskSize) : "0",
      gceMinCpuPlatform: isSet(object.gceMinCpuPlatform) ? globalThis.String(object.gceMinCpuPlatform) : "",
      type: isSet(object.type) ? vMTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: VMRequirements): unknown {
    const obj: any = {};
    if (message.gceImage !== "") {
      obj.gceImage = message.gceImage;
    }
    if (message.gceRegion !== "") {
      obj.gceRegion = message.gceRegion;
    }
    if (message.gceProject !== "") {
      obj.gceProject = message.gceProject;
    }
    if (message.gceNetwork !== "") {
      obj.gceNetwork = message.gceNetwork;
    }
    if (message.gceSubnet !== "") {
      obj.gceSubnet = message.gceSubnet;
    }
    if (message.subnetModeNetworkEnabled !== false) {
      obj.subnetModeNetworkEnabled = message.subnetModeNetworkEnabled;
    }
    if (message.gceMachineType !== "") {
      obj.gceMachineType = message.gceMachineType;
    }
    if (message.gceScope !== "") {
      obj.gceScope = message.gceScope;
    }
    if (message.gceIpAddress !== "") {
      obj.gceIpAddress = message.gceIpAddress;
    }
    if (message.gceDiskSize !== "0") {
      obj.gceDiskSize = message.gceDiskSize;
    }
    if (message.gceMinCpuPlatform !== "") {
      obj.gceMinCpuPlatform = message.gceMinCpuPlatform;
    }
    if (message.type !== 0) {
      obj.type = vMTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<VMRequirements>): VMRequirements {
    return VMRequirements.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VMRequirements>): VMRequirements {
    const message = createBaseVMRequirements() as any;
    message.gceImage = object.gceImage ?? "";
    message.gceRegion = object.gceRegion ?? "";
    message.gceProject = object.gceProject ?? "";
    message.gceNetwork = object.gceNetwork ?? "";
    message.gceSubnet = object.gceSubnet ?? "";
    message.subnetModeNetworkEnabled = object.subnetModeNetworkEnabled ?? false;
    message.gceMachineType = object.gceMachineType ?? "";
    message.gceScope = object.gceScope ?? "";
    message.gceIpAddress = object.gceIpAddress ?? "";
    message.gceDiskSize = object.gceDiskSize ?? "0";
    message.gceMinCpuPlatform = object.gceMinCpuPlatform ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseHardwareRequirements(): HardwareRequirements {
  return { schedulableLabels: {} };
}

export const HardwareRequirements: MessageFns<HardwareRequirements> = {
  encode(message: HardwareRequirements, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.schedulableLabels).forEach(([key, value]) => {
      HardwareRequirements_SchedulableLabelsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HardwareRequirements {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHardwareRequirements() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = HardwareRequirements_SchedulableLabelsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.schedulableLabels[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HardwareRequirements {
    return {
      schedulableLabels: isObject(object.schedulableLabels)
        ? Object.entries(object.schedulableLabels).reduce<{ [key: string]: HardwareRequirements_LabelValues }>(
          (acc, [key, value]) => {
            acc[key] = HardwareRequirements_LabelValues.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: HardwareRequirements): unknown {
    const obj: any = {};
    if (message.schedulableLabels) {
      const entries = Object.entries(message.schedulableLabels);
      if (entries.length > 0) {
        obj.schedulableLabels = {};
        entries.forEach(([k, v]) => {
          obj.schedulableLabels[k] = HardwareRequirements_LabelValues.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<HardwareRequirements>): HardwareRequirements {
    return HardwareRequirements.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HardwareRequirements>): HardwareRequirements {
    const message = createBaseHardwareRequirements() as any;
    message.schedulableLabels = Object.entries(object.schedulableLabels ?? {}).reduce<
      { [key: string]: HardwareRequirements_LabelValues }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = HardwareRequirements_LabelValues.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseHardwareRequirements_LabelValues(): HardwareRequirements_LabelValues {
  return { values: [] };
}

export const HardwareRequirements_LabelValues: MessageFns<HardwareRequirements_LabelValues> = {
  encode(message: HardwareRequirements_LabelValues, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HardwareRequirements_LabelValues {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHardwareRequirements_LabelValues() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HardwareRequirements_LabelValues {
    return {
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: HardwareRequirements_LabelValues): unknown {
    const obj: any = {};
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<HardwareRequirements_LabelValues>): HardwareRequirements_LabelValues {
    return HardwareRequirements_LabelValues.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HardwareRequirements_LabelValues>): HardwareRequirements_LabelValues {
    const message = createBaseHardwareRequirements_LabelValues() as any;
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseHardwareRequirements_SchedulableLabelsEntry(): HardwareRequirements_SchedulableLabelsEntry {
  return { key: "", value: undefined };
}

export const HardwareRequirements_SchedulableLabelsEntry: MessageFns<HardwareRequirements_SchedulableLabelsEntry> = {
  encode(
    message: HardwareRequirements_SchedulableLabelsEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      HardwareRequirements_LabelValues.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): HardwareRequirements_SchedulableLabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHardwareRequirements_SchedulableLabelsEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = HardwareRequirements_LabelValues.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HardwareRequirements_SchedulableLabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? HardwareRequirements_LabelValues.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: HardwareRequirements_SchedulableLabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = HardwareRequirements_LabelValues.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<HardwareRequirements_SchedulableLabelsEntry>): HardwareRequirements_SchedulableLabelsEntry {
    return HardwareRequirements_SchedulableLabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<HardwareRequirements_SchedulableLabelsEntry>,
  ): HardwareRequirements_SchedulableLabelsEntry {
    const message = createBaseHardwareRequirements_SchedulableLabelsEntry() as any;
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? HardwareRequirements_LabelValues.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseExtendLeaseRequest(): ExtendLeaseRequest {
  return { leaseId: "", extendDuration: undefined, idempotencyKey: "" };
}

export const ExtendLeaseRequest: MessageFns<ExtendLeaseRequest> = {
  encode(message: ExtendLeaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leaseId !== "") {
      writer.uint32(10).string(message.leaseId);
    }
    if (message.extendDuration !== undefined) {
      Duration.encode(message.extendDuration, writer.uint32(18).fork()).join();
    }
    if (message.idempotencyKey !== "") {
      writer.uint32(26).string(message.idempotencyKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtendLeaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendLeaseRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leaseId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.extendDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.idempotencyKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendLeaseRequest {
    return {
      leaseId: isSet(object.leaseId) ? globalThis.String(object.leaseId) : "",
      extendDuration: isSet(object.extendDuration) ? Duration.fromJSON(object.extendDuration) : undefined,
      idempotencyKey: isSet(object.idempotencyKey) ? globalThis.String(object.idempotencyKey) : "",
    };
  },

  toJSON(message: ExtendLeaseRequest): unknown {
    const obj: any = {};
    if (message.leaseId !== "") {
      obj.leaseId = message.leaseId;
    }
    if (message.extendDuration !== undefined) {
      obj.extendDuration = Duration.toJSON(message.extendDuration);
    }
    if (message.idempotencyKey !== "") {
      obj.idempotencyKey = message.idempotencyKey;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtendLeaseRequest>): ExtendLeaseRequest {
    return ExtendLeaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtendLeaseRequest>): ExtendLeaseRequest {
    const message = createBaseExtendLeaseRequest() as any;
    message.leaseId = object.leaseId ?? "";
    message.extendDuration = (object.extendDuration !== undefined && object.extendDuration !== null)
      ? Duration.fromPartial(object.extendDuration)
      : undefined;
    message.idempotencyKey = object.idempotencyKey ?? "";
    return message;
  },
};

function createBaseExtendLeaseResponse(): ExtendLeaseResponse {
  return { leaseId: "", expirationTime: undefined };
}

export const ExtendLeaseResponse: MessageFns<ExtendLeaseResponse> = {
  encode(message: ExtendLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.leaseId !== "") {
      writer.uint32(10).string(message.leaseId);
    }
    if (message.expirationTime !== undefined) {
      Timestamp.encode(toTimestamp(message.expirationTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtendLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtendLeaseResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leaseId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expirationTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtendLeaseResponse {
    return {
      leaseId: isSet(object.leaseId) ? globalThis.String(object.leaseId) : "",
      expirationTime: isSet(object.expirationTime) ? globalThis.String(object.expirationTime) : undefined,
    };
  },

  toJSON(message: ExtendLeaseResponse): unknown {
    const obj: any = {};
    if (message.leaseId !== "") {
      obj.leaseId = message.leaseId;
    }
    if (message.expirationTime !== undefined) {
      obj.expirationTime = message.expirationTime;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtendLeaseResponse>): ExtendLeaseResponse {
    return ExtendLeaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtendLeaseResponse>): ExtendLeaseResponse {
    const message = createBaseExtendLeaseResponse() as any;
    message.leaseId = object.leaseId ?? "";
    message.expirationTime = object.expirationTime ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
