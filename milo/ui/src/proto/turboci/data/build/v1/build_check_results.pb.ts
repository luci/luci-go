// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/data/build/v1/build_check_results.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "turboci.data.build.v1";

/**
 * BuildCheckResults represent the output of a build. This is mainly centered around the artifacts
 * generated from the build and their locations.
 */
export interface BuildCheckResult {
  /**
   * Whether the build succeeded or failed. "success = true" means that all required build actions
   * succeeded. Any failed actions result in "success = false". If the build failed, display_message
   * will contain human-readable information about the failure reason. Additional product-specific
   * failure information should reside in a product-specific proto.
   */
  readonly success?:
    | boolean
    | undefined;
  /** A message string detailing the status of the build with information on how to format the text. */
  readonly displayMessage?:
    | BuildCheckResult_DisplayMessage
    | undefined;
  /**
   * Information needed to find artifacts in ab/.
   * We acknowledge that this is Android-specific but are keeping it here in the "multiproduct"
   * namespace.
   */
  readonly androidBuildArtifacts?:
    | BuildCheckResult_AndroidBuildArtifacts
    | undefined;
  /** CAS manifest information fully represented in proto form. */
  readonly casManifest?:
    | BuildCheckResult_CasManifest
    | undefined;
  /**
   * Mapping between a label string and a collection of artifacts in a GCS bucket.
   * Used to support cases where different sets of artifacts are uploaded to different buckets.
   * The string key identifies the purpose of the artifacts and allows easy access for consumers.
   * For cases where only a single set of artifacts is uploaded, you can use "default" as the key.
   * It is expected that use cases with multiple GCS buckets will likely want to represent
   * the set of known keys for their use case, probably in a custom proto.
   */
  readonly gcsArtifacts: { [key: string]: BuildCheckResult_GcsArtifacts };
  /**
   * A redirect URL to the build dashboard showing additional details about the build (eg. logs).
   * Useful to show in tools like Chronicle.
   */
  readonly viewUrl?: string | undefined;
}

/** A message string and a format-type enum to instruct clients how to render the text. */
export interface BuildCheckResult_DisplayMessage {
  /** The message string. */
  readonly message?:
    | string
    | undefined;
  /** How the message string should be formatted. */
  readonly messageFormat?: BuildCheckResult_DisplayMessage_MessageFormat | undefined;
}

/** Different types of message formatting. */
export enum BuildCheckResult_DisplayMessage_MessageFormat {
  /** MESSAGE_FORMAT_UNKNOWN - Default message format. */
  MESSAGE_FORMAT_UNKNOWN = 0,
  /** MESSAGE_FORMAT_PLAIN_TEXT - Plain text - no special formatting. */
  MESSAGE_FORMAT_PLAIN_TEXT = 1,
  /** MESSAGE_FORMAT_HTML - HTML markup. */
  MESSAGE_FORMAT_HTML = 2,
  /** MESSAGE_FORMAT_MARKDOWN - Markdown formatting. */
  MESSAGE_FORMAT_MARKDOWN = 3,
  /** MESSAGE_FORMAT_ANSI - Includes ANSI escape codes for controlling things like text color. */
  MESSAGE_FORMAT_ANSI = 4,
}

export function buildCheckResult_DisplayMessage_MessageFormatFromJSON(
  object: any,
): BuildCheckResult_DisplayMessage_MessageFormat {
  switch (object) {
    case 0:
    case "MESSAGE_FORMAT_UNKNOWN":
      return BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_UNKNOWN;
    case 1:
    case "MESSAGE_FORMAT_PLAIN_TEXT":
      return BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_PLAIN_TEXT;
    case 2:
    case "MESSAGE_FORMAT_HTML":
      return BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_HTML;
    case 3:
    case "MESSAGE_FORMAT_MARKDOWN":
      return BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_MARKDOWN;
    case 4:
    case "MESSAGE_FORMAT_ANSI":
      return BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_ANSI;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum BuildCheckResult_DisplayMessage_MessageFormat",
      );
  }
}

export function buildCheckResult_DisplayMessage_MessageFormatToJSON(
  object: BuildCheckResult_DisplayMessage_MessageFormat,
): string {
  switch (object) {
    case BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_UNKNOWN:
      return "MESSAGE_FORMAT_UNKNOWN";
    case BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_PLAIN_TEXT:
      return "MESSAGE_FORMAT_PLAIN_TEXT";
    case BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_HTML:
      return "MESSAGE_FORMAT_HTML";
    case BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_MARKDOWN:
      return "MESSAGE_FORMAT_MARKDOWN";
    case BuildCheckResult_DisplayMessage_MessageFormat.MESSAGE_FORMAT_ANSI:
      return "MESSAGE_FORMAT_ANSI";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum BuildCheckResult_DisplayMessage_MessageFormat",
      );
  }
}

/** Build ID, target and attempt which are necessary to query artifacts in ab/ or Android Build API */
export interface BuildCheckResult_AndroidBuildArtifacts {
  /** Android build ID. */
  readonly buildId?:
    | string
    | undefined;
  /** Android build target. */
  readonly target?:
    | string
    | undefined;
  /** Android build attempt. */
  readonly buildAttempt?: string | undefined;
}

/**
 * A manifest in proto form containing key (file name) to value (CAS digest) mappings of build
 * artifacts.
 * Eg. http://shortn/_zd9o9GVYT1
 */
export interface BuildCheckResult_CasManifest {
  /**
   * Key (filename), value (CAS digest)
   * Eg.
   * "art-host-tests.zip": "7717786334a0e5b7e06d36c0327ac6baa8494e9a5b3a2e7b745b298eea09f0db/78",
   * "google-tradefed.zip": "750d367eaa6012032b01b9743e83f21f3f1e4695b563cdd4828dc81846878e6d/2559",
   * "host-unit-tests.zip": "eca68a3d11ad7e7e75871ee0a343d75d42dd789ea48a6b2ca173eb9008c10da2/78",
   */
  readonly manifest: { [key: string]: string };
  /**
   * The instance name of the CAS service.
   * Eg. projects/android-build-farm/instances/default_instance
   */
  readonly casInstance?:
    | string
    | undefined;
  /**
   * The address of the CAS service.
   * Eg. remotebuildexecution.googleapis.com:443
   */
  readonly casService?:
    | string
    | undefined;
  /** The CAS uploader client version. */
  readonly clientVersion?: string | undefined;
}

export interface BuildCheckResult_CasManifest_ManifestEntry {
  readonly key: string;
  readonly value: string;
}

/**
 * GCS path to bucket/directory containing artifacts
 * This serves as an "implicit" manifest. Clients would be expected to have
 * "well-known" artifact names under this directory
 */
export interface BuildCheckResult_GcsArtifacts {
  /**
   * The path prefix in GS under which artifacts for this build will be stored.
   * Format: "gs://bucket/path/to/root/dir/". Trailing slash is *required*.
   */
  readonly rootDirectoryUri?:
    | string
    | undefined;
  /**
   * Mapping of files in the GCS bucket into different artifact categories
   * Eg. http://shortn/_8eibPJsb7v
   */
  readonly filesByCategory: { [key: string]: BuildCheckResult_GcsArtifacts_Files };
}

/**
 * Message wrapper to allow repeated files because repeated fields cannot directly
 * be used as a map value.
 */
export interface BuildCheckResult_GcsArtifacts_Files {
  /** Paths to files in the GCS bucket, relative to the root_directory_uri. */
  readonly files: readonly string[];
}

export interface BuildCheckResult_GcsArtifacts_FilesByCategoryEntry {
  readonly key: string;
  readonly value: BuildCheckResult_GcsArtifacts_Files | undefined;
}

export interface BuildCheckResult_GcsArtifactsEntry {
  readonly key: string;
  readonly value: BuildCheckResult_GcsArtifacts | undefined;
}

function createBaseBuildCheckResult(): BuildCheckResult {
  return {
    success: undefined,
    displayMessage: undefined,
    androidBuildArtifacts: undefined,
    casManifest: undefined,
    gcsArtifacts: {},
    viewUrl: undefined,
  };
}

export const BuildCheckResult: MessageFns<BuildCheckResult> = {
  encode(message: BuildCheckResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== undefined) {
      writer.uint32(8).bool(message.success);
    }
    if (message.displayMessage !== undefined) {
      BuildCheckResult_DisplayMessage.encode(message.displayMessage, writer.uint32(18).fork()).join();
    }
    if (message.androidBuildArtifacts !== undefined) {
      BuildCheckResult_AndroidBuildArtifacts.encode(message.androidBuildArtifacts, writer.uint32(26).fork()).join();
    }
    if (message.casManifest !== undefined) {
      BuildCheckResult_CasManifest.encode(message.casManifest, writer.uint32(34).fork()).join();
    }
    Object.entries(message.gcsArtifacts).forEach(([key, value]) => {
      BuildCheckResult_GcsArtifactsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.viewUrl !== undefined) {
      writer.uint32(50).string(message.viewUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayMessage = BuildCheckResult_DisplayMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.androidBuildArtifacts = BuildCheckResult_AndroidBuildArtifacts.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.casManifest = BuildCheckResult_CasManifest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = BuildCheckResult_GcsArtifactsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.gcsArtifacts[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.viewUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : undefined,
      displayMessage: isSet(object.displayMessage)
        ? BuildCheckResult_DisplayMessage.fromJSON(object.displayMessage)
        : undefined,
      androidBuildArtifacts: isSet(object.androidBuildArtifacts)
        ? BuildCheckResult_AndroidBuildArtifacts.fromJSON(object.androidBuildArtifacts)
        : undefined,
      casManifest: isSet(object.casManifest) ? BuildCheckResult_CasManifest.fromJSON(object.casManifest) : undefined,
      gcsArtifacts: isObject(object.gcsArtifacts)
        ? Object.entries(object.gcsArtifacts).reduce<{ [key: string]: BuildCheckResult_GcsArtifacts }>(
          (acc, [key, value]) => {
            acc[key] = BuildCheckResult_GcsArtifacts.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      viewUrl: isSet(object.viewUrl) ? globalThis.String(object.viewUrl) : undefined,
    };
  },

  toJSON(message: BuildCheckResult): unknown {
    const obj: any = {};
    if (message.success !== undefined) {
      obj.success = message.success;
    }
    if (message.displayMessage !== undefined) {
      obj.displayMessage = BuildCheckResult_DisplayMessage.toJSON(message.displayMessage);
    }
    if (message.androidBuildArtifacts !== undefined) {
      obj.androidBuildArtifacts = BuildCheckResult_AndroidBuildArtifacts.toJSON(message.androidBuildArtifacts);
    }
    if (message.casManifest !== undefined) {
      obj.casManifest = BuildCheckResult_CasManifest.toJSON(message.casManifest);
    }
    if (message.gcsArtifacts) {
      const entries = Object.entries(message.gcsArtifacts);
      if (entries.length > 0) {
        obj.gcsArtifacts = {};
        entries.forEach(([k, v]) => {
          obj.gcsArtifacts[k] = BuildCheckResult_GcsArtifacts.toJSON(v);
        });
      }
    }
    if (message.viewUrl !== undefined) {
      obj.viewUrl = message.viewUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult>): BuildCheckResult {
    return BuildCheckResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildCheckResult>): BuildCheckResult {
    const message = createBaseBuildCheckResult() as any;
    message.success = object.success ?? undefined;
    message.displayMessage = (object.displayMessage !== undefined && object.displayMessage !== null)
      ? BuildCheckResult_DisplayMessage.fromPartial(object.displayMessage)
      : undefined;
    message.androidBuildArtifacts =
      (object.androidBuildArtifacts !== undefined && object.androidBuildArtifacts !== null)
        ? BuildCheckResult_AndroidBuildArtifacts.fromPartial(object.androidBuildArtifacts)
        : undefined;
    message.casManifest = (object.casManifest !== undefined && object.casManifest !== null)
      ? BuildCheckResult_CasManifest.fromPartial(object.casManifest)
      : undefined;
    message.gcsArtifacts = Object.entries(object.gcsArtifacts ?? {}).reduce<
      { [key: string]: BuildCheckResult_GcsArtifacts }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = BuildCheckResult_GcsArtifacts.fromPartial(value);
      }
      return acc;
    }, {});
    message.viewUrl = object.viewUrl ?? undefined;
    return message;
  },
};

function createBaseBuildCheckResult_DisplayMessage(): BuildCheckResult_DisplayMessage {
  return { message: undefined, messageFormat: undefined };
}

export const BuildCheckResult_DisplayMessage: MessageFns<BuildCheckResult_DisplayMessage> = {
  encode(message: BuildCheckResult_DisplayMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      writer.uint32(10).string(message.message);
    }
    if (message.messageFormat !== undefined) {
      writer.uint32(16).int32(message.messageFormat);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_DisplayMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_DisplayMessage() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.messageFormat = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_DisplayMessage {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      messageFormat: isSet(object.messageFormat)
        ? buildCheckResult_DisplayMessage_MessageFormatFromJSON(object.messageFormat)
        : undefined,
    };
  },

  toJSON(message: BuildCheckResult_DisplayMessage): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.messageFormat !== undefined) {
      obj.messageFormat = buildCheckResult_DisplayMessage_MessageFormatToJSON(message.messageFormat);
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult_DisplayMessage>): BuildCheckResult_DisplayMessage {
    return BuildCheckResult_DisplayMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildCheckResult_DisplayMessage>): BuildCheckResult_DisplayMessage {
    const message = createBaseBuildCheckResult_DisplayMessage() as any;
    message.message = object.message ?? undefined;
    message.messageFormat = object.messageFormat ?? undefined;
    return message;
  },
};

function createBaseBuildCheckResult_AndroidBuildArtifacts(): BuildCheckResult_AndroidBuildArtifacts {
  return { buildId: undefined, target: undefined, buildAttempt: undefined };
}

export const BuildCheckResult_AndroidBuildArtifacts: MessageFns<BuildCheckResult_AndroidBuildArtifacts> = {
  encode(message: BuildCheckResult_AndroidBuildArtifacts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.buildId !== undefined) {
      writer.uint32(10).string(message.buildId);
    }
    if (message.target !== undefined) {
      writer.uint32(18).string(message.target);
    }
    if (message.buildAttempt !== undefined) {
      writer.uint32(26).string(message.buildAttempt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_AndroidBuildArtifacts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_AndroidBuildArtifacts() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.buildId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.buildAttempt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_AndroidBuildArtifacts {
    return {
      buildId: isSet(object.buildId) ? globalThis.String(object.buildId) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : undefined,
      buildAttempt: isSet(object.buildAttempt) ? globalThis.String(object.buildAttempt) : undefined,
    };
  },

  toJSON(message: BuildCheckResult_AndroidBuildArtifacts): unknown {
    const obj: any = {};
    if (message.buildId !== undefined) {
      obj.buildId = message.buildId;
    }
    if (message.target !== undefined) {
      obj.target = message.target;
    }
    if (message.buildAttempt !== undefined) {
      obj.buildAttempt = message.buildAttempt;
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult_AndroidBuildArtifacts>): BuildCheckResult_AndroidBuildArtifacts {
    return BuildCheckResult_AndroidBuildArtifacts.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildCheckResult_AndroidBuildArtifacts>): BuildCheckResult_AndroidBuildArtifacts {
    const message = createBaseBuildCheckResult_AndroidBuildArtifacts() as any;
    message.buildId = object.buildId ?? undefined;
    message.target = object.target ?? undefined;
    message.buildAttempt = object.buildAttempt ?? undefined;
    return message;
  },
};

function createBaseBuildCheckResult_CasManifest(): BuildCheckResult_CasManifest {
  return { manifest: {}, casInstance: undefined, casService: undefined, clientVersion: undefined };
}

export const BuildCheckResult_CasManifest: MessageFns<BuildCheckResult_CasManifest> = {
  encode(message: BuildCheckResult_CasManifest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.manifest).forEach(([key, value]) => {
      BuildCheckResult_CasManifest_ManifestEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.casInstance !== undefined) {
      writer.uint32(18).string(message.casInstance);
    }
    if (message.casService !== undefined) {
      writer.uint32(26).string(message.casService);
    }
    if (message.clientVersion !== undefined) {
      writer.uint32(34).string(message.clientVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_CasManifest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_CasManifest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = BuildCheckResult_CasManifest_ManifestEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.manifest[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.casInstance = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.casService = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clientVersion = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_CasManifest {
    return {
      manifest: isObject(object.manifest)
        ? Object.entries(object.manifest).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      casInstance: isSet(object.casInstance) ? globalThis.String(object.casInstance) : undefined,
      casService: isSet(object.casService) ? globalThis.String(object.casService) : undefined,
      clientVersion: isSet(object.clientVersion) ? globalThis.String(object.clientVersion) : undefined,
    };
  },

  toJSON(message: BuildCheckResult_CasManifest): unknown {
    const obj: any = {};
    if (message.manifest) {
      const entries = Object.entries(message.manifest);
      if (entries.length > 0) {
        obj.manifest = {};
        entries.forEach(([k, v]) => {
          obj.manifest[k] = v;
        });
      }
    }
    if (message.casInstance !== undefined) {
      obj.casInstance = message.casInstance;
    }
    if (message.casService !== undefined) {
      obj.casService = message.casService;
    }
    if (message.clientVersion !== undefined) {
      obj.clientVersion = message.clientVersion;
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult_CasManifest>): BuildCheckResult_CasManifest {
    return BuildCheckResult_CasManifest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildCheckResult_CasManifest>): BuildCheckResult_CasManifest {
    const message = createBaseBuildCheckResult_CasManifest() as any;
    message.manifest = Object.entries(object.manifest ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.casInstance = object.casInstance ?? undefined;
    message.casService = object.casService ?? undefined;
    message.clientVersion = object.clientVersion ?? undefined;
    return message;
  },
};

function createBaseBuildCheckResult_CasManifest_ManifestEntry(): BuildCheckResult_CasManifest_ManifestEntry {
  return { key: "", value: "" };
}

export const BuildCheckResult_CasManifest_ManifestEntry: MessageFns<BuildCheckResult_CasManifest_ManifestEntry> = {
  encode(message: BuildCheckResult_CasManifest_ManifestEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_CasManifest_ManifestEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_CasManifest_ManifestEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_CasManifest_ManifestEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BuildCheckResult_CasManifest_ManifestEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult_CasManifest_ManifestEntry>): BuildCheckResult_CasManifest_ManifestEntry {
    return BuildCheckResult_CasManifest_ManifestEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BuildCheckResult_CasManifest_ManifestEntry>,
  ): BuildCheckResult_CasManifest_ManifestEntry {
    const message = createBaseBuildCheckResult_CasManifest_ManifestEntry() as any;
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBuildCheckResult_GcsArtifacts(): BuildCheckResult_GcsArtifacts {
  return { rootDirectoryUri: undefined, filesByCategory: {} };
}

export const BuildCheckResult_GcsArtifacts: MessageFns<BuildCheckResult_GcsArtifacts> = {
  encode(message: BuildCheckResult_GcsArtifacts, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rootDirectoryUri !== undefined) {
      writer.uint32(10).string(message.rootDirectoryUri);
    }
    Object.entries(message.filesByCategory).forEach(([key, value]) => {
      BuildCheckResult_GcsArtifacts_FilesByCategoryEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_GcsArtifacts {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_GcsArtifacts() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rootDirectoryUri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = BuildCheckResult_GcsArtifacts_FilesByCategoryEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.filesByCategory[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_GcsArtifacts {
    return {
      rootDirectoryUri: isSet(object.rootDirectoryUri) ? globalThis.String(object.rootDirectoryUri) : undefined,
      filesByCategory: isObject(object.filesByCategory)
        ? Object.entries(object.filesByCategory).reduce<{ [key: string]: BuildCheckResult_GcsArtifacts_Files }>(
          (acc, [key, value]) => {
            acc[key] = BuildCheckResult_GcsArtifacts_Files.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: BuildCheckResult_GcsArtifacts): unknown {
    const obj: any = {};
    if (message.rootDirectoryUri !== undefined) {
      obj.rootDirectoryUri = message.rootDirectoryUri;
    }
    if (message.filesByCategory) {
      const entries = Object.entries(message.filesByCategory);
      if (entries.length > 0) {
        obj.filesByCategory = {};
        entries.forEach(([k, v]) => {
          obj.filesByCategory[k] = BuildCheckResult_GcsArtifacts_Files.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult_GcsArtifacts>): BuildCheckResult_GcsArtifacts {
    return BuildCheckResult_GcsArtifacts.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildCheckResult_GcsArtifacts>): BuildCheckResult_GcsArtifacts {
    const message = createBaseBuildCheckResult_GcsArtifacts() as any;
    message.rootDirectoryUri = object.rootDirectoryUri ?? undefined;
    message.filesByCategory = Object.entries(object.filesByCategory ?? {}).reduce<
      { [key: string]: BuildCheckResult_GcsArtifacts_Files }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = BuildCheckResult_GcsArtifacts_Files.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseBuildCheckResult_GcsArtifacts_Files(): BuildCheckResult_GcsArtifacts_Files {
  return { files: [] };
}

export const BuildCheckResult_GcsArtifacts_Files: MessageFns<BuildCheckResult_GcsArtifacts_Files> = {
  encode(message: BuildCheckResult_GcsArtifacts_Files, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.files) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_GcsArtifacts_Files {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_GcsArtifacts_Files() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.files.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_GcsArtifacts_Files {
    return { files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: BuildCheckResult_GcsArtifacts_Files): unknown {
    const obj: any = {};
    if (message.files?.length) {
      obj.files = message.files;
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult_GcsArtifacts_Files>): BuildCheckResult_GcsArtifacts_Files {
    return BuildCheckResult_GcsArtifacts_Files.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildCheckResult_GcsArtifacts_Files>): BuildCheckResult_GcsArtifacts_Files {
    const message = createBaseBuildCheckResult_GcsArtifacts_Files() as any;
    message.files = object.files?.map((e) => e) || [];
    return message;
  },
};

function createBaseBuildCheckResult_GcsArtifacts_FilesByCategoryEntry(): BuildCheckResult_GcsArtifacts_FilesByCategoryEntry {
  return { key: "", value: undefined };
}

export const BuildCheckResult_GcsArtifacts_FilesByCategoryEntry: MessageFns<
  BuildCheckResult_GcsArtifacts_FilesByCategoryEntry
> = {
  encode(
    message: BuildCheckResult_GcsArtifacts_FilesByCategoryEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      BuildCheckResult_GcsArtifacts_Files.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_GcsArtifacts_FilesByCategoryEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_GcsArtifacts_FilesByCategoryEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = BuildCheckResult_GcsArtifacts_Files.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_GcsArtifacts_FilesByCategoryEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? BuildCheckResult_GcsArtifacts_Files.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: BuildCheckResult_GcsArtifacts_FilesByCategoryEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = BuildCheckResult_GcsArtifacts_Files.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<BuildCheckResult_GcsArtifacts_FilesByCategoryEntry>,
  ): BuildCheckResult_GcsArtifacts_FilesByCategoryEntry {
    return BuildCheckResult_GcsArtifacts_FilesByCategoryEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<BuildCheckResult_GcsArtifacts_FilesByCategoryEntry>,
  ): BuildCheckResult_GcsArtifacts_FilesByCategoryEntry {
    const message = createBaseBuildCheckResult_GcsArtifacts_FilesByCategoryEntry() as any;
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? BuildCheckResult_GcsArtifacts_Files.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseBuildCheckResult_GcsArtifactsEntry(): BuildCheckResult_GcsArtifactsEntry {
  return { key: "", value: undefined };
}

export const BuildCheckResult_GcsArtifactsEntry: MessageFns<BuildCheckResult_GcsArtifactsEntry> = {
  encode(message: BuildCheckResult_GcsArtifactsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      BuildCheckResult_GcsArtifacts.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildCheckResult_GcsArtifactsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildCheckResult_GcsArtifactsEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = BuildCheckResult_GcsArtifacts.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildCheckResult_GcsArtifactsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? BuildCheckResult_GcsArtifacts.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: BuildCheckResult_GcsArtifactsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = BuildCheckResult_GcsArtifacts.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<BuildCheckResult_GcsArtifactsEntry>): BuildCheckResult_GcsArtifactsEntry {
    return BuildCheckResult_GcsArtifactsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BuildCheckResult_GcsArtifactsEntry>): BuildCheckResult_GcsArtifactsEntry {
    const message = createBaseBuildCheckResult_GcsArtifactsEntry() as any;
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? BuildCheckResult_GcsArtifacts.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
