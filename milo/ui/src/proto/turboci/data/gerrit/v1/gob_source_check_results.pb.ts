// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/data/gerrit/v1/gob_source_check_results.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { GerritChangeInfo } from "./gerrit_change_info.pb";

export const protobufPackage = "turboci.data.gerrit.v1";

/**
 * GobSourceCheckResults provide expanded details about the CLs relevant to this CI run.
 * In the future, this may also contain expanded checkout details such as the commit IDs of
 * each mount but we are not aware of any need for this today.
 */
export interface GobSourceCheckResults {
  /** The detailed gerrit change infos for the gerrit_changes in the options. */
  readonly changes: readonly GerritChangeInfo[];
}

function createBaseGobSourceCheckResults(): GobSourceCheckResults {
  return { changes: [] };
}

export const GobSourceCheckResults: MessageFns<GobSourceCheckResults> = {
  encode(message: GobSourceCheckResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.changes) {
      GerritChangeInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GobSourceCheckResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGobSourceCheckResults() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.changes.push(GerritChangeInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GobSourceCheckResults {
    return {
      changes: globalThis.Array.isArray(object?.changes)
        ? object.changes.map((e: any) => GerritChangeInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GobSourceCheckResults): unknown {
    const obj: any = {};
    if (message.changes?.length) {
      obj.changes = message.changes.map((e) => GerritChangeInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GobSourceCheckResults>): GobSourceCheckResults {
    return GobSourceCheckResults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GobSourceCheckResults>): GobSourceCheckResults {
    const message = createBaseGobSourceCheckResults() as any;
    message.changes = object.changes?.map((e) => GerritChangeInfo.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
