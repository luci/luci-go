// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/data/piper/v1/piper_source_check_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "turboci.data.piper.v1";

/**
 * PiperSourceCheckOptions provide the information necessary for the Build stage to retrieve the Piper source code
 * by providing a list of files in Piper and/or list of build targets.
 */
export interface PiperSourceCheckOptions {
  /**
   * List of paths to files in Piper.
   * Eg. "google3/configs/foo.bar"
   */
  readonly files: readonly string[];
  /**
   * List of blaze build targets.
   * Eg. "//configs/foo:bar"
   */
  readonly targets: readonly string[];
  /**
   * If provided, use a Piper workspace checked out at the provided CL #. Use HEAD if not provided.
   * This can also be a pending CL.
   */
  readonly clNumber?: string | undefined;
}

function createBasePiperSourceCheckOptions(): PiperSourceCheckOptions {
  return { files: [], targets: [], clNumber: undefined };
}

export const PiperSourceCheckOptions: MessageFns<PiperSourceCheckOptions> = {
  encode(message: PiperSourceCheckOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.files) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.targets) {
      writer.uint32(18).string(v!);
    }
    if (message.clNumber !== undefined) {
      writer.uint32(24).int64(message.clNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PiperSourceCheckOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePiperSourceCheckOptions() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.files.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targets.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.clNumber = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PiperSourceCheckOptions {
    return {
      files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => globalThis.String(e)) : [],
      targets: globalThis.Array.isArray(object?.targets) ? object.targets.map((e: any) => globalThis.String(e)) : [],
      clNumber: isSet(object.clNumber) ? globalThis.String(object.clNumber) : undefined,
    };
  },

  toJSON(message: PiperSourceCheckOptions): unknown {
    const obj: any = {};
    if (message.files?.length) {
      obj.files = message.files;
    }
    if (message.targets?.length) {
      obj.targets = message.targets;
    }
    if (message.clNumber !== undefined) {
      obj.clNumber = message.clNumber;
    }
    return obj;
  },

  create(base?: DeepPartial<PiperSourceCheckOptions>): PiperSourceCheckOptions {
    return PiperSourceCheckOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PiperSourceCheckOptions>): PiperSourceCheckOptions {
    const message = createBasePiperSourceCheckOptions() as any;
    message.files = object.files?.map((e) => e) || [];
    message.targets = object.targets?.map((e) => e) || [];
    message.clNumber = object.clNumber ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
