// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/check_kind.proto

/* eslint-disable */

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * CheckKind informs the 'general' type of this Check, independent of whatever
 * options it may have.
 *
 * This serves two primary purposes:
 *   * This establishes a colloquial way to refer to Checks (e.g. 'a test check'
 *     vs 'a build check').
 *   * DataMap type registration can indicate what kinds of Checks that type
 *     can be used on, to allow some high-level partitioning; e.g. a TestFilter
 *     might only show up on TEST Checks, not SOURCE checks.
 */
export enum CheckKind {
  /** CHECK_KIND_UNKNOWN - UNKNOWN is the default, invalid, kind. */
  CHECK_KIND_UNKNOWN = 0,
  /**
   * CHECK_KIND_SOURCE - SOURCE is a Check which describes in various detail one or more external
   * inputs to the workflow. Resolving a SOURCE check may include actions like
   * "find all commits with this label set", or "traverse dependency references
   * in these source points to generate a full set of commits/artifacts".
   */
  CHECK_KIND_SOURCE = 1,
  /**
   * CHECK_KIND_BUILD - BUILD is a Check which transforms some inputs (typically SOURCE checks)
   * into one or more output artifacts.
   */
  CHECK_KIND_BUILD = 2,
  /**
   * CHECK_KIND_TEST - TEST is a Check which consumes one or more artifacts (usually from BUILDs)
   * and/or SOURCEs, and determines if these artifacts are correct in some
   * fashion.
   */
  CHECK_KIND_TEST = 3,
  /**
   * CHECK_KIND_ANALYSIS - ANALYSIS is a Check which consumes ~anything, and makes some
   * meta-determiniation. For example, an Analysis could consume sources, builds
   * and tests and make a determiation like "this CL can land".
   */
  CHECK_KIND_ANALYSIS = 4,
}

export function checkKindFromJSON(object: any): CheckKind {
  switch (object) {
    case 0:
    case "CHECK_KIND_UNKNOWN":
      return CheckKind.CHECK_KIND_UNKNOWN;
    case 1:
    case "CHECK_KIND_SOURCE":
      return CheckKind.CHECK_KIND_SOURCE;
    case 2:
    case "CHECK_KIND_BUILD":
      return CheckKind.CHECK_KIND_BUILD;
    case 3:
    case "CHECK_KIND_TEST":
      return CheckKind.CHECK_KIND_TEST;
    case 4:
    case "CHECK_KIND_ANALYSIS":
      return CheckKind.CHECK_KIND_ANALYSIS;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CheckKind");
  }
}

export function checkKindToJSON(object: CheckKind): string {
  switch (object) {
    case CheckKind.CHECK_KIND_UNKNOWN:
      return "CHECK_KIND_UNKNOWN";
    case CheckKind.CHECK_KIND_SOURCE:
      return "CHECK_KIND_SOURCE";
    case CheckKind.CHECK_KIND_BUILD:
      return "CHECK_KIND_BUILD";
    case CheckKind.CHECK_KIND_TEST:
      return "CHECK_KIND_TEST";
    case CheckKind.CHECK_KIND_ANALYSIS:
      return "CHECK_KIND_ANALYSIS";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CheckKind");
  }
}
