// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/graph_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CheckView } from "./check_view.pb";
import { Revision } from "./revision.pb";
import { StageView } from "./stage_view.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * GraphView provides a collated, partial, view of the graph.
 *
 * Nodes may be omitted from the GraphView under the following conditions:
 * - The caller does not have permission to view the node.
 * - The caller only requested a subset of possible nodes (e.g. via query/filter
 * parameters)
 * - The caller only requested a subset of the possible data types (e.g. Check
 * options)
 *
 * However, every node (specifically, anything which can be named with an
 * Identifier) present in the GraphView is complete, and consistent with its
 * included Revision. This means that this can contain e.g. dependency edges to
 * nodes which are not present in this GraphView, and possibly not readable by
 * the caller at all.
 *
 * As an example, if a `Check` is present in this GraphView, you are seeing the
 * entire contents of that Check, but MAY NOT see all the `Datum` objects which
 * belong to this Check (but you WOULD see the full content of the Check.options
 * field).
 */
export interface GraphView {
  /**
   * When a GraphView is returned from a read operation (e.g. QueryNodes), it
   * will be the version of the snapshot of the graph used to prepare this
   * GraphView.
   */
  readonly version?:
    | Revision
    | undefined;
  /**
   * Checks in the graph.
   *
   * Checks may be omitted if the user does not have permission to view them,
   * or if the user did not request them.
   */
  readonly checks: readonly CheckView[];
  /**
   * Stages in the graph.
   *
   * Stages may be omitted if the user does not have permission to view them,
   * or if the user did not request them.
   */
  readonly stages: readonly StageView[];
}

function createBaseGraphView(): GraphView {
  return { version: undefined, checks: [], stages: [] };
}

export const GraphView: MessageFns<GraphView> = {
  encode(message: GraphView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      Revision.encode(message.version, writer.uint32(10).fork()).join();
    }
    for (const v of message.checks) {
      CheckView.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.stages) {
      StageView.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GraphView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGraphView() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = Revision.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.checks.push(CheckView.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stages.push(StageView.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GraphView {
    return {
      version: isSet(object.version) ? Revision.fromJSON(object.version) : undefined,
      checks: globalThis.Array.isArray(object?.checks) ? object.checks.map((e: any) => CheckView.fromJSON(e)) : [],
      stages: globalThis.Array.isArray(object?.stages) ? object.stages.map((e: any) => StageView.fromJSON(e)) : [],
    };
  },

  toJSON(message: GraphView): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Revision.toJSON(message.version);
    }
    if (message.checks?.length) {
      obj.checks = message.checks.map((e) => CheckView.toJSON(e));
    }
    if (message.stages?.length) {
      obj.stages = message.stages.map((e) => StageView.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GraphView>): GraphView {
    return GraphView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GraphView>): GraphView {
    const message = createBaseGraphView() as any;
    message.version = (object.version !== undefined && object.version !== null)
      ? Revision.fromPartial(object.version)
      : undefined;
    message.checks = object.checks?.map((e) => CheckView.fromPartial(e)) || [];
    message.stages = object.stages?.map((e) => StageView.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
