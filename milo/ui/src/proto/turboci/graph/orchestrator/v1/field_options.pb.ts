// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/field_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { IdentifierKind, identifierKindFromJSON, identifierKindToJSON } from "../../ids/v1/identifier_kind.pb";
import { CheckState, checkStateFromJSON, checkStateToJSON } from "./check_state.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/** FieldOptions are field options which apply to TurboCI message fields. */
export interface FieldOptions {
  /** Field options which apply to Check messages. */
  readonly check?:
    | FieldOptions_CheckFieldOptions
    | undefined;
  /** Field options which apply to fields containing Identifiers. */
  readonly id?:
    | FieldOptions_IdentifierOptions
    | undefined;
  /**
   * True if this field only applies during creation of the target node.
   *
   * If this field is supplied and the target node already exists, its value
   * must match the target's value for this field.
   */
  readonly creationOnly?: boolean | undefined;
}

/** CheckFieldOptions are field options which apply to Check messages. */
export interface FieldOptions_CheckFieldOptions {
  /**
   * Indicates that this field is mutable at this CheckState or earlier.
   *
   * We use `editable` here (instead of `mutable`) to avoid name mangling in
   * C++.
   *
   * Example (this indicates that `foo` is mutable during the PLANNING
   * state):
   *   message Check {
   *     string foo = 1 [
   *       (turboci).check.editable = CHECK_STATE_PLANNING
   *     ];
   *   }
   */
  readonly editable?: CheckState | undefined;
}

/**
 * IdentifierOptions are field options which apply to message containing
 * Identifiers.
 */
export interface FieldOptions_IdentifierOptions {
  /**
   * Indicates a list of allowed target types for Identifiers within this
   * field. Commonly used with Edge messages, but may also directly annotate
   * Identifier fields.
   *
   * Example:
   *   message Foo {
   *     repeated Edge dependencies = 1 [
   *       (turboci).id.allowed: IDENTIFIER_KIND_STAGE,
   *       (turboci).id.allowed: IDENTIFIER_KIND_CHECK
   *     ];
   *   }
   */
  readonly allowed: readonly IdentifierKind[];
}

function createBaseFieldOptions(): FieldOptions {
  return { check: undefined, id: undefined, creationOnly: undefined };
}

export const FieldOptions: MessageFns<FieldOptions> = {
  encode(message: FieldOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.check !== undefined) {
      FieldOptions_CheckFieldOptions.encode(message.check, writer.uint32(10).fork()).join();
    }
    if (message.id !== undefined) {
      FieldOptions_IdentifierOptions.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.creationOnly !== undefined) {
      writer.uint32(24).bool(message.creationOnly);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.check = FieldOptions_CheckFieldOptions.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = FieldOptions_IdentifierOptions.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.creationOnly = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldOptions {
    return {
      check: isSet(object.check) ? FieldOptions_CheckFieldOptions.fromJSON(object.check) : undefined,
      id: isSet(object.id) ? FieldOptions_IdentifierOptions.fromJSON(object.id) : undefined,
      creationOnly: isSet(object.creationOnly) ? globalThis.Boolean(object.creationOnly) : undefined,
    };
  },

  toJSON(message: FieldOptions): unknown {
    const obj: any = {};
    if (message.check !== undefined) {
      obj.check = FieldOptions_CheckFieldOptions.toJSON(message.check);
    }
    if (message.id !== undefined) {
      obj.id = FieldOptions_IdentifierOptions.toJSON(message.id);
    }
    if (message.creationOnly !== undefined) {
      obj.creationOnly = message.creationOnly;
    }
    return obj;
  },

  create(base?: DeepPartial<FieldOptions>): FieldOptions {
    return FieldOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldOptions>): FieldOptions {
    const message = createBaseFieldOptions() as any;
    message.check = (object.check !== undefined && object.check !== null)
      ? FieldOptions_CheckFieldOptions.fromPartial(object.check)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null)
      ? FieldOptions_IdentifierOptions.fromPartial(object.id)
      : undefined;
    message.creationOnly = object.creationOnly ?? undefined;
    return message;
  },
};

function createBaseFieldOptions_CheckFieldOptions(): FieldOptions_CheckFieldOptions {
  return { editable: undefined };
}

export const FieldOptions_CheckFieldOptions: MessageFns<FieldOptions_CheckFieldOptions> = {
  encode(message: FieldOptions_CheckFieldOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.editable !== undefined) {
      writer.uint32(8).int32(message.editable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldOptions_CheckFieldOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions_CheckFieldOptions() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.editable = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldOptions_CheckFieldOptions {
    return { editable: isSet(object.editable) ? checkStateFromJSON(object.editable) : undefined };
  },

  toJSON(message: FieldOptions_CheckFieldOptions): unknown {
    const obj: any = {};
    if (message.editable !== undefined) {
      obj.editable = checkStateToJSON(message.editable);
    }
    return obj;
  },

  create(base?: DeepPartial<FieldOptions_CheckFieldOptions>): FieldOptions_CheckFieldOptions {
    return FieldOptions_CheckFieldOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldOptions_CheckFieldOptions>): FieldOptions_CheckFieldOptions {
    const message = createBaseFieldOptions_CheckFieldOptions() as any;
    message.editable = object.editable ?? undefined;
    return message;
  },
};

function createBaseFieldOptions_IdentifierOptions(): FieldOptions_IdentifierOptions {
  return { allowed: [] };
}

export const FieldOptions_IdentifierOptions: MessageFns<FieldOptions_IdentifierOptions> = {
  encode(message: FieldOptions_IdentifierOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.allowed) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FieldOptions_IdentifierOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldOptions_IdentifierOptions() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.allowed.push(reader.int32() as any);

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.allowed.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldOptions_IdentifierOptions {
    return {
      allowed: globalThis.Array.isArray(object?.allowed)
        ? object.allowed.map((e: any) => identifierKindFromJSON(e))
        : [],
    };
  },

  toJSON(message: FieldOptions_IdentifierOptions): unknown {
    const obj: any = {};
    if (message.allowed?.length) {
      obj.allowed = message.allowed.map((e) => identifierKindToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FieldOptions_IdentifierOptions>): FieldOptions_IdentifierOptions {
    return FieldOptions_IdentifierOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FieldOptions_IdentifierOptions>): FieldOptions_IdentifierOptions {
    const message = createBaseFieldOptions_IdentifierOptions() as any;
    message.allowed = object.allowed?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
