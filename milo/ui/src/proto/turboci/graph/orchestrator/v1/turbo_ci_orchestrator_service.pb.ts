// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/turbo_ci_orchestrator_service.proto

/* eslint-disable */
import { QueryNodesRequest } from "./query_nodes_request.pb";
import { QueryNodesResponse } from "./query_nodes_response.pb";
import { WriteNodesRequest } from "./write_nodes_request.pb";
import { WriteNodesResponse } from "./write_nodes_response.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * TurboCIOrchestrator is the API for interacting with the TurboCI
 * Orchestrator.
 */
export interface TurboCIOrchestrator {
  /**
   * WriteNodes transactionally writes or updates multiple nodes within a
   * WorkPlan.
   *
   * NOTE: Simple workflows can have all Checks, Check options and Stages in the
   * same realm, minimizing the number of required bindings.
   */
  WriteNodes(request: WriteNodesRequest): Promise<WriteNodesResponse>;
  /**
   * QueryNodes allows querying nodes in a fairly simple way.
   *
   * In the future we may add a more advanced API to open up more of GQL's
   * underlying expressiveness.
   */
  QueryNodes(request: QueryNodesRequest): Promise<QueryNodesResponse>;
}

export const TurboCIOrchestratorServiceName = "turboci.graph.orchestrator.v1.TurboCIOrchestrator";
export class TurboCIOrchestratorClientImpl implements TurboCIOrchestrator {
  static readonly DEFAULT_SERVICE = TurboCIOrchestratorServiceName;
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TurboCIOrchestratorServiceName;
    this.rpc = rpc;
    this.WriteNodes = this.WriteNodes.bind(this);
    this.QueryNodes = this.QueryNodes.bind(this);
  }
  WriteNodes(request: WriteNodesRequest): Promise<WriteNodesResponse> {
    const data = WriteNodesRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "WriteNodes", data);
    return promise.then((data) => WriteNodesResponse.fromJSON(data));
  }

  QueryNodes(request: QueryNodesRequest): Promise<QueryNodesResponse> {
    const data = QueryNodesRequest.toJSON(request);
    const promise = this.rpc.request(this.service, "QueryNodes", data);
    return promise.then((data) => QueryNodesResponse.fromJSON(data));
  }
}

interface Rpc {
  request(service: string, method: string, data: unknown): Promise<unknown>;
}
