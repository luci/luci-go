// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/query_nodes_request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Query } from "./query.pb";
import { Revision } from "./revision.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/** Request message for TurboCIGraphService.QueryNodes. */
export interface QueryNodesRequest {
  /**
   * The token of the Stage Attempt which is performing this query.
   *
   * This is in addition to regular RPC authorization.
   *
   * If missing, this RPC will check that the caller additionally has the
   * 'turboci.workplans.readExternal' on the implied workplans.
   */
  readonly stageAttemptToken?:
    | string
    | undefined;
  /**
   * If omitted, QueryNodes will return the current version of any nodes in the
   * query from within a read-only transaction.
   *
   * Otherwise, this restricts how the query interacts with the underlying
   * database.
   */
  readonly version?:
    | QueryNodesRequest_VersionRestriction
    | undefined;
  /** One or more Queries to select nodes to return. */
  readonly query: readonly Query[];
}

/**
 * VersionRestriction describes how this query can be constrained by database
 * version.
 */
export interface QueryNodesRequest_VersionRestriction {
  /**
   * Require will cause the query to return the current version of all
   * nodes (from the read-only transaction), but it will check that all
   * queried nodes have a Revision less than or equal to this version.
   *
   * If QueryNodes would return a node newer than `require`, it will return
   * FAILED_PRECONDITION with a detail message of
   * TransactionConflictFailure.
   *
   * Use this when issuing follow-up queries within a transaction, where you
   * want to abort and retry that transaction as soon as you know there will
   * be a conflict.
   */
  readonly require?:
    | Revision
    | undefined;
  /**
   * Query from the database at this snapshot version.
   *
   * This can return data older than the current version in the database.
   *
   * Use this when trying to assemble a consistent (but possibly stale) view
   * of the data in the database.
   *
   * This CAN be used from a transaction (WriteNodes will eventually detect
   * the discrepancy and you will need to retry the transaction at that
   * point).
   */
  readonly snapshot?: Revision | undefined;
}

function createBaseQueryNodesRequest(): QueryNodesRequest {
  return { stageAttemptToken: undefined, version: undefined, query: [] };
}

export const QueryNodesRequest: MessageFns<QueryNodesRequest> = {
  encode(message: QueryNodesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stageAttemptToken !== undefined) {
      writer.uint32(10).string(message.stageAttemptToken);
    }
    if (message.version !== undefined) {
      QueryNodesRequest_VersionRestriction.encode(message.version, writer.uint32(18).fork()).join();
    }
    for (const v of message.query) {
      Query.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNodesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNodesRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stageAttemptToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = QueryNodesRequest_VersionRestriction.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.query.push(Query.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNodesRequest {
    return {
      stageAttemptToken: isSet(object.stageAttemptToken) ? globalThis.String(object.stageAttemptToken) : undefined,
      version: isSet(object.version) ? QueryNodesRequest_VersionRestriction.fromJSON(object.version) : undefined,
      query: globalThis.Array.isArray(object?.query) ? object.query.map((e: any) => Query.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryNodesRequest): unknown {
    const obj: any = {};
    if (message.stageAttemptToken !== undefined) {
      obj.stageAttemptToken = message.stageAttemptToken;
    }
    if (message.version !== undefined) {
      obj.version = QueryNodesRequest_VersionRestriction.toJSON(message.version);
    }
    if (message.query?.length) {
      obj.query = message.query.map((e) => Query.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNodesRequest>): QueryNodesRequest {
    return QueryNodesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNodesRequest>): QueryNodesRequest {
    const message = createBaseQueryNodesRequest() as any;
    message.stageAttemptToken = object.stageAttemptToken ?? undefined;
    message.version = (object.version !== undefined && object.version !== null)
      ? QueryNodesRequest_VersionRestriction.fromPartial(object.version)
      : undefined;
    message.query = object.query?.map((e) => Query.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryNodesRequest_VersionRestriction(): QueryNodesRequest_VersionRestriction {
  return { require: undefined, snapshot: undefined };
}

export const QueryNodesRequest_VersionRestriction: MessageFns<QueryNodesRequest_VersionRestriction> = {
  encode(message: QueryNodesRequest_VersionRestriction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.require !== undefined) {
      Revision.encode(message.require, writer.uint32(10).fork()).join();
    }
    if (message.snapshot !== undefined) {
      Revision.encode(message.snapshot, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNodesRequest_VersionRestriction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNodesRequest_VersionRestriction() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.require = Revision.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.snapshot = Revision.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNodesRequest_VersionRestriction {
    return {
      require: isSet(object.require) ? Revision.fromJSON(object.require) : undefined,
      snapshot: isSet(object.snapshot) ? Revision.fromJSON(object.snapshot) : undefined,
    };
  },

  toJSON(message: QueryNodesRequest_VersionRestriction): unknown {
    const obj: any = {};
    if (message.require !== undefined) {
      obj.require = Revision.toJSON(message.require);
    }
    if (message.snapshot !== undefined) {
      obj.snapshot = Revision.toJSON(message.snapshot);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNodesRequest_VersionRestriction>): QueryNodesRequest_VersionRestriction {
    return QueryNodesRequest_VersionRestriction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNodesRequest_VersionRestriction>): QueryNodesRequest_VersionRestriction {
    const message = createBaseQueryNodesRequest_VersionRestriction() as any;
    message.require = (object.require !== undefined && object.require !== null)
      ? Revision.fromPartial(object.require)
      : undefined;
    message.snapshot = (object.snapshot !== undefined && object.snapshot !== null)
      ? Revision.fromPartial(object.snapshot)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
