// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/check_delta.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CheckOption, CheckResult, CheckResultDatum } from "../../ids/v1/identifier.pb";
import { CheckState, checkStateFromJSON, checkStateToJSON } from "./check_state.pb";
import { Dependencies } from "./dependencies.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * Encapsulates data changes to a Check object.
 *
 * Fields are unset when the edit did not change that aspect of the Check.
 */
export interface CheckDelta {
  /** If set, the new state that was set as part of this edit. */
  readonly state?:
    | CheckState
    | undefined;
  /**
   * Dependencies written as part of this edit.
   *
   * The fields within reflect what was changed in this edit:
   *   * `edges`, `to_unblock` and `resolved` are included in-whole, and mean
   *     that this edit modified those fields.
   *   * `resolution_events` reflects just new events resolved in this edit.
   */
  readonly dependencies?:
    | Dependencies
    | undefined;
  /** Options written as part of this edit. */
  readonly options: readonly CheckOption[];
  /**
   * Result data written as part of this edit.
   *
   * This is repeated to allow for the Orchestrator to make a single edit
   * which e.g. finalizes all Results in a single edit, but *typically* this
   * will only contain a single Result.
   *
   * Unique and sorted on `Result.identifier`.
   */
  readonly result: readonly CheckDelta_Result[];
}

/** Information about a single Check.Result written as part of this edit. */
export interface CheckDelta_Result {
  /** The identifier of this Check.Result. */
  readonly identifier?:
    | CheckResult
    | undefined;
  /** If true, this Check.Result was created by this edit. */
  readonly created?:
    | boolean
    | undefined;
  /** Reference to the data written as part of this edit. */
  readonly data: readonly CheckResultDatum[];
  /**
   * If true, this edit finalized the Check.Result.
   *
   * This may be true in conjunction with `created` to indicate that a
   * new Check.Result was created and immediately finalized.
   *
   * `Check.Result.finalized_at` will match the timestamp of this Edit.
   */
  readonly finalized?: boolean | undefined;
}

function createBaseCheckDelta(): CheckDelta {
  return { state: undefined, dependencies: undefined, options: [], result: [] };
}

export const CheckDelta: MessageFns<CheckDelta> = {
  encode(message: CheckDelta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== undefined) {
      writer.uint32(8).int32(message.state);
    }
    if (message.dependencies !== undefined) {
      Dependencies.encode(message.dependencies, writer.uint32(18).fork()).join();
    }
    for (const v of message.options) {
      CheckOption.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.result) {
      CheckDelta_Result.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckDelta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckDelta() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dependencies = Dependencies.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.options.push(CheckOption.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.result.push(CheckDelta_Result.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckDelta {
    return {
      state: isSet(object.state) ? checkStateFromJSON(object.state) : undefined,
      dependencies: isSet(object.dependencies) ? Dependencies.fromJSON(object.dependencies) : undefined,
      options: globalThis.Array.isArray(object?.options) ? object.options.map((e: any) => CheckOption.fromJSON(e)) : [],
      result: globalThis.Array.isArray(object?.result)
        ? object.result.map((e: any) => CheckDelta_Result.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CheckDelta): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = checkStateToJSON(message.state);
    }
    if (message.dependencies !== undefined) {
      obj.dependencies = Dependencies.toJSON(message.dependencies);
    }
    if (message.options?.length) {
      obj.options = message.options.map((e) => CheckOption.toJSON(e));
    }
    if (message.result?.length) {
      obj.result = message.result.map((e) => CheckDelta_Result.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CheckDelta>): CheckDelta {
    return CheckDelta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckDelta>): CheckDelta {
    const message = createBaseCheckDelta() as any;
    message.state = object.state ?? undefined;
    message.dependencies = (object.dependencies !== undefined && object.dependencies !== null)
      ? Dependencies.fromPartial(object.dependencies)
      : undefined;
    message.options = object.options?.map((e) => CheckOption.fromPartial(e)) || [];
    message.result = object.result?.map((e) => CheckDelta_Result.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCheckDelta_Result(): CheckDelta_Result {
  return { identifier: undefined, created: undefined, data: [], finalized: undefined };
}

export const CheckDelta_Result: MessageFns<CheckDelta_Result> = {
  encode(message: CheckDelta_Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== undefined) {
      CheckResult.encode(message.identifier, writer.uint32(10).fork()).join();
    }
    if (message.created !== undefined) {
      writer.uint32(16).bool(message.created);
    }
    for (const v of message.data) {
      CheckResultDatum.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.finalized !== undefined) {
      writer.uint32(32).bool(message.finalized);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckDelta_Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckDelta_Result() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = CheckResult.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.created = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(CheckResultDatum.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.finalized = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckDelta_Result {
    return {
      identifier: isSet(object.identifier) ? CheckResult.fromJSON(object.identifier) : undefined,
      created: isSet(object.created) ? globalThis.Boolean(object.created) : undefined,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => CheckResultDatum.fromJSON(e)) : [],
      finalized: isSet(object.finalized) ? globalThis.Boolean(object.finalized) : undefined,
    };
  },

  toJSON(message: CheckDelta_Result): unknown {
    const obj: any = {};
    if (message.identifier !== undefined) {
      obj.identifier = CheckResult.toJSON(message.identifier);
    }
    if (message.created !== undefined) {
      obj.created = message.created;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => CheckResultDatum.toJSON(e));
    }
    if (message.finalized !== undefined) {
      obj.finalized = message.finalized;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckDelta_Result>): CheckDelta_Result {
    return CheckDelta_Result.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckDelta_Result>): CheckDelta_Result {
    const message = createBaseCheckDelta_Result() as any;
    message.identifier = (object.identifier !== undefined && object.identifier !== null)
      ? CheckResult.fromPartial(object.identifier)
      : undefined;
    message.created = object.created ?? undefined;
    message.data = object.data?.map((e) => CheckResultDatum.fromPartial(e)) || [];
    message.finalized = object.finalized ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
