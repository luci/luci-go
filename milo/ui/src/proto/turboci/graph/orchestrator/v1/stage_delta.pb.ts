// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/stage_delta.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { StageExecutionPolicy } from "./stage_execution_policy.pb";
import { StageState, stageStateFromJSON, stageStateToJSON } from "./stage_state.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/** Encapsulates data changes to a Stage object. */
export interface StageDelta {
  /** If set, the new Stage state that was set as part of this edit. */
  readonly state?:
    | StageState
    | undefined;
  /**
   * Execution policy writes for this Stage.
   *
   * Usually this should be empty or have only one policy change - but it's
   * possible for a single write to affect multiple policies.
   *
   * Like Stage.execution_policies, this will be sorted and unique on
   * StageExecutionPolicy.source.
   */
  readonly executionPolicies: readonly StageExecutionPolicy[];
}

function createBaseStageDelta(): StageDelta {
  return { state: undefined, executionPolicies: [] };
}

export const StageDelta: MessageFns<StageDelta> = {
  encode(message: StageDelta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.state !== undefined) {
      writer.uint32(8).int32(message.state);
    }
    for (const v of message.executionPolicies) {
      StageExecutionPolicy.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StageDelta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStageDelta() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.executionPolicies.push(StageExecutionPolicy.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StageDelta {
    return {
      state: isSet(object.state) ? stageStateFromJSON(object.state) : undefined,
      executionPolicies: globalThis.Array.isArray(object?.executionPolicies)
        ? object.executionPolicies.map((e: any) => StageExecutionPolicy.fromJSON(e))
        : [],
    };
  },

  toJSON(message: StageDelta): unknown {
    const obj: any = {};
    if (message.state !== undefined) {
      obj.state = stageStateToJSON(message.state);
    }
    if (message.executionPolicies?.length) {
      obj.executionPolicies = message.executionPolicies.map((e) => StageExecutionPolicy.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StageDelta>): StageDelta {
    return StageDelta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StageDelta>): StageDelta {
    const message = createBaseStageDelta() as any;
    message.state = object.state ?? undefined;
    message.executionPolicies = object.executionPolicies?.map((e) => StageExecutionPolicy.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
