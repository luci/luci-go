// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/transaction_invariant.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * TransactionConflictFailure is a gRPC error detail message returned by QueryNodes
 * and WriteNodes.
 *
 * If your client receives an rpc status with this message in it, it means that
 * the client needs to retry its transaction from the beginning.
 */
export interface TransactionConflictFailure {
}

function createBaseTransactionConflictFailure(): TransactionConflictFailure {
  return {};
}

export const TransactionConflictFailure: MessageFns<TransactionConflictFailure> = {
  encode(_: TransactionConflictFailure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionConflictFailure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionConflictFailure() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TransactionConflictFailure {
    return {};
  },

  toJSON(_: TransactionConflictFailure): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TransactionConflictFailure>): TransactionConflictFailure {
    return TransactionConflictFailure.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TransactionConflictFailure>): TransactionConflictFailure {
    const message = createBaseTransactionConflictFailure() as any;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
