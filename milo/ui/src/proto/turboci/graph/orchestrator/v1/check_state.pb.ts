// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/check_state.proto

/* eslint-disable */

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * CheckState describes the current state of a Check.
 *
 * This state always evolves in order:
 *   1. PLANNING
 *   2. PLANNED
 *   3. WAITING
 *   4. FINAL
 *
 * The Workflow (i.e. a Stage) can explicitly evolve a Check from one state to
 * the next, but the Orchestrator will also enforce Check state evolution via
 * Stage Check Assignment "goal states". When all Stages with Check Assignments
 * for a given goal_state are Final, if the Check is not explicitly advanced to
 * (or past) that goal state, the Orchestrator will advance the check state.
 *
 * These states have enum values in multiples of 10 in case we need to add more
 * states later which fall between these 4 initial states.
 */
export enum CheckState {
  /** CHECK_STATE_UNKNOWN - UNKNOWN is the default, invalid, state. */
  CHECK_STATE_UNKNOWN = 0,
  /**
   * CHECK_STATE_PLANNING - PLANNING indicates that the workflow is still editing this Check.
   *
   * Checks are added to the graph in the PLANNING state.
   *
   * While in the PLANNING state, options and dependencies may be edited, as
   * indicated by the `(turboci_check).mutable = PLANNING` field annotation.
   */
  CHECK_STATE_PLANNING = 10,
  /**
   * CHECK_STATE_PLANNED - PLANNED indicates that the workflow has finished planning this Check,
   * but one or more dependencies of the Check are still unfulfilled.
   *
   * While in the PLANNED state, the Check is immutable, aside from the
   * resolution of its dependencies.
   */
  CHECK_STATE_PLANNED = 20,
  /**
   * CHECK_STATE_WAITING - WAITING indicates that the workflow has finished planning this Check,
   * and it is unblocked (dependencies have been sufficiently fulfilled),
   * but the Check does not yet have a complete set of Results.
   *
   * While in the WAITING state, the Check may have Results added to it.
   */
  CHECK_STATE_WAITING = 30,
  /**
   * CHECK_STATE_FINAL - FINAL indicates that this Check is fully immutable.
   *
   * When a workflow completes, all of its Checks are FINAL.
   *
   * While in the FINAL state, the Check is fully immutable.
   */
  CHECK_STATE_FINAL = 40,
}

export function checkStateFromJSON(object: any): CheckState {
  switch (object) {
    case 0:
    case "CHECK_STATE_UNKNOWN":
      return CheckState.CHECK_STATE_UNKNOWN;
    case 10:
    case "CHECK_STATE_PLANNING":
      return CheckState.CHECK_STATE_PLANNING;
    case 20:
    case "CHECK_STATE_PLANNED":
      return CheckState.CHECK_STATE_PLANNED;
    case 30:
    case "CHECK_STATE_WAITING":
      return CheckState.CHECK_STATE_WAITING;
    case 40:
    case "CHECK_STATE_FINAL":
      return CheckState.CHECK_STATE_FINAL;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CheckState");
  }
}

export function checkStateToJSON(object: CheckState): string {
  switch (object) {
    case CheckState.CHECK_STATE_UNKNOWN:
      return "CHECK_STATE_UNKNOWN";
    case CheckState.CHECK_STATE_PLANNING:
      return "CHECK_STATE_PLANNING";
    case CheckState.CHECK_STATE_PLANNED:
      return "CHECK_STATE_PLANNED";
    case CheckState.CHECK_STATE_WAITING:
      return "CHECK_STATE_WAITING";
    case CheckState.CHECK_STATE_FINAL:
      return "CHECK_STATE_FINAL";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CheckState");
  }
}
