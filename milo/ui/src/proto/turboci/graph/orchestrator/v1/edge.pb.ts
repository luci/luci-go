// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/edge.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Identifier } from "../../ids/v1/identifier.pb";
import { Revision } from "./revision.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * Edge is a singular pointer to some node with an Identifier.
 *
 * Typically Edges must always point to nodes in the same graph, though this may
 * be lifted in the future.
 */
export interface Edge {
  /**
   * Target indicates the node that this Edge points to.
   *
   * Currently only Checks and Stages are supported.
   */
  readonly target?:
    | Identifier
    | undefined;
  /**
   * Indicates if this Edge was resolved yet.
   *
   * If this is absent, then this Edge has not yet been resolved.
   */
  readonly resolution?: Edge_Resolution | undefined;
}

/**
 * The Orchestrator logically attempts to resolve an Edge any time the target
 * it points to changes - in practice, the Orchestrator will make various
 * optimizations to avoid this becoming resource intensive.
 *
 * Once a resolution is recorded, the Edge is never evaluated again. TurboCI
 * graph is structured such that data evolves in an append-only fashion, so
 * that once an Edge is resolved as satisfied, the data which caused it to be
 * satisfied cannot be 'reversed' (and vice-versa; an edge resolved as
 * satisfied == false cannot later become satisfiable).
 */
export interface Edge_Resolution {
  /**
   * If this is `true`, then this Edge's condition is satisfied.
   * If this is `false`, then this Edge's condition is unsatisfiable.
   */
  readonly satisfied?:
    | boolean
    | undefined;
  /**
   * The version of the target node which caused this Edge (or EdgeGroup) to
   * be satisfied/unsatisfiable.
   *
   * This will always be less than or equal to the version in `at`.
   */
  readonly targetVersion?:
    | Revision
    | undefined;
  /**
   * The database revsision (commit timestamp) at which this resolution was
   * made.
   *
   * Edges in the Orchestrator MAY be resolved in an eventually-consistent
   * fashion, which means that it's possible to observe the target of this
   * edge in a satisfying state for this edge, but the edge is still not
   * marked as resolved.
   *
   * This will always be greater than or equal to the version in `target_version`.
   */
  readonly at?: Revision | undefined;
}

function createBaseEdge(): Edge {
  return { target: undefined, resolution: undefined };
}

export const Edge: MessageFns<Edge> = {
  encode(message: Edge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.target !== undefined) {
      Identifier.encode(message.target, writer.uint32(10).fork()).join();
    }
    if (message.resolution !== undefined) {
      Edge_Resolution.encode(message.resolution, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdge() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.target = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resolution = Edge_Resolution.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Edge {
    return {
      target: isSet(object.target) ? Identifier.fromJSON(object.target) : undefined,
      resolution: isSet(object.resolution) ? Edge_Resolution.fromJSON(object.resolution) : undefined,
    };
  },

  toJSON(message: Edge): unknown {
    const obj: any = {};
    if (message.target !== undefined) {
      obj.target = Identifier.toJSON(message.target);
    }
    if (message.resolution !== undefined) {
      obj.resolution = Edge_Resolution.toJSON(message.resolution);
    }
    return obj;
  },

  create(base?: DeepPartial<Edge>): Edge {
    return Edge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Edge>): Edge {
    const message = createBaseEdge() as any;
    message.target = (object.target !== undefined && object.target !== null)
      ? Identifier.fromPartial(object.target)
      : undefined;
    message.resolution = (object.resolution !== undefined && object.resolution !== null)
      ? Edge_Resolution.fromPartial(object.resolution)
      : undefined;
    return message;
  },
};

function createBaseEdge_Resolution(): Edge_Resolution {
  return { satisfied: undefined, targetVersion: undefined, at: undefined };
}

export const Edge_Resolution: MessageFns<Edge_Resolution> = {
  encode(message: Edge_Resolution, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.satisfied !== undefined) {
      writer.uint32(8).bool(message.satisfied);
    }
    if (message.targetVersion !== undefined) {
      Revision.encode(message.targetVersion, writer.uint32(18).fork()).join();
    }
    if (message.at !== undefined) {
      Revision.encode(message.at, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edge_Resolution {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdge_Resolution() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.satisfied = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targetVersion = Revision.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.at = Revision.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Edge_Resolution {
    return {
      satisfied: isSet(object.satisfied) ? globalThis.Boolean(object.satisfied) : undefined,
      targetVersion: isSet(object.targetVersion) ? Revision.fromJSON(object.targetVersion) : undefined,
      at: isSet(object.at) ? Revision.fromJSON(object.at) : undefined,
    };
  },

  toJSON(message: Edge_Resolution): unknown {
    const obj: any = {};
    if (message.satisfied !== undefined) {
      obj.satisfied = message.satisfied;
    }
    if (message.targetVersion !== undefined) {
      obj.targetVersion = Revision.toJSON(message.targetVersion);
    }
    if (message.at !== undefined) {
      obj.at = Revision.toJSON(message.at);
    }
    return obj;
  },

  create(base?: DeepPartial<Edge_Resolution>): Edge_Resolution {
    return Edge_Resolution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Edge_Resolution>): Edge_Resolution {
    const message = createBaseEdge_Resolution() as any;
    message.satisfied = object.satisfied ?? undefined;
    message.targetVersion = (object.targetVersion !== undefined && object.targetVersion !== null)
      ? Revision.fromPartial(object.targetVersion)
      : undefined;
    message.at = (object.at !== undefined && object.at !== null) ? Revision.fromPartial(object.at) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
