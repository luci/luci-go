// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/edit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp.pb";
import { Identifier } from "../../ids/v1/identifier.pb";
import { Actor } from "./actor.pb";
import { CheckDelta } from "./check_delta.pb";
import { Revision } from "./revision.pb";
import { StageDelta } from "./stage_delta.pb";
import { Value } from "./value.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * Edit is a record which indicates who/what/why edited a Check or
 * Stage.
 *
 * This has a `delta` of either CheckDelta or StageDelta, depending on the
 * type of the edit.
 *
 * Edit Deltas are designed to be quite slim. Heavy bits of the delta (like
 * Option Data) will be stored separately from this Edit record and will have a
 * shorter TTL.
 */
export interface Edit {
  /** The node which this Edit is associated with. */
  readonly forNode?:
    | Identifier
    | undefined;
  /**
   * Version of the check/stage that this edit resulted in.
   *
   * When an edit applies, this `version` will match the node's version.
   */
  readonly version?:
    | Revision
    | undefined;
  /**
   * The time at which this Edit will be automatically garbage collected.
   *
   * Defaults to 180 days from the time of the Edit.
   *
   * TBD: Add RPC to extend the TTL of an Edit and its data.
   */
  readonly expireAt?:
    | string
    | undefined;
  /**
   * The time at which heavyweight data associated with this Edit (e.g.
   * CheckEditOptions) will be automatically garbage collected.
   *
   * Defaults to 30 days from the time of the Edit.
   *
   * TBD: Add RPC to extend the TTL of an Edit and its data.
   */
  readonly dataExpireAt?:
    | string
    | undefined;
  /**
   * The security realm for this Edit (duplicated from the affected Check/Stage
   * to allow easy ACL resolution).
   */
  readonly realm?:
    | string
    | undefined;
  /** The entity which generated this Edit. */
  readonly editor?:
    | Actor
    | undefined;
  /**
   * If set, the WriteNodes call which produced this Edit was transactional over
   * this set of Identifiers.
   *
   * If this is unset, then this Edit was the result of an 'oblivious write'
   * without a transaction snapshot.
   */
  readonly transactionalSet: readonly Identifier[];
  /**
   * The writer-provided reason(s) for this Edit.
   *
   * The only reason to have multiple Reason messages is to allow for different
   * realms.
   *
   * NOTE: When viewing Edits, the reader will only see the reasons for which
   * they have read permissions (that is - two different users may see different
   * versions of this otherwise entirely-immutable Edit).
   *
   * By convention, these should be ordered from most to least specific, so if a
   * client only wants to display one Reason, it should be the first in this
   * list.
   */
  readonly reasons: readonly Edit_Reason[];
  /**
   * This is a delta for a Check.
   *
   * `what` must be an Identifier.Check.
   */
  readonly check?:
    | CheckDelta
    | undefined;
  /**
   * This is a delta for a Stage.
   *
   * `what` must be an Identifier.Stage.
   */
  readonly stage?: StageDelta | undefined;
}

/**
 * Human and machine-readable reasons for this Edit (provided as part of
 * WriteNodes).
 */
export interface Edit_Reason {
  /**
   * The security realm for this reason.
   *
   * If omitted, this will be the same as the parent node's realm.
   */
  readonly realm?:
    | string
    | undefined;
  /**
   * A 'low effort' reason for this edit.
   *
   * This is 'low effort' because it's preferable for the writer to provide
   * detailed machine-readable data in the `details` field below.
   */
  readonly reason?:
    | string
    | undefined;
  /**
   * Machine-readable reason(s) for this edit.
   *
   * This is repeated to allow for standardized reason message types in
   * conjunction with workflow-specific details as part of the same write
   * record.
   */
  readonly details: readonly Value[];
}

function createBaseEdit(): Edit {
  return {
    forNode: undefined,
    version: undefined,
    expireAt: undefined,
    dataExpireAt: undefined,
    realm: undefined,
    editor: undefined,
    transactionalSet: [],
    reasons: [],
    check: undefined,
    stage: undefined,
  };
}

export const Edit: MessageFns<Edit> = {
  encode(message: Edit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.forNode !== undefined) {
      Identifier.encode(message.forNode, writer.uint32(10).fork()).join();
    }
    if (message.version !== undefined) {
      Revision.encode(message.version, writer.uint32(18).fork()).join();
    }
    if (message.expireAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expireAt), writer.uint32(26).fork()).join();
    }
    if (message.dataExpireAt !== undefined) {
      Timestamp.encode(toTimestamp(message.dataExpireAt), writer.uint32(34).fork()).join();
    }
    if (message.realm !== undefined) {
      writer.uint32(42).string(message.realm);
    }
    if (message.editor !== undefined) {
      Actor.encode(message.editor, writer.uint32(50).fork()).join();
    }
    for (const v of message.transactionalSet) {
      Identifier.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.reasons) {
      Edit_Reason.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.check !== undefined) {
      CheckDelta.encode(message.check, writer.uint32(74).fork()).join();
    }
    if (message.stage !== undefined) {
      StageDelta.encode(message.stage, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdit() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.forNode = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = Revision.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expireAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dataExpireAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.realm = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.editor = Actor.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.transactionalSet.push(Identifier.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.reasons.push(Edit_Reason.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.check = CheckDelta.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.stage = StageDelta.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Edit {
    return {
      forNode: isSet(object.forNode) ? Identifier.fromJSON(object.forNode) : undefined,
      version: isSet(object.version) ? Revision.fromJSON(object.version) : undefined,
      expireAt: isSet(object.expireAt) ? globalThis.String(object.expireAt) : undefined,
      dataExpireAt: isSet(object.dataExpireAt) ? globalThis.String(object.dataExpireAt) : undefined,
      realm: isSet(object.realm) ? globalThis.String(object.realm) : undefined,
      editor: isSet(object.editor) ? Actor.fromJSON(object.editor) : undefined,
      transactionalSet: globalThis.Array.isArray(object?.transactionalSet)
        ? object.transactionalSet.map((e: any) => Identifier.fromJSON(e))
        : [],
      reasons: globalThis.Array.isArray(object?.reasons) ? object.reasons.map((e: any) => Edit_Reason.fromJSON(e)) : [],
      check: isSet(object.check) ? CheckDelta.fromJSON(object.check) : undefined,
      stage: isSet(object.stage) ? StageDelta.fromJSON(object.stage) : undefined,
    };
  },

  toJSON(message: Edit): unknown {
    const obj: any = {};
    if (message.forNode !== undefined) {
      obj.forNode = Identifier.toJSON(message.forNode);
    }
    if (message.version !== undefined) {
      obj.version = Revision.toJSON(message.version);
    }
    if (message.expireAt !== undefined) {
      obj.expireAt = message.expireAt;
    }
    if (message.dataExpireAt !== undefined) {
      obj.dataExpireAt = message.dataExpireAt;
    }
    if (message.realm !== undefined) {
      obj.realm = message.realm;
    }
    if (message.editor !== undefined) {
      obj.editor = Actor.toJSON(message.editor);
    }
    if (message.transactionalSet?.length) {
      obj.transactionalSet = message.transactionalSet.map((e) => Identifier.toJSON(e));
    }
    if (message.reasons?.length) {
      obj.reasons = message.reasons.map((e) => Edit_Reason.toJSON(e));
    }
    if (message.check !== undefined) {
      obj.check = CheckDelta.toJSON(message.check);
    }
    if (message.stage !== undefined) {
      obj.stage = StageDelta.toJSON(message.stage);
    }
    return obj;
  },

  create(base?: DeepPartial<Edit>): Edit {
    return Edit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Edit>): Edit {
    const message = createBaseEdit() as any;
    message.forNode = (object.forNode !== undefined && object.forNode !== null)
      ? Identifier.fromPartial(object.forNode)
      : undefined;
    message.version = (object.version !== undefined && object.version !== null)
      ? Revision.fromPartial(object.version)
      : undefined;
    message.expireAt = object.expireAt ?? undefined;
    message.dataExpireAt = object.dataExpireAt ?? undefined;
    message.realm = object.realm ?? undefined;
    message.editor = (object.editor !== undefined && object.editor !== null)
      ? Actor.fromPartial(object.editor)
      : undefined;
    message.transactionalSet = object.transactionalSet?.map((e) => Identifier.fromPartial(e)) || [];
    message.reasons = object.reasons?.map((e) => Edit_Reason.fromPartial(e)) || [];
    message.check = (object.check !== undefined && object.check !== null)
      ? CheckDelta.fromPartial(object.check)
      : undefined;
    message.stage = (object.stage !== undefined && object.stage !== null)
      ? StageDelta.fromPartial(object.stage)
      : undefined;
    return message;
  },
};

function createBaseEdit_Reason(): Edit_Reason {
  return { realm: undefined, reason: undefined, details: [] };
}

export const Edit_Reason: MessageFns<Edit_Reason> = {
  encode(message: Edit_Reason, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.realm !== undefined) {
      writer.uint32(10).string(message.realm);
    }
    if (message.reason !== undefined) {
      writer.uint32(18).string(message.reason);
    }
    for (const v of message.details) {
      Value.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edit_Reason {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdit_Reason() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.realm = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.details.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Edit_Reason {
    return {
      realm: isSet(object.realm) ? globalThis.String(object.realm) : undefined,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : undefined,
      details: globalThis.Array.isArray(object?.details) ? object.details.map((e: any) => Value.fromJSON(e)) : [],
    };
  },

  toJSON(message: Edit_Reason): unknown {
    const obj: any = {};
    if (message.realm !== undefined) {
      obj.realm = message.realm;
    }
    if (message.reason !== undefined) {
      obj.reason = message.reason;
    }
    if (message.details?.length) {
      obj.details = message.details.map((e) => Value.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Edit_Reason>): Edit_Reason {
    return Edit_Reason.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Edit_Reason>): Edit_Reason {
    const message = createBaseEdit_Reason() as any;
    message.realm = object.realm ?? undefined;
    message.reason = object.reason ?? undefined;
    message.details = object.details?.map((e) => Value.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
