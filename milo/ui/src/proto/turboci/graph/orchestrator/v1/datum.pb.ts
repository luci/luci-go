// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/datum.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Identifier } from "../../ids/v1/identifier.pb";
import { Revision } from "./revision.pb";
import { Value } from "./value.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * Datum is a simple wrapper around an `Any`.
 *
 * The wrapper currently provides a way for stages in the workflow to control
 * data accessibility by mapping a realm to each Datum.
 *
 * We anticipate that in the future we will want to allow the writer of a Datum
 * to include additional indexable values to allow clients of TurboCI to e.g.
 * search for Checks whose options contain "type" with some specific value.
 */
export interface Datum {
  /**
   * The identifier of this Datum.
   *
   * This is used to map the Datum to the appropriate object (e.g. CheckOption,
   * CheckResult, etc.).
   */
  readonly identifier?:
    | Identifier
    | undefined;
  /**
   * Maps this datum to a security realm.
   *
   * If omitted, this Datum inherits the realm of the object that it belongs to
   * (i.e. Check or Check Result).
   */
  readonly realm?:
    | string
    | undefined;
  /** The version of this Datum in the database. */
  readonly version?:
    | Revision
    | undefined;
  /**
   * The actual value of this Datum.
   *
   * The TurboCI orchestrator requires that the type_url of the `value` here be
   * [pre-registered](TBD). This registration ensures that:
   *   * The proto type URL is known to the service frontend (otherwise the
   *     service frontend will reject the type).
   *   * The type is compatible in the context of this Datum (i.e. within
   *     a Check or Check.Result of a certain Kind).
   *
   * Once a type is registered, however, the Orchestrator service will not
   * require the content to be conformant to its registered type. That is
   * - Workflows may run with newer versions of the type definition for a given
   * registered type. This allows rapid prototyping of workflows without the
   * need to land and deploy schema changes ahead of time.
   *
   * The `type_url` of this value is immutable.
   */
  readonly value?: Value | undefined;
}

function createBaseDatum(): Datum {
  return { identifier: undefined, realm: undefined, version: undefined, value: undefined };
}

export const Datum: MessageFns<Datum> = {
  encode(message: Datum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifier !== undefined) {
      Identifier.encode(message.identifier, writer.uint32(10).fork()).join();
    }
    if (message.realm !== undefined) {
      writer.uint32(18).string(message.realm);
    }
    if (message.version !== undefined) {
      Revision.encode(message.version, writer.uint32(26).fork()).join();
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Datum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatum() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifier = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.realm = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = Revision.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Datum {
    return {
      identifier: isSet(object.identifier) ? Identifier.fromJSON(object.identifier) : undefined,
      realm: isSet(object.realm) ? globalThis.String(object.realm) : undefined,
      version: isSet(object.version) ? Revision.fromJSON(object.version) : undefined,
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Datum): unknown {
    const obj: any = {};
    if (message.identifier !== undefined) {
      obj.identifier = Identifier.toJSON(message.identifier);
    }
    if (message.realm !== undefined) {
      obj.realm = message.realm;
    }
    if (message.version !== undefined) {
      obj.version = Revision.toJSON(message.version);
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Datum>): Datum {
    return Datum.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Datum>): Datum {
    const message = createBaseDatum() as any;
    message.identifier = (object.identifier !== undefined && object.identifier !== null)
      ? Identifier.fromPartial(object.identifier)
      : undefined;
    message.realm = object.realm ?? undefined;
    message.version = (object.version !== undefined && object.version !== null)
      ? Revision.fromPartial(object.version)
      : undefined;
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
