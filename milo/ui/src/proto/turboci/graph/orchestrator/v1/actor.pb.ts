// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/actor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { StageAttempt } from "../../ids/v1/identifier.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/** Represents an actor which owns/created/edited a node. */
export interface Actor {
  /**
   * The StageAttempt which generated this Edit.
   *
   * This is the most common case.
   */
  readonly stageAttempt?:
    | StageAttempt
    | undefined;
  /** The Orchestrator generated this Edit. */
  readonly orchestrator?: Actor_Orchestrator | undefined;
}

/** Placeholder type for when the Orchestrator itself makes this edit. */
export interface Actor_Orchestrator {
}

function createBaseActor(): Actor {
  return { stageAttempt: undefined, orchestrator: undefined };
}

export const Actor: MessageFns<Actor> = {
  encode(message: Actor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stageAttempt !== undefined) {
      StageAttempt.encode(message.stageAttempt, writer.uint32(10).fork()).join();
    }
    if (message.orchestrator !== undefined) {
      Actor_Orchestrator.encode(message.orchestrator, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActor() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stageAttempt = StageAttempt.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orchestrator = Actor_Orchestrator.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Actor {
    return {
      stageAttempt: isSet(object.stageAttempt) ? StageAttempt.fromJSON(object.stageAttempt) : undefined,
      orchestrator: isSet(object.orchestrator) ? Actor_Orchestrator.fromJSON(object.orchestrator) : undefined,
    };
  },

  toJSON(message: Actor): unknown {
    const obj: any = {};
    if (message.stageAttempt !== undefined) {
      obj.stageAttempt = StageAttempt.toJSON(message.stageAttempt);
    }
    if (message.orchestrator !== undefined) {
      obj.orchestrator = Actor_Orchestrator.toJSON(message.orchestrator);
    }
    return obj;
  },

  create(base?: DeepPartial<Actor>): Actor {
    return Actor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Actor>): Actor {
    const message = createBaseActor() as any;
    message.stageAttempt = (object.stageAttempt !== undefined && object.stageAttempt !== null)
      ? StageAttempt.fromPartial(object.stageAttempt)
      : undefined;
    message.orchestrator = (object.orchestrator !== undefined && object.orchestrator !== null)
      ? Actor_Orchestrator.fromPartial(object.orchestrator)
      : undefined;
    return message;
  },
};

function createBaseActor_Orchestrator(): Actor_Orchestrator {
  return {};
}

export const Actor_Orchestrator: MessageFns<Actor_Orchestrator> = {
  encode(_: Actor_Orchestrator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Actor_Orchestrator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActor_Orchestrator() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Actor_Orchestrator {
    return {};
  },

  toJSON(_: Actor_Orchestrator): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Actor_Orchestrator>): Actor_Orchestrator {
    return Actor_Orchestrator.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Actor_Orchestrator>): Actor_Orchestrator {
    const message = createBaseActor_Orchestrator() as any;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
