// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/method_options.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { IdentifierKind, identifierKindFromJSON, identifierKindToJSON } from "../../ids/v1/identifier_kind.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/** MethodOptions are method options which apply to RPC method definitions. */
export interface MethodOptions {
  /**
   * Permissions that this RPC will check, including the realms and/or the
   * conditions under which they are checked.
   */
  readonly permission: readonly MethodOptions_Permission[];
}

/**
 * Which permissions this RPC may check.
 *
 * This is purely for documentation purposes.
 *
 * Example:
 *   rpc Foo(FooRequest) returns (FooResponse) {
 *     option (turboci_rpc) = {
 *       permission: {
 *         name: "turboci.checks.update"
 *         in: IDENTIFIER_KIND_CHECK
 *         for: "Check edits"
 *         for: "Check option edits"
 *       }
 *       permission: {
 *         name: "turboci.checks.globalUpdate"
 *         in: IDENTIFIER_KIND_WORK_PLAN
 *         for: "Calls without StageAttemptToken"
 *       }
 *     };
 *   }
 *
 * This indicates that the RPC requires the permission
 * "turboci.checks.update" for all check and check option edits, and ALSO
 * requires "turboci.checks.globalUpdate" for all calls to this RPC without
 * a StageAttemptToken.
 *
 * You should also refer to the documentation of `Foo` for any additional
 * details of when these permissions are checked.
 */
export interface MethodOptions_Permission {
  /** The name of the permission. */
  readonly name?:
    | string
    | undefined;
  /** The node whose realm will be checked. */
  readonly in?:
    | IdentifierKind
    | undefined;
  /** Short description of when this permission is checked. */
  readonly for: readonly string[];
}

function createBaseMethodOptions(): MethodOptions {
  return { permission: [] };
}

export const MethodOptions: MessageFns<MethodOptions> = {
  encode(message: MethodOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.permission) {
      MethodOptions_Permission.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodOptions() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.permission.push(MethodOptions_Permission.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodOptions {
    return {
      permission: globalThis.Array.isArray(object?.permission)
        ? object.permission.map((e: any) => MethodOptions_Permission.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MethodOptions): unknown {
    const obj: any = {};
    if (message.permission?.length) {
      obj.permission = message.permission.map((e) => MethodOptions_Permission.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MethodOptions>): MethodOptions {
    return MethodOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MethodOptions>): MethodOptions {
    const message = createBaseMethodOptions() as any;
    message.permission = object.permission?.map((e) => MethodOptions_Permission.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMethodOptions_Permission(): MethodOptions_Permission {
  return { name: undefined, in: undefined, for: [] };
}

export const MethodOptions_Permission: MessageFns<MethodOptions_Permission> = {
  encode(message: MethodOptions_Permission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.in !== undefined) {
      writer.uint32(16).int32(message.in);
    }
    for (const v of message.for) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodOptions_Permission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodOptions_Permission() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.in = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.for.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodOptions_Permission {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      in: isSet(object.in) ? identifierKindFromJSON(object.in) : undefined,
      for: globalThis.Array.isArray(object?.for) ? object.for.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MethodOptions_Permission): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.in !== undefined) {
      obj.in = identifierKindToJSON(message.in);
    }
    if (message.for?.length) {
      obj.for = message.for;
    }
    return obj;
  },

  create(base?: DeepPartial<MethodOptions_Permission>): MethodOptions_Permission {
    return MethodOptions_Permission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MethodOptions_Permission>): MethodOptions_Permission {
    const message = createBaseMethodOptions_Permission() as any;
    message.name = object.name ?? undefined;
    message.in = object.in ?? undefined;
    message.for = object.for?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
