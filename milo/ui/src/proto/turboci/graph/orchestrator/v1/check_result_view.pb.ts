// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/check_result_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Datum } from "./datum.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/** A view of the data for a single Check.Result. */
export interface CheckResultView {
  /** The current data for each data type in this Result. */
  readonly data: readonly Datum[];
}

function createBaseCheckResultView(): CheckResultView {
  return { data: [] };
}

export const CheckResultView: MessageFns<CheckResultView> = {
  encode(message: CheckResultView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      Datum.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckResultView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckResultView() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(Datum.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckResultView {
    return { data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Datum.fromJSON(e)) : [] };
  },

  toJSON(message: CheckResultView): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => Datum.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CheckResultView>): CheckResultView {
    return CheckResultView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckResultView>): CheckResultView {
    const message = createBaseCheckResultView() as any;
    message.data = object.data?.map((e) => Datum.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
