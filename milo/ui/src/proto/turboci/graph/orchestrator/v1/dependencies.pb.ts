// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/dependencies.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Edge } from "./edge.pb";
import { Revision } from "./revision.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * Dependencies represents a group of edges needed to unblock a containing node
 * (a Check or a Stage), as well as timestamps and satisfaction of those edges,
 * and finally the group of edges which resolved the Dependencies and unblocked
 * the containing node.
 *
 * During PLANNING, the `edges` and `predicate` fields are mutable. These
 * contains all dependency targets and any criteria for them, plus the boolean
 * logic of which subset of these edges are necessary to unblock the node.
 * The orchestrator will convert WriteNodesRequest.DependencyGroup into `edges`
 * and `predicate` for the client.
 *
 * As soon as the containing node is PLANNED, the orchestrator will begin
 * tracking resolution of the edges. As they resolved, these are recorded to the
 * the `resolution_events` field.
 *
 * Finally, once enough resolution_events are present such that the `predicate`
 * Group can be resolved, the orchestrator will advance the containing node to
 * the next state (i.e. CHECK_STATE_WAITING or STAGE_STATE_ATTEMPTING), and will
 * populate `resolved` with only the groups/edges which actually participated in
 * unblocked the containing node (this may be a subset of the propagated
 * events). At this point, no more events will be added to `resolution_events`
 * and this Dependencies message will be fully immutable.
 */
export interface Dependencies {
  /**
   * The set of all edges from the containing node to other nodes in the graph.
   *
   * These are unique by `target` and criteria.
   *
   * See `predicate` and `resolved` which refer to these.
   */
  readonly edges: readonly Edge[];
  /**
   * The logical predicate that the containing node depends on.
   *
   * The Group is a compact expression of a logical rule of which edges must be
   * satisfied before the node can be unblocked.
   *
   * Once this Group is satisfied, the node will be unblocked and move from
   * PLANNED to CHECK_STATE_WAITING or STAGE_STATE_ATTEMPTING, depending on the
   * containing node type.
   *
   * If the Group is unsatisfiable, then the Check will be immediately moved to
   * the FINAL state and a single Result will be added with type `TBD`.
   *
   * Once the containing node is CHECK_STATE_WAITING/STAGE_STATE_ATTEMPTING,
   * this field is immutable.
   *
   * Empty Groups (including the top level one here) are normalized to unset.
   */
  readonly predicate?:
    | Dependencies_Group
    | undefined;
  /**
   * While containing node is in the PLANNED state, this will accumulate all
   * incoming resolution events.
   *
   * The key is an index into the Dependencies.edges table.
   *
   * When the containing node enters PLANNED for the first time, there may be
   * several events which show up here immediately (i.e. the targets of these
   * Edges were already in a satisfying state).
   *
   * This will include a superset of edges in `resolved`.
   */
  readonly resolutionEvents: { [key: number]: Dependencies_ResolutionEvent };
  /**
   * The actual group of resolved dependencies which unblocked the containing
   * node.
   *
   * When the orchestrator recognizes that the events in `resolution_events`
   * satisfies the dependencies in `predicate`, it will advance the containing
   * node to the next state (i.e. CHECK_STATE_WAITING, STAGE_STATE_ATTEMPTING),
   * and will populate this field with just the groups and edges which
   * ultimately caused the containing node to be unblocked.
   *
   * Once written, this is immutable.
   */
  readonly resolved?: Dependencies_Group | undefined;
}

/**
 * A group of dependencies, containing edges and/or other groups, plus
 * a minimum threshold to meet to consider this Group satisfied.
 */
export interface Dependencies_Group {
  /**
   * Singular edges in this group.
   *
   * Kept sorted; values are indexes into `Dependencies.edges`.
   */
  readonly edges: readonly number[];
  /** Sub-groups in this group. */
  readonly groups: readonly Dependencies_Group[];
  /**
   * If unset, all `edges` and `groups` must be satisfied for this Group to
   * be satisfied (effectively 'AND' of edges and groups).
   *
   * If set, indicates the number of edges and groups needed to resolve this
   * Group.
   *
   * Setting threshold to `1` effectively means 'the first satisfied entry in
   * edges or groups satisfies this group' (effectively making this an OR).
   *
   * A value greater than one could be useful if you want to depend on the first
   * N of multiple possible edges.
   *
   * For example, if this Group is
   *
   *    { edges: [a, b, c], groups: [GROUP], threshold: 2 }
   *
   * Then this Group could be satisfied on the first of any:
   *   * a b
   *   * b c
   *   * a c
   *   * a GROUP
   *   * b GROUP
   *   * c GROUP
   *
   * This is also equivalent to the much more verbose disjunctive normal form:
   *
   *   { groups: [
   *     { edges: [a, b] },
   *     { edges: [b, c] },
   *     { edges: [a, c] },
   *     { edges: [a], groups: [GROUP] },
   *     { edges: [b], groups: [GROUP] },
   *     { edges: [c], groups: [GROUP] },
   *     threshold = 1,
   *   }
   *
   * NOTE: It is possible for a Group in `Dependencies.resolved` to contain
   * more edges/groups than `threshold` if all of those Edges were satisfied
   * at the time the Dependencies were resolved.
   *
   * A zero threshold will be normalized to `unset`.
   * A negative threshold is an error.
   */
  readonly threshold?: number | undefined;
}

/**
 * ResolutionEvent is a detail of when a specific target Edge in `edges`
 * was resolved for the containing node.
 *
 * This MAY include non-zero propagation time from the time that the target of
 * Edge entered a satisfying state for this Edge.
 */
export interface Dependencies_ResolutionEvent {
  /**
   * The version of the containing node which included this event.
   *
   * This MAY be substantially after the target of the edge is FINAL, e.g. if
   * the containing node was created or became PLANNED far after the target
   * was FINAL.
   */
  readonly version?:
    | Revision
    | undefined;
  /**
   * Was the criteria for this edge satisfied or not?
   *
   * By default, Edges without explicit criteria (i.e. just 'is target
   * FINAL?') will always see this as true.
   */
  readonly satisfied?: boolean | undefined;
}

export interface Dependencies_ResolutionEventsEntry {
  readonly key: number;
  readonly value: Dependencies_ResolutionEvent | undefined;
}

function createBaseDependencies(): Dependencies {
  return { edges: [], predicate: undefined, resolutionEvents: {}, resolved: undefined };
}

export const Dependencies: MessageFns<Dependencies> = {
  encode(message: Dependencies, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.edges) {
      Edge.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.predicate !== undefined) {
      Dependencies_Group.encode(message.predicate, writer.uint32(18).fork()).join();
    }
    Object.entries(message.resolutionEvents).forEach(([key, value]) => {
      Dependencies_ResolutionEventsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.resolved !== undefined) {
      Dependencies_Group.encode(message.resolved, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dependencies {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependencies() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.edges.push(Edge.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.predicate = Dependencies_Group.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = Dependencies_ResolutionEventsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.resolutionEvents[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resolved = Dependencies_Group.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dependencies {
    return {
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => Edge.fromJSON(e)) : [],
      predicate: isSet(object.predicate) ? Dependencies_Group.fromJSON(object.predicate) : undefined,
      resolutionEvents: isObject(object.resolutionEvents)
        ? Object.entries(object.resolutionEvents).reduce<{ [key: number]: Dependencies_ResolutionEvent }>(
          (acc, [key, value]) => {
            acc[globalThis.Number(key)] = Dependencies_ResolutionEvent.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      resolved: isSet(object.resolved) ? Dependencies_Group.fromJSON(object.resolved) : undefined,
    };
  },

  toJSON(message: Dependencies): unknown {
    const obj: any = {};
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => Edge.toJSON(e));
    }
    if (message.predicate !== undefined) {
      obj.predicate = Dependencies_Group.toJSON(message.predicate);
    }
    if (message.resolutionEvents) {
      const entries = Object.entries(message.resolutionEvents);
      if (entries.length > 0) {
        obj.resolutionEvents = {};
        entries.forEach(([k, v]) => {
          obj.resolutionEvents[k] = Dependencies_ResolutionEvent.toJSON(v);
        });
      }
    }
    if (message.resolved !== undefined) {
      obj.resolved = Dependencies_Group.toJSON(message.resolved);
    }
    return obj;
  },

  create(base?: DeepPartial<Dependencies>): Dependencies {
    return Dependencies.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dependencies>): Dependencies {
    const message = createBaseDependencies() as any;
    message.edges = object.edges?.map((e) => Edge.fromPartial(e)) || [];
    message.predicate = (object.predicate !== undefined && object.predicate !== null)
      ? Dependencies_Group.fromPartial(object.predicate)
      : undefined;
    message.resolutionEvents = Object.entries(object.resolutionEvents ?? {}).reduce<
      { [key: number]: Dependencies_ResolutionEvent }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = Dependencies_ResolutionEvent.fromPartial(value);
      }
      return acc;
    }, {});
    message.resolved = (object.resolved !== undefined && object.resolved !== null)
      ? Dependencies_Group.fromPartial(object.resolved)
      : undefined;
    return message;
  },
};

function createBaseDependencies_Group(): Dependencies_Group {
  return { edges: [], groups: [], threshold: undefined };
}

export const Dependencies_Group: MessageFns<Dependencies_Group> = {
  encode(message: Dependencies_Group, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.edges) {
      writer.int32(v);
    }
    writer.join();
    for (const v of message.groups) {
      Dependencies_Group.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.threshold !== undefined) {
      writer.uint32(24).int32(message.threshold);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dependencies_Group {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependencies_Group() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.edges.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.edges.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.groups.push(Dependencies_Group.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.threshold = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dependencies_Group {
    return {
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => globalThis.Number(e)) : [],
      groups: globalThis.Array.isArray(object?.groups)
        ? object.groups.map((e: any) => Dependencies_Group.fromJSON(e))
        : [],
      threshold: isSet(object.threshold) ? globalThis.Number(object.threshold) : undefined,
    };
  },

  toJSON(message: Dependencies_Group): unknown {
    const obj: any = {};
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => Math.round(e));
    }
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => Dependencies_Group.toJSON(e));
    }
    if (message.threshold !== undefined) {
      obj.threshold = Math.round(message.threshold);
    }
    return obj;
  },

  create(base?: DeepPartial<Dependencies_Group>): Dependencies_Group {
    return Dependencies_Group.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dependencies_Group>): Dependencies_Group {
    const message = createBaseDependencies_Group() as any;
    message.edges = object.edges?.map((e) => e) || [];
    message.groups = object.groups?.map((e) => Dependencies_Group.fromPartial(e)) || [];
    message.threshold = object.threshold ?? undefined;
    return message;
  },
};

function createBaseDependencies_ResolutionEvent(): Dependencies_ResolutionEvent {
  return { version: undefined, satisfied: undefined };
}

export const Dependencies_ResolutionEvent: MessageFns<Dependencies_ResolutionEvent> = {
  encode(message: Dependencies_ResolutionEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.version !== undefined) {
      Revision.encode(message.version, writer.uint32(10).fork()).join();
    }
    if (message.satisfied !== undefined) {
      writer.uint32(16).bool(message.satisfied);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dependencies_ResolutionEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependencies_ResolutionEvent() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.version = Revision.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.satisfied = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dependencies_ResolutionEvent {
    return {
      version: isSet(object.version) ? Revision.fromJSON(object.version) : undefined,
      satisfied: isSet(object.satisfied) ? globalThis.Boolean(object.satisfied) : undefined,
    };
  },

  toJSON(message: Dependencies_ResolutionEvent): unknown {
    const obj: any = {};
    if (message.version !== undefined) {
      obj.version = Revision.toJSON(message.version);
    }
    if (message.satisfied !== undefined) {
      obj.satisfied = message.satisfied;
    }
    return obj;
  },

  create(base?: DeepPartial<Dependencies_ResolutionEvent>): Dependencies_ResolutionEvent {
    return Dependencies_ResolutionEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dependencies_ResolutionEvent>): Dependencies_ResolutionEvent {
    const message = createBaseDependencies_ResolutionEvent() as any;
    message.version = (object.version !== undefined && object.version !== null)
      ? Revision.fromPartial(object.version)
      : undefined;
    message.satisfied = object.satisfied ?? undefined;
    return message;
  },
};

function createBaseDependencies_ResolutionEventsEntry(): Dependencies_ResolutionEventsEntry {
  return { key: 0, value: undefined };
}

export const Dependencies_ResolutionEventsEntry: MessageFns<Dependencies_ResolutionEventsEntry> = {
  encode(message: Dependencies_ResolutionEventsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      Dependencies_ResolutionEvent.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Dependencies_ResolutionEventsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependencies_ResolutionEventsEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Dependencies_ResolutionEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Dependencies_ResolutionEventsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? Dependencies_ResolutionEvent.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Dependencies_ResolutionEventsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Dependencies_ResolutionEvent.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Dependencies_ResolutionEventsEntry>): Dependencies_ResolutionEventsEntry {
    return Dependencies_ResolutionEventsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Dependencies_ResolutionEventsEntry>): Dependencies_ResolutionEventsEntry {
    const message = createBaseDependencies_ResolutionEventsEntry() as any;
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? Dependencies_ResolutionEvent.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
