// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/revision.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../google/protobuf/timestamp.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * Revision represents a resource version identifier.
 *
 * We use this instead of raw Timestamp messages to allow for future
 * evolution of the revision type as well as to distinguish against regular
 * Timestamps used elsewhere in the schema.
 */
export interface Revision {
  /**
   * The spanner commit timestamp which represents this revision.
   *
   * This may be rendered as a string in some contexts (e.g. as part of the
   * serialization of an Identity.CheckEdit), in which case it will be
   * "T<seconds>/<nanos>".
   */
  readonly ts?: string | undefined;
}

function createBaseRevision(): Revision {
  return { ts: undefined };
}

export const Revision: MessageFns<Revision> = {
  encode(message: Revision, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ts !== undefined) {
      Timestamp.encode(toTimestamp(message.ts), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Revision {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevision() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ts = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Revision {
    return { ts: isSet(object.ts) ? globalThis.String(object.ts) : undefined };
  },

  toJSON(message: Revision): unknown {
    const obj: any = {};
    if (message.ts !== undefined) {
      obj.ts = message.ts;
    }
    return obj;
  },

  create(base?: DeepPartial<Revision>): Revision {
    return Revision.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Revision>): Revision {
    const message = createBaseRevision() as any;
    message.ts = object.ts ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(dateStr: string): Timestamp {
  const date = new globalThis.Date(dateStr);
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): string {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis).toISOString();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
