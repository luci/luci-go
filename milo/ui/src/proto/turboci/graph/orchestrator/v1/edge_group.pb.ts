// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/edge_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Edge, Edge_Resolution } from "./edge.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * EdgeGroup represents a collection of edges and/or sub-groups.
 *
 * The number of edges/groups needed to resolve this EdgeGroup is dictated by
 * `threshold` - with an unset threshold, this will require all edges and
 * sub-groups to be resolved. With a threshold of 1, any edge or sub-group will
 * resolve this EdgeGroup, etc.
 */
export interface EdgeGroup {
  /**
   * Singular edges in this group.
   *
   * This is kept ordered by edges[].target.id.
   * There can only be one edge per target.id in this list.
   */
  readonly edges: readonly Edge[];
  /** Sub-groups in this group. */
  readonly groups: readonly EdgeGroup[];
  /**
   * If unset, all `edges` and `groups` must be resolved for this EdgeGroup to
   * be resolved (effectively 'AND' of edges and groups).
   *
   * If set, indicates the number of edges and groups needed to resolve this
   * EdgeGroup. For example, if this EdgeGroup is
   *
   *     { edges: [a, b, c], groups: [GROUP], threshold: 2}
   *
   * Then this EdgeGroup could be resolved on the first of any:
   *   * a b
   *   * b c
   *   * a c
   *   * a GROUP
   *   * b GROUP
   *   * c GROUP
   *
   * Setting this to `1` effectively means 'the first resolved entry in
   * edges or groups resolves this group' (effectively making this an OR).
   *
   * A value greater than one could be useful if you want to depend on the first
   * N of multiple possible edges.
   *
   * A zero or negative threshold will be normalized to `unset`.
   */
  readonly threshold?:
    | number
    | undefined;
  /**
   * A bubbling up of the resolution from the child edges of this group. Used to
   * easily identify which branch of the edge tree was resolved.
   *
   * Once `resolution` is set, `edges` and `groups` are frozen (so to see which
   * Edge objects caused this group to be resolved, recurse into edges and
   * groups). This is true even if after `resolution.at` some additional edges
   * became resolved. If you want to see if any of these extra edges were
   * resolved, you can just directly query for them at the time you want to
   * check for them.
   *
   * This can be set with `satisfied = false` if the Orchestrator can prove that
   * no additional evolution of `edges` and `groups` could satisfy this
   * EdgeGroup. For example, if `threshold` is set to 5 and this EdgeGroup has 5
   * entries, one of which is marked as `satisfied = false`, then we know this
   * EdgeGroup must also be unsatisfiable.
   */
  readonly resolution?: Edge_Resolution | undefined;
}

function createBaseEdgeGroup(): EdgeGroup {
  return { edges: [], groups: [], threshold: undefined, resolution: undefined };
}

export const EdgeGroup: MessageFns<EdgeGroup> = {
  encode(message: EdgeGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.edges) {
      Edge.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.groups) {
      EdgeGroup.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.threshold !== undefined) {
      writer.uint32(24).int32(message.threshold);
    }
    if (message.resolution !== undefined) {
      Edge_Resolution.encode(message.resolution, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EdgeGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdgeGroup() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.edges.push(Edge.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.groups.push(EdgeGroup.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.threshold = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resolution = Edge_Resolution.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EdgeGroup {
    return {
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => Edge.fromJSON(e)) : [],
      groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e: any) => EdgeGroup.fromJSON(e)) : [],
      threshold: isSet(object.threshold) ? globalThis.Number(object.threshold) : undefined,
      resolution: isSet(object.resolution) ? Edge_Resolution.fromJSON(object.resolution) : undefined,
    };
  },

  toJSON(message: EdgeGroup): unknown {
    const obj: any = {};
    if (message.edges?.length) {
      obj.edges = message.edges.map((e) => Edge.toJSON(e));
    }
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => EdgeGroup.toJSON(e));
    }
    if (message.threshold !== undefined) {
      obj.threshold = Math.round(message.threshold);
    }
    if (message.resolution !== undefined) {
      obj.resolution = Edge_Resolution.toJSON(message.resolution);
    }
    return obj;
  },

  create(base?: DeepPartial<EdgeGroup>): EdgeGroup {
    return EdgeGroup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EdgeGroup>): EdgeGroup {
    const message = createBaseEdgeGroup() as any;
    message.edges = object.edges?.map((e) => Edge.fromPartial(e)) || [];
    message.groups = object.groups?.map((e) => EdgeGroup.fromPartial(e)) || [];
    message.threshold = object.threshold ?? undefined;
    message.resolution = (object.resolution !== undefined && object.resolution !== null)
      ? Edge_Resolution.fromPartial(object.resolution)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
