// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/query_nodes_response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Identifier } from "../../ids/v1/identifier.pb";
import { GraphView } from "./graph_view.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/** Response message for TurboCIGraphService.QueryNodes. */
export interface QueryNodesResponse {
  /**
   * The graph view of the nodes matching the query.
   *
   * Indexed by WorkPlan id.
   *
   * The `version` field of each GraphView will always be identical.
   */
  readonly graph: { [key: string]: GraphView };
  /** A list of explicitly-selected nodes which were not found in the graph. */
  readonly absent: readonly Identifier[];
}

export interface QueryNodesResponse_GraphEntry {
  readonly key: string;
  readonly value: GraphView | undefined;
}

function createBaseQueryNodesResponse(): QueryNodesResponse {
  return { graph: {}, absent: [] };
}

export const QueryNodesResponse: MessageFns<QueryNodesResponse> = {
  encode(message: QueryNodesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.graph).forEach(([key, value]) => {
      QueryNodesResponse_GraphEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    for (const v of message.absent) {
      Identifier.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNodesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNodesResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = QueryNodesResponse_GraphEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.graph[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.absent.push(Identifier.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNodesResponse {
    return {
      graph: isObject(object.graph)
        ? Object.entries(object.graph).reduce<{ [key: string]: GraphView }>((acc, [key, value]) => {
          acc[key] = GraphView.fromJSON(value);
          return acc;
        }, {})
        : {},
      absent: globalThis.Array.isArray(object?.absent) ? object.absent.map((e: any) => Identifier.fromJSON(e)) : [],
    };
  },

  toJSON(message: QueryNodesResponse): unknown {
    const obj: any = {};
    if (message.graph) {
      const entries = Object.entries(message.graph);
      if (entries.length > 0) {
        obj.graph = {};
        entries.forEach(([k, v]) => {
          obj.graph[k] = GraphView.toJSON(v);
        });
      }
    }
    if (message.absent?.length) {
      obj.absent = message.absent.map((e) => Identifier.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNodesResponse>): QueryNodesResponse {
    return QueryNodesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNodesResponse>): QueryNodesResponse {
    const message = createBaseQueryNodesResponse() as any;
    message.graph = Object.entries(object.graph ?? {}).reduce<{ [key: string]: GraphView }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = GraphView.fromPartial(value);
      }
      return acc;
    }, {});
    message.absent = object.absent?.map((e) => Identifier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryNodesResponse_GraphEntry(): QueryNodesResponse_GraphEntry {
  return { key: "", value: undefined };
}

export const QueryNodesResponse_GraphEntry: MessageFns<QueryNodesResponse_GraphEntry> = {
  encode(message: QueryNodesResponse_GraphEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      GraphView.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryNodesResponse_GraphEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryNodesResponse_GraphEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GraphView.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryNodesResponse_GraphEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? GraphView.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: QueryNodesResponse_GraphEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = GraphView.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryNodesResponse_GraphEntry>): QueryNodesResponse_GraphEntry {
    return QueryNodesResponse_GraphEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryNodesResponse_GraphEntry>): QueryNodesResponse_GraphEntry {
    const message = createBaseQueryNodesResponse_GraphEntry() as any;
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? GraphView.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
