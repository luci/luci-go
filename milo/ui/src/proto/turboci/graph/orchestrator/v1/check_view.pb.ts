// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/check_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Check } from "./check.pb";
import { CheckEditView } from "./check_edit_view.pb";
import { CheckResultView } from "./check_result_view.pb";
import { Datum } from "./datum.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * CheckView is a collated, partial, view of a single Check and the nodes
 * which belong to it.
 */
export interface CheckView {
  /** The Check itself - always present. */
  readonly check?:
    | Check
    | undefined;
  /**
   * Data for the Check's options which are visible and of a type which was
   * requested.
   */
  readonly optionData: readonly Datum[];
  /**
   * CheckEdits for this Check which are being read.
   *
   * Some CheckEdits may be omitted if the user did not request them.
   */
  readonly edits: readonly CheckEditView[];
  /**
   * Result data for this Check which is being read.
   *
   * Matches 1:1 with Check.results.
   *
   * Some CheckResultViews may be empty if the user did not request those data
   * types or didn't have permission to see them.
   */
  readonly results: readonly CheckResultView[];
}

function createBaseCheckView(): CheckView {
  return { check: undefined, optionData: [], edits: [], results: [] };
}

export const CheckView: MessageFns<CheckView> = {
  encode(message: CheckView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.check !== undefined) {
      Check.encode(message.check, writer.uint32(10).fork()).join();
    }
    for (const v of message.optionData) {
      Datum.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.edits) {
      CheckEditView.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.results) {
      CheckResultView.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckView() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.check = Check.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.optionData.push(Datum.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.edits.push(CheckEditView.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.results.push(CheckResultView.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckView {
    return {
      check: isSet(object.check) ? Check.fromJSON(object.check) : undefined,
      optionData: globalThis.Array.isArray(object?.optionData)
        ? object.optionData.map((e: any) => Datum.fromJSON(e))
        : [],
      edits: globalThis.Array.isArray(object?.edits) ? object.edits.map((e: any) => CheckEditView.fromJSON(e)) : [],
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => CheckResultView.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CheckView): unknown {
    const obj: any = {};
    if (message.check !== undefined) {
      obj.check = Check.toJSON(message.check);
    }
    if (message.optionData?.length) {
      obj.optionData = message.optionData.map((e) => Datum.toJSON(e));
    }
    if (message.edits?.length) {
      obj.edits = message.edits.map((e) => CheckEditView.toJSON(e));
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => CheckResultView.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CheckView>): CheckView {
    return CheckView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckView>): CheckView {
    const message = createBaseCheckView() as any;
    message.check = (object.check !== undefined && object.check !== null) ? Check.fromPartial(object.check) : undefined;
    message.optionData = object.optionData?.map((e) => Datum.fromPartial(e)) || [];
    message.edits = object.edits?.map((e) => CheckEditView.fromPartial(e)) || [];
    message.results = object.results?.map((e) => CheckResultView.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
