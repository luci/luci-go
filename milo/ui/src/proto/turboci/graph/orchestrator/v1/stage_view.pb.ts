// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/orchestrator/v1/stage_view.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Stage } from "./stage.pb";
import { StageEditView } from "./stage_edit_view.pb";

export const protobufPackage = "turboci.graph.orchestrator.v1";

/**
 * StageView is a collated, partial, view of a single Stage and the nodes
 * which belong to it.
 */
export interface StageView {
  /** The Stage itself - always present. */
  readonly stage?:
    | Stage
    | undefined;
  /**
   * StageEdits for this Stage.
   *
   * Sorted by `edit.version`.
   */
  readonly edits: readonly StageEditView[];
}

function createBaseStageView(): StageView {
  return { stage: undefined, edits: [] };
}

export const StageView: MessageFns<StageView> = {
  encode(message: StageView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stage !== undefined) {
      Stage.encode(message.stage, writer.uint32(10).fork()).join();
    }
    for (const v of message.edits) {
      StageEditView.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StageView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStageView() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stage = Stage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.edits.push(StageEditView.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StageView {
    return {
      stage: isSet(object.stage) ? Stage.fromJSON(object.stage) : undefined,
      edits: globalThis.Array.isArray(object?.edits) ? object.edits.map((e: any) => StageEditView.fromJSON(e)) : [],
    };
  },

  toJSON(message: StageView): unknown {
    const obj: any = {};
    if (message.stage !== undefined) {
      obj.stage = Stage.toJSON(message.stage);
    }
    if (message.edits?.length) {
      obj.edits = message.edits.map((e) => StageEditView.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StageView>): StageView {
    return StageView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StageView>): StageView {
    const message = createBaseStageView() as any;
    message.stage = (object.stage !== undefined && object.stage !== null) ? Stage.fromPartial(object.stage) : undefined;
    message.edits = object.edits?.map((e) => StageEditView.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
