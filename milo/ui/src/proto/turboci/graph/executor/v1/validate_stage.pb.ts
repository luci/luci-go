// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/executor/v1/validate_stage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ExecutionPolicy } from "../../orchestrator/v1/execution_policy.pb";
import { Stage } from "../../orchestrator/v1/stage.pb";

export const protobufPackage = "turboci.graph.executor.v1";

/** Request to validate a stage before it is inserted into the graph. */
export interface ValidateStageRequest {
  /** Stage to validate. */
  readonly stage?: Stage | undefined;
}

/** Response to a stage validation request. */
export interface ValidateStageResponse {
  /** Validated execution policy for the stage. */
  readonly executionPolicy?: ExecutionPolicy | undefined;
}

function createBaseValidateStageRequest(): ValidateStageRequest {
  return { stage: undefined };
}

export const ValidateStageRequest: MessageFns<ValidateStageRequest> = {
  encode(message: ValidateStageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stage !== undefined) {
      Stage.encode(message.stage, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateStageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateStageRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stage = Stage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateStageRequest {
    return { stage: isSet(object.stage) ? Stage.fromJSON(object.stage) : undefined };
  },

  toJSON(message: ValidateStageRequest): unknown {
    const obj: any = {};
    if (message.stage !== undefined) {
      obj.stage = Stage.toJSON(message.stage);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateStageRequest>): ValidateStageRequest {
    return ValidateStageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateStageRequest>): ValidateStageRequest {
    const message = createBaseValidateStageRequest() as any;
    message.stage = (object.stage !== undefined && object.stage !== null) ? Stage.fromPartial(object.stage) : undefined;
    return message;
  },
};

function createBaseValidateStageResponse(): ValidateStageResponse {
  return { executionPolicy: undefined };
}

export const ValidateStageResponse: MessageFns<ValidateStageResponse> = {
  encode(message: ValidateStageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.executionPolicy !== undefined) {
      ExecutionPolicy.encode(message.executionPolicy, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateStageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateStageResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.executionPolicy = ExecutionPolicy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateStageResponse {
    return {
      executionPolicy: isSet(object.executionPolicy) ? ExecutionPolicy.fromJSON(object.executionPolicy) : undefined,
    };
  },

  toJSON(message: ValidateStageResponse): unknown {
    const obj: any = {};
    if (message.executionPolicy !== undefined) {
      obj.executionPolicy = ExecutionPolicy.toJSON(message.executionPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<ValidateStageResponse>): ValidateStageResponse {
    return ValidateStageResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ValidateStageResponse>): ValidateStageResponse {
    const message = createBaseValidateStageResponse() as any;
    message.executionPolicy = (object.executionPolicy !== undefined && object.executionPolicy !== null)
      ? ExecutionPolicy.fromPartial(object.executionPolicy)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
