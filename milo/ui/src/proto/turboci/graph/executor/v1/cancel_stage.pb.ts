// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.32.1
// source: turboci/graph/executor/v1/cancel_stage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { StageAttempt } from "../../ids/v1/identifier.pb";
import { Stage } from "../../orchestrator/v1/stage.pb";

export const protobufPackage = "turboci.graph.executor.v1";

/** Request to cancel an asynchronous stage attempt. */
export interface CancelStageRequest {
  /** Stage with the attempt being canceled. */
  readonly stage?:
    | Stage
    | undefined;
  /** ID of the stage attempt to cancel. */
  readonly attempt?:
    | StageAttempt
    | undefined;
  /**
   * A token generated by the orchestrator for the executor to perform updates
   * to the workflow resources (checks and/or stages).
   */
  readonly stageAttemptToken?: string | undefined;
}

/** Response to cancel a stage attempt. */
export interface CancelStageResponse {
}

function createBaseCancelStageRequest(): CancelStageRequest {
  return { stage: undefined, attempt: undefined, stageAttemptToken: undefined };
}

export const CancelStageRequest: MessageFns<CancelStageRequest> = {
  encode(message: CancelStageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stage !== undefined) {
      Stage.encode(message.stage, writer.uint32(10).fork()).join();
    }
    if (message.attempt !== undefined) {
      StageAttempt.encode(message.attempt, writer.uint32(18).fork()).join();
    }
    if (message.stageAttemptToken !== undefined) {
      writer.uint32(26).string(message.stageAttemptToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelStageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelStageRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stage = Stage.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.attempt = StageAttempt.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.stageAttemptToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelStageRequest {
    return {
      stage: isSet(object.stage) ? Stage.fromJSON(object.stage) : undefined,
      attempt: isSet(object.attempt) ? StageAttempt.fromJSON(object.attempt) : undefined,
      stageAttemptToken: isSet(object.stageAttemptToken) ? globalThis.String(object.stageAttemptToken) : undefined,
    };
  },

  toJSON(message: CancelStageRequest): unknown {
    const obj: any = {};
    if (message.stage !== undefined) {
      obj.stage = Stage.toJSON(message.stage);
    }
    if (message.attempt !== undefined) {
      obj.attempt = StageAttempt.toJSON(message.attempt);
    }
    if (message.stageAttemptToken !== undefined) {
      obj.stageAttemptToken = message.stageAttemptToken;
    }
    return obj;
  },

  create(base?: DeepPartial<CancelStageRequest>): CancelStageRequest {
    return CancelStageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CancelStageRequest>): CancelStageRequest {
    const message = createBaseCancelStageRequest() as any;
    message.stage = (object.stage !== undefined && object.stage !== null) ? Stage.fromPartial(object.stage) : undefined;
    message.attempt = (object.attempt !== undefined && object.attempt !== null)
      ? StageAttempt.fromPartial(object.attempt)
      : undefined;
    message.stageAttemptToken = object.stageAttemptToken ?? undefined;
    return message;
  },
};

function createBaseCancelStageResponse(): CancelStageResponse {
  return {};
}

export const CancelStageResponse: MessageFns<CancelStageResponse> = {
  encode(_: CancelStageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelStageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelStageResponse() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CancelStageResponse {
    return {};
  },

  toJSON(_: CancelStageResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CancelStageResponse>): CancelStageResponse {
    return CancelStageResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CancelStageResponse>): CancelStageResponse {
    const message = createBaseCancelStageResponse() as any;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
