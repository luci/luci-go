// Copyright 2020 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: go.chromium.org/luci/milo/proto/v1/rpc.proto

package milopb

import prpc "go.chromium.org/luci/grpc/prpc"

import (
	context "context"
	proto "go.chromium.org/luci/buildbucket/proto"
	git "go.chromium.org/luci/common/proto/git"
	gitiles "go.chromium.org/luci/common/proto/gitiles"
	projectconfig "go.chromium.org/luci/milo/proto/projectconfig"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request message for `ProxyGitilesLog` RPC.
type ProxyGitilesLogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The host to send the gitiles Log request to.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The gitiles Log request.
	Request       *gitiles.LogRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProxyGitilesLogRequest) Reset() {
	*x = ProxyGitilesLogRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyGitilesLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyGitilesLogRequest) ProtoMessage() {}

func (x *ProxyGitilesLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyGitilesLogRequest.ProtoReflect.Descriptor instead.
func (*ProxyGitilesLogRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *ProxyGitilesLogRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ProxyGitilesLogRequest) GetRequest() *gitiles.LogRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// A request message for `QueryBlamelist` RPC.
type QueryBlamelistRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Gitiles commit of the build.
	//
	// This defines the end_commit of the blamelist.
	// It should be set to the output Gitiles commit of the build.
	// Input Gitiles commit should be used when output gitiles commit is not
	// available.
	GitilesCommit *proto.GitilesCommit `protobuf:"bytes,1,opt,name=gitiles_commit,json=gitilesCommit,proto3" json:"gitiles_commit,omitempty"`
	// The context builder of the blamelist.
	//
	// The start commit of the blamelist is the closest ancestor commit with an
	// associated build that is from the same builder and is not expired,
	// cancelled, or infra-failed.
	Builder *proto.BuilderID `protobuf:"bytes,2,opt,name=builder,proto3" json:"builder,omitempty"`
	// Optional. The maximum number of commits to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 commits will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `QueryBlamelist` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all parameters provided to `QueryBlamelist`, with the
	// exception of page_size and page_token, must match the call that provided
	// the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// This field is unused.
	//
	// TODO(crbugs/1047893): remove this field in the once no clients depends on
	// this.
	MultiProjectSupport bool `protobuf:"varint,5,opt,name=multi_project_support,json=multiProjectSupport,proto3" json:"multi_project_support,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QueryBlamelistRequest) Reset() {
	*x = QueryBlamelistRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryBlamelistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBlamelistRequest) ProtoMessage() {}

func (x *QueryBlamelistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBlamelistRequest.ProtoReflect.Descriptor instead.
func (*QueryBlamelistRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *QueryBlamelistRequest) GetGitilesCommit() *proto.GitilesCommit {
	if x != nil {
		return x.GitilesCommit
	}
	return nil
}

func (x *QueryBlamelistRequest) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *QueryBlamelistRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryBlamelistRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *QueryBlamelistRequest) GetMultiProjectSupport() bool {
	if x != nil {
		return x.MultiProjectSupport
	}
	return false
}

// A response message for QueryBlamelist RPC.
type QueryBlamelistResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The commits from the blamelist of the build, in reverse chronological
	// order.
	Commits []*git.Commit `protobuf:"bytes,1,rep,name=commits,proto3" json:"commits,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The repo commit immediately preceding |commits|. Useful for creating
	// git log queries, which are exclusive of the first commit.
	// Unset when |commits| includes the first commit in the repository.
	PrecedingCommit *git.Commit `protobuf:"bytes,3,opt,name=preceding_commit,json=precedingCommit,proto3" json:"preceding_commit,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryBlamelistResponse) Reset() {
	*x = QueryBlamelistResponse{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryBlamelistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBlamelistResponse) ProtoMessage() {}

func (x *QueryBlamelistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBlamelistResponse.ProtoReflect.Descriptor instead.
func (*QueryBlamelistResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *QueryBlamelistResponse) GetCommits() []*git.Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *QueryBlamelistResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *QueryBlamelistResponse) GetPrecedingCommit() *git.Commit {
	if x != nil {
		return x.PrecedingCommit
	}
	return nil
}

// A stateless page token for QueryBlamelist RPC.
type QueryBlamelistPageToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The first commit in the next page.
	NextCommitId  string `protobuf:"bytes,2,opt,name=next_commit_id,json=nextCommitId,proto3" json:"next_commit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryBlamelistPageToken) Reset() {
	*x = QueryBlamelistPageToken{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryBlamelistPageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBlamelistPageToken) ProtoMessage() {}

func (x *QueryBlamelistPageToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBlamelistPageToken.ProtoReflect.Descriptor instead.
func (*QueryBlamelistPageToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *QueryBlamelistPageToken) GetNextCommitId() string {
	if x != nil {
		return x.NextCommitId
	}
	return ""
}

// A request message for `ListProjects` RPC.
type ListProjectsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. The maxium number of projects to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 projects will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListProjects`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all parameters provided to `ListProjects`, with the
	// exception of page_size and page_token, must match the call that provided
	// the page token.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *ListProjectsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProjectsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for `ListProjects` RPC.
type ListProjectsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of matched projects.
	//
	// Projects are ordered by their string ID
	Projects []*ProjectListItem `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *ListProjectsResponse) GetProjects() []*ProjectListItem {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListProjectsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A single project in a ListProjectsResponse.
type ProjectListItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project id.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The url of the project logo.
	LogoUrl       string `protobuf:"bytes,2,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectListItem) Reset() {
	*x = ProjectListItem{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectListItem) ProtoMessage() {}

func (x *ProjectListItem) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectListItem.ProtoReflect.Descriptor instead.
func (*ProjectListItem) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *ProjectListItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectListItem) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

// A stateless page token for `ListProjects` RPC.
type ListProjectsPageToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The index of the next project from all projects.
	NextProjectIndex int32 `protobuf:"varint,3,opt,name=next_project_index,json=nextProjectIndex,proto3" json:"next_project_index,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListProjectsPageToken) Reset() {
	*x = ListProjectsPageToken{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsPageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsPageToken) ProtoMessage() {}

func (x *ListProjectsPageToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsPageToken.ProtoReflect.Descriptor instead.
func (*ListProjectsPageToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *ListProjectsPageToken) GetNextProjectIndex() int32 {
	if x != nil {
		return x.NextProjectIndex
	}
	return 0
}

type GetProjectCfgRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project name.
	Project       string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectCfgRequest) Reset() {
	*x = GetProjectCfgRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectCfgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectCfgRequest) ProtoMessage() {}

func (x *GetProjectCfgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectCfgRequest.ProtoReflect.Descriptor instead.
func (*GetProjectCfgRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetProjectCfgRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// A request message for `QueryRecentBuilds` RPC.
type QueryRecentBuildsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The builder to query the build history from.
	Builder *proto.BuilderID `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	// Optional. The maxium number of builds to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 25 builds will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `QueryRecentBuilds`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all parameters provided to `QueryRecentBuilds`, with
	// the exception of page_size and page_token, must match the call that
	// provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRecentBuildsRequest) Reset() {
	*x = QueryRecentBuildsRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRecentBuildsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecentBuildsRequest) ProtoMessage() {}

func (x *QueryRecentBuildsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecentBuildsRequest.ProtoReflect.Descriptor instead.
func (*QueryRecentBuildsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *QueryRecentBuildsRequest) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *QueryRecentBuildsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryRecentBuildsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for `QueryRecentBuilds` RPC.
type QueryRecentBuildsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Recent builds. Ordered by `CreateTime`.
	// Only Id, Builder, Number, CreateTime, Status, Critical are populated.
	Builds []*proto.Build `protobuf:"bytes,1,rep,name=builds,proto3" json:"builds,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryRecentBuildsResponse) Reset() {
	*x = QueryRecentBuildsResponse{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRecentBuildsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecentBuildsResponse) ProtoMessage() {}

func (x *QueryRecentBuildsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecentBuildsResponse.ProtoReflect.Descriptor instead.
func (*QueryRecentBuildsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *QueryRecentBuildsResponse) GetBuilds() []*proto.Build {
	if x != nil {
		return x.Builds
	}
	return nil
}

func (x *QueryRecentBuildsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A request message for `ListBuilders` RPC.
type ListBuildersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required only when `group` is specified. The project to query the builders
	// from.
	//
	// When specified, query all builders in the project as well as any external
	// builders  referenced by the consoles in the project.
	// When omitted, query all builders in any project.
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Optional. The group/console to query the builders from.
	//
	// When omitted, all builders from the project is returned. Including all
	// builders defined in the consoles, builder groups, and buildbucket.
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// Optional. The maxium number of builders to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 100 builders will be returned.
	// The maximum value is 10000; values above 10000 will be coerced to 10000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListBuilders`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all parameters provided to `ListBuilders`, with the
	// exception of page_size and page_token, must match the call that provided
	// the page token.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBuildersRequest) Reset() {
	*x = ListBuildersRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBuildersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildersRequest) ProtoMessage() {}

func (x *ListBuildersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildersRequest.ProtoReflect.Descriptor instead.
func (*ListBuildersRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *ListBuildersRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListBuildersRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ListBuildersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBuildersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A response message for `ListBuilders` RPC.
type ListBuildersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of matched builders.
	//
	// Builders are ordered by their canonical string ID
	// (i.e. "{project}/{bucket}/{builder}") with the exception that builders from
	// `ListBuildersRequest.project` always come before builders from other
	// projects.
	// Only builder IDs are populated for now.
	Builders []*proto.BuilderItem `protobuf:"bytes,1,rep,name=builders,proto3" json:"builders,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBuildersResponse) Reset() {
	*x = ListBuildersResponse{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBuildersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildersResponse) ProtoMessage() {}

func (x *ListBuildersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildersResponse.ProtoReflect.Descriptor instead.
func (*ListBuildersResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *ListBuildersResponse) GetBuilders() []*proto.BuilderItem {
	if x != nil {
		return x.Builders
	}
	return nil
}

func (x *ListBuildersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// A stateless page token for `ListBuilders` RPC.
type ListBuildersPageToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The index of the next builder from all cached builders from buildbucket.
	//
	// Should not coexist with `NextMiloBuilderIndex`.
	NextBuildbucketBuilderIndex int32 `protobuf:"varint,3,opt,name=next_buildbucket_builder_index,json=nextBuildbucketBuilderIndex,proto3" json:"next_buildbucket_builder_index,omitempty"`
	// The index of the next builder from Milo project definition.
	//
	// Should not coexist with `NextBuildbucketBuilderIndex`.
	NextMiloBuilderIndex int32 `protobuf:"varint,2,opt,name=next_milo_builder_index,json=nextMiloBuilderIndex,proto3" json:"next_milo_builder_index,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ListBuildersPageToken) Reset() {
	*x = ListBuildersPageToken{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBuildersPageToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBuildersPageToken) ProtoMessage() {}

func (x *ListBuildersPageToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBuildersPageToken.ProtoReflect.Descriptor instead.
func (*ListBuildersPageToken) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *ListBuildersPageToken) GetNextBuildbucketBuilderIndex() int32 {
	if x != nil {
		return x.NextBuildbucketBuilderIndex
	}
	return 0
}

func (x *ListBuildersPageToken) GetNextMiloBuilderIndex() int32 {
	if x != nil {
		return x.NextMiloBuilderIndex
	}
	return 0
}

// A request message for `QueryBuilderStats` RPC.
type QueryBuilderStatsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The builder to query the stats from.
	Builder       *proto.BuilderID `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryBuilderStatsRequest) Reset() {
	*x = QueryBuilderStatsRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryBuilderStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBuilderStatsRequest) ProtoMessage() {}

func (x *QueryBuilderStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBuilderStatsRequest.ProtoReflect.Descriptor instead.
func (*QueryBuilderStatsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *QueryBuilderStatsRequest) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

// A message that contains some basic stats of a builder.
type BuilderStats struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The builder that the stats belongs to.
	Builder *proto.BuilderID `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	// The number of pending builds associated with the builder.
	PendingBuildsCount int32 `protobuf:"varint,2,opt,name=pending_builds_count,json=pendingBuildsCount,proto3" json:"pending_builds_count,omitempty"`
	// The number of running builds associated with the builder.
	RunningBuildsCount int32 `protobuf:"varint,3,opt,name=running_builds_count,json=runningBuildsCount,proto3" json:"running_builds_count,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BuilderStats) Reset() {
	*x = BuilderStats{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuilderStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuilderStats) ProtoMessage() {}

func (x *BuilderStats) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuilderStats.ProtoReflect.Descriptor instead.
func (*BuilderStats) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *BuilderStats) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *BuilderStats) GetPendingBuildsCount() int32 {
	if x != nil {
		return x.PendingBuildsCount
	}
	return 0
}

func (x *BuilderStats) GetRunningBuildsCount() int32 {
	if x != nil {
		return x.RunningBuildsCount
	}
	return 0
}

// A request message for `BatchCheckPermissions` RPC.
type BatchCheckPermissionsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The realm to check the permissions against.
	Realm string `protobuf:"bytes,1,opt,name=realm,proto3" json:"realm,omitempty"`
	// String representation of the permissions.
	//
	// Permissions must have the following format: `<service>.<subject>.<verb>`.
	//
	// N.B. Only permissions registered [here][1] are allowed.
	//
	// [1]: https://source.corp.google.com/h/github/googlesource/codesearch/+/master:luci/luci-go/milo/rpc/batch_check_permissions.go;l=26;drc=e952557609eade6037c66866ebc00c506d8800a8
	Permissions   []string `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCheckPermissionsRequest) Reset() {
	*x = BatchCheckPermissionsRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCheckPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckPermissionsRequest) ProtoMessage() {}

func (x *BatchCheckPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckPermissionsRequest.ProtoReflect.Descriptor instead.
func (*BatchCheckPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *BatchCheckPermissionsRequest) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *BatchCheckPermissionsRequest) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// A response message for `BatchCheckPermissions` RPC.
type BatchCheckPermissionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A map of permission check results.
	//
	// The key is the permission name and the value is whether the user has the
	// permission.
	Results       map[string]bool `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCheckPermissionsResponse) Reset() {
	*x = BatchCheckPermissionsResponse{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCheckPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCheckPermissionsResponse) ProtoMessage() {}

func (x *BatchCheckPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCheckPermissionsResponse.ProtoReflect.Descriptor instead.
func (*BatchCheckPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *BatchCheckPermissionsResponse) GetResults() map[string]bool {
	if x != nil {
		return x.Results
	}
	return nil
}

// Represents a function Console -> bool.
// Empty message matches all consoles.
type ConsolePredicate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A console must belong to this project.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// A console must include this builder.
	Builder       *proto.BuilderID `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsolePredicate) Reset() {
	*x = ConsolePredicate{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsolePredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsolePredicate) ProtoMessage() {}

func (x *ConsolePredicate) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsolePredicate.ProtoReflect.Descriptor instead.
func (*ConsolePredicate) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *ConsolePredicate) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ConsolePredicate) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

type QueryConsolesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A console in the response must satisfy this predicate.
	Predicate *ConsolePredicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// Optional. The maxium number of consoles to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 25 consoles will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListBuilders`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all parameters provided to `ListBuilders`, with the
	// exception of page_size and page_token, must match the call that provided
	// the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryConsolesRequest) Reset() {
	*x = QueryConsolesRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryConsolesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConsolesRequest) ProtoMessage() {}

func (x *QueryConsolesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConsolesRequest.ProtoReflect.Descriptor instead.
func (*QueryConsolesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *QueryConsolesRequest) GetPredicate() *ConsolePredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *QueryConsolesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryConsolesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type QueryConsolesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of matched consoles.
	Consoles []*projectconfig.Console `protobuf:"bytes,1,rep,name=consoles,proto3" json:"consoles,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryConsolesResponse) Reset() {
	*x = QueryConsolesResponse{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryConsolesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConsolesResponse) ProtoMessage() {}

func (x *QueryConsolesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConsolesResponse.ProtoReflect.Descriptor instead.
func (*QueryConsolesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *QueryConsolesResponse) GetConsoles() []*projectconfig.Console {
	if x != nil {
		return x.Consoles
	}
	return nil
}

func (x *QueryConsolesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type QueryConsoleSnapshotsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A console in the response must satisfy this predicate.
	// `predicate.project` is required.
	Predicate *ConsolePredicate `protobuf:"bytes,1,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// Optional. The maximum number of consoles to return.
	//
	// The service may return fewer than this value.
	// If unspecified, at most 25 consoles will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `QueryConsoleSnapshots`
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all parameters provided to `QueryConsoleSnapshots`, with
	// the exception of page_size and page_token, must match the call that
	// provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryConsoleSnapshotsRequest) Reset() {
	*x = QueryConsoleSnapshotsRequest{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryConsoleSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConsoleSnapshotsRequest) ProtoMessage() {}

func (x *QueryConsoleSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConsoleSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*QueryConsoleSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *QueryConsoleSnapshotsRequest) GetPredicate() *ConsolePredicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *QueryConsoleSnapshotsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryConsoleSnapshotsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type BuilderSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The builder this snapshot belongs to.
	Builder *proto.BuilderID `protobuf:"bytes,1,opt,name=builder,proto3" json:"builder,omitempty"`
	// The latest build associated with the builder at the time the snapshot is
	// taken. Nil if there's no associated build.
	Build         *proto.Build `protobuf:"bytes,2,opt,name=build,proto3" json:"build,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuilderSnapshot) Reset() {
	*x = BuilderSnapshot{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuilderSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuilderSnapshot) ProtoMessage() {}

func (x *BuilderSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuilderSnapshot.ProtoReflect.Descriptor instead.
func (*BuilderSnapshot) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *BuilderSnapshot) GetBuilder() *proto.BuilderID {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *BuilderSnapshot) GetBuild() *proto.Build {
	if x != nil {
		return x.Build
	}
	return nil
}

type ConsoleSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The console this snapshot belongs to.
	Console *projectconfig.Console `protobuf:"bytes,1,opt,name=console,proto3" json:"console,omitempty"`
	// The snapshots of all the builders in the console.
	// In the same order as `console.builders`.
	BuilderSnapshots []*BuilderSnapshot `protobuf:"bytes,2,rep,name=builder_snapshots,json=builderSnapshots,proto3" json:"builder_snapshots,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConsoleSnapshot) Reset() {
	*x = ConsoleSnapshot{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsoleSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleSnapshot) ProtoMessage() {}

func (x *ConsoleSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleSnapshot.ProtoReflect.Descriptor instead.
func (*ConsoleSnapshot) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *ConsoleSnapshot) GetConsole() *projectconfig.Console {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *ConsoleSnapshot) GetBuilderSnapshots() []*BuilderSnapshot {
	if x != nil {
		return x.BuilderSnapshots
	}
	return nil
}

type QueryConsoleSnapshotsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of matched consoles.
	Snapshots []*ConsoleSnapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryConsoleSnapshotsResponse) Reset() {
	*x = QueryConsoleSnapshotsResponse{}
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryConsoleSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConsoleSnapshotsResponse) ProtoMessage() {}

func (x *QueryConsoleSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConsoleSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*QueryConsoleSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *QueryConsoleSnapshotsResponse) GetSnapshots() []*ConsoleSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *QueryConsoleSnapshotsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

var File_go_chromium_org_luci_milo_proto_v1_rpc_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x69, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x67, 0x6f,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75,
	0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x69, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x37, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x67, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x67, 0x6f, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3b, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x6d, 0x69, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x69,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x69, 0x74,
	0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x69,
	0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9f,
	0x01, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x0f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x22, 0x3f, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x79, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x3c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x22, 0x45, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x30, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x66, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x77, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x43, 0x0a, 0x1e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x69, 0x6c,
	0x6f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x4d, 0x69, 0x6c, 0x6f, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4f, 0x0a, 0x18, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xa7, 0x01, 0x0a,
	0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf,
	0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x61, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33,
	0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x65, 0x72, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x73, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x05,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63,
	0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x22, 0x84, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69,
	0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xd0, 0x07, 0x0a, 0x0c, 0x4d, 0x69, 0x6c,
	0x6f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x24, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x47, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x69, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6c, 0x61, 0x6d, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x66, 0x67, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x66, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d,
	0x69, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x11, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x12, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e,
	0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69,
	0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x69,
	0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x12, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c,
	0x75, 0x63, 0x69, 0x2e, 0x6d, 0x69, 0x6c, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29, 0x67,
	0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c,
	0x75, 0x63, 0x69, 0x2f, 0x6d, 0x69, 0x6c, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76,
	0x31, 0x3b, 0x6d, 0x69, 0x6c, 0x6f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescData []byte
)

func file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDesc), len(file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDesc)))
	})
	return file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDescData
}

var file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_go_chromium_org_luci_milo_proto_v1_rpc_proto_goTypes = []any{
	(*ProxyGitilesLogRequest)(nil),        // 0: luci.milo.v1.ProxyGitilesLogRequest
	(*QueryBlamelistRequest)(nil),         // 1: luci.milo.v1.QueryBlamelistRequest
	(*QueryBlamelistResponse)(nil),        // 2: luci.milo.v1.QueryBlamelistResponse
	(*QueryBlamelistPageToken)(nil),       // 3: luci.milo.v1.QueryBlamelistPageToken
	(*ListProjectsRequest)(nil),           // 4: luci.milo.v1.ListProjectsRequest
	(*ListProjectsResponse)(nil),          // 5: luci.milo.v1.ListProjectsResponse
	(*ProjectListItem)(nil),               // 6: luci.milo.v1.ProjectListItem
	(*ListProjectsPageToken)(nil),         // 7: luci.milo.v1.ListProjectsPageToken
	(*GetProjectCfgRequest)(nil),          // 8: luci.milo.v1.GetProjectCfgRequest
	(*QueryRecentBuildsRequest)(nil),      // 9: luci.milo.v1.QueryRecentBuildsRequest
	(*QueryRecentBuildsResponse)(nil),     // 10: luci.milo.v1.QueryRecentBuildsResponse
	(*ListBuildersRequest)(nil),           // 11: luci.milo.v1.ListBuildersRequest
	(*ListBuildersResponse)(nil),          // 12: luci.milo.v1.ListBuildersResponse
	(*ListBuildersPageToken)(nil),         // 13: luci.milo.v1.ListBuildersPageToken
	(*QueryBuilderStatsRequest)(nil),      // 14: luci.milo.v1.QueryBuilderStatsRequest
	(*BuilderStats)(nil),                  // 15: luci.milo.v1.BuilderStats
	(*BatchCheckPermissionsRequest)(nil),  // 16: luci.milo.v1.BatchCheckPermissionsRequest
	(*BatchCheckPermissionsResponse)(nil), // 17: luci.milo.v1.BatchCheckPermissionsResponse
	(*ConsolePredicate)(nil),              // 18: luci.milo.v1.ConsolePredicate
	(*QueryConsolesRequest)(nil),          // 19: luci.milo.v1.QueryConsolesRequest
	(*QueryConsolesResponse)(nil),         // 20: luci.milo.v1.QueryConsolesResponse
	(*QueryConsoleSnapshotsRequest)(nil),  // 21: luci.milo.v1.QueryConsoleSnapshotsRequest
	(*BuilderSnapshot)(nil),               // 22: luci.milo.v1.BuilderSnapshot
	(*ConsoleSnapshot)(nil),               // 23: luci.milo.v1.ConsoleSnapshot
	(*QueryConsoleSnapshotsResponse)(nil), // 24: luci.milo.v1.QueryConsoleSnapshotsResponse
	nil,                                   // 25: luci.milo.v1.BatchCheckPermissionsResponse.ResultsEntry
	(*gitiles.LogRequest)(nil),            // 26: gitiles.LogRequest
	(*proto.GitilesCommit)(nil),           // 27: buildbucket.v2.GitilesCommit
	(*proto.BuilderID)(nil),               // 28: buildbucket.v2.BuilderID
	(*git.Commit)(nil),                    // 29: git.Commit
	(*proto.Build)(nil),                   // 30: buildbucket.v2.Build
	(*proto.BuilderItem)(nil),             // 31: buildbucket.v2.BuilderItem
	(*projectconfig.Console)(nil),         // 32: luci.milo.projectconfig.Console
	(*gitiles.LogResponse)(nil),           // 33: gitiles.LogResponse
	(*projectconfig.Project)(nil),         // 34: luci.milo.projectconfig.Project
}
var file_go_chromium_org_luci_milo_proto_v1_rpc_proto_depIdxs = []int32{
	26, // 0: luci.milo.v1.ProxyGitilesLogRequest.request:type_name -> gitiles.LogRequest
	27, // 1: luci.milo.v1.QueryBlamelistRequest.gitiles_commit:type_name -> buildbucket.v2.GitilesCommit
	28, // 2: luci.milo.v1.QueryBlamelistRequest.builder:type_name -> buildbucket.v2.BuilderID
	29, // 3: luci.milo.v1.QueryBlamelistResponse.commits:type_name -> git.Commit
	29, // 4: luci.milo.v1.QueryBlamelistResponse.preceding_commit:type_name -> git.Commit
	6,  // 5: luci.milo.v1.ListProjectsResponse.projects:type_name -> luci.milo.v1.ProjectListItem
	28, // 6: luci.milo.v1.QueryRecentBuildsRequest.builder:type_name -> buildbucket.v2.BuilderID
	30, // 7: luci.milo.v1.QueryRecentBuildsResponse.builds:type_name -> buildbucket.v2.Build
	31, // 8: luci.milo.v1.ListBuildersResponse.builders:type_name -> buildbucket.v2.BuilderItem
	28, // 9: luci.milo.v1.QueryBuilderStatsRequest.builder:type_name -> buildbucket.v2.BuilderID
	28, // 10: luci.milo.v1.BuilderStats.builder:type_name -> buildbucket.v2.BuilderID
	25, // 11: luci.milo.v1.BatchCheckPermissionsResponse.results:type_name -> luci.milo.v1.BatchCheckPermissionsResponse.ResultsEntry
	28, // 12: luci.milo.v1.ConsolePredicate.builder:type_name -> buildbucket.v2.BuilderID
	18, // 13: luci.milo.v1.QueryConsolesRequest.predicate:type_name -> luci.milo.v1.ConsolePredicate
	32, // 14: luci.milo.v1.QueryConsolesResponse.consoles:type_name -> luci.milo.projectconfig.Console
	18, // 15: luci.milo.v1.QueryConsoleSnapshotsRequest.predicate:type_name -> luci.milo.v1.ConsolePredicate
	28, // 16: luci.milo.v1.BuilderSnapshot.builder:type_name -> buildbucket.v2.BuilderID
	30, // 17: luci.milo.v1.BuilderSnapshot.build:type_name -> buildbucket.v2.Build
	32, // 18: luci.milo.v1.ConsoleSnapshot.console:type_name -> luci.milo.projectconfig.Console
	22, // 19: luci.milo.v1.ConsoleSnapshot.builder_snapshots:type_name -> luci.milo.v1.BuilderSnapshot
	23, // 20: luci.milo.v1.QueryConsoleSnapshotsResponse.snapshots:type_name -> luci.milo.v1.ConsoleSnapshot
	0,  // 21: luci.milo.v1.MiloInternal.ProxyGitilesLog:input_type -> luci.milo.v1.ProxyGitilesLogRequest
	1,  // 22: luci.milo.v1.MiloInternal.QueryBlamelist:input_type -> luci.milo.v1.QueryBlamelistRequest
	4,  // 23: luci.milo.v1.MiloInternal.ListProjects:input_type -> luci.milo.v1.ListProjectsRequest
	8,  // 24: luci.milo.v1.MiloInternal.GetProjectCfg:input_type -> luci.milo.v1.GetProjectCfgRequest
	9,  // 25: luci.milo.v1.MiloInternal.QueryRecentBuilds:input_type -> luci.milo.v1.QueryRecentBuildsRequest
	11, // 26: luci.milo.v1.MiloInternal.ListBuilders:input_type -> luci.milo.v1.ListBuildersRequest
	14, // 27: luci.milo.v1.MiloInternal.QueryBuilderStats:input_type -> luci.milo.v1.QueryBuilderStatsRequest
	16, // 28: luci.milo.v1.MiloInternal.BatchCheckPermissions:input_type -> luci.milo.v1.BatchCheckPermissionsRequest
	19, // 29: luci.milo.v1.MiloInternal.QueryConsoles:input_type -> luci.milo.v1.QueryConsolesRequest
	21, // 30: luci.milo.v1.MiloInternal.QueryConsoleSnapshots:input_type -> luci.milo.v1.QueryConsoleSnapshotsRequest
	33, // 31: luci.milo.v1.MiloInternal.ProxyGitilesLog:output_type -> gitiles.LogResponse
	2,  // 32: luci.milo.v1.MiloInternal.QueryBlamelist:output_type -> luci.milo.v1.QueryBlamelistResponse
	5,  // 33: luci.milo.v1.MiloInternal.ListProjects:output_type -> luci.milo.v1.ListProjectsResponse
	34, // 34: luci.milo.v1.MiloInternal.GetProjectCfg:output_type -> luci.milo.projectconfig.Project
	10, // 35: luci.milo.v1.MiloInternal.QueryRecentBuilds:output_type -> luci.milo.v1.QueryRecentBuildsResponse
	12, // 36: luci.milo.v1.MiloInternal.ListBuilders:output_type -> luci.milo.v1.ListBuildersResponse
	15, // 37: luci.milo.v1.MiloInternal.QueryBuilderStats:output_type -> luci.milo.v1.BuilderStats
	17, // 38: luci.milo.v1.MiloInternal.BatchCheckPermissions:output_type -> luci.milo.v1.BatchCheckPermissionsResponse
	20, // 39: luci.milo.v1.MiloInternal.QueryConsoles:output_type -> luci.milo.v1.QueryConsolesResponse
	24, // 40: luci.milo.v1.MiloInternal.QueryConsoleSnapshots:output_type -> luci.milo.v1.QueryConsoleSnapshotsResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_milo_proto_v1_rpc_proto_init() }
func file_go_chromium_org_luci_milo_proto_v1_rpc_proto_init() {
	if File_go_chromium_org_luci_milo_proto_v1_rpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDesc), len(file_go_chromium_org_luci_milo_proto_v1_rpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_milo_proto_v1_rpc_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_milo_proto_v1_rpc_proto_depIdxs,
		MessageInfos:      file_go_chromium_org_luci_milo_proto_v1_rpc_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_milo_proto_v1_rpc_proto = out.File
	file_go_chromium_org_luci_milo_proto_v1_rpc_proto_goTypes = nil
	file_go_chromium_org_luci_milo_proto_v1_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MiloInternalClient is the client API for MiloInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MiloInternalClient interface {
	// Query logs from a gitiles host.
	//
	// This avoids CORS issue at the cost of small overhead to proxy the requests.
	// Rationales can be found at b/349503219#comment11.
	//
	// The request/response structure is designed in a way that we can easily
	// switch the clients to query gitiles directly in the future if needed.
	ProxyGitilesLog(ctx context.Context, in *ProxyGitilesLogRequest, opts ...grpc.CallOption) (*gitiles.LogResponse, error)
	// Retrieves blamelist of a build.
	//
	// The blamelist of a build is defined as [end_commit, start_commit)
	// end_commit is the Gitiles commit of the build (specified in gitiles
	// buildset tag).
	// start_commit is the closest ancestor commit with an associated build that
	// is from the same builder and is not expired, cancelled, or infra-failed.
	QueryBlamelist(ctx context.Context, in *QueryBlamelistRequest, opts ...grpc.CallOption) (*QueryBlamelistResponse, error)
	// Retrieves a list of projects.
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Gets the project config.
	//
	// Return the config of the project.
	GetProjectCfg(ctx context.Context, in *GetProjectCfgRequest, opts ...grpc.CallOption) (*projectconfig.Project, error)
	// Retrieves the recent, finished builds of a builder.
	QueryRecentBuilds(ctx context.Context, in *QueryRecentBuildsRequest, opts ...grpc.CallOption) (*QueryRecentBuildsResponse, error)
	// Retrieves a list of builders in a project or a builder group.
	ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error)
	// Get the statistics associated with a builder.
	QueryBuilderStats(ctx context.Context, in *QueryBuilderStatsRequest, opts ...grpc.CallOption) (*BuilderStats, error)
	// Check whether the users has the specified permissions in the given realm.
	//
	// N.B. Only permissions registered [here][1] can be checked.
	//
	// [1]: https://source.corp.google.com/h/github/googlesource/codesearch/+/master:luci/luci-go/milo/rpc/batch_check_permissions.go;l=26;drc=e952557609eade6037c66866ebc00c506d8800a8
	BatchCheckPermissions(ctx context.Context, in *BatchCheckPermissionsRequest, opts ...grpc.CallOption) (*BatchCheckPermissionsResponse, error)
	// Retrieves a list of consoles.
	QueryConsoles(ctx context.Context, in *QueryConsolesRequest, opts ...grpc.CallOption) (*QueryConsolesResponse, error)
	// Retrieves a list of consoles with latest snapshots.
	QueryConsoleSnapshots(ctx context.Context, in *QueryConsoleSnapshotsRequest, opts ...grpc.CallOption) (*QueryConsoleSnapshotsResponse, error)
}
type miloInternalPRPCClient struct {
	client *prpc.Client
}

func NewMiloInternalPRPCClient(client *prpc.Client) MiloInternalClient {
	return &miloInternalPRPCClient{client}
}

func (c *miloInternalPRPCClient) ProxyGitilesLog(ctx context.Context, in *ProxyGitilesLogRequest, opts ...grpc.CallOption) (*gitiles.LogResponse, error) {
	out := new(gitiles.LogResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "ProxyGitilesLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) QueryBlamelist(ctx context.Context, in *QueryBlamelistRequest, opts ...grpc.CallOption) (*QueryBlamelistResponse, error) {
	out := new(QueryBlamelistResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "QueryBlamelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) GetProjectCfg(ctx context.Context, in *GetProjectCfgRequest, opts ...grpc.CallOption) (*projectconfig.Project, error) {
	out := new(projectconfig.Project)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "GetProjectCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) QueryRecentBuilds(ctx context.Context, in *QueryRecentBuildsRequest, opts ...grpc.CallOption) (*QueryRecentBuildsResponse, error) {
	out := new(QueryRecentBuildsResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "QueryRecentBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error) {
	out := new(ListBuildersResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "ListBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) QueryBuilderStats(ctx context.Context, in *QueryBuilderStatsRequest, opts ...grpc.CallOption) (*BuilderStats, error) {
	out := new(BuilderStats)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "QueryBuilderStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) BatchCheckPermissions(ctx context.Context, in *BatchCheckPermissionsRequest, opts ...grpc.CallOption) (*BatchCheckPermissionsResponse, error) {
	out := new(BatchCheckPermissionsResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "BatchCheckPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) QueryConsoles(ctx context.Context, in *QueryConsolesRequest, opts ...grpc.CallOption) (*QueryConsolesResponse, error) {
	out := new(QueryConsolesResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "QueryConsoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalPRPCClient) QueryConsoleSnapshots(ctx context.Context, in *QueryConsoleSnapshotsRequest, opts ...grpc.CallOption) (*QueryConsoleSnapshotsResponse, error) {
	out := new(QueryConsoleSnapshotsResponse)
	err := c.client.Call(ctx, "luci.milo.v1.MiloInternal", "QueryConsoleSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type miloInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewMiloInternalClient(cc grpc.ClientConnInterface) MiloInternalClient {
	return &miloInternalClient{cc}
}

func (c *miloInternalClient) ProxyGitilesLog(ctx context.Context, in *ProxyGitilesLogRequest, opts ...grpc.CallOption) (*gitiles.LogResponse, error) {
	out := new(gitiles.LogResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/ProxyGitilesLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) QueryBlamelist(ctx context.Context, in *QueryBlamelistRequest, opts ...grpc.CallOption) (*QueryBlamelistResponse, error) {
	out := new(QueryBlamelistResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/QueryBlamelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) GetProjectCfg(ctx context.Context, in *GetProjectCfgRequest, opts ...grpc.CallOption) (*projectconfig.Project, error) {
	out := new(projectconfig.Project)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/GetProjectCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) QueryRecentBuilds(ctx context.Context, in *QueryRecentBuildsRequest, opts ...grpc.CallOption) (*QueryRecentBuildsResponse, error) {
	out := new(QueryRecentBuildsResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/QueryRecentBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) ListBuilders(ctx context.Context, in *ListBuildersRequest, opts ...grpc.CallOption) (*ListBuildersResponse, error) {
	out := new(ListBuildersResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/ListBuilders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) QueryBuilderStats(ctx context.Context, in *QueryBuilderStatsRequest, opts ...grpc.CallOption) (*BuilderStats, error) {
	out := new(BuilderStats)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/QueryBuilderStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) BatchCheckPermissions(ctx context.Context, in *BatchCheckPermissionsRequest, opts ...grpc.CallOption) (*BatchCheckPermissionsResponse, error) {
	out := new(BatchCheckPermissionsResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/BatchCheckPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) QueryConsoles(ctx context.Context, in *QueryConsolesRequest, opts ...grpc.CallOption) (*QueryConsolesResponse, error) {
	out := new(QueryConsolesResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/QueryConsoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miloInternalClient) QueryConsoleSnapshots(ctx context.Context, in *QueryConsoleSnapshotsRequest, opts ...grpc.CallOption) (*QueryConsoleSnapshotsResponse, error) {
	out := new(QueryConsoleSnapshotsResponse)
	err := c.cc.Invoke(ctx, "/luci.milo.v1.MiloInternal/QueryConsoleSnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiloInternalServer is the server API for MiloInternal service.
type MiloInternalServer interface {
	// Query logs from a gitiles host.
	//
	// This avoids CORS issue at the cost of small overhead to proxy the requests.
	// Rationales can be found at b/349503219#comment11.
	//
	// The request/response structure is designed in a way that we can easily
	// switch the clients to query gitiles directly in the future if needed.
	ProxyGitilesLog(context.Context, *ProxyGitilesLogRequest) (*gitiles.LogResponse, error)
	// Retrieves blamelist of a build.
	//
	// The blamelist of a build is defined as [end_commit, start_commit)
	// end_commit is the Gitiles commit of the build (specified in gitiles
	// buildset tag).
	// start_commit is the closest ancestor commit with an associated build that
	// is from the same builder and is not expired, cancelled, or infra-failed.
	QueryBlamelist(context.Context, *QueryBlamelistRequest) (*QueryBlamelistResponse, error)
	// Retrieves a list of projects.
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Gets the project config.
	//
	// Return the config of the project.
	GetProjectCfg(context.Context, *GetProjectCfgRequest) (*projectconfig.Project, error)
	// Retrieves the recent, finished builds of a builder.
	QueryRecentBuilds(context.Context, *QueryRecentBuildsRequest) (*QueryRecentBuildsResponse, error)
	// Retrieves a list of builders in a project or a builder group.
	ListBuilders(context.Context, *ListBuildersRequest) (*ListBuildersResponse, error)
	// Get the statistics associated with a builder.
	QueryBuilderStats(context.Context, *QueryBuilderStatsRequest) (*BuilderStats, error)
	// Check whether the users has the specified permissions in the given realm.
	//
	// N.B. Only permissions registered [here][1] can be checked.
	//
	// [1]: https://source.corp.google.com/h/github/googlesource/codesearch/+/master:luci/luci-go/milo/rpc/batch_check_permissions.go;l=26;drc=e952557609eade6037c66866ebc00c506d8800a8
	BatchCheckPermissions(context.Context, *BatchCheckPermissionsRequest) (*BatchCheckPermissionsResponse, error)
	// Retrieves a list of consoles.
	QueryConsoles(context.Context, *QueryConsolesRequest) (*QueryConsolesResponse, error)
	// Retrieves a list of consoles with latest snapshots.
	QueryConsoleSnapshots(context.Context, *QueryConsoleSnapshotsRequest) (*QueryConsoleSnapshotsResponse, error)
}

// UnimplementedMiloInternalServer can be embedded to have forward compatible implementations.
type UnimplementedMiloInternalServer struct {
}

func (*UnimplementedMiloInternalServer) ProxyGitilesLog(context.Context, *ProxyGitilesLogRequest) (*gitiles.LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyGitilesLog not implemented")
}
func (*UnimplementedMiloInternalServer) QueryBlamelist(context.Context, *QueryBlamelistRequest) (*QueryBlamelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlamelist not implemented")
}
func (*UnimplementedMiloInternalServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedMiloInternalServer) GetProjectCfg(context.Context, *GetProjectCfgRequest) (*projectconfig.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectCfg not implemented")
}
func (*UnimplementedMiloInternalServer) QueryRecentBuilds(context.Context, *QueryRecentBuildsRequest) (*QueryRecentBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRecentBuilds not implemented")
}
func (*UnimplementedMiloInternalServer) ListBuilders(context.Context, *ListBuildersRequest) (*ListBuildersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuilders not implemented")
}
func (*UnimplementedMiloInternalServer) QueryBuilderStats(context.Context, *QueryBuilderStatsRequest) (*BuilderStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBuilderStats not implemented")
}
func (*UnimplementedMiloInternalServer) BatchCheckPermissions(context.Context, *BatchCheckPermissionsRequest) (*BatchCheckPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCheckPermissions not implemented")
}
func (*UnimplementedMiloInternalServer) QueryConsoles(context.Context, *QueryConsolesRequest) (*QueryConsolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConsoles not implemented")
}
func (*UnimplementedMiloInternalServer) QueryConsoleSnapshots(context.Context, *QueryConsoleSnapshotsRequest) (*QueryConsoleSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConsoleSnapshots not implemented")
}

func RegisterMiloInternalServer(s prpc.Registrar, srv MiloInternalServer) {
	s.RegisterService(&_MiloInternal_serviceDesc, srv)
}

func _MiloInternal_ProxyGitilesLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyGitilesLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).ProxyGitilesLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/ProxyGitilesLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).ProxyGitilesLog(ctx, req.(*ProxyGitilesLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_QueryBlamelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlamelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).QueryBlamelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/QueryBlamelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).QueryBlamelist(ctx, req.(*QueryBlamelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_GetProjectCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectCfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).GetProjectCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/GetProjectCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).GetProjectCfg(ctx, req.(*GetProjectCfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_QueryRecentBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecentBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).QueryRecentBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/QueryRecentBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).QueryRecentBuilds(ctx, req.(*QueryRecentBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_ListBuilders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).ListBuilders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/ListBuilders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).ListBuilders(ctx, req.(*ListBuildersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_QueryBuilderStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuilderStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).QueryBuilderStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/QueryBuilderStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).QueryBuilderStats(ctx, req.(*QueryBuilderStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_BatchCheckPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCheckPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).BatchCheckPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/BatchCheckPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).BatchCheckPermissions(ctx, req.(*BatchCheckPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_QueryConsoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).QueryConsoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/QueryConsoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).QueryConsoles(ctx, req.(*QueryConsolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiloInternal_QueryConsoleSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConsoleSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiloInternalServer).QueryConsoleSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luci.milo.v1.MiloInternal/QueryConsoleSnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiloInternalServer).QueryConsoleSnapshots(ctx, req.(*QueryConsoleSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MiloInternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luci.milo.v1.MiloInternal",
	HandlerType: (*MiloInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProxyGitilesLog",
			Handler:    _MiloInternal_ProxyGitilesLog_Handler,
		},
		{
			MethodName: "QueryBlamelist",
			Handler:    _MiloInternal_QueryBlamelist_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _MiloInternal_ListProjects_Handler,
		},
		{
			MethodName: "GetProjectCfg",
			Handler:    _MiloInternal_GetProjectCfg_Handler,
		},
		{
			MethodName: "QueryRecentBuilds",
			Handler:    _MiloInternal_QueryRecentBuilds_Handler,
		},
		{
			MethodName: "ListBuilders",
			Handler:    _MiloInternal_ListBuilders_Handler,
		},
		{
			MethodName: "QueryBuilderStats",
			Handler:    _MiloInternal_QueryBuilderStats_Handler,
		},
		{
			MethodName: "BatchCheckPermissions",
			Handler:    _MiloInternal_BatchCheckPermissions_Handler,
		},
		{
			MethodName: "QueryConsoles",
			Handler:    _MiloInternal_QueryConsoles_Handler,
		},
		{
			MethodName: "QueryConsoleSnapshots",
			Handler:    _MiloInternal_QueryConsoleSnapshots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go.chromium.org/luci/milo/proto/v1/rpc.proto",
}
